LOG	components\ble\ble_advertising\ble_advertising.c	21;"	d	file:
ble_advertising_init	components\ble\ble_advertising\ble_advertising.c	/^uint32_t ble_advertising_init(ble_advdata_t const                 * p_advdata,$/;"	f
ble_advertising_on_ble_evt	components\ble\ble_advertising\ble_advertising.c	/^void ble_advertising_on_ble_evt(ble_evt_t const * p_ble_evt)$/;"	f
ble_advertising_on_sys_evt	components\ble\ble_advertising\ble_advertising.c	/^void ble_advertising_on_sys_evt(uint32_t sys_evt)$/;"	f
ble_advertising_peer_addr_reply	components\ble\ble_advertising\ble_advertising.c	/^uint32_t ble_advertising_peer_addr_reply(ble_gap_addr_t * p_peer_address)$/;"	f
ble_advertising_peer_address_clear	components\ble\ble_advertising\ble_advertising.c	/^static void ble_advertising_peer_address_clear()$/;"	f	file:
ble_advertising_restart_without_whitelist	components\ble\ble_advertising\ble_advertising.c	/^uint32_t ble_advertising_restart_without_whitelist(void)$/;"	f
ble_advertising_start	components\ble\ble_advertising\ble_advertising.c	/^uint32_t ble_advertising_start(ble_adv_mode_t advertising_mode)$/;"	f
ble_advertising_whitelist_reply	components\ble\ble_advertising\ble_advertising.c	/^uint32_t ble_advertising_whitelist_reply(ble_gap_whitelist_t * p_whitelist)$/;"	f
m_adv_evt	components\ble\ble_advertising\ble_advertising.c	/^static ble_adv_evt_t                   m_adv_evt;                \/**< Advertising event propogated to the main application. The event is either a transaction to a new advertising mode, or a request for whitelist or peer address.. *\/$/;"	v	file:
m_adv_mode_current	components\ble\ble_advertising\ble_advertising.c	/^static ble_adv_mode_t                m_adv_mode_current;         \/**< Variable to keep track of the current advertising mode. *\/$/;"	v	file:
m_adv_modes_config	components\ble\ble_advertising\ble_advertising.c	/^static ble_adv_modes_config_t m_adv_modes_config; \/**< Struct to keep track of disabled and enabled advertising modes, as well as time-outs and intervals.*\/$/;"	v	file:
m_advdata	components\ble\ble_advertising\ble_advertising.c	/^static ble_advdata_t                   m_advdata;                \/**< Used by the initialization function to set name, appearance, and UUIDs and advertising flags visible to peer devices. *\/$/;"	v	file:
m_advertising_start_pending	components\ble\ble_advertising\ble_advertising.c	/^static bool m_advertising_start_pending = false; \/**< Flag to keep track of ongoing operations on persistent memory. *\/$/;"	v	file:
m_direct_adv_cnt	components\ble\ble_advertising\ble_advertising.c	/^static uint8_t                       m_direct_adv_cnt;           \/**< Counter of direct advertising retries. *\/$/;"	v	file:
m_error_handler	components\ble\ble_advertising\ble_advertising.c	/^static ble_advertising_error_handler_t m_error_handler;          \/**< Handler for the advertising error events. *\/$/;"	v	file:
m_evt_handler	components\ble\ble_advertising\ble_advertising.c	/^static ble_advertising_evt_handler_t   m_evt_handler;            \/**< Handler for the advertising events. Can be initialized as NULL if no handling is implemented on in the main application. *\/$/;"	v	file:
m_manuf_data_array	components\ble\ble_advertising\ble_advertising.c	/^static uint8_t                       m_manuf_data_array[BLE_GAP_ADV_MAX_SIZE];            \/**< Array to store the Manufacturer specific data*\/$/;"	v	file:
m_manuf_specific_data	components\ble\ble_advertising\ble_advertising.c	/^static ble_advdata_manuf_data_t      m_manuf_specific_data;                               \/**< Manufacturer specific data structure*\/$/;"	v	file:
m_peer_addr_reply_expected	components\ble\ble_advertising\ble_advertising.c	/^static bool                          m_peer_addr_reply_expected = false;                  \/**< Flag to verify that. *\/$/;"	v	file:
m_peer_address	components\ble\ble_advertising\ble_advertising.c	/^static ble_gap_addr_t                  m_peer_address;           \/**< Address of the most recently connected peer, used for direct advertising. *\/$/;"	v	file:
m_service_data	components\ble\ble_advertising\ble_advertising.c	/^static ble_advdata_service_data_t    m_service_data;                                      \/**< Service data structure. *\/$/;"	v	file:
m_service_data_array	components\ble\ble_advertising\ble_advertising.c	/^static uint8_t                       m_service_data_array[BLE_GAP_ADV_MAX_SIZE];          \/**< Array to store the service data. *\/$/;"	v	file:
m_slave_conn_int	components\ble\ble_advertising\ble_advertising.c	/^static ble_advdata_conn_int_t        m_slave_conn_int;                                    \/**< Connection interval range structure.*\/$/;"	v	file:
m_tx_power_level	components\ble\ble_advertising\ble_advertising.c	/^static int8_t                        m_tx_power_level;                                    \/**< TX power level*\/$/;"	v	file:
m_whitelist	components\ble\ble_advertising\ble_advertising.c	/^static ble_gap_whitelist_t           m_whitelist;                                         \/**< Struct that points to whitelisted addresses. *\/$/;"	v	file:
m_whitelist_reply_expected	components\ble\ble_advertising\ble_advertising.c	/^static bool                          m_whitelist_reply_expected = false;                  \/**< Flag to verify that whitelist is only set when it is requested. *\/$/;"	v	file:
m_whitelist_temporarily_disabled	components\ble\ble_advertising\ble_advertising.c	/^static bool                          m_whitelist_temporarily_disabled = false; \/**< Flag to keep track of temporary disabling of the whitelist. *\/$/;"	v	file:
mp_whitelist_addr	components\ble\ble_advertising\ble_advertising.c	/^static ble_gap_addr_t              * mp_whitelist_addr[BLE_GAP_WHITELIST_ADDR_MAX_COUNT]; \/**< Pointer to a list of addresses. Pointed to by the whitelist *\/$/;"	v	file:
mp_whitelist_irk	components\ble\ble_advertising\ble_advertising.c	/^static ble_gap_irk_t               * mp_whitelist_irk[BLE_GAP_WHITELIST_IRK_MAX_COUNT];   \/**< Pointer to a list of Identity Resolving Keys (IRK). Pointed to by the whitelist *\/$/;"	v	file:
peer_address_exists	components\ble\ble_advertising\ble_advertising.c	/^static bool peer_address_exists(uint8_t const * address)$/;"	f	file:
whitelist_has_entries	components\ble\ble_advertising\ble_advertising.c	/^static bool whitelist_has_entries(ble_gap_whitelist_t const * whitelist)$/;"	f	file:
BLE_ADVERTISING_H__	components\ble\ble_advertising\ble_advertising.h	32;"	d
BLE_ADV_DIRECTED_DISABLED	components\ble\ble_advertising\ble_advertising.h	106;"	d
BLE_ADV_DIRECTED_ENABLED	components\ble\ble_advertising\ble_advertising.h	105;"	d
BLE_ADV_EVT_DIRECTED	components\ble\ble_advertising\ble_advertising.h	/^    BLE_ADV_EVT_DIRECTED,            \/**< Direct advertising mode has started. *\/$/;"	e	enum:__anon2
BLE_ADV_EVT_FAST	components\ble\ble_advertising\ble_advertising.h	/^    BLE_ADV_EVT_FAST,                \/**< Fast advertising mode has started. *\/$/;"	e	enum:__anon2
BLE_ADV_EVT_FAST_WHITELIST	components\ble\ble_advertising\ble_advertising.h	/^    BLE_ADV_EVT_FAST_WHITELIST,      \/**< Fast advertising mode using the whitelist has started. *\/$/;"	e	enum:__anon2
BLE_ADV_EVT_IDLE	components\ble\ble_advertising\ble_advertising.h	/^    BLE_ADV_EVT_IDLE,                \/**< Idle; no connectable advertising is ongoing.*\/$/;"	e	enum:__anon2
BLE_ADV_EVT_PEER_ADDR_REQUEST	components\ble\ble_advertising\ble_advertising.h	/^    BLE_ADV_EVT_PEER_ADDR_REQUEST \/**< Request a peer address from the main application. For directed advertising to work, the peer address must be set when this event occurs. *\/$/;"	e	enum:__anon2
BLE_ADV_EVT_SLOW	components\ble\ble_advertising\ble_advertising.h	/^    BLE_ADV_EVT_SLOW,                \/**< Slow advertising mode has started.*\/$/;"	e	enum:__anon2
BLE_ADV_EVT_SLOW_WHITELIST	components\ble\ble_advertising\ble_advertising.h	/^    BLE_ADV_EVT_SLOW_WHITELIST,      \/**< Slow advertising mode using the whitelist has started.*\/$/;"	e	enum:__anon2
BLE_ADV_EVT_WHITELIST_REQUEST	components\ble\ble_advertising\ble_advertising.h	/^    BLE_ADV_EVT_WHITELIST_REQUEST,   \/**< Request a whitelist from the main application. For whitelist advertising to work, the whitelist must be set when this event occurs. *\/$/;"	e	enum:__anon2
BLE_ADV_FAST_DISABLED	components\ble\ble_advertising\ble_advertising.h	109;"	d
BLE_ADV_FAST_ENABLED	components\ble\ble_advertising\ble_advertising.h	108;"	d
BLE_ADV_MODE_DIRECTED	components\ble\ble_advertising\ble_advertising.h	/^    BLE_ADV_MODE_DIRECTED, \/**< Directed advertising attempts to connect to the most recently disconnected peer. *\/$/;"	e	enum:__anon1
BLE_ADV_MODE_FAST	components\ble\ble_advertising\ble_advertising.h	/^    BLE_ADV_MODE_FAST,     \/**< Fast advertising will connect to any peer device, or filter with a whitelist if one exists. *\/$/;"	e	enum:__anon1
BLE_ADV_MODE_IDLE	components\ble\ble_advertising\ble_advertising.h	/^    BLE_ADV_MODE_IDLE,     \/**< Idle; no connectable advertising is ongoing.*\/$/;"	e	enum:__anon1
BLE_ADV_MODE_SLOW	components\ble\ble_advertising\ble_advertising.h	/^    BLE_ADV_MODE_SLOW,     \/**< Slow advertising is similar to fast advertising. By default, it uses a longer advertising interval and time-out than fast advertising. However, these options are defined by the user. *\/$/;"	e	enum:__anon1
BLE_ADV_SLOW_DISABLED	components\ble\ble_advertising\ble_advertising.h	112;"	d
BLE_ADV_SLOW_ENABLED	components\ble\ble_advertising\ble_advertising.h	111;"	d
BLE_ADV_WHITELIST_DISABLED	components\ble\ble_advertising\ble_advertising.h	115;"	d
BLE_ADV_WHITELIST_ENABLED	components\ble\ble_advertising\ble_advertising.h	114;"	d
advdata	components\ble\ble_advertising\ble_advertising.h	/^    ble_advdata_t                 advdata;     \/**< Advertising data. *\/$/;"	m	struct:__anon4
ble_adv_directed_enabled	components\ble\ble_advertising\ble_advertising.h	/^    bool     ble_adv_directed_enabled;  \/**< Enable or disable direct advertising mode. *\/$/;"	m	struct:__anon3
ble_adv_directed_timeout	components\ble\ble_advertising\ble_advertising.h	/^    uint32_t ble_adv_directed_timeout;  \/**< Time-out (number of tries) for direct advertising. *\/$/;"	m	struct:__anon3
ble_adv_evt_t	components\ble\ble_advertising\ble_advertising.h	/^} ble_adv_evt_t;$/;"	t	typeref:enum:__anon2
ble_adv_fast_enabled	components\ble\ble_advertising\ble_advertising.h	/^    bool     ble_adv_fast_enabled;      \/**< Enable or disable fast advertising mode. *\/$/;"	m	struct:__anon3
ble_adv_fast_interval	components\ble\ble_advertising\ble_advertising.h	/^    uint32_t ble_adv_fast_interval;     \/**< Advertising interval for fast advertising. *\/$/;"	m	struct:__anon3
ble_adv_fast_timeout	components\ble\ble_advertising\ble_advertising.h	/^    uint32_t ble_adv_fast_timeout;      \/**< Time-out (in seconds) for fast advertising. *\/$/;"	m	struct:__anon3
ble_adv_init_t	components\ble\ble_advertising\ble_advertising.h	/^}ble_adv_init_t;$/;"	t	typeref:struct:__anon4
ble_adv_mode_t	components\ble\ble_advertising\ble_advertising.h	/^} ble_adv_mode_t;$/;"	t	typeref:enum:__anon1
ble_adv_modes_config_t	components\ble\ble_advertising\ble_advertising.h	/^}ble_adv_modes_config_t;$/;"	t	typeref:struct:__anon3
ble_adv_slow_enabled	components\ble\ble_advertising\ble_advertising.h	/^    bool     ble_adv_slow_enabled;      \/**< Enable or disable slow advertising mode. *\/$/;"	m	struct:__anon3
ble_adv_slow_interval	components\ble\ble_advertising\ble_advertising.h	/^    uint32_t ble_adv_slow_interval;     \/**< Advertising interval for slow advertising. *\/$/;"	m	struct:__anon3
ble_adv_slow_timeout	components\ble\ble_advertising\ble_advertising.h	/^    uint32_t ble_adv_slow_timeout;      \/**< Time-out (in seconds) for slow advertising. *\/$/;"	m	struct:__anon3
ble_adv_whitelist_enabled	components\ble\ble_advertising\ble_advertising.h	/^    bool     ble_adv_whitelist_enabled; \/**< Enable or disable use of the whitelist. *\/$/;"	m	struct:__anon3
ble_advertising_error_handler_t	components\ble\ble_advertising\ble_advertising.h	/^typedef void (*ble_advertising_error_handler_t) (uint32_t nrf_error);$/;"	t
ble_advertising_evt_handler_t	components\ble\ble_advertising\ble_advertising.h	/^typedef void (*ble_advertising_evt_handler_t) (ble_adv_evt_t const adv_evt);$/;"	t
evt_handler	components\ble\ble_advertising\ble_advertising.h	/^    ble_advertising_evt_handler_t evt_handler; \/**< Event handler. *\/$/;"	m	struct:__anon4
options	components\ble\ble_advertising\ble_advertising.h	/^    ble_adv_modes_config_t        options;     \/**< Parameters for advertising modes.*\/$/;"	m	struct:__anon4
DB_DISCOVERY_MAX_USERS	components\ble\ble_db_discovery\ble_db_discovery.c	21;"	d	file:
DB_LOG	components\ble\ble_db_discovery\ble_db_discovery.c	22;"	d	file:
SRV_DISC_START_HANDLE	components\ble\ble_db_discovery\ble_db_discovery.c	20;"	d	file:
ble_db_discovery_close	components\ble\ble_db_discovery\ble_db_discovery.c	/^uint32_t ble_db_discovery_close()$/;"	f
ble_db_discovery_evt_register	components\ble\ble_db_discovery\ble_db_discovery.c	/^uint32_t ble_db_discovery_evt_register(const ble_uuid_t * const             p_uuid,$/;"	f
ble_db_discovery_init	components\ble\ble_db_discovery\ble_db_discovery.c	/^uint32_t ble_db_discovery_init(void)$/;"	f
ble_db_discovery_on_ble_evt	components\ble\ble_db_discovery\ble_db_discovery.c	/^void ble_db_discovery_on_ble_evt(ble_db_discovery_t * const p_db_discovery,$/;"	f
ble_db_discovery_start	components\ble\ble_db_discovery\ble_db_discovery.c	/^uint32_t ble_db_discovery_start(ble_db_discovery_t * const p_db_discovery,$/;"	f
characteristics_discover	components\ble\ble_db_discovery\ble_db_discovery.c	/^static uint32_t characteristics_discover(ble_db_discovery_t * const p_db_discovery)$/;"	f	file:
descriptors_discover	components\ble\ble_db_discovery\ble_db_discovery.c	/^static uint32_t descriptors_discover(ble_db_discovery_t * const p_db_discovery,$/;"	f	file:
discovery_complete_evt_trigger	components\ble\ble_db_discovery\ble_db_discovery.c	/^static void discovery_complete_evt_trigger(ble_db_discovery_t * const p_db_discovery,$/;"	f	file:
discovery_error_evt_trigger	components\ble\ble_db_discovery\ble_db_discovery.c	/^static void discovery_error_evt_trigger(ble_db_discovery_t * const p_db_discovery,$/;"	f	file:
evt	components\ble\ble_db_discovery\ble_db_discovery.c	/^    ble_db_discovery_evt_t         evt;          \/**< The pending event. *\/$/;"	m	struct:__anon6	file:
evt_handler	components\ble\ble_db_discovery\ble_db_discovery.c	/^    ble_db_discovery_evt_handler_t evt_handler;  \/**< The event handler of the application module to be called in case there are any events.*\/$/;"	m	struct:__anon5	file:
evt_handler	components\ble\ble_db_discovery\ble_db_discovery.c	/^    ble_db_discovery_evt_handler_t evt_handler;  \/**< The event handler which should be called to raise this event. *\/$/;"	m	struct:__anon6	file:
is_char_discovery_reqd	components\ble\ble_db_discovery\ble_db_discovery.c	/^static bool is_char_discovery_reqd(ble_db_discovery_t * const p_db_discovery,$/;"	f	file:
is_desc_discovery_reqd	components\ble\ble_db_discovery\ble_db_discovery.c	/^static bool is_desc_discovery_reqd(ble_db_discovery_t       * p_db_discovery,$/;"	f	file:
m_initialized	components\ble\ble_db_discovery\ble_db_discovery.c	/^static bool     m_initialized = false;      \/**< This variable Indicates if the module is initialized or not. *\/$/;"	v	file:
m_num_of_discoveries_made	components\ble\ble_db_discovery\ble_db_discovery.c	/^static uint32_t m_num_of_discoveries_made;  \/**< The total number of service discoveries (successful or unsuccessful) made since initialization. *\/$/;"	v	file:
m_num_of_handlers_reg	components\ble\ble_db_discovery\ble_db_discovery.c	/^static uint32_t m_num_of_handlers_reg;      \/**< The number of handlers registered with the DB Discovery module. *\/$/;"	v	file:
m_pending_user_evts	components\ble\ble_db_discovery\ble_db_discovery.c	/^} m_pending_user_evts[DB_DISCOVERY_MAX_USERS];$/;"	v	typeref:struct:__anon6	file:
m_pending_usr_evt_index	components\ble\ble_db_discovery\ble_db_discovery.c	/^static uint32_t m_pending_usr_evt_index;    \/**< The index to the pending user event array, pointing to the last added pending user event. *\/$/;"	v	file:
m_registered_handlers	components\ble\ble_db_discovery\ble_db_discovery.c	/^} m_registered_handlers[DB_DISCOVERY_MAX_USERS];$/;"	v	typeref:struct:__anon5	file:
on_characteristic_discovery_rsp	components\ble\ble_db_discovery\ble_db_discovery.c	/^static void on_characteristic_discovery_rsp(ble_db_discovery_t * const    p_db_discovery,$/;"	f	file:
on_descriptor_discovery_rsp	components\ble\ble_db_discovery\ble_db_discovery.c	/^static void on_descriptor_discovery_rsp(ble_db_discovery_t * const    p_db_discovery,$/;"	f	file:
on_primary_srv_discovery_rsp	components\ble\ble_db_discovery\ble_db_discovery.c	/^static void on_primary_srv_discovery_rsp(ble_db_discovery_t * const    p_db_discovery,$/;"	f	file:
on_srv_disc_completion	components\ble\ble_db_discovery\ble_db_discovery.c	/^static void on_srv_disc_completion(ble_db_discovery_t * p_db_discovery)$/;"	f	file:
pending_user_evts_send	components\ble\ble_db_discovery\ble_db_discovery.c	/^static void pending_user_evts_send(void)$/;"	f	file:
registered_handler_get	components\ble\ble_db_discovery\ble_db_discovery.c	/^static ble_db_discovery_evt_handler_t registered_handler_get(ble_uuid_t * p_srv_uuid)$/;"	f	file:
registered_handler_set	components\ble\ble_db_discovery\ble_db_discovery.c	/^static uint32_t registered_handler_set(const ble_uuid_t * const       p_srv_uuid,$/;"	f	file:
srv_uuid	components\ble\ble_db_discovery\ble_db_discovery.c	/^    ble_uuid_t                     srv_uuid;     \/**< The UUID of the service for which the application module had registered itself.*\/$/;"	m	struct:__anon5	file:
BLE_DB_DISCOVERY_COMPLETE	components\ble\ble_db_discovery\ble_db_discovery.h	/^    BLE_DB_DISCOVERY_COMPLETE,      \/**< Event indicating that the GATT Database discovery is complete. *\/$/;"	e	enum:__anon7
BLE_DB_DISCOVERY_ERROR	components\ble\ble_db_discovery\ble_db_discovery.h	/^    BLE_DB_DISCOVERY_ERROR,         \/**< Event indicating that an internal error has occurred in the DB Discovery module. This could typically be because of the SoftDevice API returning an error code during the DB discover.*\/$/;"	e	enum:__anon7
BLE_DB_DISCOVERY_H__	components\ble\ble_db_discovery\ble_db_discovery.h	43;"	d
BLE_DB_DISCOVERY_MAX_CHAR_PER_SRV	components\ble\ble_db_discovery\ble_db_discovery.h	57;"	d
BLE_DB_DISCOVERY_MAX_SRV	components\ble\ble_db_discovery\ble_db_discovery.h	56;"	d
BLE_DB_DISCOVERY_SRV_NOT_FOUND	components\ble\ble_db_discovery\ble_db_discovery.h	/^    BLE_DB_DISCOVERY_SRV_NOT_FOUND  \/**< Event indicating that the service was not found at the peer.*\/$/;"	e	enum:__anon7
ble_db_discovery_char_t	components\ble\ble_db_discovery\ble_db_discovery.h	/^} ble_db_discovery_char_t;$/;"	t	typeref:struct:__anon8
ble_db_discovery_evt_handler_t	components\ble\ble_db_discovery\ble_db_discovery.h	/^typedef void (* ble_db_discovery_evt_handler_t)(ble_db_discovery_evt_t * p_evt);$/;"	t
ble_db_discovery_evt_t	components\ble\ble_db_discovery\ble_db_discovery.h	/^} ble_db_discovery_evt_t;$/;"	t	typeref:struct:__anon11
ble_db_discovery_evt_type_t	components\ble\ble_db_discovery\ble_db_discovery.h	/^} ble_db_discovery_evt_type_t;$/;"	t	typeref:enum:__anon7
ble_db_discovery_srv_t	components\ble\ble_db_discovery\ble_db_discovery.h	/^} ble_db_discovery_srv_t;$/;"	t	typeref:struct:__anon9
ble_db_discovery_t	components\ble\ble_db_discovery\ble_db_discovery.h	/^} ble_db_discovery_t;$/;"	t	typeref:struct:__anon10
cccd_handle	components\ble\ble_db_discovery\ble_db_discovery.h	/^    uint16_t         cccd_handle;     \/**< CCCD Handle value for this characteristic. This will be set to BLE_GATT_HANDLE_INVALID if a CCCD is not present at the server. *\/$/;"	m	struct:__anon8
char_count	components\ble\ble_db_discovery\ble_db_discovery.h	/^    uint8_t                  char_count;                                         \/**< Number of characteristics present in the service. *\/$/;"	m	struct:__anon9
characteristic	components\ble\ble_db_discovery\ble_db_discovery.h	/^    ble_gattc_char_t characteristic;  \/**< Structure containing information about the characteristic. *\/$/;"	m	struct:__anon8
charateristics	components\ble\ble_db_discovery\ble_db_discovery.h	/^    ble_db_discovery_char_t  charateristics[BLE_DB_DISCOVERY_MAX_CHAR_PER_SRV];  \/**< Array of information related to the characteristics present in the service. *\/$/;"	m	struct:__anon9
conn_handle	components\ble\ble_db_discovery\ble_db_discovery.h	/^    uint16_t                    conn_handle;  \/**< Handle of the connection for which this event has occurred. *\/$/;"	m	struct:__anon11
conn_handle	components\ble\ble_db_discovery\ble_db_discovery.h	/^    uint16_t               conn_handle;                         \/**< Connection handle as provided by the SoftDevice. *\/$/;"	m	struct:__anon10
curr_char_ind	components\ble\ble_db_discovery\ble_db_discovery.h	/^    uint8_t                curr_char_ind;                       \/**< Index of the current characteristic being discovered. This is intended for internal use during service discovery.*\/$/;"	m	struct:__anon10
curr_srv_ind	components\ble\ble_db_discovery\ble_db_discovery.h	/^    uint8_t                curr_srv_ind;                        \/**< Index of the current service being discovered. This is intended for internal use during service discovery.*\/$/;"	m	struct:__anon10
discovered_db	components\ble\ble_db_discovery\ble_db_discovery.h	/^        ble_db_discovery_srv_t discovered_db;  \/**< Structure containing the information about the GATT Database at the server. This will be filled when the event type is @ref BLE_DB_DISCOVERY_COMPLETE.*\/$/;"	m	union:__anon11::__anon12
discovery_in_progress	components\ble\ble_db_discovery\ble_db_discovery.h	/^    bool                   discovery_in_progress;               \/**< Variable to indicate if there is a service discovery in progress. *\/$/;"	m	struct:__anon10
err_code	components\ble\ble_db_discovery\ble_db_discovery.h	/^        uint32_t               err_code;       \/**< nRF Error code indicating the type of error which occurred in the DB Discovery module. This will be filled when the event type is @ref BLE_DB_DISCOVERY_ERROR. *\/$/;"	m	union:__anon11::__anon12
evt_type	components\ble\ble_db_discovery\ble_db_discovery.h	/^    ble_db_discovery_evt_type_t evt_type;     \/**< Type of event. *\/$/;"	m	struct:__anon11
handle_range	components\ble\ble_db_discovery\ble_db_discovery.h	/^    ble_gattc_handle_range_t handle_range;                                       \/**< Service Handle Range. *\/$/;"	m	struct:__anon9
params	components\ble\ble_db_discovery\ble_db_discovery.h	/^    } params;$/;"	m	struct:__anon11	typeref:union:__anon11::__anon12
services	components\ble\ble_db_discovery\ble_db_discovery.h	/^    ble_db_discovery_srv_t services[BLE_DB_DISCOVERY_MAX_SRV];  \/**< Information related to the current service being discovered. This is intended for internal use during service discovery.*\/$/;"	m	struct:__anon10
srv_count	components\ble\ble_db_discovery\ble_db_discovery.h	/^    uint8_t                srv_count;                           \/**< Number of services at the peers GATT database.*\/$/;"	m	struct:__anon10
srv_uuid	components\ble\ble_db_discovery\ble_db_discovery.h	/^    ble_uuid_t               srv_uuid;                                           \/**< UUID of the service. *\/    $/;"	m	struct:__anon9
MAX_LENGTH_FILENAME	components\ble\ble_debug_assert_handler\ble_debug_assert_handler.c	19;"	d	file:
ble_debug_assert_handler	components\ble\ble_debug_assert_handler\ble_debug_assert_handler.c	/^void ble_debug_assert_handler(uint32_t error_code, uint32_t line_num, const uint8_t * p_file_name)$/;"	f
BLE_DEBUG_ASSERT_HANDLER_H__	components\ble\ble_debug_assert_handler\ble_debug_assert_handler.h	27;"	d
DTM_HEADER_OFFSET	components\ble\ble_dtm\ble_dtm.c	18;"	d	file:
DTM_HEADER_SIZE	components\ble\ble_dtm\ble_dtm.c	19;"	d	file:
DTM_LENGTH_OFFSET	components\ble\ble_dtm\ble_dtm.c	21;"	d	file:
DTM_PAYLOAD_MAX_SIZE	components\ble\ble_dtm\ble_dtm.c	20;"	d	file:
DTM_PDU_MAX_MEMORY_SIZE	components\ble\ble_dtm\ble_dtm.c	22;"	d	file:
PHYS_CH_MAX	components\ble\ble_dtm\ble_dtm.c	37;"	d	file:
PRBS9_CONTENT	components\ble\ble_dtm\ble_dtm.c	44;"	d	file:
RFPHY_TEST_0X0F_REF_PATTERN	components\ble\ble_dtm\ble_dtm.c	41;"	d	file:
RFPHY_TEST_0X55_REF_PATTERN	components\ble\ble_dtm\ble_dtm.c	42;"	d	file:
RX_MODE	components\ble\ble_dtm\ble_dtm.c	34;"	d	file:
STATE_CARRIER_TEST	components\ble\ble_dtm\ble_dtm.c	/^    STATE_CARRIER_TEST,                                                      \/**< State used when a DTM Carrier test is running (Vendor specific test). *\/$/;"	e	enum:__anon14	file:
STATE_IDLE	components\ble\ble_dtm\ble_dtm.c	/^    STATE_IDLE,                                                              \/**< State when system has just initialized, or current test has completed. *\/$/;"	e	enum:__anon14	file:
STATE_RECEIVER_TEST	components\ble\ble_dtm\ble_dtm.c	/^    STATE_RECEIVER_TEST                                                      \/**< State used when a DTM Receive test is running. *\/$/;"	e	enum:__anon14	file:
STATE_TRANSMITTER_TEST	components\ble\ble_dtm\ble_dtm.c	/^    STATE_TRANSMITTER_TEST,                                                  \/**< State used when a DTM Transmission test is running. *\/$/;"	e	enum:__anon14	file:
STATE_UNINITIALIZED	components\ble\ble_dtm\ble_dtm.c	/^    STATE_UNINITIALIZED,                                                     \/**< The DTM is uninitialized. *\/$/;"	e	enum:__anon14	file:
TX_MODE	components\ble\ble_dtm\ble_dtm.c	35;"	d	file:
UART_POLL_CYCLE	components\ble\ble_dtm\ble_dtm.c	32;"	d	file:
check_pdu	components\ble\ble_dtm\ble_dtm.c	/^static bool check_pdu(void)$/;"	f	file:
content	components\ble\ble_dtm\ble_dtm.c	/^    uint8_t content[DTM_HEADER_SIZE + DTM_PAYLOAD_MAX_SIZE];                 \/**< PDU packet content. *\/$/;"	m	struct:__anon13	file:
dtm_cmd	components\ble\ble_dtm\ble_dtm.c	/^uint32_t dtm_cmd(dtm_cmd_t cmd, dtm_freq_t freq, uint32_t length, dtm_pkt_type_t payload)$/;"	f
dtm_event_get	components\ble\ble_dtm\ble_dtm.c	/^bool dtm_event_get(dtm_event_t *p_dtm_event)$/;"	f
dtm_init	components\ble\ble_dtm\ble_dtm.c	/^uint32_t dtm_init(void)$/;"	f
dtm_set_timer	components\ble\ble_dtm\ble_dtm.c	/^bool dtm_set_timer(uint32_t new_timer)$/;"	f
dtm_set_txpower	components\ble\ble_dtm\ble_dtm.c	/^bool dtm_set_txpower(uint32_t new_tx_power)$/;"	f
dtm_test_done	components\ble\ble_dtm\ble_dtm.c	/^static void dtm_test_done(void)$/;"	f	file:
dtm_vendor_specific_pkt	components\ble\ble_dtm\ble_dtm.c	/^static uint32_t dtm_vendor_specific_pkt(uint32_t vendor_cmd, dtm_freq_t vendor_option)$/;"	f	file:
dtm_wait	components\ble\ble_dtm\ble_dtm.c	/^uint32_t dtm_wait(void)$/;"	f
m_address	components\ble\ble_dtm\ble_dtm.c	/^static uint32_t          m_address           = 0x71764129;                   \/**< Address. *\/$/;"	v	file:
m_balen	components\ble\ble_dtm\ble_dtm.c	/^static uint32_t          m_balen             = 3;                            \/**< Base address length in bytes. *\/$/;"	v	file:
m_crcConfSkipAddr	components\ble\ble_dtm\ble_dtm.c	/^static uint8_t           m_crcConfSkipAddr   = 1;                            \/**< Leave packet address field out of CRC calculation. *\/$/;"	v	file:
m_crcLength	components\ble\ble_dtm\ble_dtm.c	/^static uint8_t           m_crcLength         = RADIO_CRCCNF_LEN_Three;       \/**< CRC Length (in bytes). *\/$/;"	v	file:
m_crc_init	components\ble\ble_dtm\ble_dtm.c	/^static uint32_t          m_crc_init          = 0x00555555;                   \/**< Initial value for CRC calculation. *\/$/;"	v	file:
m_crc_poly	components\ble\ble_dtm\ble_dtm.c	/^static uint32_t          m_crc_poly          = 0x0000065B;                   \/**< CRC polynomial. *\/$/;"	v	file:
m_current_time	components\ble\ble_dtm\ble_dtm.c	/^static uint32_t          m_current_time = 0;                                 \/**< Counter for interrupts from timer to ensure that the 2 bytes forming a DTM command are received within the time window. *\/$/;"	v	file:
m_endian	components\ble\ble_dtm\ble_dtm.c	/^static uint32_t          m_endian            = RADIO_PCNF1_ENDIAN_Little;    \/**< On air endianess of packet, this applies to the S0, LENGTH, S1 and the PAYLOAD fields. *\/$/;"	v	file:
m_event	components\ble\ble_dtm\ble_dtm.c	/^static uint16_t          m_event;                                            \/**< current command status - initially "ok", may be set if error detected, or to packet count. *\/$/;"	v	file:
m_new_event	components\ble\ble_dtm\ble_dtm.c	/^static bool              m_new_event;                                        \/**< Command has been processed - number of not yet reported event bytes. *\/$/;"	v	file:
m_packetHeaderLFlen	components\ble\ble_dtm\ble_dtm.c	/^static uint8_t           m_packetHeaderLFlen = 8;                            \/**< Length of length field in packet Header (in bits). *\/$/;"	v	file:
m_packetHeaderS0len	components\ble\ble_dtm\ble_dtm.c	/^static uint8_t           m_packetHeaderS0len = 1;                            \/**< Length of S0 field in packet Header (in bytes). *\/$/;"	v	file:
m_packetHeaderS1len	components\ble\ble_dtm\ble_dtm.c	/^static uint8_t           m_packetHeaderS1len = 0;                            \/**< Length of S1 field in packet Header (in bits). *\/$/;"	v	file:
m_packet_length	components\ble\ble_dtm\ble_dtm.c	/^static uint8_t           m_packet_length;                                    \/**< Payload length of transmitted PDU, bits 2:7 of 16-bit dtm command. *\/$/;"	v	file:
m_packet_type	components\ble\ble_dtm\ble_dtm.c	/^static dtm_pkt_type_t    m_packet_type;                                      \/**< Bits 0..1 of 16-bit transmit command, or 0xFFFFFFFF. *\/$/;"	v	file:
m_pdu	components\ble\ble_dtm\ble_dtm.c	/^static pdu_type_t        m_pdu;                                              \/**< PDU to be sent. *\/$/;"	v	file:
m_phys_ch	components\ble\ble_dtm\ble_dtm.c	/^static dtm_freq_t        m_phys_ch;                                          \/**< 0..39 physical channel number (base 2402 MHz, Interval 2 MHz), bits 8:13 of 16-bit dtm command. *\/$/;"	v	file:
m_prbs_content	components\ble\ble_dtm\ble_dtm.c	/^static uint8_t const     m_prbs_content[]    = PRBS9_CONTENT;                \/**< Pseudo-random bit sequence defined by the BLE standard. *\/$/;"	v	file:
m_radio_mode	components\ble\ble_dtm\ble_dtm.c	/^static uint8_t           m_radio_mode        = RADIO_MODE_MODE_Ble_1Mbit;    \/**< nRF51 specific radio mode vale. *\/$/;"	v	file:
m_rx_pkt_count	components\ble\ble_dtm\ble_dtm.c	/^static uint16_t          m_rx_pkt_count;                                     \/**< Number of valid packets received. *\/$/;"	v	file:
m_state	components\ble\ble_dtm\ble_dtm.c	/^static state_t           m_state = STATE_UNINITIALIZED;                      \/**< Current machine state. *\/$/;"	v	file:
m_static_length	components\ble\ble_dtm\ble_dtm.c	/^static uint8_t           m_static_length     = 0;                            \/**< Number of bytes sent in addition to the var.length payload. *\/$/;"	v	file:
m_timer_irq	components\ble\ble_dtm\ble_dtm.c	/^static IRQn_Type         m_timer_irq         = DEFAULT_TIMER_IRQn;           \/**< which interrupt line to clear on every timeout *\/$/;"	v	file:
m_txIntervaluS	components\ble\ble_dtm\ble_dtm.c	/^static uint32_t          m_txIntervaluS      = 625;                          \/**< Time between start of Tx packets (in uS). *\/$/;"	v	file:
m_tx_power	components\ble\ble_dtm\ble_dtm.c	/^static int32_t           m_tx_power          = DEFAULT_TX_POWER;             \/**< TX power for transmission test, default to maximum value (+4 dBm). *\/$/;"	v	file:
m_whitening	components\ble\ble_dtm\ble_dtm.c	/^static uint32_t          m_whitening         = RADIO_PCNF1_WHITEEN_Disabled; \/**< Whitening disabled. *\/$/;"	v	file:
mp_timer	components\ble\ble_dtm\ble_dtm.c	/^static NRF_TIMER_Type *  mp_timer            = DEFAULT_TIMER;                \/**< Timer to be used. *\/$/;"	v	file:
pdu_type_t	components\ble\ble_dtm\ble_dtm.c	/^} pdu_type_t;$/;"	t	typeref:struct:__anon13	file:
radio_init	components\ble\ble_dtm\ble_dtm.c	/^static uint32_t radio_init(void)$/;"	f	file:
radio_prepare	components\ble\ble_dtm\ble_dtm.c	/^static void radio_prepare(bool rx)$/;"	f	file:
radio_reset	components\ble\ble_dtm\ble_dtm.c	/^static void radio_reset(void)$/;"	f	file:
state_t	components\ble\ble_dtm\ble_dtm.c	/^} state_t;$/;"	t	typeref:enum:__anon14	file:
timer_init	components\ble\ble_dtm\ble_dtm.c	/^static uint32_t timer_init(void)$/;"	f	file:
BLE_DTM_H__	components\ble\ble_dtm\ble_dtm.h	22;"	d
CARRIER_TEST	components\ble\ble_dtm\ble_dtm.h	45;"	d
CARRIER_TEST_STUDIO	components\ble\ble_dtm\ble_dtm.h	46;"	d
DEFAULT_TIMER	components\ble\ble_dtm\ble_dtm.h	30;"	d
DEFAULT_TIMER_IRQn	components\ble\ble_dtm\ble_dtm.h	31;"	d
DEFAULT_TX_POWER	components\ble\ble_dtm\ble_dtm.h	29;"	d
DTM_ERROR_ILLEGAL_CHANNEL	components\ble\ble_dtm\ble_dtm.h	61;"	d
DTM_ERROR_ILLEGAL_CONFIGURATION	components\ble\ble_dtm\ble_dtm.h	64;"	d
DTM_ERROR_ILLEGAL_LENGTH	components\ble\ble_dtm\ble_dtm.h	63;"	d
DTM_ERROR_INVALID_STATE	components\ble\ble_dtm\ble_dtm.h	62;"	d
DTM_ERROR_UNINITIALIZED	components\ble\ble_dtm\ble_dtm.h	65;"	d
DTM_PKT_0X0F	components\ble\ble_dtm\ble_dtm.h	55;"	d
DTM_PKT_0X55	components\ble\ble_dtm\ble_dtm.h	56;"	d
DTM_PKT_PRBS9	components\ble\ble_dtm\ble_dtm.h	54;"	d
DTM_PKT_VENDORSPECIFIC	components\ble\ble_dtm\ble_dtm.h	57;"	d
DTM_SUCCESS	components\ble\ble_dtm\ble_dtm.h	60;"	d
LE_PACKET_REPORTING_EVENT	components\ble\ble_dtm\ble_dtm.h	50;"	d
LE_RECEIVER_TEST	components\ble\ble_dtm\ble_dtm.h	37;"	d
LE_RESET	components\ble\ble_dtm\ble_dtm.h	36;"	d
LE_TEST_END	components\ble\ble_dtm\ble_dtm.h	39;"	d
LE_TEST_STATUS_EVENT_ERROR	components\ble\ble_dtm\ble_dtm.h	52;"	d
LE_TEST_STATUS_EVENT_SUCCESS	components\ble\ble_dtm\ble_dtm.h	51;"	d
LE_TRANSMITTER_TEST	components\ble\ble_dtm\ble_dtm.h	38;"	d
PACKET_TYPE_MAX	components\ble\ble_dtm\ble_dtm.h	68;"	d
SELECT_TIMER	components\ble\ble_dtm\ble_dtm.h	48;"	d
SET_TX_POWER	components\ble\ble_dtm\ble_dtm.h	47;"	d
dtm_cmd_t	components\ble\ble_dtm\ble_dtm.h	/^typedef uint32_t dtm_cmd_t;                                             \/**< DTM command type. *\/$/;"	t
dtm_event_t	components\ble\ble_dtm\ble_dtm.h	/^typedef uint32_t dtm_event_t;                                           \/**< Type for handling DTM event. *\/$/;"	t
dtm_freq_t	components\ble\ble_dtm\ble_dtm.h	/^typedef uint32_t dtm_freq_t;                                            \/**< Physical channel, valid range: 0..39. *\/$/;"	t
dtm_pkt_type_t	components\ble\ble_dtm\ble_dtm.h	/^typedef uint32_t dtm_pkt_type_t;                                        \/**< Type for holding the requested DTM payload type.*\/$/;"	t
ble_error_log_write	components\ble\ble_error_log\ble_error_log.c	/^uint32_t ble_error_log_write(uint32_t err_code, const uint8_t * p_message, uint16_t line_number)$/;"	f
fetch_stack	components\ble\ble_error_log\ble_error_log.c	/^static void fetch_stack(ble_error_log_data_t * error_log)$/;"	f	file:
m_ble_error_log	components\ble\ble_error_log\ble_error_log.c	/^static ble_error_log_data_t m_ble_error_log;  \/**< . *\/$/;"	v	file:
BLE_ERROR_LOG_H__	components\ble\ble_error_log\ble_error_log.h	25;"	d
ERROR_MESSAGE_LENGTH	components\ble\ble_error_log\ble_error_log.h	31;"	d
FLASH_PAGE_ERROR_LOG	components\ble\ble_error_log\ble_error_log.h	33;"	d
STACK_DUMP_LENGTH	components\ble\ble_error_log\ble_error_log.h	32;"	d
ble_error_log_data_t	components\ble\ble_error_log\ble_error_log.h	/^} ble_error_log_data_t;$/;"	t	typeref:struct:__anon15
err_code	components\ble\ble_error_log\ble_error_log.h	/^    uint32_t                  err_code;                          \/**< Error code when failure occurred. *\/$/;"	m	struct:__anon15
failure	components\ble\ble_error_log\ble_error_log.h	/^    uint16_t                  failure;                           \/**< Indication that a major failure has occurred during last execution of the application. *\/$/;"	m	struct:__anon15
line_number	components\ble\ble_error_log\ble_error_log.h	/^    uint16_t                  line_number;                       \/**< Line number indicating at which line the failure occurred. *\/$/;"	m	struct:__anon15
message	components\ble\ble_error_log\ble_error_log.h	/^    uint8_t                   message[ERROR_MESSAGE_LENGTH];     \/**< Will just use the first 128 bytes of filename to store for debugging purposes. *\/$/;"	m	struct:__anon15
stack_info	components\ble\ble_error_log\ble_error_log.h	/^    uint32_t                  stack_info[STACK_DUMP_LENGTH \/ 4]; \/**< Will contain stack information, can be manually unwinded for debug purposes. *\/$/;"	m	struct:__anon15
ble_racp_decode	components\ble\ble_racp\ble_racp.c	/^void ble_racp_decode(uint8_t data_len, uint8_t * p_data, ble_racp_value_t * p_racp_val)$/;"	f
ble_racp_encode	components\ble\ble_racp\ble_racp.c	/^uint8_t ble_racp_encode(const ble_racp_value_t * p_racp_val, uint8_t * p_data)$/;"	f
BLE_RACP_H__	components\ble\ble_racp\ble_racp.h	21;"	d
RACP_OPCODE_ABORT_OPERATION	components\ble\ble_racp\ble_racp.h	33;"	d
RACP_OPCODE_DELETE_RECS	components\ble\ble_racp\ble_racp.h	32;"	d
RACP_OPCODE_NUM_RECS_RESPONSE	components\ble\ble_racp\ble_racp.h	35;"	d
RACP_OPCODE_REPORT_NUM_RECS	components\ble\ble_racp\ble_racp.h	34;"	d
RACP_OPCODE_REPORT_RECS	components\ble\ble_racp\ble_racp.h	31;"	d
RACP_OPCODE_RESERVED	components\ble\ble_racp\ble_racp.h	30;"	d
RACP_OPCODE_RESPONSE_CODE	components\ble\ble_racp\ble_racp.h	36;"	d
RACP_OPERATOR_ALL	components\ble\ble_racp\ble_racp.h	40;"	d
RACP_OPERATOR_FIRST	components\ble\ble_racp\ble_racp.h	44;"	d
RACP_OPERATOR_GREATER_OR_EQUAL	components\ble\ble_racp\ble_racp.h	42;"	d
RACP_OPERATOR_LAST	components\ble\ble_racp\ble_racp.h	45;"	d
RACP_OPERATOR_LESS_OR_EQUAL	components\ble\ble_racp\ble_racp.h	41;"	d
RACP_OPERATOR_NULL	components\ble\ble_racp\ble_racp.h	39;"	d
RACP_OPERATOR_RANGE	components\ble\ble_racp\ble_racp.h	43;"	d
RACP_OPERATOR_RFU_START	components\ble\ble_racp\ble_racp.h	46;"	d
RACP_RESPONSE_ABORT_FAILED	components\ble\ble_racp\ble_racp.h	56;"	d
RACP_RESPONSE_INVALID_OPERAND	components\ble\ble_racp\ble_racp.h	54;"	d
RACP_RESPONSE_INVALID_OPERATOR	components\ble\ble_racp\ble_racp.h	52;"	d
RACP_RESPONSE_NO_RECORDS_FOUND	components\ble\ble_racp\ble_racp.h	55;"	d
RACP_RESPONSE_OPCODE_UNSUPPORTED	components\ble\ble_racp\ble_racp.h	51;"	d
RACP_RESPONSE_OPERAND_UNSUPPORTED	components\ble\ble_racp\ble_racp.h	58;"	d
RACP_RESPONSE_OPERATOR_UNSUPPORTED	components\ble\ble_racp\ble_racp.h	53;"	d
RACP_RESPONSE_PROCEDURE_NOT_DONE	components\ble\ble_racp\ble_racp.h	57;"	d
RACP_RESPONSE_RESERVED	components\ble\ble_racp\ble_racp.h	49;"	d
RACP_RESPONSE_SUCCESS	components\ble\ble_racp\ble_racp.h	50;"	d
ble_racp_value_t	components\ble\ble_racp\ble_racp.h	/^} ble_racp_value_t;$/;"	t	typeref:struct:__anon16
opcode	components\ble\ble_racp\ble_racp.h	/^    uint8_t   opcode;                               \/**< Op Code. *\/$/;"	m	struct:__anon16
operand_len	components\ble\ble_racp\ble_racp.h	/^    uint8_t   operand_len;                          \/**< Length of the operand. *\/$/;"	m	struct:__anon16
operator	components\ble\ble_racp\ble_racp.h	/^    uint8_t   operator;                             \/**< Operator. *\/$/;"	m	struct:__anon16
p_operand	components\ble\ble_racp\ble_racp.h	/^    uint8_t * p_operand;                            \/**< Pointer to the operand. *\/$/;"	m	struct:__anon16
SWI1_IRQHandler	components\ble\ble_radio_notification\ble_radio_notification.c	/^void SWI1_IRQHandler(void)$/;"	f
ble_radio_notification_init	components\ble\ble_radio_notification\ble_radio_notification.c	/^uint32_t ble_radio_notification_init(nrf_app_irq_priority_t               irq_priority,$/;"	f
m_evt_handler	components\ble\ble_radio_notification\ble_radio_notification.c	/^static ble_radio_notification_evt_handler_t m_evt_handler  = NULL;   \/**< Application event handler for handling Radio Notification events. *\/$/;"	v	file:
m_radio_active	components\ble\ble_radio_notification\ble_radio_notification.c	/^static bool                                 m_radio_active = false;  \/**< Current radio state. *\/$/;"	v	file:
BLE_RADIO_NOTIFICATION_H__	components\ble\ble_radio_notification\ble_radio_notification.h	21;"	d
ble_radio_notification_evt_handler_t	components\ble\ble_radio_notification\ble_radio_notification.h	/^typedef void (*ble_radio_notification_evt_handler_t) (bool radio_active);$/;"	t
BLE_ANS_MAX_DISCOVERED_CENTRALS	components\ble\ble_services\ble_ans_c\ble_ans_c.c	36;"	d	file:
DISCOVERED_SERVICE_DB_SIZE	components\ble\ble_services\ble_ans_c\ble_ans_c.c	38;"	d	file:
NOTIFICATION_DATA_LENGTH	components\ble\ble_services\ble_ans_c\ble_ans_c.c	29;"	d	file:
READ_DATA_LENGTH_MIN	components\ble\ble_services\ble_ans_c\ble_ans_c.c	30;"	d	file:
READ_REQ	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^    READ_REQ = 1,                                                                          \/**< Type identifying that this tx_message is a read request. *\/$/;"	e	enum:__anon17	file:
START_HANDLE_DISCOVER	components\ble\ble_services\ble_ans_c\ble_ans_c.c	27;"	d	file:
STATE_DISC_CHAR	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^    STATE_DISC_CHAR,                                                                       \/**< A BLE central is connected and characteristic discovery is in progress. *\/$/;"	e	enum:__anon18	file:
STATE_DISC_DESC	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^    STATE_DISC_DESC,                                                                       \/**< A BLE central is connected and descriptor discovery is in progress. *\/$/;"	e	enum:__anon18	file:
STATE_DISC_SERV	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^    STATE_DISC_SERV,                                                                       \/**< A BLE central is connected and a service discovery is in progress. *\/$/;"	e	enum:__anon18	file:
STATE_IDLE	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^    STATE_IDLE,                                                                            \/**< Idle state, this is the state when no central has connected to this device. *\/$/;"	e	enum:__anon18	file:
STATE_RUNNING	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^    STATE_RUNNING,                                                                         \/**< A BLE central is connected and complete service discovery has been performed. *\/$/;"	e	enum:__anon18	file:
STATE_RUNNING_NOT_DISCOVERED	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^    STATE_RUNNING_NOT_DISCOVERED,                                                          \/**< A BLE central is connected and a service discovery is in progress. *\/$/;"	e	enum:__anon18	file:
STATE_UNINITIALIZED	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^    STATE_UNINITIALIZED,                                                                   \/**< Uninitialized state of the internal state machine. *\/$/;"	e	enum:__anon18	file:
STATE_WAITING_ENC	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^    STATE_WAITING_ENC,                                                                     \/**< A previously bonded BLE central has re-connected and the service awaits the setup of an encrypted link. *\/$/;"	e	enum:__anon18	file:
TX_BUFFER_MASK	components\ble\ble_services\ble_ans_c\ble_ans_c.c	32;"	d	file:
TX_BUFFER_SIZE	components\ble\ble_services\ble_ans_c\ble_ans_c.c	33;"	d	file:
WRITE_MESSAGE_LENGTH	components\ble\ble_services\ble_ans_c\ble_ans_c.c	34;"	d	file:
WRITE_REQ	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^    WRITE_REQ                                                                              \/**< Type identifying that this tx_message is a write request. *\/$/;"	e	enum:__anon17	file:
alert_characteristic_t	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^} alert_characteristic_t;$/;"	t	typeref:struct:__anon19	file:
alert_notif_ctrl_point	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^    alert_characteristic_t   alert_notif_ctrl_point;                                       \/**< Characteristic for the Alert Notification Control Point. *\/$/;"	m	struct:__anon20	file:
alert_service_t	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^} alert_service_t;$/;"	t	typeref:struct:__anon20	file:
ans_pstorage_callback	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^static void ans_pstorage_callback(pstorage_handle_t * handle,$/;"	f	file:
ans_state_t	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^} ans_state_t;$/;"	t	typeref:enum:__anon18	file:
ans_tx_request_t	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^} ans_tx_request_t;$/;"	t	typeref:enum:__anon17	file:
ble_ans_c_control_point_write	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^uint32_t ble_ans_c_control_point_write(const ble_ans_c_t             * p_ans,$/;"	f
ble_ans_c_disable_notif_new_alert	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^uint32_t ble_ans_c_disable_notif_new_alert(const ble_ans_c_t * p_ans)$/;"	f
ble_ans_c_disable_notif_unread_alert	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^uint32_t ble_ans_c_disable_notif_unread_alert(const ble_ans_c_t * p_ans)$/;"	f
ble_ans_c_enable_notif_new_alert	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^uint32_t ble_ans_c_enable_notif_new_alert(const ble_ans_c_t * p_ans)$/;"	f
ble_ans_c_enable_notif_unread_alert	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^uint32_t ble_ans_c_enable_notif_unread_alert(const ble_ans_c_t * p_ans)$/;"	f
ble_ans_c_init	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^uint32_t ble_ans_c_init(ble_ans_c_t * p_ans, const ble_ans_c_init_t * p_ans_init)$/;"	f
ble_ans_c_new_alert_notify	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^uint32_t ble_ans_c_new_alert_notify(const ble_ans_c_t * p_ans, ble_ans_category_id_t category_id)$/;"	f
ble_ans_c_new_alert_read	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^uint32_t ble_ans_c_new_alert_read(const ble_ans_c_t * p_ans)$/;"	f
ble_ans_c_on_ble_evt	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^void ble_ans_c_on_ble_evt(ble_ans_c_t * p_ans, const ble_evt_t * p_ble_evt)$/;"	f
ble_ans_c_on_device_manager_evt	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^void ble_ans_c_on_device_manager_evt(ble_ans_c_t       * p_ans,$/;"	f
ble_ans_c_service_delete	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^uint32_t ble_ans_c_service_delete(void)$/;"	f
ble_ans_c_service_load	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^uint32_t ble_ans_c_service_load(const ble_ans_c_t * p_ans)$/;"	f
ble_ans_c_service_store	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^uint32_t ble_ans_c_service_store(void)$/;"	f
ble_ans_c_unread_alert_notify	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^uint32_t ble_ans_c_unread_alert_notify(const ble_ans_c_t * p_ans, ble_ans_category_id_t category_id)$/;"	f
ble_ans_c_unread_alert_read	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^uint32_t ble_ans_c_unread_alert_read(const ble_ans_c_t * p_ans)$/;"	f
cccd_configure	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^static uint32_t cccd_configure(uint16_t conn_handle, uint16_t handle_cccd, bool enable)$/;"	f	file:
characteristic_disc_req_send	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^static void characteristic_disc_req_send(const ble_ans_c_t              * p_ans,$/;"	f	file:
characteristics_set	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^static void characteristics_set(alert_characteristic_t * p_characteristic,$/;"	f	file:
conn_handle	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^    uint16_t                 conn_handle;                                                  \/**< Connection handle to be used when transmitting this message. *\/$/;"	m	struct:__anon22	file:
connection_established	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^static void connection_established(const ble_ans_c_t * p_ans)$/;"	f	file:
descriptor_disc_req_send	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^static void descriptor_disc_req_send(const ble_ans_c_t * p_ans)$/;"	f	file:
descriptor_set	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^static void descriptor_set(alert_service_t * p_service, const ble_gattc_desc_t * p_desc_resp)$/;"	f	file:
encrypted_link_setup_wait	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^static void encrypted_link_setup_wait(const ble_ans_c_t * p_ans)$/;"	f	file:
event_characteristic_rsp	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^static void event_characteristic_rsp(ble_ans_c_t * p_ans, const ble_evt_t * p_ble_evt)$/;"	f	file:
event_connect	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^static void event_connect(ble_ans_c_t * p_ans, const ble_evt_t * p_ble_evt)$/;"	f	file:
event_descriptor_rsp	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^static void event_descriptor_rsp(ble_ans_c_t * p_ans, const ble_evt_t * p_ble_evt)$/;"	f	file:
event_disconnect	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^static void event_disconnect(ble_ans_c_t * p_ans)$/;"	f	file:
event_discover_rsp	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^static void event_discover_rsp(ble_ans_c_t * p_ans, const ble_evt_t * p_ble_evt)$/;"	f	file:
event_encrypted_link	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^static void event_encrypted_link(ble_ans_c_t * p_ans, const ble_evt_t * p_ble_evt)$/;"	f	file:
event_notify	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^static void event_notify(ble_ans_c_t * p_ans, const ble_evt_t * p_ble_evt)$/;"	f	file:
event_read_rsp	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^static void event_read_rsp(ble_ans_c_t * p_ans, const ble_evt_t * p_ble_evt)$/;"	f	file:
event_write_rsp	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^static void event_write_rsp(ble_ans_c_t * p_ans, const ble_evt_t * p_ble_evt)$/;"	f	file:
gattc_params	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^    ble_gattc_write_params_t gattc_params;                                                 \/**< GATTC parameters for this message. *\/$/;"	m	struct:__anon21	file:
gattc_value	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^    uint8_t                  gattc_value[WRITE_MESSAGE_LENGTH];                            \/**< The message to write. *\/$/;"	m	struct:__anon21	file:
handle	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^    uint8_t                  handle;                                                       \/**< Handle of Alert Notification Service which identifies to which central this discovered service belongs. *\/$/;"	m	struct:__anon20	file:
handle_cccd	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^    uint16_t                 handle_cccd;                                                  \/**< CCCD Handle value for this characteristic. BLE_ANS_INVALID_HANDLE if not present in the central. *\/$/;"	m	struct:__anon19	file:
handle_decl	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^    uint16_t                 handle_decl;                                                  \/**< Characteristic Declaration Handle for this characteristic. *\/$/;"	m	struct:__anon19	file:
handle_discovery_failure	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^static void handle_discovery_failure(const ble_ans_c_t * p_ans, uint32_t code)$/;"	f	file:
handle_value	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^    uint16_t                 handle_value;                                                 \/**< Value Handle for the value provided in this characteristic. *\/$/;"	m	struct:__anon19	file:
m_ans_c_obj	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^static ble_ans_c_t *         m_ans_c_obj;                                                  \/**< Pointer to the instantiated object. *\/$/;"	v	file:
m_client_state	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^static ans_state_t           m_client_state = STATE_UNINITIALIZED;                         \/**< Current state of the Alert Notification State Machine. *\/$/;"	v	file:
m_flash_handle	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^static pstorage_handle_t     m_flash_handle;                                               \/**< Flash handle where discovered services for bonded masters should be stored. *\/$/;"	v	file:
m_service	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^static alert_service_t       m_service;                                                    \/**< Current service data. *\/$/;"	v	file:
m_service_db	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^static uint32_t              m_service_db[DISCOVERED_SERVICE_DB_SIZE];                     \/**< Service database for bonded centrals (Word size aligned). *\/$/;"	v	file:
m_tx_buffer	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^static tx_message_t          m_tx_buffer[TX_BUFFER_SIZE];                                  \/**< Transmit buffer for messages to be transmitted to the central. *\/$/;"	v	file:
m_tx_index	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^static uint32_t              m_tx_index = 0;                                               \/**< Current index in the transmit buffer from where the next message to be transmitted resides. *\/$/;"	v	file:
m_tx_insert_index	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^static uint32_t              m_tx_insert_index = 0;                                        \/**< Current index in the transmit buffer where next message should be inserted. *\/$/;"	v	file:
mp_service_db	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^static alert_service_t *     mp_service_db;                                                \/**< Pointer to start of discovered services database. *\/$/;"	v	file:
new_alert	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^    alert_characteristic_t   new_alert;                                                    \/**< Characteristic for the New Alert Notification. *\/$/;"	m	struct:__anon20	file:
properties	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^    ble_gatt_char_props_t    properties;                                                   \/**< Properties for this characteristic. *\/$/;"	m	struct:__anon19	file:
read_handle	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^        uint16_t             read_handle;                                                  \/**< Read request message. *\/$/;"	m	union:__anon22::__anon23	file:
req	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^    } req;$/;"	m	struct:__anon22	typeref:union:__anon22::__anon23	file:
service	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^    ble_gattc_service_t      service;                                                      \/**< The GATT service holding the discovered Alert Notification Service. *\/$/;"	m	struct:__anon20	file:
service_disc_req_send	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^static void service_disc_req_send(const ble_ans_c_t * p_ans)$/;"	f	file:
suported_new_alert_cat	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^    alert_characteristic_t   suported_new_alert_cat;                                       \/**< Characteristic for the Supported New Alert category. *\/$/;"	m	struct:__anon20	file:
suported_unread_alert_cat	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^    alert_characteristic_t   suported_unread_alert_cat;                                    \/**< Characteristic for the Unread Alert category. *\/$/;"	m	struct:__anon20	file:
tx_buffer_process	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^static void tx_buffer_process(void)$/;"	f	file:
tx_message_t	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^} tx_message_t;$/;"	t	typeref:struct:__anon22	file:
type	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^    ans_tx_request_t         type;                                                         \/**< Type of this message, i.e. read or write message. *\/$/;"	m	struct:__anon22	file:
unread_alert_status	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^    alert_characteristic_t   unread_alert_status;                                          \/**< Characteristic for the Unread Alert Notification. *\/$/;"	m	struct:__anon20	file:
uuid	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^    ble_uuid_t               uuid;                                                         \/**< UUID identifying this characteristic. *\/$/;"	m	struct:__anon19	file:
write_params_t	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^} write_params_t;$/;"	t	typeref:struct:__anon21	file:
write_req	components\ble\ble_services\ble_ans_c\ble_ans_c.c	/^        write_params_t       write_req;                                                    \/**< Write request message. *\/$/;"	m	union:__anon22::__anon23	file:
ANS_DISABLE_NEW_INCOMING_ALERT_NOTIFICATION	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    ANS_DISABLE_NEW_INCOMING_ALERT_NOTIFICATION     = 2,                                  \/**< Disable New Incoming Alert Notification.*\/$/;"	e	enum:__anon25
ANS_DISABLE_UNREAD_CATEGORY_STATUS_NOTIFICATION	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    ANS_DISABLE_UNREAD_CATEGORY_STATUS_NOTIFICATION = 3,                                  \/**< Disable Unread Category Status Notification.*\/$/;"	e	enum:__anon25
ANS_ENABLE_NEW_INCOMING_ALERT_NOTIFICATION	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    ANS_ENABLE_NEW_INCOMING_ALERT_NOTIFICATION      = 0,                                  \/**< Enable New Incoming Alert Notification.*\/$/;"	e	enum:__anon25
ANS_ENABLE_UNREAD_CATEGORY_STATUS_NOTIFICATION	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    ANS_ENABLE_UNREAD_CATEGORY_STATUS_NOTIFICATION  = 1,                                  \/**< Enable Unread Category Status Notification.*\/$/;"	e	enum:__anon25
ANS_NB_OF_CHARACTERISTICS	components\ble\ble_services\ble_ans_c\ble_ans_c.h	38;"	d
ANS_NB_OF_SERVICES	components\ble\ble_services\ble_ans_c\ble_ans_c.h	39;"	d
ANS_NOTIFY_NEW_INCOMING_ALERT_IMMEDIATELY	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    ANS_NOTIFY_NEW_INCOMING_ALERT_IMMEDIATELY       = 4,                                  \/**< Notify New Incoming Alert immediately.*\/$/;"	e	enum:__anon25
ANS_NOTIFY_UNREAD_CATEGORY_STATUS_IMMEDIATELY	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    ANS_NOTIFY_UNREAD_CATEGORY_STATUS_IMMEDIATELY   = 5,                                  \/**< Notify Unread Category Status immediately.*\/$/;"	e	enum:__anon25
ANS_TYPE_ALL_ALERTS	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    ANS_TYPE_ALL_ALERTS                             = 0xFF                                \/**< Identifies All Alerts. *\/$/;"	e	enum:__anon24
ANS_TYPE_EMAIL	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    ANS_TYPE_EMAIL                                  = 1,                                  \/**< Alert when email messages arrives.*\/$/;"	e	enum:__anon24
ANS_TYPE_HIGH_PRIORITIZED_ALERT	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    ANS_TYPE_HIGH_PRIORITIZED_ALERT                 = 8,                                  \/**< Alert that should be handled as high priority.*\/$/;"	e	enum:__anon24
ANS_TYPE_INSTANT_MESSAGE	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    ANS_TYPE_INSTANT_MESSAGE                        = 9,                                  \/**< Alert for incoming instant messages.*\/$/;"	e	enum:__anon24
ANS_TYPE_MISSED_CALL	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    ANS_TYPE_MISSED_CALL                            = 4,                                  \/**< Missed call.*\/$/;"	e	enum:__anon24
ANS_TYPE_NEWS	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    ANS_TYPE_NEWS                                   = 2,                                  \/**< News feeds such as RSS, Atom.*\/$/;"	e	enum:__anon24
ANS_TYPE_NOTIFICATION_CALL	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    ANS_TYPE_NOTIFICATION_CALL                      = 3,                                  \/**< Incoming call.*\/$/;"	e	enum:__anon24
ANS_TYPE_SCHEDULE	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    ANS_TYPE_SCHEDULE                               = 7,                                  \/**< Alert occurred on calendar, planner.*\/$/;"	e	enum:__anon24
ANS_TYPE_SIMPLE_ALERT	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    ANS_TYPE_SIMPLE_ALERT                           = 0,                                  \/**< General text alert or non-text alert.*\/$/;"	e	enum:__anon24
ANS_TYPE_SMS_MMS	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    ANS_TYPE_SMS_MMS                                = 5,                                  \/**< SMS\/MMS message arrives.*\/$/;"	e	enum:__anon24
ANS_TYPE_VOICE_MAIL	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    ANS_TYPE_VOICE_MAIL                             = 6,                                  \/**< Voice mail.*\/$/;"	e	enum:__anon24
BLE_ANS_C_EVT_DISCONN_COMPLETE	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    BLE_ANS_C_EVT_DISCONN_COMPLETE,                                                       \/**< The connection has been taken down. *\/$/;"	e	enum:__anon26
BLE_ANS_C_EVT_DISCOVER_COMPLETE	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    BLE_ANS_C_EVT_DISCOVER_COMPLETE,                                                      \/**< A successful connection has been established and the characteristics of the server has been fetched. *\/$/;"	e	enum:__anon26
BLE_ANS_C_EVT_DISCOVER_FAILED	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    BLE_ANS_C_EVT_DISCOVER_FAILED,                                                        \/**< It was not possible to discover service or characteristics of the connected peer. *\/$/;"	e	enum:__anon26
BLE_ANS_C_EVT_NOTIFICATION	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    BLE_ANS_C_EVT_NOTIFICATION,                                                           \/**< A valid Alert Notification has been received from the server.*\/$/;"	e	enum:__anon26
BLE_ANS_C_EVT_READ_RESP	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    BLE_ANS_C_EVT_READ_RESP,                                                              \/**< A read response has been received from the server.*\/$/;"	e	enum:__anon26
BLE_ANS_C_EVT_RECONNECT	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    BLE_ANS_C_EVT_RECONNECT,                                                              \/**< A re-connection to a known and previously discovered central has occurred. *\/$/;"	e	enum:__anon26
BLE_ANS_C_EVT_WRITE_RESP	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    BLE_ANS_C_EVT_WRITE_RESP                                                              \/**< A write response has been received from the server.*\/$/;"	e	enum:__anon26
BLE_ANS_C_H__	components\ble\ble_services\ble_ans_c\ble_ans_c.h	30;"	d
BLE_ANS_INVALID_HANDLE	components\ble\ble_services\ble_ans_c\ble_ans_c.h	43;"	d
INVALID_SERVICE_HANDLE	components\ble\ble_services\ble_ans_c\ble_ans_c.h	41;"	d
INVALID_SERVICE_HANDLE_BASE	components\ble\ble_services\ble_ans_c\ble_ans_c.h	40;"	d
INVALID_SERVICE_HANDLE_DISC	components\ble\ble_services\ble_ans_c\ble_ans_c.h	42;"	d
alert	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^        ble_ans_alert_notification_t    alert;                                            \/**< Alert Notification data sent by the server. *\/$/;"	m	union:__anon30::__anon31
alert_category	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    uint8_t                             alert_category;                                   \/**< Alert category to which this alert belongs.*\/$/;"	m	struct:__anon29
alert_category_count	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    uint8_t                             alert_category_count;                             \/**< Number of alerts in the category. *\/$/;"	m	struct:__anon29
alert_msg_length	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    uint32_t                            alert_msg_length;                                 \/**< Length of optional text message send by the server. *\/$/;"	m	struct:__anon29
ans_email_support	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    uint8_t                             ans_email_support                  : 1;           \/**< Support for Alert when email messages arrives.*\/$/;"	m	struct:__anon28
ans_high_prioritized_alert_support	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    uint8_t                             ans_high_prioritized_alert_support : 1;           \/**< Support for Alert that should be handled as high priority.*\/$/;"	m	struct:__anon28
ans_instant_message_support	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    uint8_t                             ans_instant_message_support        : 1;           \/**< Support for Alert for incoming instant messages.*\/$/;"	m	struct:__anon28
ans_missed_call_support	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    uint8_t                             ans_missed_call_support            : 1;           \/**< Support for Missed call.*\/$/;"	m	struct:__anon28
ans_news_support	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    uint8_t                             ans_news_support                   : 1;           \/**< Support for News feeds such as RSS, Atom.*\/$/;"	m	struct:__anon28
ans_notification_call_support	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    uint8_t                             ans_notification_call_support      : 1;           \/**< Support for Incoming call.*\/$/;"	m	struct:__anon28
ans_schedule_support	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    uint8_t                             ans_schedule_support               : 1;           \/**< Support for Alert occurred on calendar, planner.*\/$/;"	m	struct:__anon28
ans_simple_alert_support	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    uint8_t                             ans_simple_alert_support           : 1;           \/**< Support for General text alert or non-text alert.*\/$/;"	m	struct:__anon28
ans_sms_mms_support	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    uint8_t                             ans_sms_mms_support                : 1;           \/**< Support for SMS\/MMS message arrives.*\/$/;"	m	struct:__anon28
ans_voice_mail_support	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    uint8_t                             ans_voice_mail_support             : 1;           \/**< Support for Voice mail.*\/$/;"	m	struct:__anon28
ble_ans_alert_notification_t	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^} ble_ans_alert_notification_t;$/;"	t	typeref:struct:__anon29
ble_ans_alert_settings_t	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^} ble_ans_alert_settings_t;$/;"	t	typeref:struct:__anon28
ble_ans_c_evt_handler_t	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^typedef void (*ble_ans_c_evt_handler_t) (ble_ans_c_evt_t * p_evt);$/;"	t
ble_ans_c_evt_t	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^} ble_ans_c_evt_t;$/;"	t	typeref:struct:__anon30
ble_ans_c_evt_type_t	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^} ble_ans_c_evt_type_t;$/;"	t	typeref:enum:__anon26
ble_ans_c_init_t	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^} ble_ans_c_init_t;$/;"	t	typeref:struct:__anon32
ble_ans_c_s	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^struct ble_ans_c_s$/;"	s
ble_ans_c_t	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^typedef struct ble_ans_c_s ble_ans_c_t;$/;"	t	typeref:struct:ble_ans_c_s
ble_ans_category_id_t	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^} ble_ans_category_id_t;$/;"	t	typeref:enum:__anon24
ble_ans_command_id_t	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^} ble_ans_command_id_t;$/;"	t	typeref:enum:__anon25
ble_ans_control_point_t	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^} ble_ans_control_point_t;$/;"	t	typeref:struct:__anon27
category	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    ble_ans_category_id_t               category;                                         \/**< The category for the control point for which the command applies, see @ref ble_ans_category_id_t. *\/$/;"	m	struct:__anon27
central_handle	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    uint8_t                             central_handle;                                   \/**< Handle for the currently connected central if peer is bonded. *\/$/;"	m	struct:ble_ans_c_s
command	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    ble_ans_command_id_t                command;                                          \/**< The command to be written to the control point, see @ref ble_ans_command_id_t. *\/$/;"	m	struct:__anon27
conn_handle	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    uint16_t                            conn_handle;                                      \/**< Handle of the current connection (as provided by the BLE stack, is BLE_CONN_HANDLE_INVALID if not in a connection). *\/$/;"	m	struct:ble_ans_c_s
data	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    } data;$/;"	m	struct:__anon30	typeref:union:__anon30::__anon31
error_code	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^        uint32_t                        error_code;                                       \/**< Additional status\/error code if the event was caused by a stack error or gatt status, e.g. during service discovery. *\/$/;"	m	union:__anon30::__anon31
error_handler	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    ble_srv_error_handler_t             error_handler;                                    \/**< Function to be called in case of an error. *\/$/;"	m	struct:__anon32
error_handler	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    ble_srv_error_handler_t             error_handler;                                    \/**< Function to be called in case of an error. *\/$/;"	m	struct:ble_ans_c_s
evt_handler	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    ble_ans_c_evt_handler_t             evt_handler;                                      \/**< Event handler to be called for handling events in the Alert Notification Client Application. *\/$/;"	m	struct:ble_ans_c_s
evt_handler	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    ble_ans_c_evt_handler_t             evt_handler;                                      \/**< Event handler to be called for handling events in the Battery Service. *\/$/;"	m	struct:__anon32
evt_type	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    ble_ans_c_evt_type_t                evt_type;                                         \/**< Type of event. *\/$/;"	m	struct:__anon30
message_buffer_size	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    uint32_t                            message_buffer_size;                              \/**< Size of buffer to handle messages. *\/$/;"	m	struct:__anon32
message_buffer_size	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    uint32_t                            message_buffer_size;                              \/**< Size of message buffer to hold the additional text messages received on notifications. *\/$/;"	m	struct:ble_ans_c_s
p_alert_msg_buf	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    uint8_t *                           p_alert_msg_buf;                                  \/**< Pointer to buffer containing the optional text message. *\/$/;"	m	struct:__anon29
p_message_buffer	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    uint8_t *                           p_message_buffer;                                 \/**< Pointer to buffer for passing messages. *\/$/;"	m	struct:__anon32
p_message_buffer	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    uint8_t *                           p_message_buffer;                                 \/**< Pointer to the buffer to be used for additional text message handling. *\/$/;"	m	struct:ble_ans_c_s
reserved	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    uint8_t                             reserved                           : 6;           \/**< Reserved for future use. *\/$/;"	m	struct:__anon28
service_handle	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    uint8_t                             service_handle;                                   \/**< Handle to the service in the database to use for this instance. *\/$/;"	m	struct:ble_ans_c_s
settings	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^        ble_ans_alert_settings_t        settings;                                         \/**< Setting returned from server on read request. *\/$/;"	m	union:__anon30::__anon31
uuid	components\ble\ble_services\ble_ans_c\ble_ans_c.h	/^    ble_uuid_t                          uuid;                                             \/**< UUID of the event in case of an alert or notification. *\/$/;"	m	struct:__anon30
INVALID_BATTERY_LEVEL	components\ble\ble_services\ble_bas\ble_bas.c	25;"	d	file:
battery_level_char_add	components\ble\ble_services\ble_bas\ble_bas.c	/^static uint32_t battery_level_char_add(ble_bas_t * p_bas, const ble_bas_init_t * p_bas_init)$/;"	f	file:
ble_bas_battery_level_update	components\ble\ble_services\ble_bas\ble_bas.c	/^uint32_t ble_bas_battery_level_update(ble_bas_t * p_bas, uint8_t battery_level)$/;"	f
ble_bas_init	components\ble\ble_services\ble_bas\ble_bas.c	/^uint32_t ble_bas_init(ble_bas_t * p_bas, const ble_bas_init_t * p_bas_init)$/;"	f
ble_bas_on_ble_evt	components\ble\ble_services\ble_bas\ble_bas.c	/^void ble_bas_on_ble_evt(ble_bas_t * p_bas, ble_evt_t * p_ble_evt)$/;"	f
on_connect	components\ble\ble_services\ble_bas\ble_bas.c	/^static void on_connect(ble_bas_t * p_bas, ble_evt_t * p_ble_evt)$/;"	f	file:
on_disconnect	components\ble\ble_services\ble_bas\ble_bas.c	/^static void on_disconnect(ble_bas_t * p_bas, ble_evt_t * p_ble_evt)$/;"	f	file:
on_write	components\ble\ble_services\ble_bas\ble_bas.c	/^static void on_write(ble_bas_t * p_bas, ble_evt_t * p_ble_evt)$/;"	f	file:
BLE_BAS_EVT_NOTIFICATION_DISABLED	components\ble\ble_services\ble_bas\ble_bas.h	/^    BLE_BAS_EVT_NOTIFICATION_DISABLED                             \/**< Battery value notification disabled event. *\/$/;"	e	enum:__anon33
BLE_BAS_EVT_NOTIFICATION_ENABLED	components\ble\ble_services\ble_bas\ble_bas.h	/^    BLE_BAS_EVT_NOTIFICATION_ENABLED,                             \/**< Battery value notification enabled event. *\/$/;"	e	enum:__anon33
BLE_BAS_H__	components\ble\ble_services\ble_bas\ble_bas.h	40;"	d
battery_level_char_attr_md	components\ble\ble_services\ble_bas\ble_bas.h	/^    ble_srv_cccd_security_mode_t  battery_level_char_attr_md;     \/**< Initial security level for battery characteristics attribute *\/$/;"	m	struct:__anon35
battery_level_handles	components\ble\ble_services\ble_bas\ble_bas.h	/^    ble_gatts_char_handles_t      battery_level_handles;          \/**< Handles related to the Battery Level characteristic. *\/$/;"	m	struct:ble_bas_s
battery_level_last	components\ble\ble_services\ble_bas\ble_bas.h	/^    uint8_t                       battery_level_last;             \/**< Last Battery Level measurement passed to the Battery Service. *\/$/;"	m	struct:ble_bas_s
battery_level_report_read_perm	components\ble\ble_services\ble_bas\ble_bas.h	/^    ble_gap_conn_sec_mode_t       battery_level_report_read_perm; \/**< Initial security level for battery report read attribute *\/$/;"	m	struct:__anon35
ble_bas_evt_handler_t	components\ble\ble_services\ble_bas\ble_bas.h	/^typedef void (*ble_bas_evt_handler_t) (ble_bas_t * p_bas, ble_bas_evt_t * p_evt);$/;"	t
ble_bas_evt_t	components\ble\ble_services\ble_bas\ble_bas.h	/^} ble_bas_evt_t;$/;"	t	typeref:struct:__anon34
ble_bas_evt_type_t	components\ble\ble_services\ble_bas\ble_bas.h	/^} ble_bas_evt_type_t;$/;"	t	typeref:enum:__anon33
ble_bas_init_t	components\ble\ble_services\ble_bas\ble_bas.h	/^} ble_bas_init_t;$/;"	t	typeref:struct:__anon35
ble_bas_s	components\ble\ble_services\ble_bas\ble_bas.h	/^struct ble_bas_s$/;"	s
ble_bas_t	components\ble\ble_services\ble_bas\ble_bas.h	/^typedef struct ble_bas_s ble_bas_t;$/;"	t	typeref:struct:ble_bas_s
conn_handle	components\ble\ble_services\ble_bas\ble_bas.h	/^    uint16_t                      conn_handle;                    \/**< Handle of the current connection (as provided by the BLE stack, is BLE_CONN_HANDLE_INVALID if not in a connection). *\/$/;"	m	struct:ble_bas_s
evt_handler	components\ble\ble_services\ble_bas\ble_bas.h	/^    ble_bas_evt_handler_t         evt_handler;                    \/**< Event handler to be called for handling events in the Battery Service. *\/$/;"	m	struct:__anon35
evt_handler	components\ble\ble_services\ble_bas\ble_bas.h	/^    ble_bas_evt_handler_t         evt_handler;                    \/**< Event handler to be called for handling events in the Battery Service. *\/$/;"	m	struct:ble_bas_s
evt_type	components\ble\ble_services\ble_bas\ble_bas.h	/^    ble_bas_evt_type_t evt_type;                                  \/**< Type of event. *\/$/;"	m	struct:__anon34
initial_batt_level	components\ble\ble_services\ble_bas\ble_bas.h	/^    uint8_t                       initial_batt_level;             \/**< Initial battery level *\/$/;"	m	struct:__anon35
is_notification_supported	components\ble\ble_services\ble_bas\ble_bas.h	/^    bool                          is_notification_supported;      \/**< TRUE if notification of Battery Level is supported. *\/$/;"	m	struct:ble_bas_s
p_report_ref	components\ble\ble_services\ble_bas\ble_bas.h	/^    ble_srv_report_ref_t *        p_report_ref;                   \/**< If not NULL, a Report Reference descriptor with the specified value will be added to the Battery Level characteristic *\/$/;"	m	struct:__anon35
report_ref_handle	components\ble\ble_services\ble_bas\ble_bas.h	/^    uint16_t                      report_ref_handle;              \/**< Handle of the Report Reference descriptor. *\/$/;"	m	struct:ble_bas_s
service_handle	components\ble\ble_services\ble_bas\ble_bas.h	/^    uint16_t                      service_handle;                 \/**< Handle of Battery Service (as provided by the BLE stack). *\/$/;"	m	struct:ble_bas_s
support_notification	components\ble\ble_services\ble_bas\ble_bas.h	/^    bool                          support_notification;           \/**< TRUE if notification of Battery Level measurement is supported. *\/$/;"	m	struct:__anon35
LOG	components\ble\ble_services\ble_bas_c\ble_bas_c.c	21;"	d	file:
READ_REQ	components\ble\ble_services\ble_bas_c\ble_bas_c.c	/^    READ_REQ,      \/**< Type identifying that this tx_message is a read request. *\/$/;"	e	enum:__anon36	file:
TX_BUFFER_MASK	components\ble\ble_services\ble_bas_c\ble_bas_c.c	22;"	d	file:
TX_BUFFER_SIZE	components\ble\ble_services\ble_bas_c\ble_bas_c.c	23;"	d	file:
WRITE_MESSAGE_LENGTH	components\ble\ble_services\ble_bas_c\ble_bas_c.c	24;"	d	file:
WRITE_REQ	components\ble\ble_services\ble_bas_c\ble_bas_c.c	/^    WRITE_REQ      \/**< Type identifying that this tx_message is a write request. *\/$/;"	e	enum:__anon36	file:
ble_bas_c_bl_notif_enable	components\ble\ble_services\ble_bas_c\ble_bas_c.c	/^uint32_t ble_bas_c_bl_notif_enable(ble_bas_c_t * p_ble_bas_c)$/;"	f
ble_bas_c_bl_read	components\ble\ble_services\ble_bas_c\ble_bas_c.c	/^uint32_t ble_bas_c_bl_read(ble_bas_c_t * p_ble_bas_c)$/;"	f
ble_bas_c_init	components\ble\ble_services\ble_bas_c\ble_bas_c.c	/^uint32_t ble_bas_c_init(ble_bas_c_t * p_ble_bas_c, ble_bas_c_init_t * p_ble_bas_c_init)$/;"	f
ble_bas_c_on_ble_evt	components\ble\ble_services\ble_bas_c\ble_bas_c.c	/^void ble_bas_c_on_ble_evt(ble_bas_c_t * p_ble_bas_c, const ble_evt_t * p_ble_evt)$/;"	f
cccd_configure	components\ble\ble_services\ble_bas_c\ble_bas_c.c	/^static uint32_t cccd_configure(uint16_t conn_handle, uint16_t handle_cccd, bool notification_enable)$/;"	f	file:
conn_handle	components\ble\ble_services\ble_bas_c\ble_bas_c.c	/^    uint16_t     conn_handle;  \/**< Connection handle to be used when transmitting this message. *\/$/;"	m	struct:__anon38	file:
db_discovery_evt_handler	components\ble\ble_services\ble_bas_c\ble_bas_c.c	/^static void db_discovery_evt_handler(ble_db_discovery_evt_t * p_evt)$/;"	f	file:
gattc_params	components\ble\ble_services\ble_bas_c\ble_bas_c.c	/^    ble_gattc_write_params_t gattc_params;                       \/**< The GATTC parameters for this message. *\/$/;"	m	struct:__anon37	file:
gattc_value	components\ble\ble_services\ble_bas_c\ble_bas_c.c	/^    uint8_t                  gattc_value[WRITE_MESSAGE_LENGTH];  \/**< The message to write. *\/$/;"	m	struct:__anon37	file:
m_tx_buffer	components\ble\ble_services\ble_bas_c\ble_bas_c.c	/^static tx_message_t  m_tx_buffer[TX_BUFFER_SIZE];  \/**< Transmit buffer for the messages that will be transmitted to the central. *\/$/;"	v	file:
m_tx_index	components\ble\ble_services\ble_bas_c\ble_bas_c.c	/^static uint32_t      m_tx_index        = 0;        \/**< Current index in the transmit buffer containing the next message to be transmitted. *\/$/;"	v	file:
m_tx_insert_index	components\ble\ble_services\ble_bas_c\ble_bas_c.c	/^static uint32_t      m_tx_insert_index = 0;        \/**< Current index in the transmit buffer where the next message should be inserted. *\/$/;"	v	file:
mp_ble_bas_c	components\ble\ble_services\ble_bas_c\ble_bas_c.c	/^static ble_bas_c_t * mp_ble_bas_c;                 \/**< Pointer to the current instance of the BAS Client module. The memory for this is provided by the application.*\/$/;"	v	file:
on_hvx	components\ble\ble_services\ble_bas_c\ble_bas_c.c	/^static void on_hvx(ble_bas_c_t * p_ble_bas_c, const ble_evt_t * p_ble_evt)$/;"	f	file:
on_read_rsp	components\ble\ble_services\ble_bas_c\ble_bas_c.c	/^static void on_read_rsp(ble_bas_c_t * p_bas_c, const ble_evt_t * p_ble_evt)$/;"	f	file:
on_write_rsp	components\ble\ble_services\ble_bas_c\ble_bas_c.c	/^static void on_write_rsp(ble_bas_c_t * p_bas_c, const ble_evt_t * p_ble_evt)$/;"	f	file:
read_handle	components\ble\ble_services\ble_bas_c\ble_bas_c.c	/^        uint16_t       read_handle;  \/**< Read request handle. *\/$/;"	m	union:__anon38::__anon39	file:
req	components\ble\ble_services\ble_bas_c\ble_bas_c.c	/^    } req;$/;"	m	struct:__anon38	typeref:union:__anon38::__anon39	file:
tx_buffer_process	components\ble\ble_services\ble_bas_c\ble_bas_c.c	/^static void tx_buffer_process(void)$/;"	f	file:
tx_message_t	components\ble\ble_services\ble_bas_c\ble_bas_c.c	/^} tx_message_t;$/;"	t	typeref:struct:__anon38	file:
tx_request_t	components\ble\ble_services\ble_bas_c\ble_bas_c.c	/^} tx_request_t;$/;"	t	typeref:enum:__anon36	file:
type	components\ble\ble_services\ble_bas_c\ble_bas_c.c	/^    tx_request_t type;         \/**< Type of message. (read or write). *\/$/;"	m	struct:__anon38	file:
write_params_t	components\ble\ble_services\ble_bas_c\ble_bas_c.c	/^} write_params_t;$/;"	t	typeref:struct:__anon37	file:
write_req	components\ble\ble_services\ble_bas_c\ble_bas_c.c	/^        write_params_t write_req;    \/**< Write request message. *\/$/;"	m	union:__anon38::__anon39	file:
BLE_BAS_C_EVT_BATT_NOTIFICATION	components\ble\ble_services\ble_bas_c\ble_bas_c.h	/^    BLE_BAS_C_EVT_BATT_NOTIFICATION,   \/**< Event indicating that a notification of the Battery Level characteristic has been received from the peer. *\/$/;"	e	enum:__anon40
BLE_BAS_C_EVT_BATT_READ_RESP	components\ble\ble_services\ble_bas_c\ble_bas_c.h	/^    BLE_BAS_C_EVT_BATT_READ_RESP       \/**< Event indicating that a read response on Battery Level characteristic has been received from peer. *\/$/;"	e	enum:__anon40
BLE_BAS_C_EVT_DISCOVERY_COMPLETE	components\ble\ble_services\ble_bas_c\ble_bas_c.h	/^    BLE_BAS_C_EVT_DISCOVERY_COMPLETE,  \/**< Event indicating that the Battery Service has been discovered at the peer. *\/$/;"	e	enum:__anon40
BLE_BAS_C_H__	components\ble\ble_services\ble_bas_c\ble_bas_c.h	26;"	d
battery_level	components\ble\ble_services\ble_bas_c\ble_bas_c.h	/^        uint8_t battery_level;  \/**< Battery level received from peer. This field will be used for the events @ref BLE_BAS_C_EVT_BATT_NOTIFICATION and @ref BLE_BAS_C_EVT_BATT_READ_RESP.*\/$/;"	m	union:__anon41::__anon42
bl_cccd_handle	components\ble\ble_services\ble_bas_c\ble_bas_c.h	/^    uint16_t                bl_cccd_handle;  \/**< Handle of the CCCD of the Battery Level characteristic. *\/$/;"	m	struct:ble_bas_c_s
bl_handle	components\ble\ble_services\ble_bas_c\ble_bas_c.h	/^    uint16_t                bl_handle;       \/**< Handle of the Battery Level characteristic as provided by the SoftDevice. *\/$/;"	m	struct:ble_bas_c_s
ble_bas_c_evt_handler_t	components\ble\ble_services\ble_bas_c\ble_bas_c.h	/^typedef void (* ble_bas_c_evt_handler_t) (ble_bas_c_t * p_bas_bas_c, ble_bas_c_evt_t * p_evt);$/;"	t
ble_bas_c_evt_t	components\ble\ble_services\ble_bas_c\ble_bas_c.h	/^} ble_bas_c_evt_t;$/;"	t	typeref:struct:__anon41
ble_bas_c_evt_type_t	components\ble\ble_services\ble_bas_c\ble_bas_c.h	/^} ble_bas_c_evt_type_t;$/;"	t	typeref:enum:__anon40
ble_bas_c_init_t	components\ble\ble_services\ble_bas_c\ble_bas_c.h	/^} ble_bas_c_init_t;$/;"	t	typeref:struct:__anon43
ble_bas_c_s	components\ble\ble_services\ble_bas_c\ble_bas_c.h	/^struct ble_bas_c_s$/;"	s
ble_bas_c_t	components\ble\ble_services\ble_bas_c\ble_bas_c.h	/^typedef struct ble_bas_c_s ble_bas_c_t;$/;"	t	typeref:struct:ble_bas_c_s
conn_handle	components\ble\ble_services\ble_bas_c\ble_bas_c.h	/^    uint16_t                conn_handle;     \/**< Connection handle as provided by the SoftDevice. *\/$/;"	m	struct:ble_bas_c_s
evt_handler	components\ble\ble_services\ble_bas_c\ble_bas_c.h	/^    ble_bas_c_evt_handler_t evt_handler;     \/**< Application event handler to be called when there is an event related to the Battery service. *\/$/;"	m	struct:ble_bas_c_s
evt_handler	components\ble\ble_services\ble_bas_c\ble_bas_c.h	/^    ble_bas_c_evt_handler_t evt_handler;  \/**< Event handler to be called by the Battery Service Client module whenever there is an event related to the Battery Service. *\/$/;"	m	struct:__anon43
evt_type	components\ble\ble_services\ble_bas_c\ble_bas_c.h	/^    ble_bas_c_evt_type_t evt_type;  \/**< Event Type. *\/$/;"	m	struct:__anon41
params	components\ble\ble_services\ble_bas_c\ble_bas_c.h	/^    } params;$/;"	m	struct:__anon41	typeref:union:__anon41::__anon42
BPS_MEAS_BLOOD_PRESSURE_UNITS_FLAG_BIT	components\ble\ble_services\ble_bps\ble_bps.c	31;"	d	file:
BPS_MEAS_MEASUREMENT_STATUS_FLAG_BIT	components\ble\ble_services\ble_bps\ble_bps.c	35;"	d	file:
BPS_MEAS_PULSE_RATE_FLAG_BIT	components\ble\ble_services\ble_bps\ble_bps.c	33;"	d	file:
BPS_MEAS_TIME_STAMP_FLAG_BIT	components\ble\ble_services\ble_bps\ble_bps.c	32;"	d	file:
BPS_MEAS_USER_ID_FLAG_BIT	components\ble\ble_services\ble_bps\ble_bps.c	34;"	d	file:
HANDLE_LENGTH	components\ble\ble_services\ble_bps\ble_bps.c	27;"	d	file:
MAX_BPM_LEN	components\ble\ble_services\ble_bps\ble_bps.c	28;"	d	file:
OPCODE_LENGTH	components\ble\ble_services\ble_bps\ble_bps.c	26;"	d	file:
ble_bps_init	components\ble\ble_services\ble_bps\ble_bps.c	/^uint32_t ble_bps_init(ble_bps_t * p_bps, const ble_bps_init_t * p_bps_init)$/;"	f
ble_bps_is_indication_enabled	components\ble\ble_services\ble_bps\ble_bps.c	/^uint32_t ble_bps_is_indication_enabled(ble_bps_t * p_bps, bool * p_indication_enabled)$/;"	f
ble_bps_measurement_send	components\ble\ble_services\ble_bps\ble_bps.c	/^uint32_t ble_bps_measurement_send(ble_bps_t * p_bps, ble_bps_meas_t * p_bps_meas)$/;"	f
ble_bps_on_ble_evt	components\ble\ble_services\ble_bps\ble_bps.c	/^void ble_bps_on_ble_evt(ble_bps_t * p_bps, ble_evt_t * p_ble_evt)$/;"	f
bps_feature_char_add	components\ble\ble_services\ble_bps\ble_bps.c	/^static uint32_t bps_feature_char_add(ble_bps_t * p_bps, const ble_bps_init_t * p_bps_init)$/;"	f	file:
bps_measurement_char_add	components\ble\ble_services\ble_bps\ble_bps.c	/^static uint32_t bps_measurement_char_add(ble_bps_t * p_bps, const ble_bps_init_t * p_bps_init)$/;"	f	file:
bps_measurement_encode	components\ble\ble_services\ble_bps\ble_bps.c	/^static uint8_t bps_measurement_encode(ble_bps_t      * p_bps,$/;"	f	file:
on_cccd_write	components\ble\ble_services\ble_bps\ble_bps.c	/^static void on_cccd_write(ble_bps_t * p_bps, ble_gatts_evt_write_t * p_evt_write)$/;"	f	file:
on_connect	components\ble\ble_services\ble_bps\ble_bps.c	/^static void on_connect(ble_bps_t * p_bps, ble_evt_t * p_ble_evt)$/;"	f	file:
on_disconnect	components\ble\ble_services\ble_bps\ble_bps.c	/^static void on_disconnect(ble_bps_t * p_bps, ble_evt_t * p_ble_evt)$/;"	f	file:
on_hvc	components\ble\ble_services\ble_bps\ble_bps.c	/^static void on_hvc(ble_bps_t * p_bps, ble_evt_t * p_ble_evt)$/;"	f	file:
on_write	components\ble\ble_services\ble_bps\ble_bps.c	/^static void on_write(ble_bps_t * p_bps, ble_evt_t * p_ble_evt)$/;"	f	file:
BLE_BPS_EVT_INDICATION_CONFIRMED	components\ble\ble_services\ble_bps\ble_bps.h	/^    BLE_BPS_EVT_INDICATION_CONFIRMED                                        \/**< Confirmation of a blood pressure measurement indication has been received. *\/$/;"	e	enum:__anon44
BLE_BPS_EVT_INDICATION_DISABLED	components\ble\ble_services\ble_bps\ble_bps.h	/^    BLE_BPS_EVT_INDICATION_DISABLED,                                        \/**< Blood Pressure value indication disabled event. *\/$/;"	e	enum:__anon44
BLE_BPS_EVT_INDICATION_ENABLED	components\ble\ble_services\ble_bps\ble_bps.h	/^    BLE_BPS_EVT_INDICATION_ENABLED,                                         \/**< Blood Pressure value indication enabled event. *\/$/;"	e	enum:__anon44
BLE_BPS_FEATURE_BODY_MOVEMENT_BIT	components\ble\ble_services\ble_bps\ble_bps.h	42;"	d
BLE_BPS_FEATURE_CUFF_FIT_BIT	components\ble\ble_services\ble_bps\ble_bps.h	43;"	d
BLE_BPS_FEATURE_IRREGULAR_PULSE_BIT	components\ble\ble_services\ble_bps\ble_bps.h	44;"	d
BLE_BPS_FEATURE_MEASUREMENT_POSITION_BIT	components\ble\ble_services\ble_bps\ble_bps.h	46;"	d
BLE_BPS_FEATURE_MULTIPLE_BOND_BIT	components\ble\ble_services\ble_bps\ble_bps.h	47;"	d
BLE_BPS_FEATURE_PULSE_RATE_RANGE_BIT	components\ble\ble_services\ble_bps\ble_bps.h	45;"	d
BLE_BPS_H__	components\ble\ble_services\ble_bps\ble_bps.h	33;"	d
ble_bps_evt_handler_t	components\ble\ble_services\ble_bps\ble_bps.h	/^typedef void (*ble_bps_evt_handler_t) (ble_bps_t * p_bps, ble_bps_evt_t * p_evt);$/;"	t
ble_bps_evt_t	components\ble\ble_services\ble_bps\ble_bps.h	/^} ble_bps_evt_t;$/;"	t	typeref:struct:__anon45
ble_bps_evt_type_t	components\ble\ble_services\ble_bps\ble_bps.h	/^} ble_bps_evt_type_t;$/;"	t	typeref:enum:__anon44
ble_bps_init_t	components\ble\ble_services\ble_bps\ble_bps.h	/^} ble_bps_init_t;$/;"	t	typeref:struct:__anon47
ble_bps_meas_s	components\ble\ble_services\ble_bps\ble_bps.h	/^typedef struct ble_bps_meas_s$/;"	s
ble_bps_meas_t	components\ble\ble_services\ble_bps\ble_bps.h	/^} ble_bps_meas_t;$/;"	t	typeref:struct:ble_bps_meas_s
ble_bps_s	components\ble\ble_services\ble_bps\ble_bps.h	/^struct ble_bps_s$/;"	s
ble_bps_t	components\ble\ble_services\ble_bps\ble_bps.h	/^typedef struct ble_bps_s ble_bps_t;$/;"	t	typeref:struct:ble_bps_s
blood_pressure_diastolic	components\ble\ble_services\ble_bps\ble_bps.h	/^    ieee_float16_t               blood_pressure_diastolic;                  \/**< Blood Pressure Measurement Compound Value - Diastolic . *\/$/;"	m	struct:ble_bps_meas_s
blood_pressure_systolic	components\ble\ble_services\ble_bps\ble_bps.h	/^    ieee_float16_t               blood_pressure_systolic;                   \/**< Blood Pressure Measurement Compound Value - Systolic. *\/$/;"	m	struct:ble_bps_meas_s
blood_pressure_units_in_kpa	components\ble\ble_services\ble_bps\ble_bps.h	/^    bool                         blood_pressure_units_in_kpa;               \/**< Blood Pressure Units Flag, 0=mmHg, 1=kPa *\/$/;"	m	struct:ble_bps_meas_s
bps_feature_attr_md	components\ble\ble_services\ble_bps\ble_bps.h	/^    ble_srv_security_mode_t      bps_feature_attr_md;                       \/**< Initial security level for blood pressure feature attribute *\/$/;"	m	struct:__anon47
bps_meas_attr_md	components\ble\ble_services\ble_bps\ble_bps.h	/^    ble_srv_cccd_security_mode_t bps_meas_attr_md;                          \/**< Initial security level for blood pressure measurement attribute *\/$/;"	m	struct:__anon47
conn_handle	components\ble\ble_services\ble_bps\ble_bps.h	/^    uint16_t                     conn_handle;                               \/**< Handle of the current connection (as provided by the BLE stack, is BLE_CONN_HANDLE_INVALID if not in a connection). *\/$/;"	m	struct:ble_bps_s
evt_handler	components\ble\ble_services\ble_bps\ble_bps.h	/^    ble_bps_evt_handler_t        evt_handler;                               \/**< Event handler to be called for handling events in the Blood Pressure Service. *\/$/;"	m	struct:__anon47
evt_handler	components\ble\ble_services\ble_bps\ble_bps.h	/^    ble_bps_evt_handler_t        evt_handler;                               \/**< Event handler to be called for handling events in the Blood Pressure Service. *\/$/;"	m	struct:ble_bps_s
evt_type	components\ble\ble_services\ble_bps\ble_bps.h	/^    ble_bps_evt_type_t evt_type;                                            \/**< Type of event. *\/$/;"	m	struct:__anon45
exponent	components\ble\ble_services\ble_bps\ble_bps.h	/^  int8_t  exponent;                                                         \/**< Base 10 exponent, only 4 bits *\/$/;"	m	struct:__anon46
feature	components\ble\ble_services\ble_bps\ble_bps.h	/^    uint16_t                     feature;                                   \/**< Initial value for blood pressure feature *\/$/;"	m	struct:__anon47
feature	components\ble\ble_services\ble_bps\ble_bps.h	/^    uint16_t                     feature;                                   \/**< Value of Blood Pressure feature. *\/$/;"	m	struct:ble_bps_s
feature_handles	components\ble\ble_services\ble_bps\ble_bps.h	/^    ble_gatts_char_handles_t     feature_handles;                           \/**< Handles related to the Blood Pressure Feature characteristic. *\/$/;"	m	struct:ble_bps_s
ieee_float16_t	components\ble\ble_services\ble_bps\ble_bps.h	/^} ieee_float16_t;$/;"	t	typeref:struct:__anon46
mantissa	components\ble\ble_services\ble_bps\ble_bps.h	/^  int16_t mantissa;                                                         \/**< Mantissa, only 12 bits *\/$/;"	m	struct:__anon46
mean_arterial_pressure	components\ble\ble_services\ble_bps\ble_bps.h	/^    ieee_float16_t               mean_arterial_pressure;                    \/**< Blood Pressure Measurement Compound Value - Mean Arterial Pressure. *\/$/;"	m	struct:ble_bps_meas_s
meas_handles	components\ble\ble_services\ble_bps\ble_bps.h	/^    ble_gatts_char_handles_t     meas_handles;                              \/**< Handles related to the Blood Pressure Measurement characteristic. *\/$/;"	m	struct:ble_bps_s
measurement_status	components\ble\ble_services\ble_bps\ble_bps.h	/^    uint16_t                     measurement_status;                        \/**< Measurement Status. *\/$/;"	m	struct:ble_bps_meas_s
measurement_status_present	components\ble\ble_services\ble_bps\ble_bps.h	/^    bool                         measurement_status_present;                \/**< Measurement Status Flag, 0=not present, 1=present. *\/$/;"	m	struct:ble_bps_meas_s
pulse_rate	components\ble\ble_services\ble_bps\ble_bps.h	/^    ieee_float16_t               pulse_rate;                                \/**< Pulse Rate. *\/$/;"	m	struct:ble_bps_meas_s
pulse_rate_present	components\ble\ble_services\ble_bps\ble_bps.h	/^    bool                         pulse_rate_present;                        \/**< Pulse Rate Flag, 0=not present, 1=present. *\/$/;"	m	struct:ble_bps_meas_s
service_handle	components\ble\ble_services\ble_bps\ble_bps.h	/^    uint16_t                     service_handle;                            \/**< Handle of Blood Pressure Service (as provided by the BLE stack). *\/$/;"	m	struct:ble_bps_s
time_stamp	components\ble\ble_services\ble_bps\ble_bps.h	/^    ble_date_time_t              time_stamp;                                \/**< Time Stamp. *\/$/;"	m	struct:ble_bps_meas_s
time_stamp_present	components\ble\ble_services\ble_bps\ble_bps.h	/^    bool                         time_stamp_present;                        \/**< Time Stamp Flag, 0=not present, 1=present. *\/$/;"	m	struct:ble_bps_meas_s
user_id	components\ble\ble_services\ble_bps\ble_bps.h	/^    uint8_t                      user_id;                                   \/**< User ID. *\/$/;"	m	struct:ble_bps_meas_s
user_id_present	components\ble\ble_services\ble_bps\ble_bps.h	/^    bool                         user_id_present;                           \/**< User ID Flag, 0=not present, 1=present. *\/$/;"	m	struct:ble_bps_meas_s
ANNUNCIATION_PATIENT_HIGH_ALERT	components\ble\ble_services\ble_cgm\ble_cgm.c	92;"	d	file:
ANNUNCIATION_PATIENT_LOW_ALERT	components\ble\ble_services\ble_cgm\ble_cgm.c	93;"	d	file:
ASCP_AUTHORIZATION_RESPONSE_CODE	components\ble\ble_services\ble_cgm\ble_cgm.c	85;"	d	file:
ASCP_REQUEST_FOR_AUTHORIZATION	components\ble\ble_services\ble_cgm\ble_cgm.c	81;"	d	file:
ASCP_RSP_AUTHORIZATION_FAILED	components\ble\ble_services\ble_cgm\ble_cgm.c	90;"	d	file:
ASCP_RSP_INVALID_OPERAND	components\ble\ble_services\ble_cgm\ble_cgm.c	89;"	d	file:
ASCP_RSP_OP_CODE_NOT_SUPPORTED	components\ble\ble_services\ble_cgm\ble_cgm.c	88;"	d	file:
ASCP_RSP_SUCCESS	components\ble\ble_services\ble_cgm\ble_cgm.c	87;"	d	file:
ASCP_SET_NEW_AUTHORIZATION_CODE	components\ble\ble_services\ble_cgm\ble_cgm.c	82;"	d	file:
ASCP_SET_NEW_PRIMARY_COLLECTOR	components\ble\ble_services\ble_cgm\ble_cgm.c	83;"	d	file:
CURRENT_TIME_DAY_POS	components\ble\ble_services\ble_cgm\ble_cgm.c	50;"	d	file:
CURRENT_TIME_HOUR_POS	components\ble\ble_services\ble_cgm\ble_cgm.c	51;"	d	file:
CURRENT_TIME_MINUTE_POS	components\ble\ble_services\ble_cgm\ble_cgm.c	52;"	d	file:
CURRENT_TIME_MONTH_POS	components\ble\ble_services\ble_cgm\ble_cgm.c	49;"	d	file:
CURRENT_TIME_SECONDS_POS	components\ble\ble_services\ble_cgm\ble_cgm.c	53;"	d	file:
CURRENT_TIME_YEAR_POS_LSB	components\ble\ble_services\ble_cgm\ble_cgm.c	47;"	d	file:
CURRENT_TIME_YEAR_POS_MSB	components\ble\ble_services\ble_cgm\ble_cgm.c	48;"	d	file:
MAX_PATIENT_HIGH_ALERT	components\ble\ble_services\ble_cgm\ble_cgm.c	95;"	d	file:
OPERAND_FILTER_TYPE_FACING_TIME	components\ble\ble_services\ble_cgm\ble_cgm.c	21;"	d	file:
OPERAND_FILTER_TYPE_RESV	components\ble\ble_services\ble_cgm\ble_cgm.c	19;"	d	file:
OPERAND_FILTER_TYPE_SEQ_NUM	components\ble\ble_services\ble_cgm\ble_cgm.c	20;"	d	file:
SIZE_START_TIME_SESSION	components\ble\ble_services\ble_cgm\ble_cgm.c	23;"	d	file:
SOCP_OPCODE_RESERVED	components\ble\ble_services\ble_cgm\ble_cgm.c	56;"	d	file:
SOCP_READ_CGM_COMMUNICATION_INTERVAL	components\ble\ble_services\ble_cgm\ble_cgm.c	59;"	d	file:
SOCP_READ_CGM_COMMUNICATION_INTERVAL_RESPONSE	components\ble\ble_services\ble_cgm\ble_cgm.c	60;"	d	file:
SOCP_READ_GLUCOSE_CALIBRATION_VALUE	components\ble\ble_services\ble_cgm\ble_cgm.c	62;"	d	file:
SOCP_READ_GLUCOSE_CALIBRATION_VALUE_RESPONSE	components\ble\ble_services\ble_cgm\ble_cgm.c	63;"	d	file:
SOCP_READ_PATIENT_HIGH_ALERT_LEVEL	components\ble\ble_services\ble_cgm\ble_cgm.c	65;"	d	file:
SOCP_READ_PATIENT_HIGH_ALERT_LEVEL_RESPONSE	components\ble\ble_services\ble_cgm\ble_cgm.c	66;"	d	file:
SOCP_READ_PATIENT_LOW_ALERT_LEVEL	components\ble\ble_services\ble_cgm\ble_cgm.c	68;"	d	file:
SOCP_READ_PATIENT_LOW_ALERT_LEVEL_RESPONSE	components\ble\ble_services\ble_cgm\ble_cgm.c	69;"	d	file:
SOCP_RESPONSE_CODE	components\ble\ble_services\ble_cgm\ble_cgm.c	72;"	d	file:
SOCP_RSP_AUTHORIZATION_FAILED	components\ble\ble_services\ble_cgm\ble_cgm.c	79;"	d	file:
SOCP_RSP_INVALID_OPERAND	components\ble\ble_services\ble_cgm\ble_cgm.c	77;"	d	file:
SOCP_RSP_OP_CODE_NOT_SUPPORTED	components\ble\ble_services\ble_cgm\ble_cgm.c	76;"	d	file:
SOCP_RSP_PROCEDURE_NOT_COMPLETED	components\ble\ble_services\ble_cgm\ble_cgm.c	78;"	d	file:
SOCP_RSP_RESERVED_FOR_FUTURE_USE	components\ble\ble_services\ble_cgm\ble_cgm.c	74;"	d	file:
SOCP_RSP_SUCCESS	components\ble\ble_services\ble_cgm\ble_cgm.c	75;"	d	file:
SOCP_START_THE_SESSION	components\ble\ble_services\ble_cgm\ble_cgm.c	70;"	d	file:
SOCP_STOP_THE_SESSION	components\ble\ble_services\ble_cgm\ble_cgm.c	71;"	d	file:
SOCP_WRITE_CGM_COMMUNICATION_INTERVAL	components\ble\ble_services\ble_cgm\ble_cgm.c	58;"	d	file:
SOCP_WRITE_GLUCOSE_CALIBRATION_VALUE	components\ble\ble_services\ble_cgm\ble_cgm.c	61;"	d	file:
SOCP_WRITE_PATIENT_HIGH_ALERT_LEVEL	components\ble\ble_services\ble_cgm\ble_cgm.c	64;"	d	file:
SOCP_WRITE_PATIENT_LOW_ALERT_LEVEL	components\ble\ble_services\ble_cgm\ble_cgm.c	67;"	d	file:
STATE_ASCP_RESPONSE_PENDING	components\ble\ble_services\ble_cgm\ble_cgm.c	/^    STATE_ASCP_RESPONSE_PENDING$/;"	e	enum:__anon48	file:
STATE_NO_COMM	components\ble\ble_services\ble_cgm\ble_cgm.c	/^    STATE_NO_COMM,                 \/**< The service is not in a communicating state. *\/$/;"	e	enum:__anon48	file:
STATE_RACP_PROC_ACTIVE	components\ble\ble_services\ble_cgm\ble_cgm.c	/^    STATE_RACP_PROC_ACTIVE,        \/**< Processing requested data. *\/$/;"	e	enum:__anon48	file:
STATE_RACP_RESPONSE_IND_VERIF	components\ble\ble_services\ble_cgm\ble_cgm.c	/^    STATE_RACP_RESPONSE_IND_VERIF, \/**< Waiting for a verification of a RACP indication. *\/$/;"	e	enum:__anon48	file:
STATE_RACP_RESPONSE_PENDING	components\ble\ble_services\ble_cgm\ble_cgm.c	/^    STATE_RACP_RESPONSE_PENDING,   \/**< There is a RACP indication waiting to be sent. *\/$/;"	e	enum:__anon48	file:
STATE_SOCP_RESPONSE_PENDING	components\ble\ble_services\ble_cgm\ble_cgm.c	/^    STATE_SOCP_RESPONSE_PENDING,$/;"	e	enum:__anon48	file:
ascp_send	components\ble\ble_services\ble_cgm\ble_cgm.c	/^static void ascp_send(ble_cgms_t * p_cgms)$/;"	f	file:
asp_char_add	components\ble\ble_services\ble_cgm\ble_cgm.c	/^static uint32_t asp_char_add(ble_cgms_t * p_cgms)$/;"	f	file:
ble_cgms_glucose_new_meas	components\ble\ble_services\ble_cgm\ble_cgm.c	/^uint32_t ble_cgms_glucose_new_meas(ble_cgms_t * p_cgms, ble_cgms_rec_t * p_rec)$/;"	f
ble_cgms_init	components\ble\ble_services\ble_cgm\ble_cgm.c	/^uint32_t ble_cgms_init(ble_cgms_t * p_cgms, const ble_cgm_init_t * p_gls_init)$/;"	f
ble_cgms_on_ble_evt	components\ble\ble_services\ble_cgm\ble_cgm.c	/^void ble_cgms_on_ble_evt(ble_cgms_t * p_cgms, ble_evt_t * p_ble_evt)$/;"	f
ble_socp_decode	components\ble\ble_services\ble_cgm\ble_cgm.c	/^void ble_socp_decode(uint8_t data_len, uint8_t * p_data, ble_socp_value_t * p_socp_val)$/;"	f
ble_socp_encode	components\ble\ble_services\ble_cgm\ble_cgm.c	/^uint8_t ble_socp_encode(const ble_socp_rsp_t * p_socp_rsp, uint8_t * p_data)$/;"	f
encode_feature_location_type	components\ble\ble_services\ble_cgm\ble_cgm.c	/^uint8_t encode_feature_location_type(uint8_t * p_out_buffer, ble_cgms_features_t * p_in_feature)$/;"	f
gls_meas_encode	components\ble\ble_services\ble_cgm\ble_cgm.c	/^static uint8_t gls_meas_encode(const ble_cgms_meas_t * p_meas, uint8_t * p_encoded_buffer)$/;"	f	file:
gls_state_t	components\ble\ble_services\ble_cgm\ble_cgm.c	/^} gls_state_t;$/;"	t	typeref:enum:__anon48	file:
glucose_feature_char_add	components\ble\ble_services\ble_cgm\ble_cgm.c	/^static uint32_t glucose_feature_char_add(ble_cgms_t * p_cgms)$/;"	f	file:
glucose_meas_send	components\ble\ble_services\ble_cgm\ble_cgm.c	/^uint32_t glucose_meas_send(ble_cgms_t * p_cgms, ble_cgms_rec_t * p_rec, uint8_t * p_count)$/;"	f
glucose_measurement_char_add	components\ble\ble_services\ble_cgm\ble_cgm.c	/^static uint32_t glucose_measurement_char_add(ble_cgms_t * p_cgms)$/;"	f	file:
is_request_to_be_executed	components\ble\ble_services\ble_cgm\ble_cgm.c	/^static bool is_request_to_be_executed(const ble_racp_value_t * p_racp_request,$/;"	f	file:
m_gls_state	components\ble\ble_services\ble_cgm\ble_cgm.c	/^static gls_state_t      m_gls_state;                                    \/**< Current communication state. *\/$/;"	v	file:
m_pending_racp_response	components\ble\ble_services\ble_cgm\ble_cgm.c	/^static ble_racp_value_t m_pending_racp_response;                        \/**< RACP response to be sent. *\/$/;"	v	file:
m_pending_racp_response_operand	components\ble\ble_services\ble_cgm\ble_cgm.c	/^static uint8_t          m_pending_racp_response_operand[2];             \/**< Operand of RACP response to be sent. *\/$/;"	v	file:
m_racp_proc_operator	components\ble\ble_services\ble_cgm\ble_cgm.c	/^static uint8_t          m_racp_proc_operator;                           \/**< Operator of current request. *\/$/;"	v	file:
m_racp_proc_record_ndx	components\ble\ble_services\ble_cgm\ble_cgm.c	/^static uint8_t          m_racp_proc_record_ndx;                         \/**< Current record index. *\/$/;"	v	file:
m_racp_proc_records_reported	components\ble\ble_services\ble_cgm\ble_cgm.c	/^static uint8_t          m_racp_proc_records_reported;                   \/**< Number of reported records. *\/$/;"	v	file:
m_racp_proc_records_reported_since_txcomplete	components\ble\ble_services\ble_cgm\ble_cgm.c	/^static uint8_t          m_racp_proc_records_reported_since_txcomplete;  \/**< Number of reported records since last TX_COMPLETE event. *\/$/;"	v	file:
next_sequence_number_set	components\ble\ble_services\ble_cgm\ble_cgm.c	/^static uint32_t next_sequence_number_set(void)$/;"	f	file:
on_asp_value_write	components\ble\ble_services\ble_cgm\ble_cgm.c	/^static void on_asp_value_write(ble_cgms_t * p_cgms, ble_gatts_evt_write_t * p_evt_write)$/;"	f	file:
on_glm_cccd_write	components\ble\ble_services\ble_cgm\ble_cgm.c	/^static void on_glm_cccd_write(ble_cgms_t * p_cgms, ble_gatts_evt_write_t * p_evt_write)$/;"	f	file:
on_hvc	components\ble\ble_services\ble_cgm\ble_cgm.c	/^static void on_hvc(ble_cgms_t * p_cgms, ble_evt_t * p_ble_evt)$/;"	f	file:
on_racp_value_write	components\ble\ble_services\ble_cgm\ble_cgm.c	/^static void on_racp_value_write(ble_cgms_t * p_cgms, ble_gatts_evt_write_t * p_evt_write)$/;"	f	file:
on_socp_value_write	components\ble\ble_services\ble_cgm\ble_cgm.c	/^static void on_socp_value_write(ble_cgms_t * p_cgms, ble_gatts_evt_write_t * p_evt_write)$/;"	f	file:
on_tx_complete	components\ble\ble_services\ble_cgm\ble_cgm.c	/^static void on_tx_complete(ble_cgms_t * p_cgms, ble_evt_t * p_ble_evt)$/;"	f	file:
on_write	components\ble\ble_services\ble_cgm\ble_cgm.c	/^static void on_write(ble_cgms_t * p_cgms, ble_evt_t * p_ble_evt)$/;"	f	file:
racp_report_records_all	components\ble\ble_services\ble_cgm\ble_cgm.c	/^static uint32_t racp_report_records_all(ble_cgms_t * p_cgms)$/;"	f	file:
racp_report_records_completed	components\ble\ble_services\ble_cgm\ble_cgm.c	/^static void racp_report_records_completed(ble_cgms_t * p_cgms)$/;"	f	file:
racp_report_records_first_last	components\ble\ble_services\ble_cgm\ble_cgm.c	/^static uint32_t racp_report_records_first_last(ble_cgms_t * p_cgms)$/;"	f	file:
racp_report_records_procedure	components\ble\ble_services\ble_cgm\ble_cgm.c	/^static void racp_report_records_procedure(ble_cgms_t * p_cgms)$/;"	f	file:
racp_response_code_send	components\ble\ble_services\ble_cgm\ble_cgm.c	/^static void racp_response_code_send(ble_cgms_t * p_cgms, uint8_t opcode, uint8_t value)$/;"	f	file:
racp_send	components\ble\ble_services\ble_cgm\ble_cgm.c	/^static void racp_send(ble_cgms_t * p_cgms, ble_racp_value_t * p_racp_val)$/;"	f	file:
record_access_control_point_char_add	components\ble\ble_services\ble_cgm\ble_cgm.c	/^static uint32_t record_access_control_point_char_add(ble_cgms_t * p_cgms)$/;"	f	file:
report_num_records_request_execute	components\ble\ble_services\ble_cgm\ble_cgm.c	/^static void report_num_records_request_execute(ble_cgms_t       * p_cgms,$/;"	f	file:
report_records_request_execute	components\ble\ble_services\ble_cgm\ble_cgm.c	/^static void report_records_request_execute(ble_cgms_t * p_cgms, ble_racp_value_t * p_racp_request)$/;"	f	file:
socp_char_add	components\ble\ble_services\ble_cgm\ble_cgm.c	/^static uint32_t socp_char_add(ble_cgms_t * p_cgms)$/;"	f	file:
socp_send	components\ble\ble_services\ble_cgm\ble_cgm.c	/^static void socp_send(ble_cgms_t * p_cgms)$/;"	f	file:
sst_char_add	components\ble\ble_services\ble_cgm\ble_cgm.c	/^static uint32_t sst_char_add(ble_cgms_t * p_cgms)$/;"	f	file:
start_session_time_def	components\ble\ble_services\ble_cgm\ble_cgm.c	/^ble_date_time_t start_session_time_def = {2012, 10, 5, 13, 27, 56};$/;"	v
state_set	components\ble\ble_services\ble_cgm\ble_cgm.c	/^static void state_set(gls_state_t new_state)$/;"	f	file:
BLE_GLS_CONTEXT_CARB_BREAKFAST	components\ble\ble_services\ble_cgm\ble_cgm.h	101;"	d
BLE_GLS_CONTEXT_CARB_BRUNCH	components\ble\ble_services\ble_cgm\ble_cgm.h	107;"	d
BLE_GLS_CONTEXT_CARB_DINNER	components\ble\ble_services\ble_cgm\ble_cgm.h	103;"	d
BLE_GLS_CONTEXT_CARB_DRINK	components\ble\ble_services\ble_cgm\ble_cgm.h	105;"	d
BLE_GLS_CONTEXT_CARB_LUNCH	components\ble\ble_services\ble_cgm\ble_cgm.h	102;"	d
BLE_GLS_CONTEXT_CARB_SNACK	components\ble\ble_services\ble_cgm\ble_cgm.h	104;"	d
BLE_GLS_CONTEXT_CARB_SUPPER	components\ble\ble_services\ble_cgm\ble_cgm.h	106;"	d
BLE_GLS_CONTEXT_FLAG_CARB	components\ble\ble_services\ble_cgm\ble_cgm.h	90;"	d
BLE_GLS_CONTEXT_FLAG_EXERCISE	components\ble\ble_services\ble_cgm\ble_cgm.h	93;"	d
BLE_GLS_CONTEXT_FLAG_EXT	components\ble\ble_services\ble_cgm\ble_cgm.h	98;"	d
BLE_GLS_CONTEXT_FLAG_HBA1C	components\ble\ble_services\ble_cgm\ble_cgm.h	97;"	d
BLE_GLS_CONTEXT_FLAG_MEAL	components\ble\ble_services\ble_cgm\ble_cgm.h	91;"	d
BLE_GLS_CONTEXT_FLAG_MED	components\ble\ble_services\ble_cgm\ble_cgm.h	94;"	d
BLE_GLS_CONTEXT_FLAG_MED_KG	components\ble\ble_services\ble_cgm\ble_cgm.h	95;"	d
BLE_GLS_CONTEXT_FLAG_MED_L	components\ble\ble_services\ble_cgm\ble_cgm.h	96;"	d
BLE_GLS_CONTEXT_FLAG_TESTER	components\ble\ble_services\ble_cgm\ble_cgm.h	92;"	d
BLE_GLS_CONTEXT_HEALTH_MAJOR	components\ble\ble_services\ble_cgm\ble_cgm.h	124;"	d
BLE_GLS_CONTEXT_HEALTH_MENSES	components\ble\ble_services\ble_cgm\ble_cgm.h	125;"	d
BLE_GLS_CONTEXT_HEALTH_MINOR	components\ble\ble_services\ble_cgm\ble_cgm.h	123;"	d
BLE_GLS_CONTEXT_HEALTH_NONE	components\ble\ble_services\ble_cgm\ble_cgm.h	127;"	d
BLE_GLS_CONTEXT_HEALTH_NOT_AVAIL	components\ble\ble_services\ble_cgm\ble_cgm.h	128;"	d
BLE_GLS_CONTEXT_HEALTH_STRESS	components\ble\ble_services\ble_cgm\ble_cgm.h	126;"	d
BLE_GLS_CONTEXT_MEAL_BEDTIME	components\ble\ble_services\ble_cgm\ble_cgm.h	114;"	d
BLE_GLS_CONTEXT_MEAL_CASUAL	components\ble\ble_services\ble_cgm\ble_cgm.h	113;"	d
BLE_GLS_CONTEXT_MEAL_FASTING	components\ble\ble_services\ble_cgm\ble_cgm.h	112;"	d
BLE_GLS_CONTEXT_MEAL_POSTPRANDIAL	components\ble\ble_services\ble_cgm\ble_cgm.h	111;"	d
BLE_GLS_CONTEXT_MEAL_PREPRANDIAL	components\ble\ble_services\ble_cgm\ble_cgm.h	110;"	d
BLE_GLS_CONTEXT_MED_INTERMED	components\ble\ble_services\ble_cgm\ble_cgm.h	133;"	d
BLE_GLS_CONTEXT_MED_LONG	components\ble\ble_services\ble_cgm\ble_cgm.h	134;"	d
BLE_GLS_CONTEXT_MED_PREMIX	components\ble\ble_services\ble_cgm\ble_cgm.h	135;"	d
BLE_GLS_CONTEXT_MED_RAPID	components\ble\ble_services\ble_cgm\ble_cgm.h	131;"	d
BLE_GLS_CONTEXT_MED_SHORT	components\ble\ble_services\ble_cgm\ble_cgm.h	132;"	d
BLE_GLS_CONTEXT_TESTER_LAB	components\ble\ble_services\ble_cgm\ble_cgm.h	119;"	d
BLE_GLS_CONTEXT_TESTER_NOT_AVAIL	components\ble\ble_services\ble_cgm\ble_cgm.h	120;"	d
BLE_GLS_CONTEXT_TESTER_PRO	components\ble\ble_services\ble_cgm\ble_cgm.h	118;"	d
BLE_GLS_CONTEXT_TESTER_SELF	components\ble\ble_services\ble_cgm\ble_cgm.h	117;"	d
BLE_GLS_EVT_NOTIFICATION_DISABLED	components\ble\ble_services\ble_cgm\ble_cgm.h	/^    BLE_GLS_EVT_NOTIFICATION_DISABLED,                         \/**< Glucose value notification disabled event. *\/$/;"	e	enum:__anon50
BLE_GLS_EVT_NOTIFICATION_ENABLED	components\ble\ble_services\ble_cgm\ble_cgm.h	/^    BLE_GLS_EVT_NOTIFICATION_ENABLED,                          \/**< Glucose value notification enabled event. *\/$/;"	e	enum:__anon50
BLE_GLS_EVT_START_SESSION	components\ble\ble_services\ble_cgm\ble_cgm.h	/^    BLE_GLS_EVT_START_SESSION,                                 \/**< Glucose value notification start session event. *\/$/;"	e	enum:__anon50
BLE_GLS_EVT_STOP_SESSION	components\ble\ble_services\ble_cgm\ble_cgm.h	/^    BLE_GLS_EVT_STOP_SESSION,                                  \/**< Glucose value notification stop session event. *\/$/;"	e	enum:__anon50
BLE_GLS_EVT_WRITE_COMM_INTERVAL	components\ble\ble_services\ble_cgm\ble_cgm.h	/^    BLE_GLS_EVT_WRITE_COMM_INTERVAL                            \/**< Glucose value write communication interval. *\/$/;"	e	enum:__anon50
BLE_GLS_FEATURE_GENERAL_FAULT	components\ble\ble_services\ble_cgm\ble_cgm.h	44;"	d
BLE_GLS_FEATURE_INSERT_ERR	components\ble\ble_services\ble_cgm\ble_cgm.h	39;"	d
BLE_GLS_FEATURE_LOW_BATT	components\ble\ble_services\ble_cgm\ble_cgm.h	36;"	d
BLE_GLS_FEATURE_MALFUNC	components\ble\ble_services\ble_cgm\ble_cgm.h	37;"	d
BLE_GLS_FEATURE_MULTI_BOND	components\ble\ble_services\ble_cgm\ble_cgm.h	46;"	d
BLE_GLS_FEATURE_READ_INT	components\ble\ble_services\ble_cgm\ble_cgm.h	43;"	d
BLE_GLS_FEATURE_RES_HIGH_LOW	components\ble\ble_services\ble_cgm\ble_cgm.h	41;"	d
BLE_GLS_FEATURE_SAMPLE_SIZE	components\ble\ble_services\ble_cgm\ble_cgm.h	38;"	d
BLE_GLS_FEATURE_TEMP_HIGH_LOW	components\ble\ble_services\ble_cgm\ble_cgm.h	42;"	d
BLE_GLS_FEATURE_TIME_FAULT	components\ble\ble_services\ble_cgm\ble_cgm.h	45;"	d
BLE_GLS_FEATURE_TYPE_ERR	components\ble\ble_services\ble_cgm\ble_cgm.h	40;"	d
BLE_GLS_H__	components\ble\ble_services\ble_cgm\ble_cgm.h	28;"	d
BLE_GLS_MEAS_FLAG_CONC_TYPE_LOC	components\ble\ble_services\ble_cgm\ble_cgm.h	50;"	d
BLE_GLS_MEAS_FLAG_CONTEXT_INFO	components\ble\ble_services\ble_cgm\ble_cgm.h	54;"	d
BLE_GLS_MEAS_FLAG_SENSOR_STATUS	components\ble\ble_services\ble_cgm\ble_cgm.h	53;"	d
BLE_GLS_MEAS_FLAG_TIME_OFFSET	components\ble\ble_services\ble_cgm\ble_cgm.h	49;"	d
BLE_GLS_MEAS_FLAG_UNITS_KG_L	components\ble\ble_services\ble_cgm\ble_cgm.h	51;"	d
BLE_GLS_MEAS_FLAG_UNITS_MOL_L	components\ble\ble_services\ble_cgm\ble_cgm.h	52;"	d
BLE_GLS_MEAS_LOC_AST	components\ble\ble_services\ble_cgm\ble_cgm.h	70;"	d
BLE_GLS_MEAS_LOC_CONTROL	components\ble\ble_services\ble_cgm\ble_cgm.h	72;"	d
BLE_GLS_MEAS_LOC_EAR	components\ble\ble_services\ble_cgm\ble_cgm.h	71;"	d
BLE_GLS_MEAS_LOC_FINGER	components\ble\ble_services\ble_cgm\ble_cgm.h	69;"	d
BLE_GLS_MEAS_LOC_NOT_AVAIL	components\ble\ble_services\ble_cgm\ble_cgm.h	73;"	d
BLE_GLS_MEAS_STATUS_BATT_LOW	components\ble\ble_services\ble_cgm\ble_cgm.h	76;"	d
BLE_GLS_MEAS_STATUS_GENERAL_FAULT	components\ble\ble_services\ble_cgm\ble_cgm.h	86;"	d
BLE_GLS_MEAS_STATUS_RESULT_HIGH	components\ble\ble_services\ble_cgm\ble_cgm.h	81;"	d
BLE_GLS_MEAS_STATUS_RESULT_LOW	components\ble\ble_services\ble_cgm\ble_cgm.h	82;"	d
BLE_GLS_MEAS_STATUS_SAMPLE_SIZE	components\ble\ble_services\ble_cgm\ble_cgm.h	78;"	d
BLE_GLS_MEAS_STATUS_SENSOR_FAULT	components\ble\ble_services\ble_cgm\ble_cgm.h	77;"	d
BLE_GLS_MEAS_STATUS_STRIP_INSERT	components\ble\ble_services\ble_cgm\ble_cgm.h	79;"	d
BLE_GLS_MEAS_STATUS_STRIP_PULL	components\ble\ble_services\ble_cgm\ble_cgm.h	85;"	d
BLE_GLS_MEAS_STATUS_STRIP_TYPE	components\ble\ble_services\ble_cgm\ble_cgm.h	80;"	d
BLE_GLS_MEAS_STATUS_TEMP_HIGH	components\ble\ble_services\ble_cgm\ble_cgm.h	83;"	d
BLE_GLS_MEAS_STATUS_TEMP_LOW	components\ble\ble_services\ble_cgm\ble_cgm.h	84;"	d
BLE_GLS_MEAS_STATUS_TIME_FAULT	components\ble\ble_services\ble_cgm\ble_cgm.h	87;"	d
BLE_GLS_MEAS_TYPE_ART_BLOOD	components\ble\ble_services\ble_cgm\ble_cgm.h	61;"	d
BLE_GLS_MEAS_TYPE_ART_PLASMA	components\ble\ble_services\ble_cgm\ble_cgm.h	62;"	d
BLE_GLS_MEAS_TYPE_CAP_BLOOD	components\ble\ble_services\ble_cgm\ble_cgm.h	57;"	d
BLE_GLS_MEAS_TYPE_CAP_PLASMA	components\ble\ble_services\ble_cgm\ble_cgm.h	58;"	d
BLE_GLS_MEAS_TYPE_CONTROL	components\ble\ble_services\ble_cgm\ble_cgm.h	66;"	d
BLE_GLS_MEAS_TYPE_FLUID	components\ble\ble_services\ble_cgm\ble_cgm.h	65;"	d
BLE_GLS_MEAS_TYPE_UNDET_BLOOD	components\ble\ble_services\ble_cgm\ble_cgm.h	63;"	d
BLE_GLS_MEAS_TYPE_UNDET_PLASMA	components\ble\ble_services\ble_cgm\ble_cgm.h	64;"	d
BLE_GLS_MEAS_TYPE_VEN_BLOOD	components\ble\ble_services\ble_cgm\ble_cgm.h	59;"	d
BLE_GLS_MEAS_TYPE_VEN_PLASMA	components\ble\ble_services\ble_cgm\ble_cgm.h	60;"	d
HANDLE_LENGTH	components\ble\ble_services\ble_cgm\ble_cgm.h	138;"	d
MAX_AUTH_STR_LEN	components\ble\ble_services\ble_cgm\ble_cgm.h	144;"	d
MAX_GLM_LEN	components\ble\ble_services\ble_cgm\ble_cgm.h	139;"	d
MAX_SIZE_CGM_MEAS	components\ble\ble_services\ble_cgm\ble_cgm.h	141;"	d
MIN_AUTHO_STRING_LEN	components\ble\ble_services\ble_cgm\ble_cgm.h	145;"	d
NB_MAX_RECORD_PER_NOTIFCATIONS	components\ble\ble_services\ble_cgm\ble_cgm.h	142;"	d
OPCODE_LENGTH	components\ble\ble_services\ble_cgm\ble_cgm.h	137;"	d
ascp_response	components\ble\ble_services\ble_cgm\ble_cgm.h	/^    ble_socp_rsp_t            ascp_response;                            $/;"	m	struct:ble_cgms_s
asp_handles	components\ble\ble_services\ble_cgm\ble_cgm.h	/^    ble_gatts_char_handles_t  asp_handles;                              \/**< Handles related to the Application Security Point characteristic. *\/$/;"	m	struct:ble_cgms_s
authorization_str_len	components\ble\ble_services\ble_cgm\ble_cgm.h	/^    uint8_t                   authorization_str_len;                    $/;"	m	struct:ble_cgms_s
authorization_str_len	components\ble\ble_services\ble_cgm\ble_cgm.h	/^    uint8_t                   authorization_str_len;            \/**< Length of the authorization string. *\/$/;"	m	struct:__anon55
authorization_string	components\ble\ble_services\ble_cgm\ble_cgm.h	/^    uint8_t                   authorization_string[MAX_AUTH_STR_LEN];   $/;"	m	struct:ble_cgms_s
authorization_string	components\ble\ble_services\ble_cgm\ble_cgm.h	/^    uint8_t*                  authorization_string;             \/**< Pointer to authorization string. *\/$/;"	m	struct:__anon55
ble_cgm_init_t	components\ble\ble_services\ble_cgm\ble_cgm.h	/^} ble_cgm_init_t;$/;"	t	typeref:struct:__anon55
ble_cgms_evt_handler_t	components\ble\ble_services\ble_cgm\ble_cgm.h	/^typedef void (*ble_cgms_evt_handler_t) (ble_cgms_t * p_cgms, ble_cgms_evt_t * p_evt);$/;"	t
ble_cgms_evt_t	components\ble\ble_services\ble_cgm\ble_cgm.h	/^} ble_cgms_evt_t;$/;"	t	typeref:struct:__anon51
ble_cgms_evt_type_t	components\ble\ble_services\ble_cgm\ble_cgm.h	/^} ble_cgms_evt_type_t;$/;"	t	typeref:enum:__anon50
ble_cgms_features_t	components\ble\ble_services\ble_cgm\ble_cgm.h	/^}ble_cgms_features_t;$/;"	t	typeref:struct:__anon54
ble_cgms_meas_t	components\ble\ble_services\ble_cgm\ble_cgm.h	/^} ble_cgms_meas_t;$/;"	t	typeref:struct:__anon52
ble_cgms_rec_t	components\ble\ble_services\ble_cgm\ble_cgm.h	/^} ble_cgms_rec_t;$/;"	t	typeref:struct:__anon53
ble_cgms_s	components\ble\ble_services\ble_cgm\ble_cgm.h	/^typedef struct ble_cgms_s$/;"	s
ble_cgms_t	components\ble\ble_services\ble_cgm\ble_cgm.h	/^typedef struct ble_cgms_s ble_cgms_t;$/;"	t	typeref:struct:ble_cgms_s
ble_cgms_t	components\ble\ble_services\ble_cgm\ble_cgm.h	/^} ble_cgms_t;$/;"	t	typeref:struct:ble_cgms_s
ble_socp_rsp_t	components\ble\ble_services\ble_cgm\ble_cgm.h	/^}ble_socp_rsp_t;$/;"	t	typeref:struct:__anon57
ble_socp_value_t	components\ble\ble_services\ble_cgm\ble_cgm.h	/^}ble_socp_value_t;$/;"	t	typeref:struct:__anon56
cgmsst_handles	components\ble\ble_services\ble_cgm\ble_cgm.h	/^    ble_gatts_char_handles_t  cgmsst_handles;                           \/**< Handles related to the CGM Start Session Time characteristic. *\/$/;"	m	struct:ble_cgms_s
comm_interval	components\ble\ble_services\ble_cgm\ble_cgm.h	/^    uint8_t                   comm_interval;                            $/;"	m	struct:ble_cgms_s
conn_handle	components\ble\ble_services\ble_cgm\ble_cgm.h	/^    uint16_t                  conn_handle;                              \/**< Handle of the current connection (as provided by the BLE stack, is BLE_CONN_HANDLE_INVALID if not in a connection). *\/$/;"	m	struct:ble_cgms_s
error_handler	components\ble\ble_services\ble_cgm\ble_cgm.h	/^    ble_srv_error_handler_t   error_handler;                            \/**< Function to be called in case of an error. *\/$/;"	m	struct:ble_cgms_s
error_handler	components\ble\ble_services\ble_cgm\ble_cgm.h	/^    ble_srv_error_handler_t   error_handler;                    \/**< Function to be called in case of an error. *\/$/;"	m	struct:__anon55
evt_handler	components\ble\ble_services\ble_cgm\ble_cgm.h	/^    ble_cgms_evt_handler_t    evt_handler;                              \/**< Event handler to be called for handling events in the Glucose Service. *\/$/;"	m	struct:ble_cgms_s
evt_handler	components\ble\ble_services\ble_cgm\ble_cgm.h	/^    ble_cgms_evt_handler_t    evt_handler;                      \/**< Event handler to be called for handling events in the Glucose Service. *\/$/;"	m	struct:__anon55
evt_type	components\ble\ble_services\ble_cgm\ble_cgm.h	/^    ble_cgms_evt_type_t evt_type;                               \/**< Type of event. *\/$/;"	m	struct:__anon51
exponent	components\ble\ble_services\ble_cgm\ble_cgm.h	/^  int8_t exponent;                                             \/**< Base 10 exponent, should be using only 4 bits *\/$/;"	m	struct:__anon49
feature_location_type	components\ble\ble_services\ble_cgm\ble_cgm.h	/^    ble_cgms_features_t       feature_location_type;                    $/;"	m	struct:ble_cgms_s
feature_location_type	components\ble\ble_services\ble_cgm\ble_cgm.h	/^    ble_cgms_features_t       feature_location_type;            \/**< Features supported by the service. *\/$/;"	m	struct:__anon55
features	components\ble\ble_services\ble_cgm\ble_cgm.h	/^    uint16_t     features;                                      \/**< Field holding information on supported features in the continous glucose meter service *\/$/;"	m	struct:__anon54
glf_handles	components\ble\ble_services\ble_cgm\ble_cgm.h	/^    ble_gatts_char_handles_t  glf_handles;                              \/**< Handles related to the Glucose Feature characteristic. *\/$/;"	m	struct:ble_cgms_s
glm_context_handles	components\ble\ble_services\ble_cgm\ble_cgm.h	/^    ble_gatts_char_handles_t  glm_context_handles;                      \/**< Handles related to the Glucose Measurement Context characteristic. *\/$/;"	m	struct:ble_cgms_s
glm_handles	components\ble\ble_services\ble_cgm\ble_cgm.h	/^    ble_gatts_char_handles_t  glm_handles;                              \/**< Handles related to the Glucose Measurement characteristic. *\/$/;"	m	struct:ble_cgms_s
glucose_concentration	components\ble\ble_services\ble_cgm\ble_cgm.h	/^    uint16_t glucose_concentration;                             \/**< Glucose concentration *\/$/;"	m	struct:__anon52
is_collector_authorized	components\ble\ble_services\ble_cgm\ble_cgm.h	/^    bool                      is_collector_authorized;                  $/;"	m	struct:ble_cgms_s
is_session_started	components\ble\ble_services\ble_cgm\ble_cgm.h	/^    bool                      is_session_started;                       $/;"	m	struct:ble_cgms_s
mantissa	components\ble\ble_services\ble_cgm\ble_cgm.h	/^  int16_t mantissa;                                            \/**< Mantissa, should be using only 12 bits *\/$/;"	m	struct:__anon49
meas	components\ble\ble_services\ble_cgm\ble_cgm.h	/^  ble_cgms_meas_t          meas;                                \/**< Glucose measurement *\/$/;"	m	struct:__anon53
opcode	components\ble\ble_services\ble_cgm\ble_cgm.h	/^    uint8_t opcode;                                             \/**< Op Code. *\/$/;"	m	struct:__anon56
opcode	components\ble\ble_services\ble_cgm\ble_cgm.h	/^    uint8_t opcode;                                             \/**< Opcode describing the response. *\/$/;"	m	struct:__anon57
operand_len	components\ble\ble_services\ble_cgm\ble_cgm.h	/^    uint8_t operand_len;                                        \/**< Length of the operand. *\/$/;"	m	struct:__anon56
p_operand	components\ble\ble_services\ble_cgm\ble_cgm.h	/^    uint8_t *p_operand;                                         \/**< Pointer to the operand. *\/$/;"	m	struct:__anon56
patient_high_alert	components\ble\ble_services\ble_cgm\ble_cgm.h	/^    uint16_t                  patient_high_alert;                       $/;"	m	struct:ble_cgms_s
patient_low_alert	components\ble\ble_services\ble_cgm\ble_cgm.h	/^    uint16_t                  patient_low_alert;                        $/;"	m	struct:ble_cgms_s
racp_handles	components\ble\ble_services\ble_cgm\ble_cgm.h	/^    ble_gatts_char_handles_t  racp_handles;                             \/**< Handles related to the Record Access Control Point characteristic. *\/$/;"	m	struct:ble_cgms_s
req_opcode	components\ble\ble_services\ble_cgm\ble_cgm.h	/^    uint8_t req_opcode;                                         \/**< The original opcode for the request to which this response belongs. *\/$/;"	m	struct:__anon57
resp_val	components\ble\ble_services\ble_cgm\ble_cgm.h	/^    uint8_t resp_val[MAX_GLM_LEN-2];                            \/**< Array containing the response value. *\/$/;"	m	struct:__anon57
rsp_code	components\ble\ble_services\ble_cgm\ble_cgm.h	/^    uint8_t rsp_code;                                           \/**< Response code. *\/$/;"	m	struct:__anon57
sample_location	components\ble\ble_services\ble_cgm\ble_cgm.h	/^    uint8_t      sample_location;                               \/**< Sample location *\/    $/;"	m	struct:__anon54
sensor_status_annunciation	components\ble\ble_services\ble_cgm\ble_cgm.h	/^    uint16_t sensor_status_annunciation;                        \/**< Sensor status annunciation *\/$/;"	m	struct:__anon52
service_handle	components\ble\ble_services\ble_cgm\ble_cgm.h	/^    uint16_t                  service_handle;                           \/**< Handle of Glucose Service (as provided by the BLE stack). *\/$/;"	m	struct:ble_cgms_s
sfloat_t	components\ble\ble_services\ble_cgm\ble_cgm.h	/^} sfloat_t;$/;"	t	typeref:struct:__anon49
size_val	components\ble\ble_services\ble_cgm\ble_cgm.h	/^    uint8_t size_val;                                           \/**< Length of the response value. *\/$/;"	m	struct:__anon57
socp_handles	components\ble\ble_services\ble_cgm\ble_cgm.h	/^    ble_gatts_char_handles_t  socp_handles;                             \/**< Handles related to the Sepcific Operations Control Point characteristic. *\/$/;"	m	struct:ble_cgms_s
socp_response	components\ble\ble_services\ble_cgm\ble_cgm.h	/^    ble_socp_rsp_t            socp_response;                            $/;"	m	struct:ble_cgms_s
time_offset	components\ble\ble_services\ble_cgm\ble_cgm.h	/^    uint16_t time_offset;                                       \/**< Time offset *\/$/;"	m	struct:__anon52
type	components\ble\ble_services\ble_cgm\ble_cgm.h	/^    uint8_t      type;                                          \/**< Type *\/$/;"	m	struct:__anon54
ble_cgms_db_init	components\ble\ble_services\ble_cgm\ble_cgm_db.c	/^uint32_t ble_cgms_db_init(void)$/;"	f
ble_cgms_db_num_records_get	components\ble\ble_services\ble_cgm\ble_cgm_db.c	/^uint16_t ble_cgms_db_num_records_get(void)$/;"	f
ble_cgms_db_record_add	components\ble\ble_services\ble_cgm\ble_cgm_db.c	/^uint32_t ble_cgms_db_record_add(ble_cgms_rec_t * p_rec)$/;"	f
ble_cgms_db_record_delete	components\ble\ble_services\ble_cgm\ble_cgm_db.c	/^uint32_t ble_cgms_db_record_delete(uint8_t record_num)$/;"	f
ble_cgms_db_record_get	components\ble\ble_services\ble_cgm\ble_cgm_db.c	/^uint32_t ble_cgms_db_record_get(uint8_t record_num, ble_cgms_rec_t * p_rec)$/;"	f
database_entry_t	components\ble\ble_services\ble_cgm\ble_cgm_db.c	/^} database_entry_t;$/;"	t	typeref:struct:__anon58	file:
in_use_flag	components\ble\ble_services\ble_cgm\ble_cgm_db.c	/^    bool           in_use_flag;$/;"	m	struct:__anon58	file:
m_database	components\ble\ble_services\ble_cgm\ble_cgm_db.c	/^static database_entry_t m_database[BLE_CGMS_DB_MAX_RECORDS];$/;"	v	file:
m_database_crossref	components\ble\ble_services\ble_cgm\ble_cgm_db.c	/^static uint8_t          m_database_crossref[BLE_CGMS_DB_MAX_RECORDS];$/;"	v	file:
m_num_records	components\ble\ble_services\ble_cgm\ble_cgm_db.c	/^static uint16_t         m_num_records;$/;"	v	file:
record	components\ble\ble_services\ble_cgm\ble_cgm_db.c	/^    ble_cgms_rec_t record;$/;"	m	struct:__anon58	file:
sim_database_init	components\ble\ble_services\ble_cgm\ble_cgm_db.c	/^static uint32_t sim_database_init(void)$/;"	f	file:
sim_gls_recs	components\ble\ble_services\ble_cgm\ble_cgm_db.c	/^ble_cgms_rec_t sim_gls_recs[] =$/;"	v
BLE_CGMS_DB_MAX_RECORDS	components\ble\ble_services\ble_cgm\ble_cgm_db.h	30;"	d
BLE_GLS_DB_H__	components\ble\ble_services\ble_cgm\ble_cgm_db.h	25;"	d
CSC_MEAS_FLAG_MASK_CRANK_REV_DATA_PRESENT	components\ble\ble_services\ble_cscs\ble_cscs.c	31;"	d	file:
CSC_MEAS_FLAG_MASK_WHEEL_REV_DATA_PRESENT	components\ble\ble_services\ble_cscs\ble_cscs.c	30;"	d	file:
HANDLE_LENGTH	components\ble\ble_services\ble_cscs\ble_cscs.c	26;"	d	file:
MAX_CSCM_LEN	components\ble\ble_services\ble_cscs\ble_cscs.c	27;"	d	file:
OPCODE_LENGTH	components\ble\ble_services\ble_cscs\ble_cscs.c	25;"	d	file:
ble_cscs_init	components\ble\ble_services\ble_cscs\ble_cscs.c	/^uint32_t ble_cscs_init(ble_cscs_t * p_cscs, const ble_cscs_init_t * p_cscs_init)$/;"	f
ble_cscs_measurement_send	components\ble\ble_services\ble_cscs\ble_cscs.c	/^uint32_t ble_cscs_measurement_send(ble_cscs_t * p_cscs, ble_cscs_meas_t * p_measurement)$/;"	f
ble_cscs_on_ble_evt	components\ble\ble_services\ble_cscs\ble_cscs.c	/^void ble_cscs_on_ble_evt(ble_cscs_t * p_cscs, ble_evt_t * p_ble_evt)$/;"	f
csc_feature_char_add	components\ble\ble_services\ble_cscs\ble_cscs.c	/^static uint32_t csc_feature_char_add(ble_cscs_t * p_cscs, const ble_cscs_init_t * p_cscs_init)$/;"	f	file:
csc_measurement_char_add	components\ble\ble_services\ble_cscs\ble_cscs.c	/^static uint32_t csc_measurement_char_add(ble_cscs_t * p_cscs, const ble_cscs_init_t * p_cscs_init)$/;"	f	file:
csc_measurement_encode	components\ble\ble_services\ble_cscs\ble_cscs.c	/^static uint8_t csc_measurement_encode(ble_cscs_t      * p_cscs,$/;"	f	file:
csc_sensor_loc_char_add	components\ble\ble_services\ble_cscs\ble_cscs.c	/^static uint32_t csc_sensor_loc_char_add(ble_cscs_t * p_cscs, const ble_cscs_init_t * p_cscs_init)$/;"	f	file:
on_connect	components\ble\ble_services\ble_cscs\ble_cscs.c	/^static void on_connect(ble_cscs_t * p_cscs, ble_evt_t * p_ble_evt)$/;"	f	file:
on_disconnect	components\ble\ble_services\ble_cscs\ble_cscs.c	/^static void on_disconnect(ble_cscs_t * p_cscs, ble_evt_t * p_ble_evt)$/;"	f	file:
on_meas_cccd_write	components\ble\ble_services\ble_cscs\ble_cscs.c	/^static void on_meas_cccd_write(ble_cscs_t * p_cscs, ble_gatts_evt_write_t * p_evt_write)$/;"	f	file:
on_write	components\ble\ble_services\ble_cscs\ble_cscs.c	/^static void on_write(ble_cscs_t * p_cscs, ble_evt_t * p_ble_evt)$/;"	f	file:
BLE_CSCS_EVT_NOTIFICATION_DISABLED	components\ble\ble_services\ble_cscs\ble_cscs.h	/^    BLE_CSCS_EVT_NOTIFICATION_DISABLED                                  \/**< Cycling Speed and Cadence value notification disabled event. *\/$/;"	e	enum:__anon59
BLE_CSCS_EVT_NOTIFICATION_ENABLED	components\ble\ble_services\ble_cscs\ble_cscs.h	/^    BLE_CSCS_EVT_NOTIFICATION_ENABLED,                                  \/**< Cycling Speed and Cadence value notification enabled event. *\/$/;"	e	enum:__anon59
BLE_CSCS_FEATURE_CRANK_REV_BIT	components\ble\ble_services\ble_cscs\ble_cscs.h	58;"	d
BLE_CSCS_FEATURE_MULTIPLE_SENSORS_BIT	components\ble\ble_services\ble_cscs\ble_cscs.h	59;"	d
BLE_CSCS_FEATURE_WHEEL_REV_BIT	components\ble\ble_services\ble_cscs\ble_cscs.h	57;"	d
BLE_CSCS_H__	components\ble\ble_services\ble_cscs\ble_cscs.h	46;"	d
ble_cscs_evt_handler_t	components\ble\ble_services\ble_cscs\ble_cscs.h	/^typedef void (*ble_cscs_evt_handler_t) (ble_cscs_t * p_cscs, ble_cscs_evt_t * p_evt);$/;"	t
ble_cscs_evt_t	components\ble\ble_services\ble_cscs\ble_cscs.h	/^} ble_cscs_evt_t;$/;"	t	typeref:struct:__anon60
ble_cscs_evt_type_t	components\ble\ble_services\ble_cscs\ble_cscs.h	/^} ble_cscs_evt_type_t;$/;"	t	typeref:enum:__anon59
ble_cscs_init_t	components\ble\ble_services\ble_cscs\ble_cscs.h	/^} ble_cscs_init_t;$/;"	t	typeref:struct:__anon61
ble_cscs_meas_s	components\ble\ble_services\ble_cscs\ble_cscs.h	/^typedef struct ble_cscs_meas_s$/;"	s
ble_cscs_meas_t	components\ble\ble_services\ble_cscs\ble_cscs.h	/^} ble_cscs_meas_t;$/;"	t	typeref:struct:ble_cscs_meas_s
ble_cscs_s	components\ble\ble_services\ble_cscs\ble_cscs.h	/^struct ble_cscs_s$/;"	s
ble_cscs_t	components\ble\ble_services\ble_cscs\ble_cscs.h	/^typedef struct ble_cscs_s ble_cscs_t;$/;"	t	typeref:struct:ble_cscs_s
conn_handle	components\ble\ble_services\ble_cscs\ble_cscs.h	/^    uint16_t                     conn_handle;                           \/**< Handle of the current connection (as provided by the BLE stack, is BLE_CONN_HANDLE_INVALID if not in a connection). *\/$/;"	m	struct:ble_cscs_s
csc_ctrlpt_attr_md	components\ble\ble_services\ble_cscs\ble_cscs.h	/^    ble_srv_cccd_security_mode_t csc_ctrlpt_attr_md;                    \/**< Initial security level for cycling speed and cadence control point attribute *\/$/;"	m	struct:__anon61
csc_feature_attr_md	components\ble\ble_services\ble_cscs\ble_cscs.h	/^    ble_srv_security_mode_t      csc_feature_attr_md;                   \/**< Initial security level for feature attribute *\/$/;"	m	struct:__anon61
csc_meas_attr_md	components\ble\ble_services\ble_cscs\ble_cscs.h	/^    ble_srv_cccd_security_mode_t csc_meas_attr_md;                      \/**< Initial security level for cycling speed and cadence measurement attribute *\/$/;"	m	struct:__anon61
csc_sensor_loc_attr_md	components\ble\ble_services\ble_cscs\ble_cscs.h	/^    ble_srv_cccd_security_mode_t csc_sensor_loc_attr_md;                \/**< Initial security level for sensor location attribute *\/$/;"	m	struct:__anon61
ctrl_pt	components\ble\ble_services\ble_cscs\ble_cscs.h	/^    ble_sc_ctrlpt_t              ctrl_pt;                               \/**< data for speed and cadence control point *\/$/;"	m	struct:ble_cscs_s
ctrlpt_evt_handler	components\ble\ble_services\ble_cscs\ble_cscs.h	/^    ble_sc_ctrlpt_evt_handler_t  ctrlpt_evt_handler;                    \/**< Event handler *\/$/;"	m	struct:__anon61
ctrplt_supported_functions	components\ble\ble_services\ble_cscs\ble_cscs.h	/^    uint8_t                      ctrplt_supported_functions;            \/**< Supported control point functionalities see @ref BLE_SRV_SC_CTRLPT_SUPP_FUNC. *\/$/;"	m	struct:__anon61
cumulative_crank_revs	components\ble\ble_services\ble_cscs\ble_cscs.h	/^    uint16_t    cumulative_crank_revs;                                  \/**< Cumulative Crank Revolutions. *\/$/;"	m	struct:ble_cscs_meas_s
cumulative_wheel_revs	components\ble\ble_services\ble_cscs\ble_cscs.h	/^    uint32_t    cumulative_wheel_revs;                                  \/**< Cumulative Wheel Revolutions. *\/$/;"	m	struct:ble_cscs_meas_s
error_handler	components\ble\ble_services\ble_cscs\ble_cscs.h	/^    ble_srv_error_handler_t      error_handler;                         \/**< Function to be called in case of an error. *\/$/;"	m	struct:__anon61
evt_handler	components\ble\ble_services\ble_cscs\ble_cscs.h	/^    ble_cscs_evt_handler_t       evt_handler;                           \/**< Event handler to be called for handling events in the Cycling Speed and Cadence Service. *\/$/;"	m	struct:__anon61
evt_handler	components\ble\ble_services\ble_cscs\ble_cscs.h	/^    ble_cscs_evt_handler_t       evt_handler;                           \/**< Event handler to be called for handling events in the Cycling Speed and Cadence Service. *\/$/;"	m	struct:ble_cscs_s
evt_type	components\ble\ble_services\ble_cscs\ble_cscs.h	/^    ble_cscs_evt_type_t evt_type;                                       \/**< Type of event. *\/$/;"	m	struct:__anon60
feature	components\ble\ble_services\ble_cscs\ble_cscs.h	/^    uint16_t                     feature;                               \/**< Bit mask of features available on sensor. *\/$/;"	m	struct:ble_cscs_s
feature	components\ble\ble_services\ble_cscs\ble_cscs.h	/^    uint16_t                     feature;                               \/**< Initial value for features of sensor @ref BLE_CSCS_FEATURES. *\/$/;"	m	struct:__anon61
feature_handles	components\ble\ble_services\ble_cscs\ble_cscs.h	/^    ble_gatts_char_handles_t     feature_handles;                       \/**< Handles related to the Cycling Speed and Cadence feature characteristic. *\/$/;"	m	struct:ble_cscs_s
is_crank_rev_data_present	components\ble\ble_services\ble_cscs\ble_cscs.h	/^    bool        is_crank_rev_data_present;                              \/**< True if Crank Revolution Data is present in the measurement. *\/$/;"	m	struct:ble_cscs_meas_s
is_wheel_rev_data_present	components\ble\ble_services\ble_cscs\ble_cscs.h	/^    bool        is_wheel_rev_data_present;                              \/**< True if Wheel Revolution Data is present in the measurement. *\/$/;"	m	struct:ble_cscs_meas_s
last_crank_event_time	components\ble\ble_services\ble_cscs\ble_cscs.h	/^    uint16_t    last_crank_event_time;                                  \/**< Last Crank Event Time. *\/$/;"	m	struct:ble_cscs_meas_s
last_wheel_event_time	components\ble\ble_services\ble_cscs\ble_cscs.h	/^    uint16_t    last_wheel_event_time;                                  \/**< Last Wheel Event Time. *\/$/;"	m	struct:ble_cscs_meas_s
list_supported_locations	components\ble\ble_services\ble_cscs\ble_cscs.h	/^    ble_sensor_location_t        *list_supported_locations;             \/**< List of supported sensor locations.*\/$/;"	m	struct:__anon61
meas_handles	components\ble\ble_services\ble_cscs\ble_cscs.h	/^    ble_gatts_char_handles_t     meas_handles;                          \/**< Handles related to the Cycling Speed and Cadence Measurement characteristic. *\/$/;"	m	struct:ble_cscs_s
sensor_loc_handles	components\ble\ble_services\ble_cscs\ble_cscs.h	/^    ble_gatts_char_handles_t     sensor_loc_handles;                    \/**< Handles related to the Cycling Speed and Cadence Sensor Location characteristic. *\/$/;"	m	struct:ble_cscs_s
sensor_location	components\ble\ble_services\ble_cscs\ble_cscs.h	/^    ble_sensor_location_t        *sensor_location;                      \/**< Initial Sensor Location, if NULL, sensor_location characteristic is not added*\/$/;"	m	struct:__anon61
service_handle	components\ble\ble_services\ble_cscs\ble_cscs.h	/^    uint16_t                     service_handle;                        \/**< Handle of Cycling Speed and Cadence Service (as provided by the BLE stack). *\/$/;"	m	struct:ble_cscs_s
size_list_supported_locations	components\ble\ble_services\ble_cscs\ble_cscs.h	/^    uint8_t                      size_list_supported_locations;         \/**< Number of supported sensor locations in the list.*\/$/;"	m	struct:__anon61
SC_CTRLPT_NACK_CCCD_IMPROPERLY_CONFIGURED	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.c	26;"	d	file:
SC_CTRLPT_NACK_PROC_ALREADY_IN_PROGRESS	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.c	25;"	d	file:
ble_sc_ctrlpt_init	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.c	/^uint32_t ble_sc_ctrlpt_init(ble_sc_ctrlpt_t            * p_sc_ctrlpt,$/;"	f
ble_sc_ctrlpt_on_ble_evt	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.c	/^void ble_sc_ctrlpt_on_ble_evt(ble_sc_ctrlpt_t * p_sc_ctrlpt, ble_evt_t * p_ble_evt)$/;"	f
ble_sc_ctrlpt_rsp_send	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.c	/^uint32_t ble_sc_ctrlpt_rsp_send(ble_sc_ctrlpt_t * p_sc_ctrlpt, ble_scpt_response_t response_status)$/;"	f
ctrlpt_rsp_encode	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.c	/^static int ctrlpt_rsp_encode(ble_sc_ctrlpt_t     * p_sc_ctrlpt,$/;"	f	file:
is_cccd_configured	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.c	/^static bool is_cccd_configured(ble_sc_ctrlpt_t * p_sc_ctrlpt)$/;"	f	file:
is_location_supported	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.c	/^static bool is_location_supported(ble_sc_ctrlpt_t * p_sc_ctrlpt, ble_sensor_location_t location)$/;"	f	file:
on_connect	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.c	/^static void on_connect(ble_sc_ctrlpt_t * p_sc_ctrlpt, ble_evt_t * p_ble_evt)$/;"	f	file:
on_ctrlpt_write	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.c	/^static void on_ctrlpt_write(ble_sc_ctrlpt_t       * p_sc_ctrlpt,$/;"	f	file:
on_disconnect	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.c	/^static void on_disconnect(ble_sc_ctrlpt_t * p_sc_ctrlpt, ble_evt_t * p_ble_evt)$/;"	f	file:
on_rw_authorize_request	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.c	/^static void on_rw_authorize_request(ble_sc_ctrlpt_t * p_sc_ctrlpt, ble_gatts_evt_t * p_gatts_evt)$/;"	f	file:
on_sc_hvc_confirm	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.c	/^static void on_sc_hvc_confirm(ble_sc_ctrlpt_t * p_sc_ctrlpt, ble_evt_t * p_ble_evt)$/;"	f	file:
on_tx_complete	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.c	/^static void on_tx_complete(ble_sc_ctrlpt_t * p_sc_ctrlpt)$/;"	f	file:
sc_ctrlpt_decode	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.c	/^static uint32_t sc_ctrlpt_decode(uint8_t             * p_rcvd_val,$/;"	f	file:
sc_ctrlpt_resp_send	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.c	/^static void sc_ctrlpt_resp_send(ble_sc_ctrlpt_t * p_sc_ctrlpt)$/;"	f	file:
BLE_SCPT_AUTOMATIC_CALIB_IN_PROGRESS	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^    BLE_SCPT_AUTOMATIC_CALIB_IN_PROGRESS            = 0x01,                               \/**< Automatic Calibration is in progress. *\/$/;"	e	enum:__anon67
BLE_SCPT_INDICATION_PENDING	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^    BLE_SCPT_INDICATION_PENDING                     = 0x02,                               \/**< Control Point Indication is pending. *\/$/;"	e	enum:__anon67
BLE_SCPT_IND_CONFIRM_PENDING	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^    BLE_SCPT_IND_CONFIRM_PENDING                    = 0x03,                               \/**< Waiting for the indication confirmation. *\/$/;"	e	enum:__anon67
BLE_SCPT_INVALID_PARAMETER	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^    BLE_SCPT_INVALID_PARAMETER                      = 0x03,                               \/**< Error Response received parameter invalid. *\/$/;"	e	enum:__anon66
BLE_SCPT_NO_PROC_IN_PROGRESS	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^    BLE_SCPT_NO_PROC_IN_PROGRESS                    = 0x00,                               \/**< No procedure in progress. *\/$/;"	e	enum:__anon67
BLE_SCPT_OPERATION_FAILED	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^    BLE_SCPT_OPERATION_FAILED                       = 0x04,                               \/**< Error Response operation failed. *\/$/;"	e	enum:__anon66
BLE_SCPT_OP_CODE_NOT_SUPPORTED	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^    BLE_SCPT_OP_CODE_NOT_SUPPORTED                  = 0x02,                               \/**< Error Response received opcode not supported. *\/$/;"	e	enum:__anon66
BLE_SCPT_REQUEST_SUPPORTED_SENSOR_LOCATIONS	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^    BLE_SCPT_REQUEST_SUPPORTED_SENSOR_LOCATIONS     = 0x04,                               \/**< Operator to request the supported sensor locations. *\/$/;"	e	enum:__anon65
BLE_SCPT_RESPONSE_CODE	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^    BLE_SCPT_RESPONSE_CODE                          = 0x10,                               \/**< Response Code. *\/$/;"	e	enum:__anon65
BLE_SCPT_SET_CUMULATIVE_VALUE	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^    BLE_SCPT_SET_CUMULATIVE_VALUE                   = 0x01,                               \/**< Operator to set a given cumulative value. *\/$/;"	e	enum:__anon65
BLE_SCPT_START_AUTOMATIC_CALIBRATION	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^    BLE_SCPT_START_AUTOMATIC_CALIBRATION            = 0x02,                               \/**< Operator to start automatic calibration. *\/$/;"	e	enum:__anon65
BLE_SCPT_SUCCESS	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^    BLE_SCPT_SUCCESS                                = 0x01,                               \/**< Sucess Response. *\/$/;"	e	enum:__anon66
BLE_SCPT_UPDATE_SENSOR_LOCATION	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^    BLE_SCPT_UPDATE_SENSOR_LOCATION                 = 0x03,                               \/**< Operator to update the sensor location. *\/$/;"	e	enum:__anon65
BLE_SC_CTRLPT_EVT_SET_CUMUL_VALUE	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^    BLE_SC_CTRLPT_EVT_SET_CUMUL_VALUE,                                                    \/**< rcvd set cumulative value opcode, it is then up to the application to use the new cumulative value. *\/$/;"	e	enum:__anon62
BLE_SC_CTRLPT_EVT_START_CALIBRATION	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^    BLE_SC_CTRLPT_EVT_START_CALIBRATION,                                                  \/**< rcvd start calibration opcode, the application needs, at the end ot the calibration to call ble_sc_ctrlpt_send_rsp. *\/$/;"	e	enum:__anon62
BLE_SC_CTRLPT_EVT_UPDATE_LOCATION	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^    BLE_SC_CTRLPT_EVT_UPDATE_LOCATION,                                                    \/**< rcvd update location opcode (the control point handles the change of location automatically, the event just informs the application in case it needs to adjust its algorithm). *\/$/;"	e	enum:__anon62
BLE_SC_CTRLPT_H__	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	31;"	d
BLE_SC_CTRLPT_MAX_LEN	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	39;"	d
BLE_SC_CTRLPT_MIN_LEN	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	40;"	d
BLE_SRV_SC_CTRLPT_CUM_VAL_OP_SUPPORTED	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	118;"	d
BLE_SRV_SC_CTRLPT_SENSOR_LOCATIONS_OP_SUPPORTED	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	117;"	d
BLE_SRV_SC_CTRLPT_START_CALIB_OP_SUPPORTED	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	119;"	d
SCPT_MAX_RESPONSE_SIZE	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	173;"	d
SCPT_MIN_RESPONSE_SIZE	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	172;"	d
SCPT_OPCODE_POS	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	165;"	d
SCPT_PARAMETER_POS	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	166;"	d
SCPT_RESPONSE_CODE_POS	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	169;"	d
SCPT_RESPONSE_PARAMETER	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	170;"	d
SCPT_RESPONSE_REQUEST_OPCODE_POS	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	168;"	d
ble_cs_ctrlpt_init_t	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^} ble_cs_ctrlpt_init_t;$/;"	t	typeref:struct:__anon70
ble_sc_ctrlpt_evt_handler_t	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^typedef ble_scpt_response_t (*ble_sc_ctrlpt_evt_handler_t) (ble_sc_ctrlpt_t * p_sc_ctrlpt,$/;"	t
ble_sc_ctrlpt_evt_t	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^} ble_sc_ctrlpt_evt_t;$/;"	t	typeref:struct:__anon63
ble_sc_ctrlpt_evt_type_t	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^} ble_sc_ctrlpt_evt_type_t;$/;"	t	typeref:enum:__anon62
ble_sc_ctrlpt_resp_t	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^}ble_sc_ctrlpt_resp_t;$/;"	t	typeref:struct:__anon71
ble_sc_ctrlpt_rsp_t	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^}ble_sc_ctrlpt_rsp_t;$/;"	t	typeref:struct:__anon69
ble_sc_ctrlpt_s	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^struct ble_sc_ctrlpt_s$/;"	s
ble_sc_ctrlpt_t	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^typedef struct ble_sc_ctrlpt_s ble_sc_ctrlpt_t;$/;"	t	typeref:struct:ble_sc_ctrlpt_s
ble_sc_ctrlpt_val_t	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^}ble_sc_ctrlpt_val_t;$/;"	t	typeref:struct:__anon68
ble_scpt_operator_t	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^} ble_scpt_operator_t;$/;"	t	typeref:enum:__anon65
ble_scpt_procedure_status_t	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^}ble_scpt_procedure_status_t;$/;"	t	typeref:enum:__anon67
ble_scpt_response_t	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^} ble_scpt_response_t;$/;"	t	typeref:enum:__anon66
conn_handle	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^    uint16_t                     conn_handle;                                             \/**< Handle of the current connection (as provided by the BLE stack, is BLE_CONN_HANDLE_INVALID if not in a connection). *\/$/;"	m	struct:ble_sc_ctrlpt_s
cumulative_value	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^        uint32_t              cumulative_value;$/;"	m	union:__anon63::__anon64
cumulative_value	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^    uint32_t              cumulative_value;$/;"	m	struct:__anon68
encoded_ctrl_rsp	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^    uint8_t                      encoded_ctrl_rsp[BLE_SC_CTRLPT_MAX_LEN];                 \/**< control point encoded response.*\/$/;"	m	struct:__anon71
error_handler	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^    ble_srv_error_handler_t      error_handler;                                           \/**< Function to be called in case of an error. *\/$/;"	m	struct:__anon70
error_handler	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^    ble_srv_error_handler_t      error_handler;                                           \/**< Function to be called in case of an error. *\/$/;"	m	struct:ble_sc_ctrlpt_s
evt_handler	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^    ble_sc_ctrlpt_evt_handler_t  evt_handler;                                             \/**< Handle of the parent service (as provided by the BLE stack). *\/$/;"	m	struct:ble_sc_ctrlpt_s
evt_handler	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^    ble_sc_ctrlpt_evt_handler_t  evt_handler;                                             \/**< event handler *\/$/;"	m	struct:__anon70
evt_type	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^    ble_sc_ctrlpt_evt_type_t evt_type;                                                    \/**< Type of event. *\/$/;"	m	struct:__anon63
len	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^    uint8_t                      len;                                                     \/**< control point response length .*\/$/;"	m	struct:__anon71
list_supported_locations	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^    ble_sensor_location_t        *list_supported_locations;                               \/**< list of supported sensor locations.*\/$/;"	m	struct:__anon70
list_supported_locations	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^    ble_sensor_location_t        list_supported_locations[BLE_NB_MAX_SENSOR_LOCATIONS];   \/**< list of supported sensor locations.*\/$/;"	m	struct:ble_sc_ctrlpt_s
location	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^    ble_sensor_location_t location;$/;"	m	struct:__anon68
location_list	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^    ble_sensor_location_t location_list[BLE_NB_MAX_SENSOR_LOCATIONS];$/;"	m	struct:__anon69
opcode	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^    ble_scpt_operator_t   opcode;$/;"	m	struct:__anon68
opcode	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^    ble_scpt_operator_t   opcode;$/;"	m	struct:__anon69
params	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^    }params;$/;"	m	struct:__anon63	typeref:union:__anon63::__anon64
procedure_status	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^    ble_scpt_procedure_status_t  procedure_status;                                        \/**< status of possible procedure*\/$/;"	m	struct:ble_sc_ctrlpt_s
response	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^    ble_sc_ctrlpt_resp_t         response;                                                \/**< pending response data.*\/$/;"	m	struct:ble_sc_ctrlpt_s
sc_ctrlpt_attr_md	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^    ble_srv_cccd_security_mode_t sc_ctrlpt_attr_md;                                       \/**< Initial security level for cycling speed and cadence control point attribute *\/$/;"	m	struct:__anon70
sc_ctrlpt_handles	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^    ble_gatts_char_handles_t     sc_ctrlpt_handles;                                       \/**< Handles related to the Speed and Cadence Control Point characteristic. *\/$/;"	m	struct:ble_sc_ctrlpt_s
sensor_location_handle	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^    uint16_t                     sensor_location_handle;                                  \/**< handle for the sensor location characteristic (if sensor_location related operation are supported).*\/$/;"	m	struct:__anon70
sensor_location_handle	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^    uint16_t                     sensor_location_handle;                                  \/**< handle for the sensor location characteristic (if sensor_location related operation are supported).*\/$/;"	m	struct:ble_sc_ctrlpt_s
service_handle	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^    uint16_t                     service_handle;                                          \/**< Handle of the parent service (as provided by the BLE stack). *\/$/;"	m	struct:__anon70
service_handle	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^    uint16_t                     service_handle;                                          \/**< Handle of the parent service (as provided by the BLE stack). *\/$/;"	m	struct:ble_sc_ctrlpt_s
size_list_supported_locations	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^    uint8_t                      size_list_supported_locations;                           \/**< number of supported sensor locations in the list.*\/$/;"	m	struct:__anon70
size_list_supported_locations	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^    uint8_t                      size_list_supported_locations;                           \/**< number of supported sensor locations in the list.*\/$/;"	m	struct:ble_sc_ctrlpt_s
status	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^    ble_scpt_response_t          status;                                                  \/**< control point response status .*\/$/;"	m	struct:__anon71
status	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^    ble_scpt_response_t   status;$/;"	m	struct:__anon69
supported_functions	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^    uint8_t                      supported_functions;                                     \/**< supported control point functionalities see @ref BLE_SRV_SC_CTRLPT_SUPP_FUNC. *\/$/;"	m	struct:__anon70
supported_functions	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^    uint8_t                      supported_functions;                                     \/**< supported control point functionalities see @ref BLE_SRV_SC_CTRLPT_SUPP_FUNC. *\/$/;"	m	struct:ble_sc_ctrlpt_s
update_location	components\ble\ble_services\ble_cscs\ble_sc_ctrlpt.h	/^        ble_sensor_location_t update_location;$/;"	m	union:__anon63::__anon64
CTS_C_CURRENT_TIME_EXPECTED_LENGTH	components\ble\ble_services\ble_cts_c\ble_cts_c.c	27;"	d	file:
CTS_YEAR_MAX	components\ble\ble_services\ble_cts_c\ble_cts_c.c	25;"	d	file:
CTS_YEAR_MIN	components\ble\ble_services\ble_cts_c\ble_cts_c.c	24;"	d	file:
LOG	components\ble\ble_services\ble_cts_c\ble_cts_c.c	23;"	d	file:
ble_cts_c_current_time_read	components\ble\ble_services\ble_cts_c\ble_cts_c.c	/^uint32_t ble_cts_c_current_time_read(ble_cts_c_t const * p_cts)$/;"	f
ble_cts_c_init	components\ble\ble_services\ble_cts_c\ble_cts_c.c	/^uint32_t ble_cts_c_init(ble_cts_c_t * p_cts, ble_cts_c_init_t const * p_cts_init)$/;"	f
ble_cts_c_on_ble_evt	components\ble\ble_services\ble_cts_c\ble_cts_c.c	/^void ble_cts_c_on_ble_evt(ble_cts_c_t * p_cts, ble_evt_t const * p_ble_evt)$/;"	f
current_time_decode	components\ble\ble_services\ble_cts_c\ble_cts_c.c	/^static uint32_t current_time_decode(current_time_char_t * p_time,$/;"	f	file:
current_time_read	components\ble\ble_services\ble_cts_c\ble_cts_c.c	/^static void current_time_read(ble_cts_c_t * p_cts, const ble_evt_t * p_ble_evt)$/;"	f	file:
current_time_validate	components\ble\ble_services\ble_cts_c\ble_cts_c.c	/^static uint32_t current_time_validate(current_time_char_t * p_time)$/;"	f	file:
db_discover_evt_handler	components\ble\ble_services\ble_cts_c\ble_cts_c.c	/^static void db_discover_evt_handler(ble_db_discovery_evt_t * p_evt)$/;"	f	file:
mp_ble_cts	components\ble\ble_services\ble_cts_c\ble_cts_c.c	/^static ble_cts_c_t * mp_ble_cts;              \/**< Pointer to the current instance of the CTS Client module. The memory for this provided by the application.*\/$/;"	v	file:
on_disconnect	components\ble\ble_services\ble_cts_c\ble_cts_c.c	/^static void on_disconnect(ble_cts_c_t * p_cts, ble_evt_t const * p_ble_evt)$/;"	f	file:
BLE_CTS_C_EVT_CURRENT_TIME	components\ble\ble_services\ble_cts_c\ble_cts_c.h	/^    BLE_CTS_C_EVT_CURRENT_TIME,       \/**< A new current time reading has been received. *\/$/;"	e	enum:__anon76
BLE_CTS_C_EVT_DISCONN_COMPLETE	components\ble\ble_services\ble_cts_c\ble_cts_c.h	/^    BLE_CTS_C_EVT_DISCONN_COMPLETE,   \/**< Event indicating that the Current Time Service client module has finished processing the BLE_GAP_EVT_DISCONNECTED event. This event is raised only if a valid instance of the Current Time Service was found at the server. The event can be used by the application to do clean up related to the Current Time Service client.*\/$/;"	e	enum:__anon76
BLE_CTS_C_EVT_DISCOVERY_COMPLETE	components\ble\ble_services\ble_cts_c\ble_cts_c.h	/^    BLE_CTS_C_EVT_DISCOVERY_COMPLETE, \/**< The Current Time Service was found at the peer. *\/$/;"	e	enum:__anon76
BLE_CTS_C_EVT_INVALID_TIME	components\ble\ble_services\ble_cts_c\ble_cts_c.h	/^    BLE_CTS_C_EVT_INVALID_TIME        \/**< The current time value received from the peer is invalid.*\/$/;"	e	enum:__anon76
BLE_CTS_C_EVT_SERVICE_NOT_FOUND	components\ble\ble_services\ble_cts_c\ble_cts_c.h	/^    BLE_CTS_C_EVT_SERVICE_NOT_FOUND,  \/**< The Current Time Service was not found at the peer. *\/$/;"	e	enum:__anon76
BLE_CTS_C_H__	components\ble\ble_services\ble_cts_c\ble_cts_c.h	37;"	d
adjust_reason	components\ble\ble_services\ble_cts_c\ble_cts_c.h	/^    adjust_reason_t  adjust_reason;$/;"	m	struct:__anon75
adjust_reason_t	components\ble\ble_services\ble_cts_c\ble_cts_c.h	/^} adjust_reason_t;$/;"	t	typeref:struct:__anon74
ble_cts_c_evt_handler_t	components\ble\ble_services\ble_cts_c\ble_cts_c.h	/^typedef void (* ble_cts_c_evt_handler_t) (ble_cts_c_t * p_cts, ble_cts_c_evt_t * p_evt);$/;"	t
ble_cts_c_evt_t	components\ble\ble_services\ble_cts_c\ble_cts_c.h	/^} ble_cts_c_evt_t;$/;"	t	typeref:struct:__anon77
ble_cts_c_evt_type_t	components\ble\ble_services\ble_cts_c\ble_cts_c.h	/^} ble_cts_c_evt_type_t;$/;"	t	typeref:enum:__anon76
ble_cts_c_init_t	components\ble\ble_services\ble_cts_c\ble_cts_c.h	/^} ble_cts_c_init_t;$/;"	t	typeref:struct:__anon79
ble_cts_c_is_cts_discovered	components\ble\ble_services\ble_cts_c\ble_cts_c.h	/^static __INLINE bool ble_cts_c_is_cts_discovered(const ble_cts_c_t * p_cts)$/;"	f
ble_cts_c_s	components\ble\ble_services\ble_cts_c\ble_cts_c.h	/^struct ble_cts_c_s$/;"	s
ble_cts_c_t	components\ble\ble_services\ble_cts_c\ble_cts_c.h	/^typedef struct ble_cts_c_s ble_cts_c_t;$/;"	t	typeref:struct:ble_cts_c_s
change_of_daylight_savings_time	components\ble\ble_services\ble_cts_c\ble_cts_c.h	/^    uint8_t change_of_daylight_savings_time : 1;$/;"	m	struct:__anon74
change_of_time_zone	components\ble\ble_services\ble_cts_c\ble_cts_c.h	/^    uint8_t change_of_time_zone             : 1;$/;"	m	struct:__anon74
conn_handle	components\ble\ble_services\ble_cts_c\ble_cts_c.h	/^    uint16_t                conn_handle;         \/**< Handle of the current connection. BLE_CONN_HANDLE_INVALID if not in a connection. *\/$/;"	m	struct:ble_cts_c_s
cts_cccd_handle	components\ble\ble_services\ble_cts_c\ble_cts_c.h	/^    uint16_t                cts_cccd_handle;     \/**< Handle of the CCCD of the Current Time Characteristic at the peer. *\/$/;"	m	struct:ble_cts_c_s
current_time	components\ble\ble_services\ble_cts_c\ble_cts_c.h	/^        current_time_char_t current_time; \/**< Current Time Characteristic data. See @ref BLE_CTS_C_EVT_CURRENT_TIME. *\/$/;"	m	union:__anon77::__anon78
current_time_char_t	components\ble\ble_services\ble_cts_c\ble_cts_c.h	/^} current_time_char_t;$/;"	t	typeref:struct:__anon75
current_time_handle	components\ble\ble_services\ble_cts_c\ble_cts_c.h	/^    uint16_t                current_time_handle; \/**< Handle of Current Time Characteristic at the peer (handles are provided by the BLE stack through the DB Discovery module). *\/$/;"	m	struct:ble_cts_c_s
date_time	components\ble\ble_services\ble_cts_c\ble_cts_c.h	/^    ble_date_time_t date_time;$/;"	m	struct:__anon72
day_date_time	components\ble\ble_services\ble_cts_c\ble_cts_c.h	/^    day_date_time_t day_date_time;$/;"	m	struct:__anon73
day_date_time_t	components\ble\ble_services\ble_cts_c\ble_cts_c.h	/^} day_date_time_t;$/;"	t	typeref:struct:__anon72
day_of_week	components\ble\ble_services\ble_cts_c\ble_cts_c.h	/^    uint8_t         day_of_week;$/;"	m	struct:__anon72
error_handler	components\ble\ble_services\ble_cts_c\ble_cts_c.h	/^    ble_srv_error_handler_t error_handler;       \/**< Function to be called if an error occurs. *\/$/;"	m	struct:ble_cts_c_s
error_handler	components\ble\ble_services\ble_cts_c\ble_cts_c.h	/^    ble_srv_error_handler_t error_handler; \/**< Function to be called if an error occurs. *\/$/;"	m	struct:__anon79
evt_handler	components\ble\ble_services\ble_cts_c\ble_cts_c.h	/^    ble_cts_c_evt_handler_t evt_handler;         \/**< Event handler to be called for handling events from the Current Time Service client. *\/$/;"	m	struct:ble_cts_c_s
evt_handler	components\ble\ble_services\ble_cts_c\ble_cts_c.h	/^    ble_cts_c_evt_handler_t evt_handler;   \/**< Event handler to be called for handling events from the Current Time Service client. *\/$/;"	m	struct:__anon79
evt_type	components\ble\ble_services\ble_cts_c\ble_cts_c.h	/^    ble_cts_c_evt_type_t evt_type; \/**< Type of event. *\/$/;"	m	struct:__anon77
exact_time_256	components\ble\ble_services\ble_cts_c\ble_cts_c.h	/^    exact_time_256_t exact_time_256;$/;"	m	struct:__anon75
exact_time_256_t	components\ble\ble_services\ble_cts_c\ble_cts_c.h	/^} exact_time_256_t;$/;"	t	typeref:struct:__anon73
external_reference_time_update	components\ble\ble_services\ble_cts_c\ble_cts_c.h	/^    uint8_t external_reference_time_update  : 1;$/;"	m	struct:__anon74
fractions256	components\ble\ble_services\ble_cts_c\ble_cts_c.h	/^    uint8_t         fractions256;$/;"	m	struct:__anon73
manual_time_update	components\ble\ble_services\ble_cts_c\ble_cts_c.h	/^    uint8_t manual_time_update              : 1;$/;"	m	struct:__anon74
params	components\ble\ble_services\ble_cts_c\ble_cts_c.h	/^    } params;$/;"	m	struct:__anon77	typeref:union:__anon77::__anon78
MAX_DFU_PKT_LEN	components\ble\ble_services\ble_dfu\ble_dfu.c	24;"	d	file:
MAX_NOTIF_BUFFER_LEN	components\ble\ble_services\ble_dfu\ble_dfu.c	30;"	d	file:
MAX_PKTS_RCPT_NOTIF_LEN	components\ble\ble_services\ble_dfu\ble_dfu.c	28;"	d	file:
MAX_RESPONSE_LEN	components\ble\ble_services\ble_dfu\ble_dfu.c	29;"	d	file:
OP_CODE_ACTIVATE_N_RESET	components\ble\ble_services\ble_dfu\ble_dfu.c	/^    OP_CODE_ACTIVATE_N_RESET   = 5,                                             \/**< Value of the Op code field for 'Activate & Reset' command.*\/$/;"	e	enum:__anon80	file:
OP_CODE_IMAGE_SIZE_REQ	components\ble\ble_services\ble_dfu\ble_dfu.c	/^    OP_CODE_IMAGE_SIZE_REQ     = 7,                                             \/**< Value of the Op code field for 'Report received image size' command.*\/$/;"	e	enum:__anon80	file:
OP_CODE_PKT_RCPT_NOTIF	components\ble\ble_services\ble_dfu\ble_dfu.c	/^    OP_CODE_PKT_RCPT_NOTIF     = 17                                             \/**< Value of the Op code field for 'Packets Receipt Notification'.*\/$/;"	e	enum:__anon80	file:
OP_CODE_PKT_RCPT_NOTIF_REQ	components\ble\ble_services\ble_dfu\ble_dfu.c	/^    OP_CODE_PKT_RCPT_NOTIF_REQ = 8,                                             \/**< Value of the Op code field for 'Request packet receipt notification.*\/$/;"	e	enum:__anon80	file:
OP_CODE_RECEIVE_FW	components\ble\ble_services\ble_dfu\ble_dfu.c	/^    OP_CODE_RECEIVE_FW         = 3,                                             \/**< Value of the Op code field for 'Receive firmware image' command.*\/$/;"	e	enum:__anon80	file:
OP_CODE_RECEIVE_INIT	components\ble\ble_services\ble_dfu\ble_dfu.c	/^    OP_CODE_RECEIVE_INIT       = 2,                                             \/**< Value of the Op code field for 'Initialize DFU parameters' command.*\/$/;"	e	enum:__anon80	file:
OP_CODE_RESPONSE	components\ble\ble_services\ble_dfu\ble_dfu.c	/^    OP_CODE_RESPONSE           = 16,                                            \/**< Value of the Op code field for 'Response.*\/$/;"	e	enum:__anon80	file:
OP_CODE_START_DFU	components\ble\ble_services\ble_dfu\ble_dfu.c	/^    OP_CODE_START_DFU          = 1,                                             \/**< Value of the Op code field for 'Start DFU' command.*\/$/;"	e	enum:__anon80	file:
OP_CODE_SYS_RESET	components\ble\ble_services\ble_dfu\ble_dfu.c	/^    OP_CODE_SYS_RESET          = 6,                                             \/**< Value of the Op code field for 'Reset System' command.*\/$/;"	e	enum:__anon80	file:
OP_CODE_VALIDATE	components\ble\ble_services\ble_dfu\ble_dfu.c	/^    OP_CODE_VALIDATE           = 4,                                             \/**< Value of the Op code field for 'Validate firmware' command.*\/$/;"	e	enum:__anon80	file:
PKT_INIT_DFU_PARAM_LEN	components\ble\ble_services\ble_dfu\ble_dfu.c	26;"	d	file:
PKT_RCPT_NOTIF_REQ_LEN	components\ble\ble_services\ble_dfu\ble_dfu.c	27;"	d	file:
PKT_START_DFU_PARAM_LEN	components\ble\ble_services\ble_dfu\ble_dfu.c	25;"	d	file:
ble_dfu_bytes_rcvd_report	components\ble\ble_services\ble_dfu\ble_dfu.c	/^uint32_t ble_dfu_bytes_rcvd_report(ble_dfu_t * p_dfu, uint32_t num_of_firmware_bytes_rcvd)$/;"	f
ble_dfu_init	components\ble\ble_services\ble_dfu\ble_dfu.c	/^uint32_t ble_dfu_init(ble_dfu_t * p_dfu, ble_dfu_init_t * p_dfu_init)$/;"	f
ble_dfu_on_ble_evt	components\ble\ble_services\ble_dfu\ble_dfu.c	/^void ble_dfu_on_ble_evt(ble_dfu_t * p_dfu, ble_evt_t * p_ble_evt)$/;"	f
ble_dfu_pkts_rcpt_notify	components\ble\ble_services\ble_dfu\ble_dfu.c	/^uint32_t ble_dfu_pkts_rcpt_notify(ble_dfu_t * p_dfu, uint32_t num_of_firmware_bytes_rcvd)$/;"	f
ble_dfu_response_send	components\ble\ble_services\ble_dfu\ble_dfu.c	/^uint32_t ble_dfu_response_send(ble_dfu_t         * p_dfu,$/;"	f
dfu_ctrl_pt_add	components\ble\ble_services\ble_dfu\ble_dfu.c	/^static uint32_t dfu_ctrl_pt_add(ble_dfu_t * const p_dfu)$/;"	f	file:
dfu_pkt_char_add	components\ble\ble_services\ble_dfu\ble_dfu.c	/^static uint32_t dfu_pkt_char_add(ble_dfu_t * const p_dfu)$/;"	f	file:
dfu_rev_char_add	components\ble\ble_services\ble_dfu\ble_dfu.c	/^static uint32_t dfu_rev_char_add(ble_dfu_t * const p_dfu, ble_dfu_init_t const * const p_dfu_init)$/;"	f	file:
is_cccd_configured	components\ble\ble_services\ble_dfu\ble_dfu.c	/^static bool is_cccd_configured(ble_dfu_t * p_dfu)$/;"	f	file:
m_is_dfu_service_initialized	components\ble\ble_services\ble_dfu\ble_dfu.c	/^static bool     m_is_dfu_service_initialized = false;                           \/**< Variable to check if the DFU service was initialized by the application.*\/$/;"	v	file:
m_notif_buffer	components\ble\ble_services\ble_dfu\ble_dfu.c	/^static uint8_t  m_notif_buffer[MAX_NOTIF_BUFFER_LEN];                           \/**< Buffer used for sending notifications to peer. *\/$/;"	v	file:
on_connect	components\ble\ble_services\ble_dfu\ble_dfu.c	/^static void on_connect(ble_dfu_t * p_dfu, ble_evt_t * p_ble_evt)$/;"	f	file:
on_ctrl_pt_write	components\ble\ble_services\ble_dfu\ble_dfu.c	/^static uint32_t on_ctrl_pt_write(ble_dfu_t * p_dfu, ble_gatts_evt_write_t * p_ble_write_evt)$/;"	f	file:
on_disconnect	components\ble\ble_services\ble_dfu\ble_dfu.c	/^static void on_disconnect(ble_dfu_t * p_dfu, ble_evt_t * p_ble_evt)$/;"	f	file:
on_rw_authorize_req	components\ble\ble_services\ble_dfu\ble_dfu.c	/^static void on_rw_authorize_req(ble_dfu_t * p_dfu, ble_evt_t * p_ble_evt)$/;"	f	file:
on_write	components\ble\ble_services\ble_dfu\ble_dfu.c	/^static void on_write(ble_dfu_t * p_dfu, ble_evt_t * p_ble_evt)$/;"	f	file:
BLE_DFU_ACTIVATE_N_RESET	components\ble\ble_services\ble_dfu\ble_dfu.h	/^    BLE_DFU_ACTIVATE_N_RESET,                                           \/**< The event indicating that the peer wants the application to undergo activate new firmware and restart with new valid application *\/$/;"	e	enum:__anon81
BLE_DFU_BYTES_RECEIVED_SEND	components\ble\ble_services\ble_dfu\ble_dfu.h	/^    BLE_DFU_BYTES_RECEIVED_SEND                                         \/**< The event indicating that the peer is requesting for the number of bytes of firmware data last received by the application. It is the responsibility of the application to call @ref ble_dfu_pkts_rcpt_notify in response to this event. *\/$/;"	e	enum:__anon81
BLE_DFU_CTRL_PT_UUID	components\ble\ble_services\ble_dfu\ble_dfu.h	38;"	d
BLE_DFU_H__	components\ble\ble_services\ble_dfu\ble_dfu.h	28;"	d
BLE_DFU_INIT_PROCEDURE	components\ble\ble_services\ble_dfu\ble_dfu.h	/^    BLE_DFU_INIT_PROCEDURE         = 2,                                 \/**< DFU Initialization procedure.*\/$/;"	e	enum:__anon82
BLE_DFU_PACKET_WRITE	components\ble\ble_services\ble_dfu\ble_dfu.h	/^    BLE_DFU_PACKET_WRITE,                                               \/**< The event indicating that the peer has written a value to the 'DFU Packet' characteristic. The data received from the peer will be present in the @ref BLE_DFU_PACKET_WRITE element contained within @ref ble_dfu_evt_t.*\/$/;"	e	enum:__anon81
BLE_DFU_PKT_CHAR_UUID	components\ble\ble_services\ble_dfu\ble_dfu.h	37;"	d
BLE_DFU_PKT_RCPT_NOTIF_DISABLED	components\ble\ble_services\ble_dfu\ble_dfu.h	/^    BLE_DFU_PKT_RCPT_NOTIF_DISABLED,                                    \/**< The event indicating that the peer has disabled the packet receipt notifications.*\/$/;"	e	enum:__anon81
BLE_DFU_PKT_RCPT_NOTIF_ENABLED	components\ble\ble_services\ble_dfu\ble_dfu.h	/^    BLE_DFU_PKT_RCPT_NOTIF_ENABLED,                                     \/**< The event indicating that the peer has enabled packet receipt notifications. It is the responsibility of the application to call @ref ble_dfu_pkts_rcpt_notify each time the number of packets indicated by num_of_pkts field in @ref ble_dfu_evt_t is received.*\/$/;"	e	enum:__anon81
BLE_DFU_PKT_RCPT_REQ_PROCEDURE	components\ble\ble_services\ble_dfu\ble_dfu.h	/^    BLE_DFU_PKT_RCPT_REQ_PROCEDURE = 8                                  \/**< Packet receipt notification request procedure. *\/$/;"	e	enum:__anon82
BLE_DFU_RECEIVE_APP_DATA	components\ble\ble_services\ble_dfu\ble_dfu.h	/^    BLE_DFU_RECEIVE_APP_DATA,                                           \/**< The event indicating that the peer wants the application to prepare to receive the new firmware image. *\/$/;"	e	enum:__anon81
BLE_DFU_RECEIVE_APP_PROCEDURE	components\ble\ble_services\ble_dfu\ble_dfu.h	/^    BLE_DFU_RECEIVE_APP_PROCEDURE  = 3,                                 \/**< Firmware receiving procedure.*\/$/;"	e	enum:__anon82
BLE_DFU_RECEIVE_INIT_DATA	components\ble\ble_services\ble_dfu\ble_dfu.h	/^    BLE_DFU_RECEIVE_INIT_DATA,                                          \/**< The event indicating that the peer wants the application to prepare to receive init parameters. *\/$/;"	e	enum:__anon81
BLE_DFU_RESP_VAL_CRC_ERROR	components\ble\ble_services\ble_dfu\ble_dfu.h	/^    BLE_DFU_RESP_VAL_CRC_ERROR,                                         \/**< CRC Error.*\/$/;"	e	enum:__anon83
BLE_DFU_RESP_VAL_DATA_SIZE	components\ble\ble_services\ble_dfu\ble_dfu.h	/^    BLE_DFU_RESP_VAL_DATA_SIZE,                                         \/**< Data size exceeds limit.*\/$/;"	e	enum:__anon83
BLE_DFU_RESP_VAL_INVALID_STATE	components\ble\ble_services\ble_dfu\ble_dfu.h	/^    BLE_DFU_RESP_VAL_INVALID_STATE,                                     \/**< Invalid state.*\/$/;"	e	enum:__anon83
BLE_DFU_RESP_VAL_NOT_SUPPORTED	components\ble\ble_services\ble_dfu\ble_dfu.h	/^    BLE_DFU_RESP_VAL_NOT_SUPPORTED,                                     \/**< Operation not supported.*\/$/;"	e	enum:__anon83
BLE_DFU_RESP_VAL_OPER_FAILED	components\ble\ble_services\ble_dfu\ble_dfu.h	/^    BLE_DFU_RESP_VAL_OPER_FAILED                                        \/**< Operation failed.*\/$/;"	e	enum:__anon83
BLE_DFU_RESP_VAL_SUCCESS	components\ble\ble_services\ble_dfu\ble_dfu.h	/^    BLE_DFU_RESP_VAL_SUCCESS = 1,                                       \/**< Success.*\/$/;"	e	enum:__anon83
BLE_DFU_REV_CHAR_UUID	components\ble\ble_services\ble_dfu\ble_dfu.h	40;"	d
BLE_DFU_SERVICE_UUID	components\ble\ble_services\ble_dfu\ble_dfu.h	36;"	d
BLE_DFU_START	components\ble\ble_services\ble_dfu\ble_dfu.h	/^    BLE_DFU_START,                                                      \/**< The event indicating that the peer wants the application to prepare for a new firmware update. *\/$/;"	e	enum:__anon81
BLE_DFU_START_PROCEDURE	components\ble\ble_services\ble_dfu\ble_dfu.h	/^    BLE_DFU_START_PROCEDURE        = 1,                                 \/**< DFU Start procedure.*\/$/;"	e	enum:__anon82
BLE_DFU_STATUS_REP_UUID	components\ble\ble_services\ble_dfu\ble_dfu.h	39;"	d
BLE_DFU_SYS_RESET	components\ble\ble_services\ble_dfu\ble_dfu.h	/^    BLE_DFU_SYS_RESET,                                                  \/**< The event indicating that the peer wants the application to undergo a reset and start the currently valid application image.*\/$/;"	e	enum:__anon81
BLE_DFU_VALIDATE	components\ble\ble_services\ble_dfu\ble_dfu.h	/^    BLE_DFU_VALIDATE,                                                   \/**< The event indicating that the peer wants the application to validate the newly received firmware image. *\/$/;"	e	enum:__anon81
BLE_DFU_VALIDATE_PROCEDURE	components\ble\ble_services\ble_dfu\ble_dfu.h	/^    BLE_DFU_VALIDATE_PROCEDURE     = 4,                                 \/**< Firmware image validation procedure .*\/$/;"	e	enum:__anon82
ble_dfu_evt_handler_t	components\ble\ble_services\ble_dfu\ble_dfu.h	/^typedef void (*ble_dfu_evt_handler_t) (ble_dfu_t * p_dfu, ble_dfu_evt_t * p_evt);$/;"	t
ble_dfu_evt_t	components\ble\ble_services\ble_dfu\ble_dfu.h	/^} ble_dfu_evt_t;$/;"	t	typeref:struct:__anon86
ble_dfu_evt_type	components\ble\ble_services\ble_dfu\ble_dfu.h	/^    ble_dfu_evt_type_t           ble_dfu_evt_type;                      \/**< Type of the event.*\/$/;"	m	struct:__anon86
ble_dfu_evt_type_t	components\ble\ble_services\ble_dfu\ble_dfu.h	/^} ble_dfu_evt_type_t;$/;"	t	typeref:enum:__anon81
ble_dfu_init_t	components\ble\ble_services\ble_dfu\ble_dfu.h	/^} ble_dfu_init_t;$/;"	t	typeref:struct:__anon88
ble_dfu_pkt_write	components\ble\ble_services\ble_dfu\ble_dfu.h	/^        ble_dfu_pkt_write_t      ble_dfu_pkt_write;                     \/**< The DFU packet received. This field is when the @ref ble_dfu_evt_type field is set to @ref BLE_DFU_PACKET_WRITE.*\/$/;"	m	union:__anon86::__anon87
ble_dfu_pkt_write_t	components\ble\ble_services\ble_dfu\ble_dfu.h	/^} ble_dfu_pkt_write_t;$/;"	t	typeref:struct:__anon84
ble_dfu_procedure_t	components\ble\ble_services\ble_dfu\ble_dfu.h	/^} ble_dfu_procedure_t;$/;"	t	typeref:enum:__anon82
ble_dfu_resp_val_t	components\ble\ble_services\ble_dfu\ble_dfu.h	/^} ble_dfu_resp_val_t;$/;"	t	typeref:enum:__anon83
ble_dfu_s	components\ble\ble_services\ble_dfu\ble_dfu.h	/^struct ble_dfu_s$/;"	s
ble_dfu_t	components\ble\ble_services\ble_dfu\ble_dfu.h	/^typedef struct ble_dfu_s ble_dfu_t;$/;"	t	typeref:struct:ble_dfu_s
ble_pkt_rcpt_notif_req_t	components\ble\ble_services\ble_dfu\ble_dfu.h	/^} ble_pkt_rcpt_notif_req_t;$/;"	t	typeref:struct:__anon85
conn_handle	components\ble\ble_services\ble_dfu\ble_dfu.h	/^    uint16_t                     conn_handle;                           \/**< Handle of the current connection (as provided by the S110 SoftDevice). This will be BLE_CONN_HANDLE_INVALID when not in a connection. *\/$/;"	m	struct:ble_dfu_s
dfu_ctrl_pt_handles	components\ble\ble_services\ble_dfu\ble_dfu.h	/^    ble_gatts_char_handles_t     dfu_ctrl_pt_handles;                   \/**< Handles related to the DFU Control Point characteristic. *\/$/;"	m	struct:ble_dfu_s
dfu_pkt_handles	components\ble\ble_services\ble_dfu\ble_dfu.h	/^    ble_gatts_char_handles_t     dfu_pkt_handles;                       \/**< Handles related to the DFU Packet characteristic. *\/$/;"	m	struct:ble_dfu_s
dfu_rev_handles	components\ble\ble_services\ble_dfu\ble_dfu.h	/^    ble_gatts_char_handles_t     dfu_rev_handles;                       \/**< Handles related to the DFU Revision characteristic. *\/$/;"	m	struct:ble_dfu_s
dfu_status_rep_handles	components\ble\ble_services\ble_dfu\ble_dfu.h	/^    ble_gatts_char_handles_t     dfu_status_rep_handles;                \/**< Handles related to the DFU Status Report characteristic. *\/$/;"	m	struct:ble_dfu_s
error_handler	components\ble\ble_services\ble_dfu\ble_dfu.h	/^    ble_srv_error_handler_t      error_handler;                         \/**< Function to be called in case of an error. *\/$/;"	m	struct:__anon88
error_handler	components\ble\ble_services\ble_dfu\ble_dfu.h	/^    ble_srv_error_handler_t      error_handler;                         \/**< Function to be called in case of an error. *\/$/;"	m	struct:ble_dfu_s
evt	components\ble\ble_services\ble_dfu\ble_dfu.h	/^    } evt;$/;"	m	struct:__anon86	typeref:union:__anon86::__anon87
evt_handler	components\ble\ble_services\ble_dfu\ble_dfu.h	/^    ble_dfu_evt_handler_t        evt_handler;                           \/**< Event handler to be called for handling events in the Device Firmware Update Service. *\/$/;"	m	struct:__anon88
evt_handler	components\ble\ble_services\ble_dfu\ble_dfu.h	/^    ble_dfu_evt_handler_t        evt_handler;                           \/**< The event handler to be called when an event is to be sent to the application.*\/$/;"	m	struct:ble_dfu_s
len	components\ble\ble_services\ble_dfu\ble_dfu.h	/^    uint8_t                      len;                                   \/**< Length of the packet received. *\/$/;"	m	struct:__anon84
num_of_pkts	components\ble\ble_services\ble_dfu\ble_dfu.h	/^    uint16_t                     num_of_pkts;                           \/**< The number of packets of firmware data to be received by application before sending the next Packet Receipt Notification to the peer. *\/$/;"	m	struct:__anon85
p_data	components\ble\ble_services\ble_dfu\ble_dfu.h	/^    uint8_t *                    p_data;                                \/**< Pointer to the received packet. This will point to a word aligned memory location.*\/$/;"	m	struct:__anon84
pkt_rcpt_notif_req	components\ble\ble_services\ble_dfu\ble_dfu.h	/^        ble_pkt_rcpt_notif_req_t pkt_rcpt_notif_req;                    \/**< Packet receipt notification request. This field is when the @ref ble_dfu_evt_type field is set to @ref BLE_DFU_PKT_RCPT_NOTIF_ENABLED.*\/$/;"	m	union:__anon86::__anon87
revision	components\ble\ble_services\ble_dfu\ble_dfu.h	/^    uint16_t                     revision;                              \/**< Handle of DFU Service (as provided by the S110 SoftDevice). *\/$/;"	m	struct:ble_dfu_s
revision	components\ble\ble_services\ble_dfu\ble_dfu.h	/^    uint16_t                     revision;                              \/**< Revision number to be exposed by the DFU service. *\/$/;"	m	struct:__anon88
service_handle	components\ble\ble_services\ble_dfu\ble_dfu.h	/^    uint16_t                     service_handle;                        \/**< Handle of DFU Service (as provided by the S110 SoftDevice). *\/$/;"	m	struct:ble_dfu_s
uuid_type	components\ble\ble_services\ble_dfu\ble_dfu.h	/^    uint8_t                      uuid_type;                             \/**< UUID type assigned for DFU Service by the S110 SoftDevice. *\/$/;"	m	struct:ble_dfu_s
BLE_DIS_PNP_ID_LEN	components\ble\ble_services\ble_dis\ble_dis.c	30;"	d	file:
BLE_DIS_SYS_ID_LEN	components\ble\ble_services\ble_dis\ble_dis.c	29;"	d	file:
ble_dis_init	components\ble\ble_services\ble_dis\ble_dis.c	/^uint32_t ble_dis_init(const ble_dis_init_t * p_dis_init)$/;"	f
char_add	components\ble\ble_services\ble_dis\ble_dis.c	/^static uint32_t char_add(uint16_t                        uuid,$/;"	f	file:
fw_rev_handles	components\ble\ble_services\ble_dis\ble_dis.c	/^static ble_gatts_char_handles_t fw_rev_handles;$/;"	v	file:
hw_rev_handles	components\ble\ble_services\ble_dis\ble_dis.c	/^static ble_gatts_char_handles_t hw_rev_handles;$/;"	v	file:
manufact_name_handles	components\ble\ble_services\ble_dis\ble_dis.c	/^static ble_gatts_char_handles_t manufact_name_handles;$/;"	v	file:
model_num_handles	components\ble\ble_services\ble_dis\ble_dis.c	/^static ble_gatts_char_handles_t model_num_handles;$/;"	v	file:
pnp_id_encode	components\ble\ble_services\ble_dis\ble_dis.c	/^static void pnp_id_encode(uint8_t * p_encoded_buffer, const ble_dis_pnp_id_t * p_pnp_id)$/;"	f	file:
pnp_id_handles	components\ble\ble_services\ble_dis\ble_dis.c	/^static ble_gatts_char_handles_t pnp_id_handles;$/;"	v	file:
reg_cert_data_list_handles	components\ble\ble_services\ble_dis\ble_dis.c	/^static ble_gatts_char_handles_t reg_cert_data_list_handles;$/;"	v	file:
serial_num_handles	components\ble\ble_services\ble_dis\ble_dis.c	/^static ble_gatts_char_handles_t serial_num_handles;$/;"	v	file:
service_handle	components\ble\ble_services\ble_dis\ble_dis.c	/^static uint16_t                 service_handle;$/;"	v	file:
sw_rev_handles	components\ble\ble_services\ble_dis\ble_dis.c	/^static ble_gatts_char_handles_t sw_rev_handles;$/;"	v	file:
sys_id_encode	components\ble\ble_services\ble_dis\ble_dis.c	/^static void sys_id_encode(uint8_t * p_encoded_buffer, const ble_dis_sys_id_t * p_sys_id)$/;"	f	file:
sys_id_handles	components\ble\ble_services\ble_dis\ble_dis.c	/^static ble_gatts_char_handles_t sys_id_handles;$/;"	v	file:
BLE_DIS_H__	components\ble\ble_services\ble_dis\ble_dis.h	30;"	d
BLE_DIS_VENDOR_ID_SRC_BLUETOOTH_SIG	components\ble\ble_services\ble_dis\ble_dis.h	38;"	d
BLE_DIS_VENDOR_ID_SRC_USB_IMPL_FORUM	components\ble\ble_services\ble_dis\ble_dis.h	39;"	d
ble_dis_init_t	components\ble\ble_services\ble_dis\ble_dis.h	/^} ble_dis_init_t;$/;"	t	typeref:struct:__anon92
ble_dis_pnp_id_t	components\ble\ble_services\ble_dis\ble_dis.h	/^} ble_dis_pnp_id_t;$/;"	t	typeref:struct:__anon91
ble_dis_reg_cert_data_list_t	components\ble\ble_services\ble_dis\ble_dis.h	/^} ble_dis_reg_cert_data_list_t;$/;"	t	typeref:struct:__anon90
ble_dis_sys_id_t	components\ble\ble_services\ble_dis\ble_dis.h	/^} ble_dis_sys_id_t;$/;"	t	typeref:struct:__anon89
dis_attr_md	components\ble\ble_services\ble_dis\ble_dis.h	/^    ble_srv_security_mode_t        dis_attr_md;                 \/**< Initial Security Setting for Device Information Characteristics. *\/$/;"	m	struct:__anon92
fw_rev_str	components\ble\ble_services\ble_dis\ble_dis.h	/^    ble_srv_utf8_str_t             fw_rev_str;                  \/**< Firmware Revision String. *\/$/;"	m	struct:__anon92
hw_rev_str	components\ble\ble_services\ble_dis\ble_dis.h	/^    ble_srv_utf8_str_t             hw_rev_str;                  \/**< Hardware Revision String. *\/$/;"	m	struct:__anon92
list_len	components\ble\ble_services\ble_dis\ble_dis.h	/^    uint8_t    list_len;                                        \/**< Length of the byte array. *\/$/;"	m	struct:__anon90
manufact_name_str	components\ble\ble_services\ble_dis\ble_dis.h	/^    ble_srv_utf8_str_t             manufact_name_str;           \/**< Manufacturer Name String. *\/$/;"	m	struct:__anon92
manufacturer_id	components\ble\ble_services\ble_dis\ble_dis.h	/^    uint64_t manufacturer_id;                                   \/**< Manufacturer ID. Only 5 LSOs shall be used. *\/$/;"	m	struct:__anon89
model_num_str	components\ble\ble_services\ble_dis\ble_dis.h	/^    ble_srv_utf8_str_t             model_num_str;               \/**< Model Number String. *\/$/;"	m	struct:__anon92
organizationally_unique_id	components\ble\ble_services\ble_dis\ble_dis.h	/^    uint32_t organizationally_unique_id;                        \/**< Organizationally unique ID. Only 3 LSOs shall be used. *\/$/;"	m	struct:__anon89
p_list	components\ble\ble_services\ble_dis\ble_dis.h	/^    uint8_t *  p_list;                                          \/**< Pointer the byte array containing the encoded opaque structure based on IEEE 11073-20601 specification. *\/$/;"	m	struct:__anon90
p_pnp_id	components\ble\ble_services\ble_dis\ble_dis.h	/^    ble_dis_pnp_id_t *             p_pnp_id;                    \/**< PnP ID. *\/$/;"	m	struct:__anon92
p_reg_cert_data_list	components\ble\ble_services\ble_dis\ble_dis.h	/^    ble_dis_reg_cert_data_list_t * p_reg_cert_data_list;        \/**< IEEE 11073-20601 Regulatory Certification Data List. *\/$/;"	m	struct:__anon92
p_sys_id	components\ble\ble_services\ble_dis\ble_dis.h	/^    ble_dis_sys_id_t *             p_sys_id;                    \/**< System ID. *\/$/;"	m	struct:__anon92
product_id	components\ble\ble_services\ble_dis\ble_dis.h	/^    uint16_t product_id;                                        \/**< Product ID. *\/$/;"	m	struct:__anon91
product_version	components\ble\ble_services\ble_dis\ble_dis.h	/^    uint16_t product_version;                                   \/**< Product Version. *\/$/;"	m	struct:__anon91
serial_num_str	components\ble\ble_services\ble_dis\ble_dis.h	/^    ble_srv_utf8_str_t             serial_num_str;              \/**< Serial Number String. *\/$/;"	m	struct:__anon92
sw_rev_str	components\ble\ble_services\ble_dis\ble_dis.h	/^    ble_srv_utf8_str_t             sw_rev_str;                  \/**< Software Revision String. *\/$/;"	m	struct:__anon92
vendor_id	components\ble\ble_services\ble_dis\ble_dis.h	/^    uint16_t vendor_id;                                         \/**< Vendor ID. *\/$/;"	m	struct:__anon91
vendor_id_source	components\ble\ble_services\ble_dis\ble_dis.h	/^    uint8_t  vendor_id_source;                                  \/**< Vendor ID Source. see @ref DIS_VENDOR_ID_SRC_VALUES. *\/$/;"	m	struct:__anon91
GLS_NACK_CCCD_IMPROPERLY_CONFIGURED	components\ble\ble_services\ble_gls\ble_gls.c	34;"	d	file:
GLS_NACK_PROC_ALREADY_IN_PROGRESS	components\ble\ble_services\ble_gls\ble_gls.c	33;"	d	file:
HANDLE_LENGTH	components\ble\ble_services\ble_gls\ble_gls.c	30;"	d	file:
MAX_GLM_LEN	components\ble\ble_services\ble_gls\ble_gls.c	31;"	d	file:
OPCODE_LENGTH	components\ble\ble_services\ble_gls\ble_gls.c	29;"	d	file:
OPERAND_FILTER_TYPE_FACING_TIME	components\ble\ble_services\ble_gls\ble_gls.c	25;"	d	file:
OPERAND_FILTER_TYPE_RFU_END	components\ble\ble_services\ble_gls\ble_gls.c	27;"	d	file:
OPERAND_FILTER_TYPE_RFU_START	components\ble\ble_services\ble_gls\ble_gls.c	26;"	d	file:
OPERAND_FILTER_TYPE_SEQ_NUM	components\ble\ble_services\ble_gls\ble_gls.c	24;"	d	file:
STATE_NO_COMM	components\ble\ble_services\ble_gls\ble_gls.c	/^    STATE_NO_COMM,                                                     \/**< The service is not in a communicating state. *\/$/;"	e	enum:__anon93	file:
STATE_RACP_PROC_ACTIVE	components\ble\ble_services\ble_gls\ble_gls.c	/^    STATE_RACP_PROC_ACTIVE,                                            \/**< Processing requested data. *\/$/;"	e	enum:__anon93	file:
STATE_RACP_RESPONSE_IND_VERIF	components\ble\ble_services\ble_gls\ble_gls.c	/^    STATE_RACP_RESPONSE_IND_VERIF                                      \/**< Waiting for a verification of a RACP indication. *\/$/;"	e	enum:__anon93	file:
STATE_RACP_RESPONSE_PENDING	components\ble\ble_services\ble_gls\ble_gls.c	/^    STATE_RACP_RESPONSE_PENDING,                                       \/**< There is a RACP indication waiting to be sent. *\/$/;"	e	enum:__anon93	file:
ble_gls_are_cccd_configured	components\ble\ble_services\ble_gls\ble_gls.c	/^uint32_t ble_gls_are_cccd_configured(ble_gls_t * p_gls, bool * p_are_cccd_configured)$/;"	f
ble_gls_glucose_new_meas	components\ble\ble_services\ble_gls\ble_gls.c	/^uint32_t ble_gls_glucose_new_meas(ble_gls_t * p_gls, ble_gls_rec_t * p_rec)$/;"	f
ble_gls_init	components\ble\ble_services\ble_gls\ble_gls.c	/^uint32_t ble_gls_init(ble_gls_t * p_gls, const ble_gls_init_t * p_gls_init)$/;"	f
ble_gls_on_ble_evt	components\ble\ble_services\ble_gls\ble_gls.c	/^void ble_gls_on_ble_evt(ble_gls_t * p_gls, ble_evt_t * p_ble_evt)$/;"	f
gls_meas_encode	components\ble\ble_services\ble_gls\ble_gls.c	/^static uint8_t gls_meas_encode(const ble_gls_meas_t * p_meas, uint8_t * p_encoded_buffer)$/;"	f	file:
gls_state_t	components\ble\ble_services\ble_gls\ble_gls.c	/^} gls_state_t;$/;"	t	typeref:enum:__anon93	file:
glucose_feature_char_add	components\ble\ble_services\ble_gls\ble_gls.c	/^static uint32_t glucose_feature_char_add(ble_gls_t * p_gls)$/;"	f	file:
glucose_meas_send	components\ble\ble_services\ble_gls\ble_gls.c	/^static uint32_t glucose_meas_send(ble_gls_t * p_gls, ble_gls_rec_t * p_rec)$/;"	f	file:
glucose_measurement_char_add	components\ble\ble_services\ble_gls\ble_gls.c	/^static uint32_t glucose_measurement_char_add(ble_gls_t * p_gls)$/;"	f	file:
is_request_to_be_executed	components\ble\ble_services\ble_gls\ble_gls.c	/^static bool is_request_to_be_executed(const ble_racp_value_t * p_racp_request,$/;"	f	file:
m_gls_state	components\ble\ble_services\ble_gls\ble_gls.c	/^static gls_state_t      m_gls_state;                                   \/**< Current communication state. *\/$/;"	v	file:
m_next_seq_num	components\ble\ble_services\ble_gls\ble_gls.c	/^static uint16_t         m_next_seq_num;                                \/**< Sequence number of the next database record. *\/$/;"	v	file:
m_pending_racp_response	components\ble\ble_services\ble_gls\ble_gls.c	/^static ble_racp_value_t m_pending_racp_response;                       \/**< RACP response to be sent. *\/$/;"	v	file:
m_pending_racp_response_operand	components\ble\ble_services\ble_gls\ble_gls.c	/^static uint8_t          m_pending_racp_response_operand[2];            \/**< Operand of RACP response to be sent. *\/$/;"	v	file:
m_racp_proc_operator	components\ble\ble_services\ble_gls\ble_gls.c	/^static uint8_t          m_racp_proc_operator;                          \/**< Operator of current request. *\/$/;"	v	file:
m_racp_proc_record_ndx	components\ble\ble_services\ble_gls\ble_gls.c	/^static uint8_t          m_racp_proc_record_ndx;                        \/**< Current record index. *\/$/;"	v	file:
m_racp_proc_records_reported	components\ble\ble_services\ble_gls\ble_gls.c	/^static uint8_t          m_racp_proc_records_reported;                  \/**< Number of reported records. *\/$/;"	v	file:
m_racp_proc_records_reported_since_txcomplete	components\ble\ble_services\ble_gls\ble_gls.c	/^static uint8_t          m_racp_proc_records_reported_since_txcomplete; \/**< Number of reported records since last TX_COMPLETE event. *\/$/;"	v	file:
m_racp_proc_seq_num	components\ble\ble_services\ble_gls\ble_gls.c	/^static uint16_t         m_racp_proc_seq_num;                           \/**< Sequence number of current request. *\/$/;"	v	file:
next_sequence_number_set	components\ble\ble_services\ble_gls\ble_gls.c	/^static uint32_t next_sequence_number_set(void)$/;"	f	file:
on_glm_cccd_write	components\ble\ble_services\ble_gls\ble_gls.c	/^static void on_glm_cccd_write(ble_gls_t * p_gls, ble_gatts_evt_write_t * p_evt_write)$/;"	f	file:
on_hvc	components\ble\ble_services\ble_gls\ble_gls.c	/^static void on_hvc(ble_gls_t * p_gls, ble_evt_t * p_ble_evt)$/;"	f	file:
on_racp_value_write	components\ble\ble_services\ble_gls\ble_gls.c	/^static void on_racp_value_write(ble_gls_t * p_gls, ble_gatts_evt_write_t * p_evt_write)$/;"	f	file:
on_rw_authorize_request	components\ble\ble_services\ble_gls\ble_gls.c	/^static void on_rw_authorize_request(ble_gls_t * p_gls, ble_gatts_evt_t * p_gatts_evt)$/;"	f	file:
on_tx_complete	components\ble\ble_services\ble_gls\ble_gls.c	/^static void on_tx_complete(ble_gls_t * p_gls, ble_evt_t * p_ble_evt)$/;"	f	file:
on_write	components\ble\ble_services\ble_gls\ble_gls.c	/^static void on_write(ble_gls_t * p_gls, ble_evt_t * p_ble_evt)$/;"	f	file:
racp_report_records_all	components\ble\ble_services\ble_gls\ble_gls.c	/^static uint32_t racp_report_records_all(ble_gls_t * p_gls)$/;"	f	file:
racp_report_records_completed	components\ble\ble_services\ble_gls\ble_gls.c	/^static void racp_report_records_completed(ble_gls_t * p_gls)$/;"	f	file:
racp_report_records_first_last	components\ble\ble_services\ble_gls\ble_gls.c	/^static uint32_t racp_report_records_first_last(ble_gls_t * p_gls)$/;"	f	file:
racp_report_records_greater_or_equal	components\ble\ble_services\ble_gls\ble_gls.c	/^static uint32_t racp_report_records_greater_or_equal(ble_gls_t * p_gls)$/;"	f	file:
racp_report_records_procedure	components\ble\ble_services\ble_gls\ble_gls.c	/^static void racp_report_records_procedure(ble_gls_t * p_gls)$/;"	f	file:
racp_response_code_send	components\ble\ble_services\ble_gls\ble_gls.c	/^static void racp_response_code_send(ble_gls_t * p_gls, uint8_t opcode, uint8_t value)$/;"	f	file:
racp_send	components\ble\ble_services\ble_gls\ble_gls.c	/^static void racp_send(ble_gls_t * p_gls, ble_racp_value_t * p_racp_val)$/;"	f	file:
record_access_control_point_char_add	components\ble\ble_services\ble_gls\ble_gls.c	/^static uint32_t record_access_control_point_char_add(ble_gls_t * p_gls)$/;"	f	file:
report_num_records_request_execute	components\ble\ble_services\ble_gls\ble_gls.c	/^static void report_num_records_request_execute(ble_gls_t * p_gls, ble_racp_value_t * p_racp_request)$/;"	f	file:
report_records_request_execute	components\ble\ble_services\ble_gls\ble_gls.c	/^static void report_records_request_execute(ble_gls_t * p_gls, ble_racp_value_t * p_racp_request)$/;"	f	file:
state_set	components\ble\ble_services\ble_gls\ble_gls.c	/^static void state_set(gls_state_t new_state)$/;"	f	file:
BLE_GLS_CONTEXT_CARB_BREAKFAST	components\ble\ble_services\ble_gls\ble_gls.h	104;"	d
BLE_GLS_CONTEXT_CARB_BRUNCH	components\ble\ble_services\ble_gls\ble_gls.h	110;"	d
BLE_GLS_CONTEXT_CARB_DINNER	components\ble\ble_services\ble_gls\ble_gls.h	106;"	d
BLE_GLS_CONTEXT_CARB_DRINK	components\ble\ble_services\ble_gls\ble_gls.h	108;"	d
BLE_GLS_CONTEXT_CARB_LUNCH	components\ble\ble_services\ble_gls\ble_gls.h	105;"	d
BLE_GLS_CONTEXT_CARB_SNACK	components\ble\ble_services\ble_gls\ble_gls.h	107;"	d
BLE_GLS_CONTEXT_CARB_SUPPER	components\ble\ble_services\ble_gls\ble_gls.h	109;"	d
BLE_GLS_CONTEXT_FLAG_CARB	components\ble\ble_services\ble_gls\ble_gls.h	93;"	d
BLE_GLS_CONTEXT_FLAG_EXERCISE	components\ble\ble_services\ble_gls\ble_gls.h	96;"	d
BLE_GLS_CONTEXT_FLAG_EXT	components\ble\ble_services\ble_gls\ble_gls.h	101;"	d
BLE_GLS_CONTEXT_FLAG_HBA1C	components\ble\ble_services\ble_gls\ble_gls.h	100;"	d
BLE_GLS_CONTEXT_FLAG_MEAL	components\ble\ble_services\ble_gls\ble_gls.h	94;"	d
BLE_GLS_CONTEXT_FLAG_MED	components\ble\ble_services\ble_gls\ble_gls.h	97;"	d
BLE_GLS_CONTEXT_FLAG_MED_KG	components\ble\ble_services\ble_gls\ble_gls.h	98;"	d
BLE_GLS_CONTEXT_FLAG_MED_L	components\ble\ble_services\ble_gls\ble_gls.h	99;"	d
BLE_GLS_CONTEXT_FLAG_TESTER	components\ble\ble_services\ble_gls\ble_gls.h	95;"	d
BLE_GLS_CONTEXT_HEALTH_MAJOR	components\ble\ble_services\ble_gls\ble_gls.h	127;"	d
BLE_GLS_CONTEXT_HEALTH_MENSES	components\ble\ble_services\ble_gls\ble_gls.h	128;"	d
BLE_GLS_CONTEXT_HEALTH_MINOR	components\ble\ble_services\ble_gls\ble_gls.h	126;"	d
BLE_GLS_CONTEXT_HEALTH_NONE	components\ble\ble_services\ble_gls\ble_gls.h	130;"	d
BLE_GLS_CONTEXT_HEALTH_NOT_AVAIL	components\ble\ble_services\ble_gls\ble_gls.h	131;"	d
BLE_GLS_CONTEXT_HEALTH_STRESS	components\ble\ble_services\ble_gls\ble_gls.h	129;"	d
BLE_GLS_CONTEXT_MEAL_BEDTIME	components\ble\ble_services\ble_gls\ble_gls.h	117;"	d
BLE_GLS_CONTEXT_MEAL_CASUAL	components\ble\ble_services\ble_gls\ble_gls.h	116;"	d
BLE_GLS_CONTEXT_MEAL_FASTING	components\ble\ble_services\ble_gls\ble_gls.h	115;"	d
BLE_GLS_CONTEXT_MEAL_POSTPRANDIAL	components\ble\ble_services\ble_gls\ble_gls.h	114;"	d
BLE_GLS_CONTEXT_MEAL_PREPRANDIAL	components\ble\ble_services\ble_gls\ble_gls.h	113;"	d
BLE_GLS_CONTEXT_MED_INTERMED	components\ble\ble_services\ble_gls\ble_gls.h	136;"	d
BLE_GLS_CONTEXT_MED_LONG	components\ble\ble_services\ble_gls\ble_gls.h	137;"	d
BLE_GLS_CONTEXT_MED_PREMIX	components\ble\ble_services\ble_gls\ble_gls.h	138;"	d
BLE_GLS_CONTEXT_MED_RAPID	components\ble\ble_services\ble_gls\ble_gls.h	134;"	d
BLE_GLS_CONTEXT_MED_SHORT	components\ble\ble_services\ble_gls\ble_gls.h	135;"	d
BLE_GLS_CONTEXT_TESTER_LAB	components\ble\ble_services\ble_gls\ble_gls.h	122;"	d
BLE_GLS_CONTEXT_TESTER_NOT_AVAIL	components\ble\ble_services\ble_gls\ble_gls.h	123;"	d
BLE_GLS_CONTEXT_TESTER_PRO	components\ble\ble_services\ble_gls\ble_gls.h	121;"	d
BLE_GLS_CONTEXT_TESTER_SELF	components\ble\ble_services\ble_gls\ble_gls.h	120;"	d
BLE_GLS_EVT_NOTIFICATION_DISABLED	components\ble\ble_services\ble_gls\ble_gls.h	/^    BLE_GLS_EVT_NOTIFICATION_DISABLED                          \/**< Glucose value notification disabled event. *\/$/;"	e	enum:__anon95
BLE_GLS_EVT_NOTIFICATION_ENABLED	components\ble\ble_services\ble_gls\ble_gls.h	/^    BLE_GLS_EVT_NOTIFICATION_ENABLED,                          \/**< Glucose value notification enabled event. *\/$/;"	e	enum:__anon95
BLE_GLS_FEATURE_GENERAL_FAULT	components\ble\ble_services\ble_gls\ble_gls.h	47;"	d
BLE_GLS_FEATURE_INSERT_ERR	components\ble\ble_services\ble_gls\ble_gls.h	42;"	d
BLE_GLS_FEATURE_LOW_BATT	components\ble\ble_services\ble_gls\ble_gls.h	39;"	d
BLE_GLS_FEATURE_MALFUNC	components\ble\ble_services\ble_gls\ble_gls.h	40;"	d
BLE_GLS_FEATURE_MULTI_BOND	components\ble\ble_services\ble_gls\ble_gls.h	49;"	d
BLE_GLS_FEATURE_READ_INT	components\ble\ble_services\ble_gls\ble_gls.h	46;"	d
BLE_GLS_FEATURE_RES_HIGH_LOW	components\ble\ble_services\ble_gls\ble_gls.h	44;"	d
BLE_GLS_FEATURE_SAMPLE_SIZE	components\ble\ble_services\ble_gls\ble_gls.h	41;"	d
BLE_GLS_FEATURE_TEMP_HIGH_LOW	components\ble\ble_services\ble_gls\ble_gls.h	45;"	d
BLE_GLS_FEATURE_TIME_FAULT	components\ble\ble_services\ble_gls\ble_gls.h	48;"	d
BLE_GLS_FEATURE_TYPE_ERR	components\ble\ble_services\ble_gls\ble_gls.h	43;"	d
BLE_GLS_H__	components\ble\ble_services\ble_gls\ble_gls.h	30;"	d
BLE_GLS_MEAS_FLAG_CONC_TYPE_LOC	components\ble\ble_services\ble_gls\ble_gls.h	53;"	d
BLE_GLS_MEAS_FLAG_CONTEXT_INFO	components\ble\ble_services\ble_gls\ble_gls.h	57;"	d
BLE_GLS_MEAS_FLAG_SENSOR_STATUS	components\ble\ble_services\ble_gls\ble_gls.h	56;"	d
BLE_GLS_MEAS_FLAG_TIME_OFFSET	components\ble\ble_services\ble_gls\ble_gls.h	52;"	d
BLE_GLS_MEAS_FLAG_UNITS_KG_L	components\ble\ble_services\ble_gls\ble_gls.h	54;"	d
BLE_GLS_MEAS_FLAG_UNITS_MOL_L	components\ble\ble_services\ble_gls\ble_gls.h	55;"	d
BLE_GLS_MEAS_LOC_AST	components\ble\ble_services\ble_gls\ble_gls.h	73;"	d
BLE_GLS_MEAS_LOC_CONTROL	components\ble\ble_services\ble_gls\ble_gls.h	75;"	d
BLE_GLS_MEAS_LOC_EAR	components\ble\ble_services\ble_gls\ble_gls.h	74;"	d
BLE_GLS_MEAS_LOC_FINGER	components\ble\ble_services\ble_gls\ble_gls.h	72;"	d
BLE_GLS_MEAS_LOC_NOT_AVAIL	components\ble\ble_services\ble_gls\ble_gls.h	76;"	d
BLE_GLS_MEAS_STATUS_BATT_LOW	components\ble\ble_services\ble_gls\ble_gls.h	79;"	d
BLE_GLS_MEAS_STATUS_GENERAL_FAULT	components\ble\ble_services\ble_gls\ble_gls.h	89;"	d
BLE_GLS_MEAS_STATUS_RESULT_HIGH	components\ble\ble_services\ble_gls\ble_gls.h	84;"	d
BLE_GLS_MEAS_STATUS_RESULT_LOW	components\ble\ble_services\ble_gls\ble_gls.h	85;"	d
BLE_GLS_MEAS_STATUS_SAMPLE_SIZE	components\ble\ble_services\ble_gls\ble_gls.h	81;"	d
BLE_GLS_MEAS_STATUS_SENSOR_FAULT	components\ble\ble_services\ble_gls\ble_gls.h	80;"	d
BLE_GLS_MEAS_STATUS_STRIP_INSERT	components\ble\ble_services\ble_gls\ble_gls.h	82;"	d
BLE_GLS_MEAS_STATUS_STRIP_PULL	components\ble\ble_services\ble_gls\ble_gls.h	88;"	d
BLE_GLS_MEAS_STATUS_STRIP_TYPE	components\ble\ble_services\ble_gls\ble_gls.h	83;"	d
BLE_GLS_MEAS_STATUS_TEMP_HIGH	components\ble\ble_services\ble_gls\ble_gls.h	86;"	d
BLE_GLS_MEAS_STATUS_TEMP_LOW	components\ble\ble_services\ble_gls\ble_gls.h	87;"	d
BLE_GLS_MEAS_STATUS_TIME_FAULT	components\ble\ble_services\ble_gls\ble_gls.h	90;"	d
BLE_GLS_MEAS_TYPE_ART_BLOOD	components\ble\ble_services\ble_gls\ble_gls.h	64;"	d
BLE_GLS_MEAS_TYPE_ART_PLASMA	components\ble\ble_services\ble_gls\ble_gls.h	65;"	d
BLE_GLS_MEAS_TYPE_CAP_BLOOD	components\ble\ble_services\ble_gls\ble_gls.h	60;"	d
BLE_GLS_MEAS_TYPE_CAP_PLASMA	components\ble\ble_services\ble_gls\ble_gls.h	61;"	d
BLE_GLS_MEAS_TYPE_CONTROL	components\ble\ble_services\ble_gls\ble_gls.h	69;"	d
BLE_GLS_MEAS_TYPE_FLUID	components\ble\ble_services\ble_gls\ble_gls.h	68;"	d
BLE_GLS_MEAS_TYPE_UNDET_BLOOD	components\ble\ble_services\ble_gls\ble_gls.h	66;"	d
BLE_GLS_MEAS_TYPE_UNDET_PLASMA	components\ble\ble_services\ble_gls\ble_gls.h	67;"	d
BLE_GLS_MEAS_TYPE_VEN_BLOOD	components\ble\ble_services\ble_gls\ble_gls.h	62;"	d
BLE_GLS_MEAS_TYPE_VEN_PLASMA	components\ble\ble_services\ble_gls\ble_gls.h	63;"	d
base_time	components\ble\ble_services\ble_gls\ble_gls.h	/^    ble_date_time_t base_time;                                 \/**< Time stamp *\/$/;"	m	struct:__anon97
ble_gls_evt_handler_t	components\ble\ble_services\ble_gls\ble_gls.h	/^typedef void (*ble_gls_evt_handler_t) (ble_gls_t * p_gls, ble_gls_evt_t * p_evt);$/;"	t
ble_gls_evt_t	components\ble\ble_services\ble_gls\ble_gls.h	/^} ble_gls_evt_t;$/;"	t	typeref:struct:__anon96
ble_gls_evt_type_t	components\ble\ble_services\ble_gls\ble_gls.h	/^} ble_gls_evt_type_t;$/;"	t	typeref:enum:__anon95
ble_gls_init_t	components\ble\ble_services\ble_gls\ble_gls.h	/^} ble_gls_init_t;$/;"	t	typeref:struct:__anon100
ble_gls_meas_context_t	components\ble\ble_services\ble_gls\ble_gls.h	/^} ble_gls_meas_context_t;$/;"	t	typeref:struct:__anon98
ble_gls_meas_t	components\ble\ble_services\ble_gls\ble_gls.h	/^} ble_gls_meas_t;$/;"	t	typeref:struct:__anon97
ble_gls_rec_t	components\ble\ble_services\ble_gls\ble_gls.h	/^} ble_gls_rec_t;$/;"	t	typeref:struct:__anon99
ble_gls_s	components\ble\ble_services\ble_gls\ble_gls.h	/^struct ble_gls_s$/;"	s
ble_gls_t	components\ble\ble_services\ble_gls\ble_gls.h	/^typedef struct ble_gls_s ble_gls_t;$/;"	t	typeref:struct:ble_gls_s
carbohydrate	components\ble\ble_services\ble_gls\ble_gls.h	/^    sfloat_t      carbohydrate;                                \/**< Carbohydrate *\/$/;"	m	struct:__anon98
carbohydrate_id	components\ble\ble_services\ble_gls\ble_gls.h	/^    uint8_t       carbohydrate_id;                             \/**< Carbohydrate ID *\/$/;"	m	struct:__anon98
conn_handle	components\ble\ble_services\ble_gls\ble_gls.h	/^    uint16_t                  conn_handle;                     \/**< Handle of the current connection (as provided by the BLE stack, is BLE_CONN_HANDLE_INVALID if not in a connection). *\/$/;"	m	struct:ble_gls_s
context	components\ble\ble_services\ble_gls\ble_gls.h	/^  ble_gls_meas_context_t  context;                             \/**< Glucose measurement context *\/$/;"	m	struct:__anon99
error_handler	components\ble\ble_services\ble_gls\ble_gls.h	/^    ble_srv_error_handler_t   error_handler;                   \/**< Function to be called in case of an error. *\/$/;"	m	struct:__anon100
error_handler	components\ble\ble_services\ble_gls\ble_gls.h	/^    ble_srv_error_handler_t   error_handler;                   \/**< Function to be called in case of an error. *\/$/;"	m	struct:ble_gls_s
evt_handler	components\ble\ble_services\ble_gls\ble_gls.h	/^    ble_gls_evt_handler_t     evt_handler;                     \/**< Event handler to be called for handling events in the Glucose Service. *\/$/;"	m	struct:__anon100
evt_handler	components\ble\ble_services\ble_gls\ble_gls.h	/^    ble_gls_evt_handler_t     evt_handler;                     \/**< Event handler to be called for handling events in the Glucose Service. *\/$/;"	m	struct:ble_gls_s
evt_type	components\ble\ble_services\ble_gls\ble_gls.h	/^    ble_gls_evt_type_t evt_type;                               \/**< Type of event. *\/$/;"	m	struct:__anon96
exercise_duration	components\ble\ble_services\ble_gls\ble_gls.h	/^    uint16_t      exercise_duration;                           \/**< Exercise Duration *\/$/;"	m	struct:__anon98
exercise_intensity	components\ble\ble_services\ble_gls\ble_gls.h	/^    uint8_t       exercise_intensity;                          \/**< Exercise Intensity *\/$/;"	m	struct:__anon98
exponent	components\ble\ble_services\ble_gls\ble_gls.h	/^  int8_t exponent;                                             \/**< Base 10 exponent, should be using only 4 bits *\/$/;"	m	struct:__anon94
extended_flags	components\ble\ble_services\ble_gls\ble_gls.h	/^    uint8_t       extended_flags;                              \/**< Extended Flags *\/$/;"	m	struct:__anon98
feature	components\ble\ble_services\ble_gls\ble_gls.h	/^    uint16_t                  feature;                         \/**< Glucose Feature value indicating supported features. *\/$/;"	m	struct:__anon100
feature	components\ble\ble_services\ble_gls\ble_gls.h	/^    uint16_t                  feature;$/;"	m	struct:ble_gls_s
flags	components\ble\ble_services\ble_gls\ble_gls.h	/^    uint8_t         flags;                                     \/**< Flags *\/$/;"	m	struct:__anon97
flags	components\ble\ble_services\ble_gls\ble_gls.h	/^    uint8_t       flags;                                       \/**< Flags *\/$/;"	m	struct:__anon98
glf_handles	components\ble\ble_services\ble_gls\ble_gls.h	/^    ble_gatts_char_handles_t  glf_handles;                     \/**< Handles related to the Glucose Feature characteristic. *\/$/;"	m	struct:ble_gls_s
glm_context_handles	components\ble\ble_services\ble_gls\ble_gls.h	/^    ble_gatts_char_handles_t  glm_context_handles;             \/**< Handles related to the Glucose Measurement Context characteristic. *\/$/;"	m	struct:ble_gls_s
glm_handles	components\ble\ble_services\ble_gls\ble_gls.h	/^    ble_gatts_char_handles_t  glm_handles;                     \/**< Handles related to the Glucose Measurement characteristic. *\/$/;"	m	struct:ble_gls_s
glucose_concentration	components\ble\ble_services\ble_gls\ble_gls.h	/^    sfloat_t        glucose_concentration;                     \/**< Glucose concentration *\/$/;"	m	struct:__anon97
hba1c	components\ble\ble_services\ble_gls\ble_gls.h	/^    uint16_t      hba1c;                                       \/**< HbA1c *\/$/;"	m	struct:__anon98
is_context_supported	components\ble\ble_services\ble_gls\ble_gls.h	/^    bool                      is_context_supported;            \/**< Determines if optional Glucose Measurement Context is to be supported. *\/$/;"	m	struct:__anon100
is_context_supported	components\ble\ble_services\ble_gls\ble_gls.h	/^    bool                      is_context_supported;$/;"	m	struct:ble_gls_s
mantissa	components\ble\ble_services\ble_gls\ble_gls.h	/^  int16_t mantissa;                                            \/**< Mantissa, should be using only 12 bits *\/$/;"	m	struct:__anon94
meal	components\ble\ble_services\ble_gls\ble_gls.h	/^    uint8_t       meal;                                        \/**< Meal *\/$/;"	m	struct:__anon98
meas	components\ble\ble_services\ble_gls\ble_gls.h	/^  ble_gls_meas_t          meas;                                \/**< Glucose measurement *\/$/;"	m	struct:__anon99
medication	components\ble\ble_services\ble_gls\ble_gls.h	/^    sfloat_t      medication;                                  \/**< Medication *\/$/;"	m	struct:__anon98
medication_id	components\ble\ble_services\ble_gls\ble_gls.h	/^    uint8_t       medication_id;                               \/**< Medication ID *\/$/;"	m	struct:__anon98
racp_handles	components\ble\ble_services\ble_gls\ble_gls.h	/^    ble_gatts_char_handles_t  racp_handles;                    \/**< Handles related to the Record Access Control Point characteristic. *\/$/;"	m	struct:ble_gls_s
sample_location	components\ble\ble_services\ble_gls\ble_gls.h	/^    uint8_t         sample_location;                           \/**< Sample location *\/$/;"	m	struct:__anon97
sensor_status_annunciation	components\ble\ble_services\ble_gls\ble_gls.h	/^    uint16_t        sensor_status_annunciation;                \/**< Sensor status annunciation *\/$/;"	m	struct:__anon97
sequence_number	components\ble\ble_services\ble_gls\ble_gls.h	/^    uint16_t        sequence_number;                           \/**< Sequence number *\/$/;"	m	struct:__anon97
service_handle	components\ble\ble_services\ble_gls\ble_gls.h	/^    uint16_t                  service_handle;                  \/**< Handle of Glucose Service (as provided by the BLE stack). *\/$/;"	m	struct:ble_gls_s
sfloat_t	components\ble\ble_services\ble_gls\ble_gls.h	/^} sfloat_t;$/;"	t	typeref:struct:__anon94
tester_and_health	components\ble\ble_services\ble_gls\ble_gls.h	/^    uint8_t       tester_and_health;                           \/**< Tester and health *\/$/;"	m	struct:__anon98
time_offset	components\ble\ble_services\ble_gls\ble_gls.h	/^    int16_t         time_offset;                               \/**< Time offset *\/$/;"	m	struct:__anon97
type	components\ble\ble_services\ble_gls\ble_gls.h	/^    uint8_t         type;                                      \/**< Type *\/$/;"	m	struct:__anon97
ble_gls_db_init	components\ble\ble_services\ble_gls\ble_gls_db.c	/^uint32_t ble_gls_db_init(void)$/;"	f
ble_gls_db_num_records_get	components\ble\ble_services\ble_gls\ble_gls_db.c	/^uint16_t ble_gls_db_num_records_get(void)$/;"	f
ble_gls_db_record_add	components\ble\ble_services\ble_gls\ble_gls_db.c	/^uint32_t ble_gls_db_record_add(ble_gls_rec_t * p_rec)$/;"	f
ble_gls_db_record_delete	components\ble\ble_services\ble_gls\ble_gls_db.c	/^uint32_t ble_gls_db_record_delete(uint8_t rec_ndx)$/;"	f
ble_gls_db_record_get	components\ble\ble_services\ble_gls\ble_gls_db.c	/^uint32_t ble_gls_db_record_get(uint8_t rec_ndx, ble_gls_rec_t * p_rec)$/;"	f
database_entry_t	components\ble\ble_services\ble_gls\ble_gls_db.c	/^} database_entry_t;$/;"	t	typeref:struct:__anon101	file:
in_use_flag	components\ble\ble_services\ble_gls\ble_gls_db.c	/^    bool          in_use_flag;$/;"	m	struct:__anon101	file:
m_database	components\ble\ble_services\ble_gls\ble_gls_db.c	/^static database_entry_t m_database[BLE_GLS_DB_MAX_RECORDS];$/;"	v	file:
m_database_crossref	components\ble\ble_services\ble_gls\ble_gls_db.c	/^static uint8_t          m_database_crossref[BLE_GLS_DB_MAX_RECORDS];$/;"	v	file:
m_num_records	components\ble\ble_services\ble_gls\ble_gls_db.c	/^static uint16_t         m_num_records;$/;"	v	file:
record	components\ble\ble_services\ble_gls\ble_gls_db.c	/^    ble_gls_rec_t record;$/;"	m	struct:__anon101	file:
BLE_GLS_DB_H__	components\ble\ble_services\ble_gls\ble_gls_db.h	28;"	d
BLE_GLS_DB_MAX_RECORDS	components\ble\ble_services\ble_gls\ble_gls_db.h	33;"	d
BOOT_KB_INPUT_REPORT_MAX_SIZE	components\ble\ble_services\ble_hids\ble_hids.c	39;"	d	file:
BOOT_KB_OUTPUT_REPORT_MAX_SIZE	components\ble\ble_services\ble_hids\ble_hids.c	40;"	d	file:
BOOT_MOUSE_INPUT_REPORT_MAX_SIZE	components\ble\ble_services\ble_hids\ble_hids.c	42;"	d	file:
BOOT_MOUSE_INPUT_REPORT_MIN_SIZE	components\ble\ble_services\ble_hids\ble_hids.c	41;"	d	file:
DEFAULT_PROTOCOL_MODE	components\ble\ble_services\ble_hids\ble_hids.c	34;"	d	file:
ENCODED_HID_INFORMATION_LEN	components\ble\ble_services\ble_hids\ble_hids.c	37;"	d	file:
HIDS_CONTROL_POINT_EXIT_SUSPEND	components\ble\ble_services\ble_hids\ble_hids.c	32;"	d	file:
HIDS_CONTROL_POINT_SUSPEND	components\ble\ble_services\ble_hids\ble_hids.c	31;"	d	file:
INITIAL_VALUE_HID_CONTROL_POINT	components\ble\ble_services\ble_hids\ble_hids.c	35;"	d	file:
PROTOCOL_MODE_BOOT	components\ble\ble_services\ble_hids\ble_hids.c	27;"	d	file:
PROTOCOL_MODE_REPORT	components\ble\ble_services\ble_hids\ble_hids.c	28;"	d	file:
ble_hids_boot_kb_inp_rep_send	components\ble\ble_services\ble_hids\ble_hids.c	/^uint32_t ble_hids_boot_kb_inp_rep_send(ble_hids_t * p_hids, uint16_t len, uint8_t * p_data)$/;"	f
ble_hids_boot_mouse_inp_rep_send	components\ble\ble_services\ble_hids\ble_hids.c	/^uint32_t ble_hids_boot_mouse_inp_rep_send(ble_hids_t * p_hids,$/;"	f
ble_hids_init	components\ble\ble_services\ble_hids\ble_hids.c	/^uint32_t ble_hids_init(ble_hids_t * p_hids, const ble_hids_init_t * p_hids_init)$/;"	f
ble_hids_inp_rep_send	components\ble\ble_services\ble_hids\ble_hids.c	/^uint32_t ble_hids_inp_rep_send(ble_hids_t * p_hids,$/;"	f
ble_hids_on_ble_evt	components\ble\ble_services\ble_hids\ble_hids.c	/^void ble_hids_on_ble_evt(ble_hids_t * p_hids, ble_evt_t * p_ble_evt)$/;"	f
ble_hids_outp_rep_get	components\ble\ble_services\ble_hids\ble_hids.c	/^uint32_t ble_hids_outp_rep_get(ble_hids_t * p_hids,$/;"	f
boot_inp_rep_char_add	components\ble\ble_services\ble_hids\ble_hids.c	/^static uint32_t boot_inp_rep_char_add(ble_hids_t                         * p_hids,$/;"	f	file:
boot_kb_outp_rep_char_add	components\ble\ble_services\ble_hids\ble_hids.c	/^static uint32_t boot_kb_outp_rep_char_add(ble_hids_t * p_hids, const ble_hids_init_t * p_hids_init)$/;"	f	file:
encode_hid_information	components\ble\ble_services\ble_hids\ble_hids.c	/^static uint8_t encode_hid_information(uint8_t                          * p_encoded_buffer,$/;"	f	file:
feature_rep_characteristics_add	components\ble\ble_services\ble_hids\ble_hids.c	/^static uint32_t feature_rep_characteristics_add(ble_hids_t            * p_hids,$/;"	f	file:
hid_control_point_char_add	components\ble\ble_services\ble_hids\ble_hids.c	/^static uint32_t hid_control_point_char_add(ble_hids_t                    * p_hids,$/;"	f	file:
hid_information_char_add	components\ble\ble_services\ble_hids\ble_hids.c	/^static uint32_t hid_information_char_add(ble_hids_t * p_hids, const ble_hids_init_t * p_hids_init)$/;"	f	file:
includes_add	components\ble\ble_services\ble_hids\ble_hids.c	/^static uint32_t includes_add(ble_hids_t * p_hids, const ble_hids_init_t * p_hids_init)$/;"	f	file:
inp_rep_cccd_identify	components\ble\ble_services\ble_hids\ble_hids.c	/^static bool inp_rep_cccd_identify(ble_hids_t         * p_hids,$/;"	f	file:
inp_rep_characteristics_add	components\ble\ble_services\ble_hids\ble_hids.c	/^static uint32_t inp_rep_characteristics_add(ble_hids_t            * p_hids,$/;"	f	file:
make_char_id	components\ble\ble_services\ble_hids\ble_hids.c	/^static ble_hids_char_id_t make_char_id(uint16_t uuid, uint8_t rep_type, uint8_t rep_index)$/;"	f	file:
on_connect	components\ble\ble_services\ble_hids\ble_hids.c	/^static void on_connect(ble_hids_t * p_hids, ble_evt_t * p_ble_evt)$/;"	f	file:
on_control_point_write	components\ble\ble_services\ble_hids\ble_hids.c	/^static void on_control_point_write(ble_hids_t * p_hids, ble_gatts_evt_write_t * p_evt_write)$/;"	f	file:
on_disconnect	components\ble\ble_services\ble_hids\ble_hids.c	/^static void on_disconnect(ble_hids_t * p_hids, ble_evt_t * p_ble_evt)$/;"	f	file:
on_protocol_mode_write	components\ble\ble_services\ble_hids\ble_hids.c	/^static void on_protocol_mode_write(ble_hids_t * p_hids, ble_gatts_evt_write_t * p_evt_write)$/;"	f	file:
on_report_cccd_write	components\ble\ble_services\ble_hids\ble_hids.c	/^static void on_report_cccd_write(ble_hids_t            * p_hids,$/;"	f	file:
on_report_value_read_auth	components\ble\ble_services\ble_hids\ble_hids.c	/^static void on_report_value_read_auth(ble_hids_t         * p_hids,$/;"	f	file:
on_report_value_write	components\ble\ble_services\ble_hids\ble_hids.c	/^static void on_report_value_write(ble_hids_t         * p_hids,$/;"	f	file:
on_rw_authorize_request	components\ble\ble_services\ble_hids\ble_hids.c	/^static void on_rw_authorize_request(ble_hids_t * p_hids, ble_evt_t * p_ble_evt)$/;"	f	file:
on_write	components\ble\ble_services\ble_hids\ble_hids.c	/^static void on_write(ble_hids_t * p_hids, ble_evt_t * p_ble_evt)$/;"	f	file:
outp_rep_characteristics_add	components\ble\ble_services\ble_hids\ble_hids.c	/^static uint32_t outp_rep_characteristics_add(ble_hids_t            * p_hids,$/;"	f	file:
protocol_mode_char_add	components\ble\ble_services\ble_hids\ble_hids.c	/^static uint32_t protocol_mode_char_add(ble_hids_t                    * p_hids,$/;"	f	file:
rep_char_add	components\ble\ble_services\ble_hids\ble_hids.c	/^static uint32_t rep_char_add(ble_hids_t *                   p_hids,$/;"	f	file:
rep_map_char_add	components\ble\ble_services\ble_hids\ble_hids.c	/^static uint32_t rep_map_char_add(ble_hids_t * p_hids, const ble_hids_init_t * p_hids_init)$/;"	f	file:
rep_value_identify	components\ble\ble_services\ble_hids\ble_hids.c	/^static bool rep_value_identify(ble_hids_t         * p_hids,$/;"	f	file:
BLE_HIDS_EVT_BOOT_MODE_ENTERED	components\ble\ble_services\ble_hids\ble_hids.h	/^    BLE_HIDS_EVT_BOOT_MODE_ENTERED,                 \/**< Boot mode entered. *\/$/;"	e	enum:__anon103
BLE_HIDS_EVT_HOST_EXIT_SUSP	components\ble\ble_services\ble_hids\ble_hids.h	/^    BLE_HIDS_EVT_HOST_EXIT_SUSP,                    \/**< Exit suspend command received. *\/$/;"	e	enum:__anon103
BLE_HIDS_EVT_HOST_SUSP	components\ble\ble_services\ble_hids\ble_hids.h	/^    BLE_HIDS_EVT_HOST_SUSP,                         \/**< Suspend command received. *\/$/;"	e	enum:__anon103
BLE_HIDS_EVT_NOTIF_DISABLED	components\ble\ble_services\ble_hids\ble_hids.h	/^    BLE_HIDS_EVT_NOTIF_DISABLED,                    \/**< Notification disabled event. *\/$/;"	e	enum:__anon103
BLE_HIDS_EVT_NOTIF_ENABLED	components\ble\ble_services\ble_hids\ble_hids.h	/^    BLE_HIDS_EVT_NOTIF_ENABLED,                     \/**< Notification enabled event. *\/$/;"	e	enum:__anon103
BLE_HIDS_EVT_REPORT_MODE_ENTERED	components\ble\ble_services\ble_hids\ble_hids.h	/^    BLE_HIDS_EVT_REPORT_MODE_ENTERED,               \/**< Report mode entered. *\/$/;"	e	enum:__anon103
BLE_HIDS_EVT_REPORT_READ	components\ble\ble_services\ble_hids\ble_hids.h	/^    BLE_HIDS_EVT_REPORT_READ                        \/**< Read with response *\/$/;"	e	enum:__anon103
BLE_HIDS_EVT_REP_CHAR_WRITE	components\ble\ble_services\ble_hids\ble_hids.h	/^    BLE_HIDS_EVT_REP_CHAR_WRITE,                    \/**< A new value has been written to an Report characteristic. *\/$/;"	e	enum:__anon103
BLE_HIDS_H__	components\ble\ble_services\ble_hids\ble_hids.h	40;"	d
BLE_HIDS_MAX_FEATURE_REP	components\ble\ble_services\ble_hids\ble_hids.h	59;"	d
BLE_HIDS_MAX_INPUT_REP	components\ble\ble_services\ble_hids\ble_hids.h	57;"	d
BLE_HIDS_MAX_OUTPUT_REP	components\ble\ble_services\ble_hids\ble_hids.h	58;"	d
BLE_HIDS_REP_TYPE_FEATURE	components\ble\ble_services\ble_hids\ble_hids.h	53;"	d
BLE_HIDS_REP_TYPE_INPUT	components\ble\ble_services\ble_hids\ble_hids.h	51;"	d
BLE_HIDS_REP_TYPE_OUTPUT	components\ble\ble_services\ble_hids\ble_hids.h	52;"	d
HID_INFO_FLAG_NORMALLY_CONNECTABLE_MSK	components\ble\ble_services\ble_hids\ble_hids.h	63;"	d
HID_INFO_FLAG_REMOTE_WAKE_MSK	components\ble\ble_services\ble_hids\ble_hids.h	62;"	d
b_country_code	components\ble\ble_services\ble_hids\ble_hids.h	/^    uint8_t                       b_country_code;   \/**< Identifies which country the hardware is localized for. Most hardware is not localized and thus this value would be zero (0). *\/$/;"	m	struct:__anon109
bcd_hid	components\ble\ble_services\ble_hids\ble_hids.h	/^    uint16_t                      bcd_hid;          \/**< 16-bit unsigned integer representing version number of base USB HID Specification implemented by HID Device *\/$/;"	m	struct:__anon109
ble_hids_char_id_t	components\ble\ble_services\ble_hids\ble_hids.h	/^} ble_hids_char_id_t;$/;"	t	typeref:struct:__anon102
ble_hids_evt_handler_t	components\ble\ble_services\ble_hids\ble_hids.h	/^typedef void (*ble_hids_evt_handler_t) (ble_hids_t * p_hids, ble_hids_evt_t * p_evt);$/;"	t
ble_hids_evt_t	components\ble\ble_services\ble_hids\ble_hids.h	/^} ble_hids_evt_t;$/;"	t	typeref:struct:__anon104
ble_hids_evt_type_t	components\ble\ble_services\ble_hids\ble_hids.h	/^} ble_hids_evt_type_t;$/;"	t	typeref:enum:__anon103
ble_hids_feature_rep_init_t	components\ble\ble_services\ble_hids\ble_hids.h	/^} ble_hids_feature_rep_init_t;$/;"	t	typeref:struct:__anon112
ble_hids_hid_information_t	components\ble\ble_services\ble_hids\ble_hids.h	/^} ble_hids_hid_information_t;$/;"	t	typeref:struct:__anon109
ble_hids_init_t	components\ble\ble_services\ble_hids\ble_hids.h	/^} ble_hids_init_t;$/;"	t	typeref:struct:__anon115
ble_hids_inp_rep_init_t	components\ble\ble_services\ble_hids\ble_hids.h	/^} ble_hids_inp_rep_init_t;$/;"	t	typeref:struct:__anon110
ble_hids_outp_rep_init_t	components\ble\ble_services\ble_hids\ble_hids.h	/^} ble_hids_outp_rep_init_t;$/;"	t	typeref:struct:__anon111
ble_hids_rep_char_t	components\ble\ble_services\ble_hids\ble_hids.h	/^} ble_hids_rep_char_t;$/;"	t	typeref:struct:__anon114
ble_hids_rep_map_init_t	components\ble\ble_services\ble_hids\ble_hids.h	/^} ble_hids_rep_map_init_t;$/;"	t	typeref:struct:__anon113
ble_hids_s	components\ble\ble_services\ble_hids\ble_hids.h	/^struct ble_hids_s$/;"	s
ble_hids_t	components\ble\ble_services\ble_hids\ble_hids.h	/^typedef struct ble_hids_s ble_hids_t;$/;"	t	typeref:struct:ble_hids_s
boot_kb_inp_rep_handles	components\ble\ble_services\ble_hids\ble_hids.h	/^    ble_gatts_char_handles_t      boot_kb_inp_rep_handles;                      \/**< Handles related to the Boot Keyboard Input Report characteristic (will only be created if ble_hids_init_t.is_kb is set). *\/$/;"	m	struct:ble_hids_s
boot_kb_outp_rep_handles	components\ble\ble_services\ble_hids\ble_hids.h	/^    ble_gatts_char_handles_t      boot_kb_outp_rep_handles;                     \/**< Handles related to the Boot Keyboard Output Report characteristic (will only be created if ble_hids_init_t.is_kb is set). *\/$/;"	m	struct:ble_hids_s
boot_mouse_inp_rep_handles	components\ble\ble_services\ble_hids\ble_hids.h	/^    ble_gatts_char_handles_t      boot_mouse_inp_rep_handles;                   \/**< Handles related to the Boot Mouse Input Report characteristic (will only be created if ble_hids_init_t.is_mouse is set). *\/$/;"	m	struct:ble_hids_s
char_auth_read	components\ble\ble_services\ble_hids\ble_hids.h	/^        } char_auth_read;$/;"	m	union:__anon104::__anon105	typeref:struct:__anon104::__anon105::__anon108
char_handles	components\ble\ble_services\ble_hids\ble_hids.h	/^    ble_gatts_char_handles_t      char_handles;     \/**< Handles related to the Report characteristic. *\/$/;"	m	struct:__anon114
char_id	components\ble\ble_services\ble_hids\ble_hids.h	/^            ble_hids_char_id_t char_id;             \/**< Id of characteristic being read. *\/$/;"	m	struct:__anon104::__anon105::__anon108
char_id	components\ble\ble_services\ble_hids\ble_hids.h	/^            ble_hids_char_id_t char_id;             \/**< Id of characteristic for which notification has been started. *\/$/;"	m	struct:__anon104::__anon105::__anon106
char_id	components\ble\ble_services\ble_hids\ble_hids.h	/^            ble_hids_char_id_t char_id;             \/**< Id of characteristic having been written. *\/$/;"	m	struct:__anon104::__anon105::__anon107
char_write	components\ble\ble_services\ble_hids\ble_hids.h	/^        } char_write;$/;"	m	union:__anon104::__anon105	typeref:struct:__anon104::__anon105::__anon107
conn_handle	components\ble\ble_services\ble_hids\ble_hids.h	/^    uint16_t                      conn_handle;                                  \/**< Handle of the current connection (as provided by the BLE stack, is BLE_CONN_HANDLE_INVALID if not in a connection). *\/$/;"	m	struct:ble_hids_s
data	components\ble\ble_services\ble_hids\ble_hids.h	/^            uint8_t*           data;                \/**< Incoming data, variable length *\/            $/;"	m	struct:__anon104::__anon105::__anon107
data_len	components\ble\ble_services\ble_hids\ble_hids.h	/^    uint16_t                      data_len;         \/**< Length of report map data. *\/$/;"	m	struct:__anon113
error_handler	components\ble\ble_services\ble_hids\ble_hids.h	/^    ble_srv_error_handler_t       error_handler;                                \/**< Function to be called in case of an error. *\/$/;"	m	struct:__anon115
error_handler	components\ble\ble_services\ble_hids\ble_hids.h	/^    ble_srv_error_handler_t       error_handler;                                \/**< Function to be called in case of an error. *\/$/;"	m	struct:ble_hids_s
evt_handler	components\ble\ble_services\ble_hids\ble_hids.h	/^    ble_hids_evt_handler_t        evt_handler;                                  \/**< Event handler to be called for handling events in the HID Service. *\/$/;"	m	struct:__anon115
evt_handler	components\ble\ble_services\ble_hids\ble_hids.h	/^    ble_hids_evt_handler_t        evt_handler;                                  \/**< Event handler to be called for handling events in the HID Service. *\/$/;"	m	struct:ble_hids_s
evt_type	components\ble\ble_services\ble_hids\ble_hids.h	/^    ble_hids_evt_type_t evt_type;                   \/**< Type of event. *\/$/;"	m	struct:__anon104
ext_rep_ref_num	components\ble\ble_services\ble_hids\ble_hids.h	/^    uint8_t                       ext_rep_ref_num;  \/**< Number of Optional External Report Reference descriptors. *\/$/;"	m	struct:__anon113
feature_rep_array	components\ble\ble_services\ble_hids\ble_hids.h	/^    ble_hids_rep_char_t           feature_rep_array[BLE_HIDS_MAX_FEATURE_REP];  \/**< Information about the Feature Report characteristics. *\/$/;"	m	struct:ble_hids_s
feature_rep_count	components\ble\ble_services\ble_hids\ble_hids.h	/^    uint8_t                       feature_rep_count;                            \/**< Number of Feature Report characteristics. *\/$/;"	m	struct:__anon115
feature_rep_count	components\ble\ble_services\ble_hids\ble_hids.h	/^    uint8_t                       feature_rep_count;                            \/**< Number of Feature Report characteristics. *\/$/;"	m	struct:ble_hids_s
flags	components\ble\ble_services\ble_hids\ble_hids.h	/^    uint8_t                       flags;            \/**< See http:\/\/developer.bluetooth.org\/gatt\/characteristics\/Pages\/CharacteristicViewer.aspx?u=org.bluetooth.characteristic.hid_information.xml *\/$/;"	m	struct:__anon109
hid_control_point_handles	components\ble\ble_services\ble_hids\ble_hids.h	/^    ble_gatts_char_handles_t      hid_control_point_handles;                    \/**< Handles related to the Report Map characteristic. *\/$/;"	m	struct:ble_hids_s
hid_information	components\ble\ble_services\ble_hids\ble_hids.h	/^    ble_hids_hid_information_t    hid_information;                              \/**< Value of the HID Information characteristic. *\/$/;"	m	struct:__anon115
hid_information_handles	components\ble\ble_services\ble_hids\ble_hids.h	/^    ble_gatts_char_handles_t      hid_information_handles;                      \/**< Handles related to the Report Map characteristic. *\/$/;"	m	struct:ble_hids_s
included_services_count	components\ble\ble_services\ble_hids\ble_hids.h	/^    uint8_t                       included_services_count;                      \/**< Number of services to include in HID service. *\/$/;"	m	struct:__anon115
inp_rep_array	components\ble\ble_services\ble_hids\ble_hids.h	/^    ble_hids_rep_char_t           inp_rep_array[BLE_HIDS_MAX_INPUT_REP];        \/**< Information about the Input Report characteristics. *\/$/;"	m	struct:ble_hids_s
inp_rep_count	components\ble\ble_services\ble_hids\ble_hids.h	/^    uint8_t                       inp_rep_count;                                \/**< Number of Input Report characteristics. *\/$/;"	m	struct:__anon115
inp_rep_count	components\ble\ble_services\ble_hids\ble_hids.h	/^    uint8_t                       inp_rep_count;                                \/**< Number of Input Report characteristics. *\/$/;"	m	struct:ble_hids_s
is_kb	components\ble\ble_services\ble_hids\ble_hids.h	/^    bool                          is_kb;                                        \/**< TRUE if device is operating as a keyboard, FALSE if it is not. *\/$/;"	m	struct:__anon115
is_mouse	components\ble\ble_services\ble_hids\ble_hids.h	/^    bool                          is_mouse;                                     \/**< TRUE if device is operating as a mouse, FALSE if it is not. *\/$/;"	m	struct:__anon115
len	components\ble\ble_services\ble_hids\ble_hids.h	/^            uint16_t           len;                 \/**< Length of the incoming data. *\/$/;"	m	struct:__anon104::__anon105::__anon107
max_len	components\ble\ble_services\ble_hids\ble_hids.h	/^    uint16_t                      max_len;          \/**< Maximum length of characteristic value. *\/$/;"	m	struct:__anon110
max_len	components\ble\ble_services\ble_hids\ble_hids.h	/^    uint16_t                      max_len;          \/**< Maximum length of characteristic value. *\/$/;"	m	struct:__anon111
max_len	components\ble\ble_services\ble_hids\ble_hids.h	/^    uint16_t                      max_len;          \/**< Maximum length of characteristic value. *\/$/;"	m	struct:__anon112
notification	components\ble\ble_services\ble_hids\ble_hids.h	/^        } notification;$/;"	m	union:__anon104::__anon105	typeref:struct:__anon104::__anon105::__anon106
offset	components\ble\ble_services\ble_hids\ble_hids.h	/^            uint16_t           offset;              \/**< Offset for the write operation. *\/$/;"	m	struct:__anon104::__anon105::__anon107
outp_rep_array	components\ble\ble_services\ble_hids\ble_hids.h	/^    ble_hids_rep_char_t           outp_rep_array[BLE_HIDS_MAX_OUTPUT_REP];      \/**< Information about the Output Report characteristics. *\/$/;"	m	struct:ble_hids_s
outp_rep_count	components\ble\ble_services\ble_hids\ble_hids.h	/^    uint8_t                       outp_rep_count;                               \/**< Number of Output Report characteristics. *\/$/;"	m	struct:__anon115
outp_rep_count	components\ble\ble_services\ble_hids\ble_hids.h	/^    uint8_t                       outp_rep_count;                               \/**< Number of Output Report characteristics. *\/$/;"	m	struct:ble_hids_s
p_ble_evt	components\ble\ble_services\ble_hids\ble_hids.h	/^    ble_evt_t * p_ble_evt;                          \/**< corresponding received ble event, NULL if not relevant *\/$/;"	m	struct:__anon104
p_data	components\ble\ble_services\ble_hids\ble_hids.h	/^    uint8_t *                     p_data;           \/**< Report map data. *\/$/;"	m	struct:__anon113
p_ext_rep_ref	components\ble\ble_services\ble_hids\ble_hids.h	/^    ble_uuid_t *                  p_ext_rep_ref;    \/**< Optional External Report Reference descriptor (will be added if != NULL). *\/$/;"	m	struct:__anon113
p_feature_rep_array	components\ble\ble_services\ble_hids\ble_hids.h	/^    ble_hids_feature_rep_init_t * p_feature_rep_array;                          \/**< Information about the Feature Report characteristics. *\/$/;"	m	struct:__anon115
p_included_services_array	components\ble\ble_services\ble_hids\ble_hids.h	/^    uint16_t *                    p_included_services_array;                    \/**< Array of services to include in HID service. *\/$/;"	m	struct:__anon115
p_inp_rep_array	components\ble\ble_services\ble_hids\ble_hids.h	/^    ble_hids_inp_rep_init_t *     p_inp_rep_array;                              \/**< Information about the Input Report characteristics. *\/$/;"	m	struct:__anon115
p_outp_rep_array	components\ble\ble_services\ble_hids\ble_hids.h	/^    ble_hids_outp_rep_init_t *    p_outp_rep_array;                             \/**< Information about the Output Report characteristics. *\/$/;"	m	struct:__anon115
params	components\ble\ble_services\ble_hids\ble_hids.h	/^    } params;$/;"	m	struct:__anon104	typeref:union:__anon104::__anon105
protocol_mode_handles	components\ble\ble_services\ble_hids\ble_hids.h	/^    ble_gatts_char_handles_t      protocol_mode_handles;                        \/**< Handles related to the Protocol Mode characteristic (will only be created if ble_hids_init_t.is_kb or ble_hids_init_t.is_mouse is set). *\/$/;"	m	struct:ble_hids_s
read_resp	components\ble\ble_services\ble_hids\ble_hids.h	/^    uint8_t                       read_resp : 1;    \/**< Should application generate a response to read requests. *\/$/;"	m	struct:__anon110
read_resp	components\ble\ble_services\ble_hids\ble_hids.h	/^    uint8_t                       read_resp : 1;    \/**< Should application generate a response to read requests. *\/$/;"	m	struct:__anon111
read_resp	components\ble\ble_services\ble_hids\ble_hids.h	/^    uint8_t                       read_resp : 1;    \/**< Should application generate a response to read requests. *\/$/;"	m	struct:__anon112
ref_handle	components\ble\ble_services\ble_hids\ble_hids.h	/^    uint16_t                      ref_handle;       \/**< Handle of the Report Reference descriptor. *\/$/;"	m	struct:__anon114
rep_index	components\ble\ble_services\ble_hids\ble_hids.h	/^    uint8_t  rep_index;                             \/**< Index of the characteristic (only used for BLE_UUID_REPORT_CHAR). *\/$/;"	m	struct:__anon102
rep_map	components\ble\ble_services\ble_hids\ble_hids.h	/^    ble_hids_rep_map_init_t       rep_map;                                      \/**< Information nedeed for initialization of the Report Map characteristic. *\/$/;"	m	struct:__anon115
rep_map_ext_rep_ref_handle	components\ble\ble_services\ble_hids\ble_hids.h	/^    uint16_t                      rep_map_ext_rep_ref_handle;                   \/**< Handle of the Report Map External Report Reference descriptor. *\/$/;"	m	struct:ble_hids_s
rep_map_handles	components\ble\ble_services\ble_hids\ble_hids.h	/^    ble_gatts_char_handles_t      rep_map_handles;                              \/**< Handles related to the Report Map characteristic. *\/$/;"	m	struct:ble_hids_s
rep_ref	components\ble\ble_services\ble_hids\ble_hids.h	/^    ble_srv_report_ref_t          rep_ref;          \/**< Value of the Report Reference descriptor. *\/$/;"	m	struct:__anon110
rep_ref	components\ble\ble_services\ble_hids\ble_hids.h	/^    ble_srv_report_ref_t          rep_ref;          \/**< Value of the Report Reference descriptor. *\/$/;"	m	struct:__anon111
rep_ref	components\ble\ble_services\ble_hids\ble_hids.h	/^    ble_srv_report_ref_t          rep_ref;          \/**< Value of the Report Reference descriptor. *\/$/;"	m	struct:__anon112
rep_type	components\ble\ble_services\ble_hids\ble_hids.h	/^    uint8_t  rep_type;                              \/**< Type of report (only used for BLE_UUID_REPORT_CHAR, see @ref BLE_HIDS_REPORT_TYPE). *\/$/;"	m	struct:__anon102
security_mode	components\ble\ble_services\ble_hids\ble_hids.h	/^    ble_srv_cccd_security_mode_t  security_mode;    \/**< Security mode for the HID Input Report characteristic, including cccd. *\/$/;"	m	struct:__anon110
security_mode	components\ble\ble_services\ble_hids\ble_hids.h	/^    ble_srv_cccd_security_mode_t  security_mode;    \/**< Security mode for the HID Output Report characteristic, including cccd. *\/$/;"	m	struct:__anon111
security_mode	components\ble\ble_services\ble_hids\ble_hids.h	/^    ble_srv_cccd_security_mode_t  security_mode;    \/**< Security mode for the HID Service Feature Report characteristic, including cccd. *\/$/;"	m	struct:__anon112
security_mode	components\ble\ble_services\ble_hids\ble_hids.h	/^    ble_srv_security_mode_t       security_mode;    \/**< Security mode for the HID Information characteristic. *\/$/;"	m	struct:__anon109
security_mode	components\ble\ble_services\ble_hids\ble_hids.h	/^    ble_srv_security_mode_t       security_mode;    \/**< Security mode for the HID Service Report Map characteristic. *\/$/;"	m	struct:__anon113
security_mode_boot_kb_inp_rep	components\ble\ble_services\ble_hids\ble_hids.h	/^    ble_srv_cccd_security_mode_t  security_mode_boot_kb_inp_rep;                \/**< Security settings for HID service Keyboard input report attribute *\/$/;"	m	struct:__anon115
security_mode_boot_kb_outp_rep	components\ble\ble_services\ble_hids\ble_hids.h	/^    ble_srv_security_mode_t       security_mode_boot_kb_outp_rep;               \/**< Security settings for HID service Keyboard output report attribute *\/$/;"	m	struct:__anon115
security_mode_boot_mouse_inp_rep	components\ble\ble_services\ble_hids\ble_hids.h	/^    ble_srv_cccd_security_mode_t  security_mode_boot_mouse_inp_rep;             \/**< Security settings for HID service Mouse input report attribute *\/$/;"	m	struct:__anon115
security_mode_ctrl_point	components\ble\ble_services\ble_hids\ble_hids.h	/^    ble_srv_security_mode_t       security_mode_ctrl_point;                     \/**< Security settings for HID service Control Point attribute *\/$/;"	m	struct:__anon115
security_mode_protocol	components\ble\ble_services\ble_hids\ble_hids.h	/^    ble_srv_security_mode_t       security_mode_protocol;                       \/**< Security settings for HID service protocol attribute *\/$/;"	m	struct:__anon115
service_handle	components\ble\ble_services\ble_hids\ble_hids.h	/^    uint16_t                      service_handle;                               \/**< Handle of HID Service (as provided by the BLE stack). *\/$/;"	m	struct:ble_hids_s
uuid	components\ble\ble_services\ble_hids\ble_hids.h	/^    uint16_t uuid;                                  \/**< UUID of characteristic. *\/$/;"	m	struct:__anon102
HANDLE_LENGTH	components\ble\ble_services\ble_hrs\ble_hrs.c	27;"	d	file:
HRM_FLAG_MASK_EXPENDED_ENERGY_INCLUDED	components\ble\ble_services\ble_hrs\ble_hrs.c	36;"	d	file:
HRM_FLAG_MASK_HR_VALUE_16BIT	components\ble\ble_services\ble_hrs\ble_hrs.c	33;"	d	file:
HRM_FLAG_MASK_RR_INTERVAL_INCLUDED	components\ble\ble_services\ble_hrs\ble_hrs.c	37;"	d	file:
HRM_FLAG_MASK_SENSOR_CONTACT_DETECTED	components\ble\ble_services\ble_hrs\ble_hrs.c	34;"	d	file:
HRM_FLAG_MASK_SENSOR_CONTACT_SUPPORTED	components\ble\ble_services\ble_hrs\ble_hrs.c	35;"	d	file:
INITIAL_VALUE_HRM	components\ble\ble_services\ble_hrs\ble_hrs.c	30;"	d	file:
MAX_HRM_LEN	components\ble\ble_services\ble_hrs\ble_hrs.c	28;"	d	file:
OPCODE_LENGTH	components\ble\ble_services\ble_hrs\ble_hrs.c	26;"	d	file:
ble_hrs_body_sensor_location_set	components\ble\ble_services\ble_hrs\ble_hrs.c	/^uint32_t ble_hrs_body_sensor_location_set(ble_hrs_t * p_hrs, uint8_t body_sensor_location)$/;"	f
ble_hrs_heart_rate_measurement_send	components\ble\ble_services\ble_hrs\ble_hrs.c	/^uint32_t ble_hrs_heart_rate_measurement_send(ble_hrs_t * p_hrs, uint16_t heart_rate)$/;"	f
ble_hrs_init	components\ble\ble_services\ble_hrs\ble_hrs.c	/^uint32_t ble_hrs_init(ble_hrs_t * p_hrs, const ble_hrs_init_t * p_hrs_init)$/;"	f
ble_hrs_on_ble_evt	components\ble\ble_services\ble_hrs\ble_hrs.c	/^void ble_hrs_on_ble_evt(ble_hrs_t * p_hrs, ble_evt_t * p_ble_evt)$/;"	f
ble_hrs_rr_interval_add	components\ble\ble_services\ble_hrs\ble_hrs.c	/^void ble_hrs_rr_interval_add(ble_hrs_t * p_hrs, uint16_t rr_interval)$/;"	f
ble_hrs_rr_interval_buffer_is_full	components\ble\ble_services\ble_hrs\ble_hrs.c	/^bool ble_hrs_rr_interval_buffer_is_full(ble_hrs_t * p_hrs)$/;"	f
ble_hrs_sensor_contact_detected_update	components\ble\ble_services\ble_hrs\ble_hrs.c	/^void ble_hrs_sensor_contact_detected_update(ble_hrs_t * p_hrs, bool is_sensor_contact_detected)$/;"	f
ble_hrs_sensor_contact_supported_set	components\ble\ble_services\ble_hrs\ble_hrs.c	/^uint32_t ble_hrs_sensor_contact_supported_set(ble_hrs_t * p_hrs, bool is_sensor_contact_supported)$/;"	f
body_sensor_location_char_add	components\ble\ble_services\ble_hrs\ble_hrs.c	/^static uint32_t body_sensor_location_char_add(ble_hrs_t * p_hrs, const ble_hrs_init_t * p_hrs_init)$/;"	f	file:
heart_rate_measurement_char_add	components\ble\ble_services\ble_hrs\ble_hrs.c	/^static uint32_t heart_rate_measurement_char_add(ble_hrs_t            * p_hrs,$/;"	f	file:
hrm_encode	components\ble\ble_services\ble_hrs\ble_hrs.c	/^static uint8_t hrm_encode(ble_hrs_t * p_hrs, uint16_t heart_rate, uint8_t * p_encoded_buffer)$/;"	f	file:
on_connect	components\ble\ble_services\ble_hrs\ble_hrs.c	/^static void on_connect(ble_hrs_t * p_hrs, ble_evt_t * p_ble_evt)$/;"	f	file:
on_disconnect	components\ble\ble_services\ble_hrs\ble_hrs.c	/^static void on_disconnect(ble_hrs_t * p_hrs, ble_evt_t * p_ble_evt)$/;"	f	file:
on_hrm_cccd_write	components\ble\ble_services\ble_hrs\ble_hrs.c	/^static void on_hrm_cccd_write(ble_hrs_t * p_hrs, ble_gatts_evt_write_t * p_evt_write)$/;"	f	file:
on_write	components\ble\ble_services\ble_hrs\ble_hrs.c	/^static void on_write(ble_hrs_t * p_hrs, ble_evt_t * p_ble_evt)$/;"	f	file:
BLE_HRS_BODY_SENSOR_LOCATION_CHEST	components\ble\ble_services\ble_hrs\ble_hrs.h	54;"	d
BLE_HRS_BODY_SENSOR_LOCATION_EAR_LOBE	components\ble\ble_services\ble_hrs\ble_hrs.h	58;"	d
BLE_HRS_BODY_SENSOR_LOCATION_FINGER	components\ble\ble_services\ble_hrs\ble_hrs.h	56;"	d
BLE_HRS_BODY_SENSOR_LOCATION_FOOT	components\ble\ble_services\ble_hrs\ble_hrs.h	59;"	d
BLE_HRS_BODY_SENSOR_LOCATION_HAND	components\ble\ble_services\ble_hrs\ble_hrs.h	57;"	d
BLE_HRS_BODY_SENSOR_LOCATION_OTHER	components\ble\ble_services\ble_hrs\ble_hrs.h	53;"	d
BLE_HRS_BODY_SENSOR_LOCATION_WRIST	components\ble\ble_services\ble_hrs\ble_hrs.h	55;"	d
BLE_HRS_EVT_NOTIFICATION_DISABLED	components\ble\ble_services\ble_hrs\ble_hrs.h	/^    BLE_HRS_EVT_NOTIFICATION_DISABLED                   \/**< Heart Rate value notification disabled event. *\/$/;"	e	enum:__anon116
BLE_HRS_EVT_NOTIFICATION_ENABLED	components\ble\ble_services\ble_hrs\ble_hrs.h	/^    BLE_HRS_EVT_NOTIFICATION_ENABLED,                   \/**< Heart Rate value notification enabled event. *\/$/;"	e	enum:__anon116
BLE_HRS_H__	components\ble\ble_services\ble_hrs\ble_hrs.h	45;"	d
BLE_HRS_MAX_BUFFERED_RR_INTERVALS	components\ble\ble_services\ble_hrs\ble_hrs.h	61;"	d
ble_hrs_evt_handler_t	components\ble\ble_services\ble_hrs\ble_hrs.h	/^typedef void (*ble_hrs_evt_handler_t) (ble_hrs_t * p_hrs, ble_hrs_evt_t * p_evt);$/;"	t
ble_hrs_evt_t	components\ble\ble_services\ble_hrs\ble_hrs.h	/^} ble_hrs_evt_t;$/;"	t	typeref:struct:__anon117
ble_hrs_evt_type_t	components\ble\ble_services\ble_hrs\ble_hrs.h	/^} ble_hrs_evt_type_t;$/;"	t	typeref:enum:__anon116
ble_hrs_init_t	components\ble\ble_services\ble_hrs\ble_hrs.h	/^} ble_hrs_init_t;$/;"	t	typeref:struct:__anon118
ble_hrs_s	components\ble\ble_services\ble_hrs\ble_hrs.h	/^struct ble_hrs_s$/;"	s
ble_hrs_t	components\ble\ble_services\ble_hrs\ble_hrs.h	/^typedef struct ble_hrs_s ble_hrs_t;$/;"	t	typeref:struct:ble_hrs_s
bsl_handles	components\ble\ble_services\ble_hrs\ble_hrs.h	/^    ble_gatts_char_handles_t     bsl_handles;                                          \/**< Handles related to the Body Sensor Location characteristic. *\/$/;"	m	struct:ble_hrs_s
conn_handle	components\ble\ble_services\ble_hrs\ble_hrs.h	/^    uint16_t                     conn_handle;                                          \/**< Handle of the current connection (as provided by the BLE stack, is BLE_CONN_HANDLE_INVALID if not in a connection). *\/$/;"	m	struct:ble_hrs_s
evt_handler	components\ble\ble_services\ble_hrs\ble_hrs.h	/^    ble_hrs_evt_handler_t        evt_handler;                                          \/**< Event handler to be called for handling events in the Heart Rate Service. *\/$/;"	m	struct:__anon118
evt_handler	components\ble\ble_services\ble_hrs\ble_hrs.h	/^    ble_hrs_evt_handler_t        evt_handler;                                          \/**< Event handler to be called for handling events in the Heart Rate Service. *\/$/;"	m	struct:ble_hrs_s
evt_type	components\ble\ble_services\ble_hrs\ble_hrs.h	/^    ble_hrs_evt_type_t evt_type;                        \/**< Type of event. *\/$/;"	m	struct:__anon117
hrcp_handles	components\ble\ble_services\ble_hrs\ble_hrs.h	/^    ble_gatts_char_handles_t     hrcp_handles;                                         \/**< Handles related to the Heart Rate Control Point characteristic. *\/$/;"	m	struct:ble_hrs_s
hrm_handles	components\ble\ble_services\ble_hrs\ble_hrs.h	/^    ble_gatts_char_handles_t     hrm_handles;                                          \/**< Handles related to the Heart Rate Measurement characteristic. *\/$/;"	m	struct:ble_hrs_s
hrs_bsl_attr_md	components\ble\ble_services\ble_hrs\ble_hrs.h	/^    ble_srv_security_mode_t      hrs_bsl_attr_md;                                      \/**< Initial security level for body sensor location attribute *\/$/;"	m	struct:__anon118
hrs_hrm_attr_md	components\ble\ble_services\ble_hrs\ble_hrs.h	/^    ble_srv_cccd_security_mode_t hrs_hrm_attr_md;                                      \/**< Initial security level for heart rate service measurement attribute *\/$/;"	m	struct:__anon118
is_expended_energy_supported	components\ble\ble_services\ble_hrs\ble_hrs.h	/^    bool                         is_expended_energy_supported;                         \/**< TRUE if Expended Energy measurement is supported. *\/$/;"	m	struct:ble_hrs_s
is_sensor_contact_detected	components\ble\ble_services\ble_hrs\ble_hrs.h	/^    bool                         is_sensor_contact_detected;                           \/**< TRUE if sensor contact has been detected. *\/$/;"	m	struct:ble_hrs_s
is_sensor_contact_supported	components\ble\ble_services\ble_hrs\ble_hrs.h	/^    bool                         is_sensor_contact_supported;                          \/**< Determines if sensor contact detection is to be supported. *\/$/;"	m	struct:__anon118
is_sensor_contact_supported	components\ble\ble_services\ble_hrs\ble_hrs.h	/^    bool                         is_sensor_contact_supported;                          \/**< TRUE if sensor contact detection is supported. *\/$/;"	m	struct:ble_hrs_s
p_body_sensor_location	components\ble\ble_services\ble_hrs\ble_hrs.h	/^    uint8_t *                    p_body_sensor_location;                               \/**< If not NULL, initial value of the Body Sensor Location characteristic. *\/$/;"	m	struct:__anon118
rr_interval	components\ble\ble_services\ble_hrs\ble_hrs.h	/^    uint16_t                     rr_interval[BLE_HRS_MAX_BUFFERED_RR_INTERVALS];       \/**< Set of RR Interval measurements since the last Heart Rate Measurement transmission. *\/$/;"	m	struct:ble_hrs_s
rr_interval_count	components\ble\ble_services\ble_hrs\ble_hrs.h	/^    uint16_t                     rr_interval_count;                                    \/**< Number of RR Interval measurements since the last Heart Rate Measurement transmission. *\/$/;"	m	struct:ble_hrs_s
service_handle	components\ble\ble_services\ble_hrs\ble_hrs.h	/^    uint16_t                     service_handle;                                       \/**< Handle of Heart Rate Service (as provided by the BLE stack). *\/$/;"	m	struct:ble_hrs_s
HRM_FLAG_MASK_HR_16BIT	components\ble\ble_services\ble_hrs_c\ble_hrs_c.c	27;"	d	file:
LOG	components\ble\ble_services\ble_hrs_c\ble_hrs_c.c	25;"	d	file:
READ_REQ	components\ble\ble_services\ble_hrs_c\ble_hrs_c.c	/^    READ_REQ,  \/**< Type identifying that this tx_message is a read request. *\/$/;"	e	enum:__anon119	file:
TX_BUFFER_MASK	components\ble\ble_services\ble_hrs_c\ble_hrs_c.c	29;"	d	file:
TX_BUFFER_SIZE	components\ble\ble_services\ble_hrs_c\ble_hrs_c.c	30;"	d	file:
WRITE_MESSAGE_LENGTH	components\ble\ble_services\ble_hrs_c\ble_hrs_c.c	32;"	d	file:
WRITE_MESSAGE_LENGTH	components\ble\ble_services\ble_hrs_c\ble_hrs_c.c	33;"	d	file:
WRITE_REQ	components\ble\ble_services\ble_hrs_c\ble_hrs_c.c	/^    WRITE_REQ  \/**< Type identifying that this tx_message is a write request. *\/$/;"	e	enum:__anon119	file:
ble_hrs_c_hrm_notif_enable	components\ble\ble_services\ble_hrs_c\ble_hrs_c.c	/^uint32_t ble_hrs_c_hrm_notif_enable(ble_hrs_c_t * p_ble_hrs_c)$/;"	f
ble_hrs_c_init	components\ble\ble_services\ble_hrs_c\ble_hrs_c.c	/^uint32_t ble_hrs_c_init(ble_hrs_c_t * p_ble_hrs_c, ble_hrs_c_init_t * p_ble_hrs_c_init)$/;"	f
ble_hrs_c_on_ble_evt	components\ble\ble_services\ble_hrs_c\ble_hrs_c.c	/^void ble_hrs_c_on_ble_evt(ble_hrs_c_t * p_ble_hrs_c, const ble_evt_t * p_ble_evt)$/;"	f
cccd_configure	components\ble\ble_services\ble_hrs_c\ble_hrs_c.c	/^static uint32_t cccd_configure(uint16_t conn_handle, uint16_t handle_cccd, bool enable)$/;"	f	file:
conn_handle	components\ble\ble_services\ble_hrs_c\ble_hrs_c.c	/^    uint16_t     conn_handle;  \/**< Connection handle to be used when transmitting this message. *\/$/;"	m	struct:__anon121	file:
db_discover_evt_handler	components\ble\ble_services\ble_hrs_c\ble_hrs_c.c	/^static void db_discover_evt_handler(ble_db_discovery_evt_t * p_evt)$/;"	f	file:
gattc_params	components\ble\ble_services\ble_hrs_c\ble_hrs_c.c	/^    ble_gattc_write_params_t gattc_params;                       \/**< GATTC parameters for this message. *\/$/;"	m	struct:__anon120	file:
gattc_value	components\ble\ble_services\ble_hrs_c\ble_hrs_c.c	/^    uint8_t                  gattc_value[WRITE_MESSAGE_LENGTH];  \/**< The message to write. *\/$/;"	m	struct:__anon120	file:
m_tx_buffer	components\ble\ble_services\ble_hrs_c\ble_hrs_c.c	/^static tx_message_t  m_tx_buffer[TX_BUFFER_SIZE];  \/**< Transmit buffer for messages to be transmitted to the central. *\/$/;"	v	file:
m_tx_index	components\ble\ble_services\ble_hrs_c\ble_hrs_c.c	/^static uint32_t      m_tx_index = 0;               \/**< Current index in the transmit buffer from where the next message to be transmitted resides. *\/$/;"	v	file:
m_tx_insert_index	components\ble\ble_services\ble_hrs_c\ble_hrs_c.c	/^static uint32_t      m_tx_insert_index = 0;        \/**< Current index in the transmit buffer where the next message should be inserted. *\/$/;"	v	file:
mp_ble_hrs_c	components\ble\ble_services\ble_hrs_c\ble_hrs_c.c	/^static ble_hrs_c_t * mp_ble_hrs_c;                 \/**< Pointer to the current instance of the HRS Client module. The memory for this provided by the application.*\/$/;"	v	file:
on_hvx	components\ble\ble_services\ble_hrs_c\ble_hrs_c.c	/^static void on_hvx(ble_hrs_c_t * p_ble_hrs_c, const ble_evt_t * p_ble_evt)$/;"	f	file:
on_write_rsp	components\ble\ble_services\ble_hrs_c\ble_hrs_c.c	/^static void on_write_rsp(ble_hrs_c_t * p_ble_hrs_c, const ble_evt_t * p_ble_evt)$/;"	f	file:
read_handle	components\ble\ble_services\ble_hrs_c\ble_hrs_c.c	/^        uint16_t       read_handle;  \/**< Read request message. *\/$/;"	m	union:__anon121::__anon122	file:
req	components\ble\ble_services\ble_hrs_c\ble_hrs_c.c	/^    } req;$/;"	m	struct:__anon121	typeref:union:__anon121::__anon122	file:
tx_buffer_process	components\ble\ble_services\ble_hrs_c\ble_hrs_c.c	/^static void tx_buffer_process(void)$/;"	f	file:
tx_message_t	components\ble\ble_services\ble_hrs_c\ble_hrs_c.c	/^} tx_message_t;$/;"	t	typeref:struct:__anon121	file:
tx_request_t	components\ble\ble_services\ble_hrs_c\ble_hrs_c.c	/^} tx_request_t;$/;"	t	typeref:enum:__anon119	file:
type	components\ble\ble_services\ble_hrs_c\ble_hrs_c.c	/^    tx_request_t type;         \/**< Type of this message, i.e. read or write message. *\/$/;"	m	struct:__anon121	file:
write_params_t	components\ble\ble_services\ble_hrs_c\ble_hrs_c.c	/^} write_params_t;$/;"	t	typeref:struct:__anon120	file:
write_req	components\ble\ble_services\ble_hrs_c\ble_hrs_c.c	/^        write_params_t write_req;    \/**< Write request message. *\/$/;"	m	union:__anon121::__anon122	file:
BLE_HRS_C_EVT_DISCOVERY_COMPLETE	components\ble\ble_services\ble_hrs_c\ble_hrs_c.h	/^    BLE_HRS_C_EVT_DISCOVERY_COMPLETE = 1,  \/**< Event indicating that the Heart Rate Service has been discovered at the peer. *\/$/;"	e	enum:__anon123
BLE_HRS_C_EVT_HRM_NOTIFICATION	components\ble\ble_services\ble_hrs_c\ble_hrs_c.h	/^    BLE_HRS_C_EVT_HRM_NOTIFICATION         \/**< Event indicating that a notification of the Heart Rate Measurement characteristic has been received from the peer. *\/$/;"	e	enum:__anon123
BLE_HRS_C_H__	components\ble\ble_services\ble_hrs_c\ble_hrs_c.h	35;"	d
ble_hrm_t	components\ble\ble_services\ble_hrs_c\ble_hrs_c.h	/^} ble_hrm_t;$/;"	t	typeref:struct:__anon124
ble_hrs_c_evt_handler_t	components\ble\ble_services\ble_hrs_c\ble_hrs_c.h	/^typedef void (* ble_hrs_c_evt_handler_t) (ble_hrs_c_t * p_ble_hrs_c, ble_hrs_c_evt_t * p_evt);$/;"	t
ble_hrs_c_evt_t	components\ble\ble_services\ble_hrs_c\ble_hrs_c.h	/^} ble_hrs_c_evt_t;$/;"	t	typeref:struct:__anon125
ble_hrs_c_evt_type_t	components\ble\ble_services\ble_hrs_c\ble_hrs_c.h	/^} ble_hrs_c_evt_type_t;$/;"	t	typeref:enum:__anon123
ble_hrs_c_init_t	components\ble\ble_services\ble_hrs_c\ble_hrs_c.h	/^} ble_hrs_c_init_t;$/;"	t	typeref:struct:__anon127
ble_hrs_c_s	components\ble\ble_services\ble_hrs_c\ble_hrs_c.h	/^struct ble_hrs_c_s$/;"	s
ble_hrs_c_t	components\ble\ble_services\ble_hrs_c\ble_hrs_c.h	/^typedef struct ble_hrs_c_s ble_hrs_c_t;$/;"	t	typeref:struct:ble_hrs_c_s
conn_handle	components\ble\ble_services\ble_hrs_c\ble_hrs_c.h	/^    uint16_t                conn_handle;      \/**< Connection handle as provided by the SoftDevice. *\/$/;"	m	struct:ble_hrs_c_s
evt_handler	components\ble\ble_services\ble_hrs_c\ble_hrs_c.h	/^    ble_hrs_c_evt_handler_t evt_handler;      \/**< Application event handler to be called when there is an event related to the heart rate service. *\/$/;"	m	struct:ble_hrs_c_s
evt_handler	components\ble\ble_services\ble_hrs_c\ble_hrs_c.h	/^    ble_hrs_c_evt_handler_t evt_handler;  \/**< Event handler to be called by the Heart Rate Client module whenever there is an event related to the Heart Rate Service. *\/$/;"	m	struct:__anon127
evt_type	components\ble\ble_services\ble_hrs_c\ble_hrs_c.h	/^    ble_hrs_c_evt_type_t evt_type;  \/**< Type of the event. *\/$/;"	m	struct:__anon125
hr_value	components\ble\ble_services\ble_hrs_c\ble_hrs_c.h	/^    uint16_t hr_value;  \/**< Heart Rate Value. *\/$/;"	m	struct:__anon124
hrm	components\ble\ble_services\ble_hrs_c\ble_hrs_c.h	/^        ble_hrm_t hrm;  \/**< Heart rate measurement received. This will be filled if the evt_type is @ref BLE_HRS_C_EVT_HRM_NOTIFICATION. *\/$/;"	m	union:__anon125::__anon126
hrm_cccd_handle	components\ble\ble_services\ble_hrs_c\ble_hrs_c.h	/^    uint16_t                hrm_cccd_handle;  \/**< Handle of the CCCD of the Heart Rate Measurement characteristic. *\/$/;"	m	struct:ble_hrs_c_s
hrm_handle	components\ble\ble_services\ble_hrs_c\ble_hrs_c.h	/^    uint16_t                hrm_handle;       \/**< Handle of the Heart Rate Measurement characteristic as provided by the SoftDevice. *\/$/;"	m	struct:ble_hrs_c_s
params	components\ble\ble_services\ble_hrs_c\ble_hrs_c.h	/^    } params;$/;"	m	struct:__anon125	typeref:union:__anon125::__anon126
HANDLE_LENGTH	components\ble\ble_services\ble_hts\ble_hts.c	27;"	d	file:
HTS_MEAS_FLAG_TEMP_TYPE_BIT	components\ble\ble_services\ble_hts\ble_hts.c	33;"	d	file:
HTS_MEAS_FLAG_TEMP_UNITS_BIT	components\ble\ble_services\ble_hts\ble_hts.c	31;"	d	file:
HTS_MEAS_FLAG_TIME_STAMP_BIT	components\ble\ble_services\ble_hts\ble_hts.c	32;"	d	file:
MAX_HTM_LEN	components\ble\ble_services\ble_hts\ble_hts.c	28;"	d	file:
OPCODE_LENGTH	components\ble\ble_services\ble_hts\ble_hts.c	26;"	d	file:
ble_hts_init	components\ble\ble_services\ble_hts\ble_hts.c	/^uint32_t ble_hts_init(ble_hts_t * p_hts, const ble_hts_init_t * p_hts_init)$/;"	f
ble_hts_is_indication_enabled	components\ble\ble_services\ble_hts\ble_hts.c	/^uint32_t ble_hts_is_indication_enabled(ble_hts_t * p_hts, bool * p_indication_enabled)$/;"	f
ble_hts_measurement_send	components\ble\ble_services\ble_hts\ble_hts.c	/^uint32_t ble_hts_measurement_send(ble_hts_t * p_hts, ble_hts_meas_t * p_hts_meas)$/;"	f
ble_hts_on_ble_evt	components\ble\ble_services\ble_hts\ble_hts.c	/^void ble_hts_on_ble_evt(ble_hts_t * p_hts, ble_evt_t * p_ble_evt)$/;"	f
hts_measurement_char_add	components\ble\ble_services\ble_hts\ble_hts.c	/^static uint32_t hts_measurement_char_add(ble_hts_t * p_hts, const ble_hts_init_t * p_hts_init)$/;"	f	file:
hts_measurement_encode	components\ble\ble_services\ble_hts\ble_hts.c	/^static uint8_t hts_measurement_encode(ble_hts_t      * p_hts,$/;"	f	file:
hts_temp_type_char_add	components\ble\ble_services\ble_hts\ble_hts.c	/^static uint32_t hts_temp_type_char_add(ble_hts_t * p_hts, const ble_hts_init_t * p_hts_init)$/;"	f	file:
on_cccd_write	components\ble\ble_services\ble_hts\ble_hts.c	/^static void on_cccd_write(ble_hts_t * p_hts, ble_gatts_evt_write_t * p_evt_write)$/;"	f	file:
on_connect	components\ble\ble_services\ble_hts\ble_hts.c	/^static void on_connect(ble_hts_t * p_hts, ble_evt_t * p_ble_evt)$/;"	f	file:
on_disconnect	components\ble\ble_services\ble_hts\ble_hts.c	/^static void on_disconnect(ble_hts_t * p_hts, ble_evt_t * p_ble_evt)$/;"	f	file:
on_hvc	components\ble\ble_services\ble_hts\ble_hts.c	/^static void on_hvc(ble_hts_t * p_hts, ble_evt_t * p_ble_evt)$/;"	f	file:
on_write	components\ble\ble_services\ble_hts\ble_hts.c	/^static void on_write(ble_hts_t * p_hts, ble_evt_t * p_ble_evt)$/;"	f	file:
BLE_HTS_EVT_INDICATION_CONFIRMED	components\ble\ble_services\ble_hts\ble_hts.h	/^    BLE_HTS_EVT_INDICATION_CONFIRMED                                        \/**< Confirmation of a temperature measurement indication has been received. *\/$/;"	e	enum:__anon128
BLE_HTS_EVT_INDICATION_DISABLED	components\ble\ble_services\ble_hts\ble_hts.h	/^    BLE_HTS_EVT_INDICATION_DISABLED,                                        \/**< Health Thermometer value indication disabled event. *\/$/;"	e	enum:__anon128
BLE_HTS_EVT_INDICATION_ENABLED	components\ble\ble_services\ble_hts\ble_hts.h	/^    BLE_HTS_EVT_INDICATION_ENABLED,                                         \/**< Health Thermometer value indication enabled event. *\/$/;"	e	enum:__anon128
BLE_HTS_H__	components\ble\ble_services\ble_hts\ble_hts.h	33;"	d
BLE_HTS_TEMP_TYPE_ARMPIT	components\ble\ble_services\ble_hts\ble_hts.h	42;"	d
BLE_HTS_TEMP_TYPE_BODY	components\ble\ble_services\ble_hts\ble_hts.h	43;"	d
BLE_HTS_TEMP_TYPE_EAR	components\ble\ble_services\ble_hts\ble_hts.h	44;"	d
BLE_HTS_TEMP_TYPE_EAR_DRUM	components\ble\ble_services\ble_hts\ble_hts.h	50;"	d
BLE_HTS_TEMP_TYPE_FINGER	components\ble\ble_services\ble_hts\ble_hts.h	45;"	d
BLE_HTS_TEMP_TYPE_GI_TRACT	components\ble\ble_services\ble_hts\ble_hts.h	46;"	d
BLE_HTS_TEMP_TYPE_MOUTH	components\ble\ble_services\ble_hts\ble_hts.h	47;"	d
BLE_HTS_TEMP_TYPE_RECTUM	components\ble\ble_services\ble_hts\ble_hts.h	48;"	d
BLE_HTS_TEMP_TYPE_TOE	components\ble\ble_services\ble_hts\ble_hts.h	49;"	d
ble_hts_evt_handler_t	components\ble\ble_services\ble_hts\ble_hts.h	/^typedef void (*ble_hts_evt_handler_t) (ble_hts_t * p_hts, ble_hts_evt_t * p_evt);$/;"	t
ble_hts_evt_t	components\ble\ble_services\ble_hts\ble_hts.h	/^} ble_hts_evt_t;$/;"	t	typeref:struct:__anon129
ble_hts_evt_type_t	components\ble\ble_services\ble_hts\ble_hts.h	/^} ble_hts_evt_type_t;$/;"	t	typeref:enum:__anon128
ble_hts_init_t	components\ble\ble_services\ble_hts\ble_hts.h	/^} ble_hts_init_t;$/;"	t	typeref:struct:__anon131
ble_hts_meas_s	components\ble\ble_services\ble_hts\ble_hts.h	/^typedef struct ble_hts_meas_s$/;"	s
ble_hts_meas_t	components\ble\ble_services\ble_hts\ble_hts.h	/^} ble_hts_meas_t;$/;"	t	typeref:struct:ble_hts_meas_s
ble_hts_s	components\ble\ble_services\ble_hts\ble_hts.h	/^struct ble_hts_s$/;"	s
ble_hts_t	components\ble\ble_services\ble_hts\ble_hts.h	/^typedef struct ble_hts_s ble_hts_t;$/;"	t	typeref:struct:ble_hts_s
conn_handle	components\ble\ble_services\ble_hts\ble_hts.h	/^    uint16_t                     conn_handle;                               \/**< Handle of the current connection (as provided by the BLE stack, is BLE_CONN_HANDLE_INVALID if not in a connection). *\/$/;"	m	struct:ble_hts_s
evt_handler	components\ble\ble_services\ble_hts\ble_hts.h	/^    ble_hts_evt_handler_t        evt_handler;                               \/**< Event handler to be called for handling events in the Health Thermometer Service. *\/$/;"	m	struct:__anon131
evt_handler	components\ble\ble_services\ble_hts\ble_hts.h	/^    ble_hts_evt_handler_t        evt_handler;                               \/**< Event handler to be called for handling events in the Health Thermometer Service. *\/$/;"	m	struct:ble_hts_s
evt_type	components\ble\ble_services\ble_hts\ble_hts.h	/^    ble_hts_evt_type_t evt_type;                                            \/**< Type of event. *\/$/;"	m	struct:__anon129
exponent	components\ble\ble_services\ble_hts\ble_hts.h	/^  int8_t  exponent;                                                         \/**< Base 10 exponent *\/$/;"	m	struct:__anon130
hts_meas_attr_md	components\ble\ble_services\ble_hts\ble_hts.h	/^    ble_srv_cccd_security_mode_t hts_meas_attr_md;                          \/**< Initial security level for health thermometer measurement attribute *\/$/;"	m	struct:__anon131
hts_temp_type_attr_md	components\ble\ble_services\ble_hts\ble_hts.h	/^    ble_srv_security_mode_t      hts_temp_type_attr_md;                     \/**< Initial security level for health thermometer tempearture type attribute *\/$/;"	m	struct:__anon131
ieee_float32_t	components\ble\ble_services\ble_hts\ble_hts.h	/^} ieee_float32_t;$/;"	t	typeref:struct:__anon130
mantissa	components\ble\ble_services\ble_hts\ble_hts.h	/^  int32_t mantissa;                                                         \/**< Mantissa, should be using only 24 bits *\/$/;"	m	struct:__anon130
meas_handles	components\ble\ble_services\ble_hts\ble_hts.h	/^    ble_gatts_char_handles_t     meas_handles;                              \/**< Handles related to the Health Thermometer Measurement characteristic. *\/$/;"	m	struct:ble_hts_s
service_handle	components\ble\ble_services\ble_hts\ble_hts.h	/^    uint16_t                     service_handle;                            \/**< Handle of Health Thermometer Service (as provided by the BLE stack). *\/$/;"	m	struct:ble_hts_s
temp_in_celcius	components\ble\ble_services\ble_hts\ble_hts.h	/^    ieee_float32_t               temp_in_celcius;                           \/**< Temperature Measurement Value (Celcius). *\/$/;"	m	struct:ble_hts_meas_s
temp_in_fahr	components\ble\ble_services\ble_hts\ble_hts.h	/^    ieee_float32_t               temp_in_fahr;                              \/**< Temperature Measurement Value (Fahrenheit). *\/$/;"	m	struct:ble_hts_meas_s
temp_in_fahr_units	components\ble\ble_services\ble_hts\ble_hts.h	/^    bool                         temp_in_fahr_units;                        \/**< True if Temperature is in Fahrenheit units, Celcius otherwise. *\/$/;"	m	struct:ble_hts_meas_s
temp_type	components\ble\ble_services\ble_hts\ble_hts.h	/^    uint8_t                      temp_type;                                 \/**< Temperature Type. *\/$/;"	m	struct:ble_hts_meas_s
temp_type	components\ble\ble_services\ble_hts\ble_hts.h	/^    uint8_t                      temp_type;                                 \/**< Temperature type if temperature characteristic is used *\/$/;"	m	struct:__anon131
temp_type	components\ble\ble_services\ble_hts\ble_hts.h	/^    uint8_t                      temp_type;                                 \/**< Temperature type indicates where the measurement was taken. *\/$/;"	m	struct:ble_hts_s
temp_type_as_characteristic	components\ble\ble_services\ble_hts\ble_hts.h	/^    uint8_t                      temp_type_as_characteristic;               \/**< Set non-zero if temp type given as characteristic *\/$/;"	m	struct:__anon131
temp_type_handles	components\ble\ble_services\ble_hts\ble_hts.h	/^    ble_gatts_char_handles_t     temp_type_handles;                         \/**< Handles related to the Health Thermometer Temperature Type characteristic. *\/$/;"	m	struct:ble_hts_s
temp_type_present	components\ble\ble_services\ble_hts\ble_hts.h	/^    bool                         temp_type_present;                         \/**< True if Temperature Type is present. *\/$/;"	m	struct:ble_hts_meas_s
time_stamp	components\ble\ble_services\ble_hts\ble_hts.h	/^    ble_date_time_t              time_stamp;                                \/**< Time Stamp. *\/$/;"	m	struct:ble_hts_meas_s
time_stamp_present	components\ble\ble_services\ble_hts\ble_hts.h	/^    bool                         time_stamp_present;                        \/**< True if Time Stamp is present. *\/$/;"	m	struct:ble_hts_meas_s
INITIAL_ALERT_LEVEL	components\ble\ble_services\ble_ias\ble_ias.c	23;"	d	file:
alert_level_char_add	components\ble\ble_services\ble_ias\ble_ias.c	/^static uint32_t alert_level_char_add(ble_ias_t * p_ias)$/;"	f	file:
ble_ias_alert_level_get	components\ble\ble_services\ble_ias\ble_ias.c	/^uint32_t ble_ias_alert_level_get(ble_ias_t * p_ias, uint8_t * p_alert_level)$/;"	f
ble_ias_init	components\ble\ble_services\ble_ias\ble_ias.c	/^uint32_t ble_ias_init(ble_ias_t * p_ias, const ble_ias_init_t * p_ias_init)$/;"	f
ble_ias_on_ble_evt	components\ble\ble_services\ble_ias\ble_ias.c	/^void ble_ias_on_ble_evt(ble_ias_t * p_ias, ble_evt_t * p_ble_evt)$/;"	f
on_connect	components\ble\ble_services\ble_ias\ble_ias.c	/^static void on_connect(ble_ias_t * p_ias, ble_evt_t * p_ble_evt)$/;"	f	file:
on_write	components\ble\ble_services\ble_ias\ble_ias.c	/^static void on_write(ble_ias_t * p_ias, ble_evt_t * p_ble_evt)$/;"	f	file:
BLE_IAS_EVT_ALERT_LEVEL_UPDATED	components\ble\ble_services\ble_ias\ble_ias.h	/^    BLE_IAS_EVT_ALERT_LEVEL_UPDATED                     \/**< Alert Level Updated event. *\/$/;"	e	enum:__anon132
BLE_IAS_H__	components\ble\ble_services\ble_ias\ble_ias.h	40;"	d
alert_level	components\ble\ble_services\ble_ias\ble_ias.h	/^        uint8_t alert_level;                            \/**< New Alert Level value. *\/$/;"	m	union:__anon133::__anon134
alert_level_handles	components\ble\ble_services\ble_ias\ble_ias.h	/^    ble_gatts_char_handles_t  alert_level_handles;      \/**< Handles related to the Alert Level characteristic. *\/$/;"	m	struct:ble_ias_s
ble_ias_evt_handler_t	components\ble\ble_services\ble_ias\ble_ias.h	/^typedef void (*ble_ias_evt_handler_t) (ble_ias_t * p_ias, ble_ias_evt_t * p_evt);$/;"	t
ble_ias_evt_t	components\ble\ble_services\ble_ias\ble_ias.h	/^} ble_ias_evt_t;$/;"	t	typeref:struct:__anon133
ble_ias_evt_type_t	components\ble\ble_services\ble_ias\ble_ias.h	/^} ble_ias_evt_type_t;$/;"	t	typeref:enum:__anon132
ble_ias_init_t	components\ble\ble_services\ble_ias\ble_ias.h	/^} ble_ias_init_t;$/;"	t	typeref:struct:__anon135
ble_ias_s	components\ble\ble_services\ble_ias\ble_ias.h	/^struct ble_ias_s$/;"	s
ble_ias_t	components\ble\ble_services\ble_ias\ble_ias.h	/^typedef struct ble_ias_s ble_ias_t;$/;"	t	typeref:struct:ble_ias_s
conn_handle	components\ble\ble_services\ble_ias\ble_ias.h	/^    uint16_t                  conn_handle;              \/**< Handle of the current connection (as provided by the BLE stack, is BLE_CONN_HANDLE_INVALID if not in a connection). *\/$/;"	m	struct:ble_ias_s
evt_handler	components\ble\ble_services\ble_ias\ble_ias.h	/^    ble_ias_evt_handler_t     evt_handler;              \/**< Event handler to be called for handling events in the Immediate Alert Service. *\/$/;"	m	struct:ble_ias_s
evt_handler	components\ble\ble_services\ble_ias\ble_ias.h	/^    ble_ias_evt_handler_t evt_handler;                  \/**< Event handler to be called for handling events in the Immediate Alert Service. *\/$/;"	m	struct:__anon135
evt_type	components\ble\ble_services\ble_ias\ble_ias.h	/^    ble_ias_evt_type_t evt_type;                        \/**< Type of event. *\/$/;"	m	struct:__anon133
params	components\ble\ble_services\ble_ias\ble_ias.h	/^    } params;$/;"	m	struct:__anon133	typeref:union:__anon133::__anon134
service_handle	components\ble\ble_services\ble_ias\ble_ias.h	/^    uint16_t                  service_handle;           \/**< Handle of Immediate Alert Service (as provided by the BLE stack). *\/$/;"	m	struct:ble_ias_s
START_HANDLE	components\ble\ble_services\ble_ias_c\ble_ias_c.c	20;"	d	file:
ble_ias_c_init	components\ble\ble_services\ble_ias_c\ble_ias_c.c	/^uint32_t ble_ias_c_init(ble_ias_c_t * p_ias_c, ble_ias_c_init_t const * p_ias_c_init)$/;"	f
ble_ias_c_on_ble_evt	components\ble\ble_services\ble_ias_c\ble_ias_c.c	/^void ble_ias_c_on_ble_evt(ble_ias_c_t * p_ias_c, ble_evt_t const * p_ble_evt)$/;"	f
ble_ias_c_send_alert_level	components\ble\ble_services\ble_ias_c\ble_ias_c.c	/^uint32_t ble_ias_c_send_alert_level(ble_ias_c_t const * p_ias_c, uint8_t alert_level)$/;"	f
m_alert_level_uuid	components\ble\ble_services\ble_ias_c\ble_ias_c.c	/^static ble_uuid_t m_alert_level_uuid;       \/**< Structure to store the UUID of Alert Level characteristic. *\/$/;"	v	file:
on_char_disc_resp	components\ble\ble_services\ble_ias_c\ble_ias_c.c	/^static void on_char_disc_resp(ble_ias_c_t * p_ias_c, const ble_evt_t * p_ble_evt)$/;"	f	file:
on_connect	components\ble\ble_services\ble_ias_c\ble_ias_c.c	/^static uint32_t on_connect(ble_ias_c_t * p_ias_c, ble_evt_t const * p_ble_evt)$/;"	f	file:
on_disconnect	components\ble\ble_services\ble_ias_c\ble_ias_c.c	/^static void on_disconnect(ble_ias_c_t * p_ias_c, ble_evt_t const * p_ble_evt)$/;"	f	file:
on_srv_disc_resp	components\ble\ble_services\ble_ias_c\ble_ias_c.c	/^static uint32_t on_srv_disc_resp(ble_ias_c_t * p_ias_c, ble_evt_t const * p_ble_evt)$/;"	f	file:
write_characteristic_value	components\ble\ble_services\ble_ias_c\ble_ias_c.c	/^static uint32_t write_characteristic_value(uint16_t  conn_handle,$/;"	f	file:
BLE_IAS_C_EVT_DISCONN_COMPLETE	components\ble\ble_services\ble_ias_c\ble_ias_c.h	/^    BLE_IAS_C_EVT_DISCONN_COMPLETE                      \/**< Event indicating that the Immediate Alert Service client module has completed the processing of BLE_GAP_EVT_DISCONNECTED event. This event is raised only if a valid instance of IAS was found at the peer during the discovery phase. This event can be used the application to do clean up related to the IAS Client.*\/$/;"	e	enum:__anon136
BLE_IAS_C_EVT_SRV_DISCOVERED	components\ble\ble_services\ble_ias_c\ble_ias_c.h	/^    BLE_IAS_C_EVT_SRV_DISCOVERED,                       \/**< Event indicating that the Immediate Alert Service is found at the peer. *\/$/;"	e	enum:__anon136
BLE_IAS_C_EVT_SRV_NOT_FOUND	components\ble\ble_services\ble_ias_c\ble_ias_c.h	/^    BLE_IAS_C_EVT_SRV_NOT_FOUND,                        \/**< Event indicating that the Immediate Alert Service is not found at the peer. *\/$/;"	e	enum:__anon136
BLE_IAS_C_H__	components\ble\ble_services\ble_ias_c\ble_ias_c.h	32;"	d
alert_level_handle	components\ble\ble_services\ble_ias_c\ble_ias_c.h	/^    uint16_t                  alert_level_handle;       \/**< Handle of Alert Level characteristic at peer (as provided by the BLE stack). *\/$/;"	m	struct:ble_ias_c_s
ble_ias_c_evt_handler_t	components\ble\ble_services\ble_ias_c\ble_ias_c.h	/^typedef void (*ble_ias_c_evt_handler_t) (ble_ias_c_t * p_ias_c, ble_ias_c_evt_t * p_evt);$/;"	t
ble_ias_c_evt_t	components\ble\ble_services\ble_ias_c\ble_ias_c.h	/^} ble_ias_c_evt_t;$/;"	t	typeref:struct:__anon137
ble_ias_c_evt_type_t	components\ble\ble_services\ble_ias_c\ble_ias_c.h	/^} ble_ias_c_evt_type_t;$/;"	t	typeref:enum:__anon136
ble_ias_c_init_t	components\ble\ble_services\ble_ias_c\ble_ias_c.h	/^} ble_ias_c_init_t;$/;"	t	typeref:struct:__anon138
ble_ias_c_is_ias_discovered	components\ble\ble_services\ble_ias_c\ble_ias_c.h	/^static __INLINE bool ble_ias_c_is_ias_discovered(const ble_ias_c_t * p_ias_c)$/;"	f
ble_ias_c_s	components\ble\ble_services\ble_ias_c\ble_ias_c.h	/^struct ble_ias_c_s$/;"	s
ble_ias_c_t	components\ble\ble_services\ble_ias_c\ble_ias_c.h	/^typedef struct ble_ias_c_s ble_ias_c_t;$/;"	t	typeref:struct:ble_ias_c_s
conn_handle	components\ble\ble_services\ble_ias_c\ble_ias_c.h	/^    uint16_t                  conn_handle;              \/**< Handle of the current connection (as provided by the BLE stack, is BLE_CONN_HANDLE_INVALID if not in a connection). *\/$/;"	m	struct:ble_ias_c_s
error_handler	components\ble\ble_services\ble_ias_c\ble_ias_c.h	/^    ble_srv_error_handler_t   error_handler;            \/**< Function to be called in case of an error. *\/$/;"	m	struct:__anon138
error_handler	components\ble\ble_services\ble_ias_c\ble_ias_c.h	/^    ble_srv_error_handler_t   error_handler;            \/**< Function to be called in case of an error. *\/$/;"	m	struct:ble_ias_c_s
evt_handler	components\ble\ble_services\ble_ias_c\ble_ias_c.h	/^    ble_ias_c_evt_handler_t   evt_handler;              \/**< Event handler to be called for handling events from the Immediate Alert Service client. *\/$/;"	m	struct:__anon138
evt_handler	components\ble\ble_services\ble_ias_c\ble_ias_c.h	/^    ble_ias_c_evt_handler_t   evt_handler;              \/**< Event handler to be called for handling events in the Immediate Alert Service client. *\/$/;"	m	struct:ble_ias_c_s
evt_type	components\ble\ble_services\ble_ias_c\ble_ias_c.h	/^    ble_ias_c_evt_type_t evt_type;                      \/**< Type of event. *\/$/;"	m	struct:__anon137
alert_level_char_add	components\ble\ble_services\ble_lls\ble_lls.c	/^static uint32_t alert_level_char_add(ble_lls_t * p_lls, const ble_lls_init_t * p_lls_init)$/;"	f	file:
ble_lls_alert_level_get	components\ble\ble_services\ble_lls\ble_lls.c	/^uint32_t ble_lls_alert_level_get(ble_lls_t * p_lls, uint8_t * p_alert_level)$/;"	f
ble_lls_init	components\ble\ble_services\ble_lls\ble_lls.c	/^uint32_t ble_lls_init(ble_lls_t * p_lls, const ble_lls_init_t * p_lls_init)$/;"	f
ble_lls_on_ble_evt	components\ble\ble_services\ble_lls\ble_lls.c	/^void ble_lls_on_ble_evt(ble_lls_t * p_lls, ble_evt_t * p_ble_evt)$/;"	f
on_auth_status	components\ble\ble_services\ble_lls\ble_lls.c	/^static void on_auth_status(ble_lls_t * p_lls, ble_evt_t * p_ble_evt)$/;"	f	file:
on_connect	components\ble\ble_services\ble_lls\ble_lls.c	/^static void on_connect(ble_lls_t * p_lls, ble_evt_t * p_ble_evt)$/;"	f	file:
on_disconnect	components\ble\ble_services\ble_lls\ble_lls.c	/^static void on_disconnect(ble_lls_t * p_lls, ble_evt_t * p_ble_evt)$/;"	f	file:
BLE_LLS_EVT_LINK_LOSS_ALERT	components\ble\ble_services\ble_lls\ble_lls.h	/^    BLE_LLS_EVT_LINK_LOSS_ALERT                         \/**< Alert Level Updated event. *\/$/;"	e	enum:__anon139
BLE_LLS_H__	components\ble\ble_services\ble_lls\ble_lls.h	40;"	d
alert_level	components\ble\ble_services\ble_lls\ble_lls.h	/^        uint8_t alert_level;                            \/**< New Alert Level value. *\/$/;"	m	union:__anon140::__anon141
alert_level_handles	components\ble\ble_services\ble_lls\ble_lls.h	/^    ble_gatts_char_handles_t  alert_level_handles;      \/**< Handles related to the Alert Level characteristic. *\/$/;"	m	struct:ble_lls_s
ble_lls_evt_handler_t	components\ble\ble_services\ble_lls\ble_lls.h	/^typedef void (*ble_lls_evt_handler_t) (ble_lls_t * p_lls, ble_lls_evt_t * p_evt);$/;"	t
ble_lls_evt_t	components\ble\ble_services\ble_lls\ble_lls.h	/^} ble_lls_evt_t;$/;"	t	typeref:struct:__anon140
ble_lls_evt_type_t	components\ble\ble_services\ble_lls\ble_lls.h	/^} ble_lls_evt_type_t;$/;"	t	typeref:enum:__anon139
ble_lls_init_t	components\ble\ble_services\ble_lls\ble_lls.h	/^} ble_lls_init_t;$/;"	t	typeref:struct:__anon142
ble_lls_s	components\ble\ble_services\ble_lls\ble_lls.h	/^struct ble_lls_s$/;"	s
ble_lls_t	components\ble\ble_services\ble_lls\ble_lls.h	/^typedef struct ble_lls_s ble_lls_t;$/;"	t	typeref:struct:ble_lls_s
conn_handle	components\ble\ble_services\ble_lls\ble_lls.h	/^    uint16_t                  conn_handle;              \/**< Handle of the current connection (as provided by the BLE stack, is BLE_CONN_HANDLE_INVALID if not in a connection). *\/$/;"	m	struct:ble_lls_s
error_handler	components\ble\ble_services\ble_lls\ble_lls.h	/^    ble_srv_error_handler_t   error_handler;            \/**< Function to be called in case of an error. *\/$/;"	m	struct:__anon142
error_handler	components\ble\ble_services\ble_lls\ble_lls.h	/^    ble_srv_error_handler_t   error_handler;            \/**< Function to be called in case of an error. *\/$/;"	m	struct:ble_lls_s
evt_handler	components\ble\ble_services\ble_lls\ble_lls.h	/^    ble_lls_evt_handler_t     evt_handler;              \/**< Event handler to be called for handling events in the Link Loss Service. *\/$/;"	m	struct:__anon142
evt_handler	components\ble\ble_services\ble_lls\ble_lls.h	/^    ble_lls_evt_handler_t     evt_handler;              \/**< Event handler to be called for handling events in the Link Loss Service. *\/$/;"	m	struct:ble_lls_s
evt_type	components\ble\ble_services\ble_lls\ble_lls.h	/^    ble_lls_evt_type_t evt_type;                        \/**< Type of event. *\/$/;"	m	struct:__anon140
initial_alert_level	components\ble\ble_services\ble_lls\ble_lls.h	/^    uint8_t                   initial_alert_level;      \/**< Initial value of the Alert Level characteristic. *\/$/;"	m	struct:__anon142
lls_attr_md	components\ble\ble_services\ble_lls\ble_lls.h	/^    ble_srv_security_mode_t   lls_attr_md;              \/**< Initial Security Setting for Link Loss Service Characteristics. *\/$/;"	m	struct:__anon142
params	components\ble\ble_services\ble_lls\ble_lls.h	/^    } params;$/;"	m	struct:__anon140	typeref:union:__anon140::__anon141
service_handle	components\ble\ble_services\ble_lls\ble_lls.h	/^    uint16_t                  service_handle;           \/**< Handle of Link Loss Service (as provided by the BLE stack). *\/$/;"	m	struct:ble_lls_s
BLE_NUS_MAX_RX_CHAR_LEN	components\ble\ble_services\ble_nus\ble_nus.c	21;"	d	file:
BLE_NUS_MAX_TX_CHAR_LEN	components\ble\ble_services\ble_nus\ble_nus.c	22;"	d	file:
BLE_UUID_NUS_RX_CHARACTERISTIC	components\ble\ble_services\ble_nus\ble_nus.c	19;"	d	file:
BLE_UUID_NUS_TX_CHARACTERISTIC	components\ble\ble_services\ble_nus\ble_nus.c	18;"	d	file:
NUS_BASE_UUID	components\ble\ble_services\ble_nus\ble_nus.c	24;"	d	file:
ble_nus_init	components\ble\ble_services\ble_nus\ble_nus.c	/^uint32_t ble_nus_init(ble_nus_t * p_nus, const ble_nus_init_t * p_nus_init)$/;"	f
ble_nus_on_ble_evt	components\ble\ble_services\ble_nus\ble_nus.c	/^void ble_nus_on_ble_evt(ble_nus_t * p_nus, ble_evt_t * p_ble_evt)$/;"	f
ble_nus_string_send	components\ble\ble_services\ble_nus\ble_nus.c	/^uint32_t ble_nus_string_send(ble_nus_t * p_nus, uint8_t * p_string, uint16_t length)$/;"	f
on_connect	components\ble\ble_services\ble_nus\ble_nus.c	/^static void on_connect(ble_nus_t * p_nus, ble_evt_t * p_ble_evt)$/;"	f	file:
on_disconnect	components\ble\ble_services\ble_nus\ble_nus.c	/^static void on_disconnect(ble_nus_t * p_nus, ble_evt_t * p_ble_evt)$/;"	f	file:
on_write	components\ble\ble_services\ble_nus\ble_nus.c	/^static void on_write(ble_nus_t * p_nus, ble_evt_t * p_ble_evt)$/;"	f	file:
rx_char_add	components\ble\ble_services\ble_nus\ble_nus.c	/^static uint32_t rx_char_add(ble_nus_t * p_nus, const ble_nus_init_t * p_nus_init)$/;"	f	file:
tx_char_add	components\ble\ble_services\ble_nus\ble_nus.c	/^static uint32_t tx_char_add(ble_nus_t * p_nus, const ble_nus_init_t * p_nus_init)$/;"	f	file:
BLE_NUS_H__	components\ble\ble_services\ble_nus\ble_nus.h	33;"	d
BLE_NUS_MAX_DATA_LEN	components\ble\ble_services\ble_nus\ble_nus.h	41;"	d
BLE_UUID_NUS_SERVICE	components\ble\ble_services\ble_nus\ble_nus.h	40;"	d
ble_nus_data_handler_t	components\ble\ble_services\ble_nus\ble_nus.h	/^typedef void (*ble_nus_data_handler_t) (ble_nus_t * p_nus, uint8_t * p_data, uint16_t length);$/;"	t
ble_nus_init_t	components\ble\ble_services\ble_nus\ble_nus.h	/^} ble_nus_init_t;$/;"	t	typeref:struct:__anon143
ble_nus_s	components\ble\ble_services\ble_nus\ble_nus.h	/^struct ble_nus_s$/;"	s
ble_nus_t	components\ble\ble_services\ble_nus\ble_nus.h	/^typedef struct ble_nus_s ble_nus_t;$/;"	t	typeref:struct:ble_nus_s
conn_handle	components\ble\ble_services\ble_nus\ble_nus.h	/^    uint16_t                 conn_handle;             \/**< Handle of the current connection (as provided by the S110 SoftDevice). BLE_CONN_HANDLE_INVALID if not in a connection. *\/$/;"	m	struct:ble_nus_s
data_handler	components\ble\ble_services\ble_nus\ble_nus.h	/^    ble_nus_data_handler_t   data_handler;            \/**< Event handler to be called for handling received data. *\/$/;"	m	struct:ble_nus_s
data_handler	components\ble\ble_services\ble_nus\ble_nus.h	/^    ble_nus_data_handler_t data_handler; \/**< Event handler to be called for handling received data. *\/$/;"	m	struct:__anon143
is_notification_enabled	components\ble\ble_services\ble_nus\ble_nus.h	/^    bool                     is_notification_enabled; \/**< Variable to indicate if the peer has enabled notification of the RX characteristic.*\/$/;"	m	struct:ble_nus_s
rx_handles	components\ble\ble_services\ble_nus\ble_nus.h	/^    ble_gatts_char_handles_t rx_handles;              \/**< Handles related to the RX characteristic (as provided by the S110 SoftDevice). *\/$/;"	m	struct:ble_nus_s
service_handle	components\ble\ble_services\ble_nus\ble_nus.h	/^    uint16_t                 service_handle;          \/**< Handle of Nordic UART Service (as provided by the S110 SoftDevice). *\/$/;"	m	struct:ble_nus_s
tx_handles	components\ble\ble_services\ble_nus\ble_nus.h	/^    ble_gatts_char_handles_t tx_handles;              \/**< Handles related to the TX characteristic (as provided by the S110 SoftDevice). *\/$/;"	m	struct:ble_nus_s
uuid_type	components\ble\ble_services\ble_nus\ble_nus.h	/^    uint8_t                  uuid_type;               \/**< UUID type for Nordic UART Service Base UUID. *\/$/;"	m	struct:ble_nus_s
HANDLE_LENGTH	components\ble\ble_services\ble_rscs\ble_rscs.c	26;"	d	file:
MAX_RSCM_LEN	components\ble\ble_services\ble_rscs\ble_rscs.c	27;"	d	file:
OPCODE_LENGTH	components\ble\ble_services\ble_rscs\ble_rscs.c	25;"	d	file:
RSC_MEAS_FLAG_INSTANT_STRIDE_LEN_PRESENT	components\ble\ble_services\ble_rscs\ble_rscs.c	30;"	d	file:
RSC_MEAS_FLAG_TOTAL_DISTANCE_PRESENT	components\ble\ble_services\ble_rscs\ble_rscs.c	31;"	d	file:
RSC_MEAS_FLAG_WALKING_OR_RUNNING_BIT	components\ble\ble_services\ble_rscs\ble_rscs.c	32;"	d	file:
ble_rscs_init	components\ble\ble_services\ble_rscs\ble_rscs.c	/^uint32_t ble_rscs_init(ble_rscs_t * p_rscs, const ble_rscs_init_t * p_rscs_init)$/;"	f
ble_rscs_measurement_send	components\ble\ble_services\ble_rscs\ble_rscs.c	/^uint32_t ble_rscs_measurement_send(ble_rscs_t * p_rscs, ble_rscs_meas_t * p_measurement)$/;"	f
ble_rscs_on_ble_evt	components\ble\ble_services\ble_rscs\ble_rscs.c	/^void ble_rscs_on_ble_evt(ble_rscs_t * p_rscs, ble_evt_t * p_ble_evt)$/;"	f
on_connect	components\ble\ble_services\ble_rscs\ble_rscs.c	/^static void on_connect(ble_rscs_t * p_rscs, ble_evt_t * p_ble_evt)$/;"	f	file:
on_disconnect	components\ble\ble_services\ble_rscs\ble_rscs.c	/^static void on_disconnect(ble_rscs_t * p_rscs, ble_evt_t * p_ble_evt)$/;"	f	file:
on_meas_cccd_write	components\ble\ble_services\ble_rscs\ble_rscs.c	/^static void on_meas_cccd_write(ble_rscs_t * p_rscs, ble_gatts_evt_write_t * p_evt_write)$/;"	f	file:
on_write	components\ble\ble_services\ble_rscs\ble_rscs.c	/^static void on_write(ble_rscs_t * p_rscs, ble_evt_t * p_ble_evt)$/;"	f	file:
rsc_feature_char_add	components\ble\ble_services\ble_rscs\ble_rscs.c	/^static uint32_t rsc_feature_char_add(ble_rscs_t * p_rscs, const ble_rscs_init_t * p_rscs_init)$/;"	f	file:
rsc_measurement_char_add	components\ble\ble_services\ble_rscs\ble_rscs.c	/^static uint32_t rsc_measurement_char_add(ble_rscs_t * p_rscs, const ble_rscs_init_t * p_rscs_init)$/;"	f	file:
rsc_measurement_encode	components\ble\ble_services\ble_rscs\ble_rscs.c	/^static uint8_t rsc_measurement_encode(ble_rscs_t      * p_rscs,$/;"	f	file:
BLE_RSCS_EVT_NOTIFICATION_DISABLED	components\ble\ble_services\ble_rscs\ble_rscs.h	/^    BLE_RSCS_EVT_NOTIFICATION_DISABLED                                      \/**< Running Speed and Cadence value notification disabled event. *\/$/;"	e	enum:__anon144
BLE_RSCS_EVT_NOTIFICATION_ENABLED	components\ble\ble_services\ble_rscs\ble_rscs.h	/^    BLE_RSCS_EVT_NOTIFICATION_ENABLED,                                      \/**< Running Speed and Cadence value notification enabled event. *\/$/;"	e	enum:__anon144
BLE_RSCS_FEATURE_CALIBRATION_PROCEDURE_BIT	components\ble\ble_services\ble_rscs\ble_rscs.h	47;"	d
BLE_RSCS_FEATURE_INSTANT_STRIDE_LEN_BIT	components\ble\ble_services\ble_rscs\ble_rscs.h	44;"	d
BLE_RSCS_FEATURE_MULTIPLE_SENSORS_BIT	components\ble\ble_services\ble_rscs\ble_rscs.h	48;"	d
BLE_RSCS_FEATURE_TOTAL_DISTANCE_BIT	components\ble\ble_services\ble_rscs\ble_rscs.h	45;"	d
BLE_RSCS_FEATURE_WALKING_OR_RUNNING_STATUS_BIT	components\ble\ble_services\ble_rscs\ble_rscs.h	46;"	d
BLE_RSCS_H__	components\ble\ble_services\ble_rscs\ble_rscs.h	36;"	d
ble_rscs_evt_handler_t	components\ble\ble_services\ble_rscs\ble_rscs.h	/^typedef void (*ble_rscs_evt_handler_t) (ble_rscs_t * p_rscs, ble_rscs_evt_t * p_evt);$/;"	t
ble_rscs_evt_t	components\ble\ble_services\ble_rscs\ble_rscs.h	/^} ble_rscs_evt_t;$/;"	t	typeref:struct:__anon145
ble_rscs_evt_type_t	components\ble\ble_services\ble_rscs\ble_rscs.h	/^} ble_rscs_evt_type_t;$/;"	t	typeref:enum:__anon144
ble_rscs_init_t	components\ble\ble_services\ble_rscs\ble_rscs.h	/^} ble_rscs_init_t;$/;"	t	typeref:struct:__anon146
ble_rscs_meas_s	components\ble\ble_services\ble_rscs\ble_rscs.h	/^typedef struct ble_rscs_meas_s$/;"	s
ble_rscs_meas_t	components\ble\ble_services\ble_rscs\ble_rscs.h	/^} ble_rscs_meas_t;$/;"	t	typeref:struct:ble_rscs_meas_s
ble_rscs_s	components\ble\ble_services\ble_rscs\ble_rscs.h	/^struct ble_rscs_s$/;"	s
ble_rscs_t	components\ble\ble_services\ble_rscs\ble_rscs.h	/^typedef struct ble_rscs_s ble_rscs_t;$/;"	t	typeref:struct:ble_rscs_s
conn_handle	components\ble\ble_services\ble_rscs\ble_rscs.h	/^    uint16_t                     conn_handle;                               \/**< Handle of the current connection (as provided by the BLE stack, is BLE_CONN_HANDLE_INVALID if not in a connection). *\/$/;"	m	struct:ble_rscs_s
evt_handler	components\ble\ble_services\ble_rscs\ble_rscs.h	/^    ble_rscs_evt_handler_t       evt_handler;                               \/**< Event handler to be called for handling events in the Running Speed and Cadence Service. *\/$/;"	m	struct:__anon146
evt_handler	components\ble\ble_services\ble_rscs\ble_rscs.h	/^    ble_rscs_evt_handler_t       evt_handler;                               \/**< Event handler to be called for handling events in the Running Speed and Cadence Service. *\/$/;"	m	struct:ble_rscs_s
evt_type	components\ble\ble_services\ble_rscs\ble_rscs.h	/^    ble_rscs_evt_type_t evt_type;                                           \/**< Type of event. *\/$/;"	m	struct:__anon145
feature	components\ble\ble_services\ble_rscs\ble_rscs.h	/^    uint16_t                     feature;                                   \/**< Bit mask of features available on sensor. *\/$/;"	m	struct:ble_rscs_s
feature	components\ble\ble_services\ble_rscs\ble_rscs.h	/^    uint16_t                     feature;                                   \/**< Initial value for features of sensor. *\/$/;"	m	struct:__anon146
feature_handles	components\ble\ble_services\ble_rscs\ble_rscs.h	/^    ble_gatts_char_handles_t     feature_handles;                           \/**< Handles related to the Running Speed and Cadence feature characteristic. *\/$/;"	m	struct:ble_rscs_s
inst_cadence	components\ble\ble_services\ble_rscs\ble_rscs.h	/^    uint8_t     inst_cadence;                                               \/**< Instantaneous Cadence. *\/$/;"	m	struct:ble_rscs_meas_s
inst_speed	components\ble\ble_services\ble_rscs\ble_rscs.h	/^    uint16_t    inst_speed;                                                 \/**< Instantaneous Speed. *\/$/;"	m	struct:ble_rscs_meas_s
inst_stride_length	components\ble\ble_services\ble_rscs\ble_rscs.h	/^    uint16_t    inst_stride_length;                                         \/**< Instantaneous Stride Length. *\/$/;"	m	struct:ble_rscs_meas_s
is_inst_stride_len_present	components\ble\ble_services\ble_rscs\ble_rscs.h	/^    bool        is_inst_stride_len_present;                                 \/**< True if Instantaneous Stride Length is present in the measurement. *\/$/;"	m	struct:ble_rscs_meas_s
is_running	components\ble\ble_services\ble_rscs\ble_rscs.h	/^    bool        is_running;                                                 \/**< True if running, False if walking. *\/$/;"	m	struct:ble_rscs_meas_s
is_total_distance_present	components\ble\ble_services\ble_rscs\ble_rscs.h	/^    bool        is_total_distance_present;                                  \/**< True if Total Distance is present in the measurement. *\/$/;"	m	struct:ble_rscs_meas_s
meas_handles	components\ble\ble_services\ble_rscs\ble_rscs.h	/^    ble_gatts_char_handles_t     meas_handles;                              \/**< Handles related to the Running Speed and Cadence Measurement characteristic. *\/$/;"	m	struct:ble_rscs_s
rsc_feature_attr_md	components\ble\ble_services\ble_rscs\ble_rscs.h	/^    ble_srv_security_mode_t      rsc_feature_attr_md;                       \/**< Initial security level for feature attribute *\/$/;"	m	struct:__anon146
rsc_meas_attr_md	components\ble\ble_services\ble_rscs\ble_rscs.h	/^    ble_srv_cccd_security_mode_t rsc_meas_attr_md;                          \/**< Initial security level for running speed and cadence measurement attribute *\/$/;"	m	struct:__anon146
service_handle	components\ble\ble_services\ble_rscs\ble_rscs.h	/^    uint16_t                     service_handle;                            \/**< Handle of Running Speed and Cadence Service (as provided by the BLE stack). *\/$/;"	m	struct:ble_rscs_s
total_distance	components\ble\ble_services\ble_rscs\ble_rscs.h	/^    uint32_t    total_distance;                                             \/**< Total Distance. *\/$/;"	m	struct:ble_rscs_meas_s
ble_tps_init	components\ble\ble_services\ble_tps\ble_tps.c	/^uint32_t ble_tps_init(ble_tps_t * p_tps, const ble_tps_init_t * p_tps_init)$/;"	f
ble_tps_on_ble_evt	components\ble\ble_services\ble_tps\ble_tps.c	/^void ble_tps_on_ble_evt(ble_tps_t * p_tps, ble_evt_t * p_ble_evt)$/;"	f
ble_tps_tx_power_level_set	components\ble\ble_services\ble_tps\ble_tps.c	/^uint32_t ble_tps_tx_power_level_set(ble_tps_t * p_tps, int8_t tx_power_level)$/;"	f
on_connect	components\ble\ble_services\ble_tps\ble_tps.c	/^static void on_connect(ble_tps_t * p_tps, ble_evt_t * p_ble_evt)$/;"	f	file:
tx_power_level_char_add	components\ble\ble_services\ble_tps\ble_tps.c	/^static uint32_t tx_power_level_char_add(ble_tps_t            * p_tps,$/;"	f	file:
BLE_TPS_H__	components\ble\ble_services\ble_tps\ble_tps.h	33;"	d
ble_tps_init_t	components\ble\ble_services\ble_tps\ble_tps.h	/^} ble_tps_init_t;$/;"	t	typeref:struct:__anon147
ble_tps_t	components\ble\ble_services\ble_tps\ble_tps.h	/^} ble_tps_t;$/;"	t	typeref:struct:__anon148
conn_handle	components\ble\ble_services\ble_tps\ble_tps.h	/^    uint16_t                  conn_handle;              \/**< Handle of the current connection (as provided by the BLE stack, is BLE_CONN_HANDLE_INVALID if not in a connection). *\/$/;"	m	struct:__anon148
initial_tx_power_level	components\ble\ble_services\ble_tps\ble_tps.h	/^    int8_t                    initial_tx_power_level;   \/**< Initial value of the TX Power Level characteristic (in dBm). *\/$/;"	m	struct:__anon147
service_handle	components\ble\ble_services\ble_tps\ble_tps.h	/^    uint16_t                  service_handle;           \/**< Handle of TX Power Service (as provided by the BLE stack). *\/$/;"	m	struct:__anon148
tps_attr_md	components\ble\ble_services\ble_tps\ble_tps.h	/^    ble_srv_security_mode_t   tps_attr_md;              \/**< Initial Security Setting for TX Power Service Characteristics. *\/$/;"	m	struct:__anon147
tx_power_level_handles	components\ble\ble_services\ble_tps\ble_tps.h	/^    ble_gatts_char_handles_t  tx_power_level_handles;   \/**< Handles related to the TX Power Level characteristic. *\/$/;"	m	struct:__anon148
ADV_DATA_OFFSET	components\ble\common\ble_advdata.c	27;"	d	file:
ADV_FLAG_OFFSET	components\ble\common\ble_advdata.c	22;"	d	file:
adv_data_encode	components\ble\common\ble_advdata.c	/^static uint32_t adv_data_encode(const ble_advdata_t * p_advdata,$/;"	f	file:
advdata_check	components\ble\common\ble_advdata.c	/^static uint32_t advdata_check(const ble_advdata_t * p_advdata)$/;"	f	file:
appearance_encode	components\ble\common\ble_advdata.c	/^static uint32_t appearance_encode(uint8_t * p_encoded_data, uint8_t * p_len)$/;"	f	file:
ble_advdata_set	components\ble\common\ble_advdata.c	/^uint32_t ble_advdata_set(const ble_advdata_t * p_advdata, const ble_advdata_t * p_srdata)$/;"	f
conn_int_check	components\ble\common\ble_advdata.c	/^static uint32_t conn_int_check(const ble_advdata_conn_int_t *p_conn_int)$/;"	f	file:
conn_int_encode	components\ble\common\ble_advdata.c	/^static uint32_t conn_int_encode(const ble_advdata_conn_int_t * p_conn_int,$/;"	f	file:
manuf_specific_data_encode	components\ble\common\ble_advdata.c	/^static uint32_t manuf_specific_data_encode(const ble_advdata_manuf_data_t * p_manuf_sp_data,$/;"	f	file:
name_encode	components\ble\common\ble_advdata.c	/^static uint32_t name_encode(const ble_advdata_t * p_advdata,$/;"	f	file:
service_data_encode	components\ble\common\ble_advdata.c	/^static uint32_t service_data_encode(const ble_advdata_t * p_advdata,$/;"	f	file:
srdata_check	components\ble\common\ble_advdata.c	/^static uint32_t srdata_check(const ble_advdata_t * p_srdata)$/;"	f	file:
tx_power_level_encode	components\ble\common\ble_advdata.c	/^static uint32_t tx_power_level_encode(int8_t    tx_power_level,$/;"	f	file:
uuid_list_encode	components\ble\common\ble_advdata.c	/^static uint32_t uuid_list_encode(const ble_advdata_uuid_list_t * p_uuid_list,$/;"	f	file:
uuid_list_sized_encode	components\ble\common\ble_advdata.c	/^static uint32_t uuid_list_sized_encode(const ble_advdata_uuid_list_t * p_uuid_list,$/;"	f	file:
BLE_ADVDATA_FULL_NAME	components\ble\common\ble_advdata.h	/^    BLE_ADVDATA_FULL_NAME                                             \/**< Include full device name in advertising data. *\/$/;"	e	enum:__anon149
BLE_ADVDATA_H__	components\ble\common\ble_advdata.h	23;"	d
BLE_ADVDATA_NO_NAME	components\ble\common\ble_advdata.h	/^    BLE_ADVDATA_NO_NAME,                                              \/**< Include no device name in advertising data. *\/$/;"	e	enum:__anon149
BLE_ADVDATA_SHORT_NAME	components\ble\common\ble_advdata.h	/^    BLE_ADVDATA_SHORT_NAME,                                           \/**< Include short device name in advertising data. *\/$/;"	e	enum:__anon149
ble_advdata_conn_int_t	components\ble\common\ble_advdata.h	/^} ble_advdata_conn_int_t;$/;"	t	typeref:struct:__anon151
ble_advdata_manuf_data_t	components\ble\common\ble_advdata.h	/^} ble_advdata_manuf_data_t;$/;"	t	typeref:struct:__anon152
ble_advdata_name_type_t	components\ble\common\ble_advdata.h	/^} ble_advdata_name_type_t;$/;"	t	typeref:enum:__anon149
ble_advdata_service_data_t	components\ble\common\ble_advdata.h	/^} ble_advdata_service_data_t;$/;"	t	typeref:struct:__anon153
ble_advdata_t	components\ble\common\ble_advdata.h	/^} ble_advdata_t;$/;"	t	typeref:struct:__anon154
ble_advdata_uuid_list_t	components\ble\common\ble_advdata.h	/^} ble_advdata_uuid_list_t;$/;"	t	typeref:struct:__anon150
company_identifier	components\ble\common\ble_advdata.h	/^    uint16_t                     company_identifier;                  \/**< Company Identifier Code. *\/$/;"	m	struct:__anon152
data	components\ble\common\ble_advdata.h	/^    uint8_array_t                data;                                \/**< Additional manufacturer specific data. *\/$/;"	m	struct:__anon152
data	components\ble\common\ble_advdata.h	/^    uint8_array_t                data;                                \/**< Additional service data. *\/$/;"	m	struct:__anon153
flags	components\ble\common\ble_advdata.h	/^    uint8_t                      flags;                               \/**< Advertising data Flags field. *\/$/;"	m	struct:__anon154
include_appearance	components\ble\common\ble_advdata.h	/^    bool                         include_appearance;                  \/**< Determines if Appearance shall be included. *\/$/;"	m	struct:__anon154
max_conn_interval	components\ble\common\ble_advdata.h	/^    uint16_t                     max_conn_interval;                   \/**< Maximum Connection Interval, in units of 1.25ms, range 6 to 3200 (i.e. 7.5ms to 4s). Value of 0xFFFF indicates no specific maximum. *\/$/;"	m	struct:__anon151
min_conn_interval	components\ble\common\ble_advdata.h	/^    uint16_t                     min_conn_interval;                   \/**< Minimum Connection Interval, in units of 1.25ms, range 6 to 3200 (i.e. 7.5ms to 4s). *\/$/;"	m	struct:__anon151
name_type	components\ble\common\ble_advdata.h	/^    ble_advdata_name_type_t      name_type;                           \/**< Type of device name. *\/$/;"	m	struct:__anon154
p_manuf_specific_data	components\ble\common\ble_advdata.h	/^    ble_advdata_manuf_data_t *   p_manuf_specific_data;               \/**< Manufacturer specific data. *\/$/;"	m	struct:__anon154
p_service_data_array	components\ble\common\ble_advdata.h	/^    ble_advdata_service_data_t * p_service_data_array;                \/**< Array of Service data structures. *\/$/;"	m	struct:__anon154
p_slave_conn_int	components\ble\common\ble_advdata.h	/^    ble_advdata_conn_int_t *     p_slave_conn_int;                    \/**< Slave Connection Interval Range. *\/$/;"	m	struct:__anon154
p_tx_power_level	components\ble\common\ble_advdata.h	/^    int8_t *                     p_tx_power_level;                    \/**< TX Power Level field. *\/$/;"	m	struct:__anon154
p_uuids	components\ble\common\ble_advdata.h	/^    ble_uuid_t *                 p_uuids;                             \/**< Pointer to UUID array entries. *\/$/;"	m	struct:__anon150
service_data_count	components\ble\common\ble_advdata.h	/^    uint8_t                      service_data_count;                  \/**< Number of Service data structures. *\/$/;"	m	struct:__anon154
service_uuid	components\ble\common\ble_advdata.h	/^    uint16_t                     service_uuid;                        \/**< Service UUID. *\/$/;"	m	struct:__anon153
short_name_len	components\ble\common\ble_advdata.h	/^    uint8_t                      short_name_len;                      \/**< Length of short device name (if short type is specified). *\/$/;"	m	struct:__anon154
uuid_cnt	components\ble\common\ble_advdata.h	/^    uint16_t                     uuid_cnt;                            \/**< Number of UUID entries. *\/$/;"	m	struct:__anon150
uuids_complete	components\ble\common\ble_advdata.h	/^    ble_advdata_uuid_list_t      uuids_complete;                      \/**< List of UUIDs in the 'Complete' list. *\/$/;"	m	struct:__anon154
uuids_more_available	components\ble\common\ble_advdata.h	/^    ble_advdata_uuid_list_t      uuids_more_available;                \/**< List of UUIDs in the 'More Available' list. *\/$/;"	m	struct:__anon154
uuids_solicited	components\ble\common\ble_advdata.h	/^    ble_advdata_uuid_list_t      uuids_solicited;                     \/**< List of solcited UUIDs. *\/$/;"	m	struct:__anon154
ble_advdata_parser_field_find	components\ble\common\ble_advdata_parser.c	/^uint32_t ble_advdata_parser_field_find(uint8_t    type,$/;"	f
BLE_ADVDATA_PARSER_H_	components\ble\common\ble_advdata_parser.h	2;"	d
ble_conn_params_change_conn_params	components\ble\common\ble_conn_params.c	/^uint32_t ble_conn_params_change_conn_params(ble_gap_conn_params_t * new_params)$/;"	f
ble_conn_params_init	components\ble\common\ble_conn_params.c	/^uint32_t ble_conn_params_init(const ble_conn_params_init_t * p_init)$/;"	f
ble_conn_params_on_ble_evt	components\ble\common\ble_conn_params.c	/^void ble_conn_params_on_ble_evt(ble_evt_t * p_ble_evt)$/;"	f
ble_conn_params_stop	components\ble\common\ble_conn_params.c	/^uint32_t ble_conn_params_stop(void)$/;"	f
conn_params_negotiation	components\ble\common\ble_conn_params.c	/^static void conn_params_negotiation(void)$/;"	f	file:
is_conn_params_ok	components\ble\common\ble_conn_params.c	/^static bool is_conn_params_ok(ble_gap_conn_params_t * p_conn_params)$/;"	f	file:
m_change_param	components\ble\common\ble_conn_params.c	/^static bool m_change_param = false;$/;"	v	file:
m_conn_handle	components\ble\common\ble_conn_params.c	/^static uint16_t               m_conn_handle;            \/**< Current connection handle. *\/$/;"	v	file:
m_conn_params_config	components\ble\common\ble_conn_params.c	/^static ble_conn_params_init_t m_conn_params_config;     \/**< Configuration as specified by the application. *\/$/;"	v	file:
m_conn_params_timer_id	components\ble\common\ble_conn_params.c	/^static app_timer_id_t         m_conn_params_timer_id;   \/**< Connection parameters timer. *\/$/;"	v	file:
m_current_conn_params	components\ble\common\ble_conn_params.c	/^static ble_gap_conn_params_t  m_current_conn_params;    \/**< Connection parameters received in the most recent Connect event. *\/$/;"	v	file:
m_preferred_conn_params	components\ble\common\ble_conn_params.c	/^static ble_gap_conn_params_t  m_preferred_conn_params;  \/**< Connection parameters preferred by the application. *\/$/;"	v	file:
m_update_count	components\ble\common\ble_conn_params.c	/^static uint8_t                m_update_count;           \/**< Number of Connection Parameter Update messages that has currently been sent. *\/$/;"	v	file:
on_conn_params_update	components\ble\common\ble_conn_params.c	/^static void on_conn_params_update(ble_evt_t * p_ble_evt)$/;"	f	file:
on_connect	components\ble\common\ble_conn_params.c	/^static void on_connect(ble_evt_t * p_ble_evt)$/;"	f	file:
on_disconnect	components\ble\common\ble_conn_params.c	/^static void on_disconnect(ble_evt_t * p_ble_evt)$/;"	f	file:
on_write	components\ble\common\ble_conn_params.c	/^static void on_write(ble_evt_t * p_ble_evt)$/;"	f	file:
update_timeout_handler	components\ble\common\ble_conn_params.c	/^static void update_timeout_handler(void * p_context)$/;"	f	file:
BLE_CONN_PARAMS_EVT_FAILED	components\ble\common\ble_conn_params.h	/^    BLE_CONN_PARAMS_EVT_FAILED   ,                                  \/**< Negotiation procedure failed. *\/$/;"	e	enum:__anon155
BLE_CONN_PARAMS_EVT_SUCCEEDED	components\ble\common\ble_conn_params.h	/^    BLE_CONN_PARAMS_EVT_SUCCEEDED                                   \/**< Negotiation procedure succeeded. *\/$/;"	e	enum:__anon155
BLE_CONN_PARAMS_H__	components\ble\common\ble_conn_params.h	22;"	d
ble_conn_params_evt_handler_t	components\ble\common\ble_conn_params.h	/^typedef void (*ble_conn_params_evt_handler_t) (ble_conn_params_evt_t * p_evt);$/;"	t
ble_conn_params_evt_t	components\ble\common\ble_conn_params.h	/^} ble_conn_params_evt_t;$/;"	t	typeref:struct:__anon156
ble_conn_params_evt_type_t	components\ble\common\ble_conn_params.h	/^} ble_conn_params_evt_type_t;$/;"	t	typeref:enum:__anon155
ble_conn_params_init_t	components\ble\common\ble_conn_params.h	/^} ble_conn_params_init_t;$/;"	t	typeref:struct:__anon157
disconnect_on_fail	components\ble\common\ble_conn_params.h	/^    bool                          disconnect_on_fail;               \/**< Set to TRUE if a failed connection parameters update shall cause an automatic disconnection, set to FALSE otherwise. *\/$/;"	m	struct:__anon157
error_handler	components\ble\common\ble_conn_params.h	/^    ble_srv_error_handler_t       error_handler;                    \/**< Function to be called in case of an error. *\/$/;"	m	struct:__anon157
evt_handler	components\ble\common\ble_conn_params.h	/^    ble_conn_params_evt_handler_t evt_handler;                      \/**< Event handler to be called for handling events in the Connection Parameters. *\/$/;"	m	struct:__anon157
evt_type	components\ble\common\ble_conn_params.h	/^    ble_conn_params_evt_type_t evt_type;                            \/**< Type of event. *\/$/;"	m	struct:__anon156
first_conn_params_update_delay	components\ble\common\ble_conn_params.h	/^    uint32_t                      first_conn_params_update_delay;   \/**< Time from initiating event (connect or start of notification) to first time sd_ble_gap_conn_param_update is called (in number of timer ticks). *\/$/;"	m	struct:__anon157
max_conn_params_update_count	components\ble\common\ble_conn_params.h	/^    uint8_t                       max_conn_params_update_count;     \/**< Number of attempts before giving up the negotiation. *\/$/;"	m	struct:__anon157
next_conn_params_update_delay	components\ble\common\ble_conn_params.h	/^    uint32_t                      next_conn_params_update_delay;    \/**< Time between each call to sd_ble_gap_conn_param_update after the first (in number of timer ticks). Recommended value 30 seconds as per BLUETOOTH SPECIFICATION Version 4.0. *\/$/;"	m	struct:__anon157
p_conn_params	components\ble\common\ble_conn_params.h	/^    ble_gap_conn_params_t *       p_conn_params;                    \/**< Pointer to the connection parameters desired by the application. When calling ble_conn_params_init, if this parameter is set to NULL, the connection parameters will be fetched from host. *\/$/;"	m	struct:__anon157
start_on_notify_cccd_handle	components\ble\common\ble_conn_params.h	/^    uint16_t                      start_on_notify_cccd_handle;      \/**< If procedure is to be started when notification is started, set this to the handle of the corresponding CCCD. Set to BLE_GATT_HANDLE_INVALID if procedure is to be started on connect event. *\/$/;"	m	struct:__anon157
BLE_DATE_TIME_H__	components\ble\common\ble_date_time.h	30;"	d
ble_date_time_decode	components\ble\common\ble_date_time.h	/^static __INLINE uint8_t ble_date_time_decode(ble_date_time_t * p_date_time,$/;"	f
ble_date_time_encode	components\ble\common\ble_date_time.h	/^static __INLINE uint8_t ble_date_time_encode(const ble_date_time_t * p_date_time,$/;"	f
ble_date_time_t	components\ble\common\ble_date_time.h	/^} ble_date_time_t;$/;"	t	typeref:struct:__anon158
day	components\ble\common\ble_date_time.h	/^    uint8_t  day;$/;"	m	struct:__anon158
hours	components\ble\common\ble_date_time.h	/^    uint8_t  hours;$/;"	m	struct:__anon158
minutes	components\ble\common\ble_date_time.h	/^    uint8_t  minutes;$/;"	m	struct:__anon158
month	components\ble\common\ble_date_time.h	/^    uint8_t  month;$/;"	m	struct:__anon158
seconds	components\ble\common\ble_date_time.h	/^    uint8_t  seconds;$/;"	m	struct:__anon158
year	components\ble\common\ble_date_time.h	/^    uint16_t year;$/;"	m	struct:__anon158
BLE_NB_MAX_SENSOR_LOCATIONS	components\ble\common\ble_sensor_location.h	38;"	d
BLE_SENSOR_LOCATION_CHAINSTAY	components\ble\common\ble_sensor_location.h	/^    BLE_SENSOR_LOCATION_CHAINSTAY    = 11,  \/**<-- Chainstay    *\/$/;"	e	enum:__anon159
BLE_SENSOR_LOCATION_FRONT_HUB	components\ble\common\ble_sensor_location.h	/^    BLE_SENSOR_LOCATION_FRONT_HUB    = 9 ,  \/**<-- Front Hub    *\/$/;"	e	enum:__anon159
BLE_SENSOR_LOCATION_FRONT_WHEEL	components\ble\common\ble_sensor_location.h	/^    BLE_SENSOR_LOCATION_FRONT_WHEEL  = 4 ,  \/**<-- Front Wheel  *\/$/;"	e	enum:__anon159
BLE_SENSOR_LOCATION_HIP	components\ble\common\ble_sensor_location.h	/^    BLE_SENSOR_LOCATION_HIP          = 3 ,  \/**<-- Hip          *\/$/;"	e	enum:__anon159
BLE_SENSOR_LOCATION_H__	components\ble\common\ble_sensor_location.h	19;"	d
BLE_SENSOR_LOCATION_IN_SHOE	components\ble\common\ble_sensor_location.h	/^    BLE_SENSOR_LOCATION_IN_SHOE      = 2 ,  \/**<-- In shoe      *\/$/;"	e	enum:__anon159
BLE_SENSOR_LOCATION_LEFT_CRANK	components\ble\common\ble_sensor_location.h	/^    BLE_SENSOR_LOCATION_LEFT_CRANK   = 5 ,  \/**<-- Left Crank   *\/$/;"	e	enum:__anon159
BLE_SENSOR_LOCATION_LEFT_PEDAL	components\ble\common\ble_sensor_location.h	/^    BLE_SENSOR_LOCATION_LEFT_PEDAL   = 7 ,  \/**<-- Left Pedal   *\/$/;"	e	enum:__anon159
BLE_SENSOR_LOCATION_OTHER	components\ble\common\ble_sensor_location.h	/^    BLE_SENSOR_LOCATION_OTHER        = 0 ,  \/**<-- Other        *\/$/;"	e	enum:__anon159
BLE_SENSOR_LOCATION_REAR_DROPOUT	components\ble\common\ble_sensor_location.h	/^    BLE_SENSOR_LOCATION_REAR_DROPOUT = 10,  \/**<-- Rear Dropout *\/$/;"	e	enum:__anon159
BLE_SENSOR_LOCATION_REAR_HUB	components\ble\common\ble_sensor_location.h	/^    BLE_SENSOR_LOCATION_REAR_HUB     = 13,  \/**<-- Rear Hub     *\/$/;"	e	enum:__anon159
BLE_SENSOR_LOCATION_REAR_WHEEL	components\ble\common\ble_sensor_location.h	/^    BLE_SENSOR_LOCATION_REAR_WHEEL   = 12,  \/**<-- Rear Wheel   *\/$/;"	e	enum:__anon159
BLE_SENSOR_LOCATION_RIGHT_CRANK	components\ble\common\ble_sensor_location.h	/^    BLE_SENSOR_LOCATION_RIGHT_CRANK  = 6 ,  \/**<-- Right Crank  *\/$/;"	e	enum:__anon159
BLE_SENSOR_LOCATION_RIGHT_PEDAL	components\ble\common\ble_sensor_location.h	/^    BLE_SENSOR_LOCATION_RIGHT_PEDAL  = 8 ,  \/**<-- Right Pedal  *\/$/;"	e	enum:__anon159
BLE_SENSOR_LOCATION_TOP_OF_SHOE	components\ble\common\ble_sensor_location.h	/^    BLE_SENSOR_LOCATION_TOP_OF_SHOE  = 1 ,  \/**<-- Top of shoe  *\/$/;"	e	enum:__anon159
ble_sensor_location_t	components\ble\common\ble_sensor_location.h	/^}ble_sensor_location_t;$/;"	t	typeref:enum:__anon159
ble_srv_ascii_to_utf8	components\ble\common\ble_srv_common.c	/^void ble_srv_ascii_to_utf8(ble_srv_utf8_str_t * p_utf8, char * p_ascii)$/;"	f
ble_srv_report_ref_encode	components\ble\common\ble_srv_common.c	/^uint8_t ble_srv_report_ref_encode(uint8_t                    * p_encoded_buffer,$/;"	f
BLE_CCCD_VALUE_LEN	components\ble\common\ble_srv_common.h	137;"	d
BLE_CHAR_ALERT_LEVEL_HIGH_ALERT	components\ble\common\ble_srv_common.h	133;"	d
BLE_CHAR_ALERT_LEVEL_MILD_ALERT	components\ble\common\ble_srv_common.h	132;"	d
BLE_CHAR_ALERT_LEVEL_NO_ALERT	components\ble\common\ble_srv_common.h	131;"	d
BLE_SRV_COMMON_H__	components\ble\common\ble_srv_common.h	22;"	d
BLE_SRV_ENCODED_REPORT_REF_LEN	components\ble\common\ble_srv_common.h	136;"	d
BLE_UUID_ALERT_CATEGORY_ID_BIT_MASK_CHAR	components\ble\common\ble_srv_common.h	60;"	d
BLE_UUID_ALERT_CATEGORY_ID_CHAR	components\ble\common\ble_srv_common.h	59;"	d
BLE_UUID_ALERT_LEVEL_CHAR	components\ble\common\ble_srv_common.h	61;"	d
BLE_UUID_ALERT_NOTIFICATION_CONTROL_POINT_CHAR	components\ble\common\ble_srv_common.h	62;"	d
BLE_UUID_ALERT_NOTIFICATION_SERVICE	components\ble\common\ble_srv_common.h	33;"	d
BLE_UUID_ALERT_STATUS_CHAR	components\ble\common\ble_srv_common.h	63;"	d
BLE_UUID_BATTERY_LEVEL_CHAR	components\ble\common\ble_srv_common.h	64;"	d
BLE_UUID_BATTERY_LEVEL_STATE_CHAR	components\ble\common\ble_srv_common.h	55;"	d
BLE_UUID_BATTERY_POWER_STATE_CHAR	components\ble\common\ble_srv_common.h	56;"	d
BLE_UUID_BATTERY_SERVICE	components\ble\common\ble_srv_common.h	34;"	d
BLE_UUID_BLOOD_PRESSURE_FEATURE_CHAR	components\ble\common\ble_srv_common.h	65;"	d
BLE_UUID_BLOOD_PRESSURE_MEASUREMENT_CHAR	components\ble\common\ble_srv_common.h	66;"	d
BLE_UUID_BLOOD_PRESSURE_SERVICE	components\ble\common\ble_srv_common.h	35;"	d
BLE_UUID_BODY_SENSOR_LOCATION_CHAR	components\ble\common\ble_srv_common.h	67;"	d
BLE_UUID_BOOT_KEYBOARD_INPUT_REPORT_CHAR	components\ble\common\ble_srv_common.h	68;"	d
BLE_UUID_BOOT_KEYBOARD_OUTPUT_REPORT_CHAR	components\ble\common\ble_srv_common.h	69;"	d
BLE_UUID_BOOT_MOUSE_INPUT_REPORT_CHAR	components\ble\common\ble_srv_common.h	70;"	d
BLE_UUID_CSC_FEATURE_CHAR	components\ble\common\ble_srv_common.h	119;"	d
BLE_UUID_CSC_MEASUREMENT_CHAR	components\ble\common\ble_srv_common.h	120;"	d
BLE_UUID_CURRENT_TIME_CHAR	components\ble\common\ble_srv_common.h	71;"	d
BLE_UUID_CURRENT_TIME_SERVICE	components\ble\common\ble_srv_common.h	36;"	d
BLE_UUID_CYCLING_SPEED_AND_CADENCE	components\ble\common\ble_srv_common.h	37;"	d
BLE_UUID_DATE_TIME_CHAR	components\ble\common\ble_srv_common.h	72;"	d
BLE_UUID_DAY_DATE_TIME_CHAR	components\ble\common\ble_srv_common.h	73;"	d
BLE_UUID_DAY_OF_WEEK_CHAR	components\ble\common\ble_srv_common.h	74;"	d
BLE_UUID_DEVICE_INFORMATION_SERVICE	components\ble\common\ble_srv_common.h	38;"	d
BLE_UUID_DST_OFFSET_CHAR	components\ble\common\ble_srv_common.h	75;"	d
BLE_UUID_EXACT_TIME_256_CHAR	components\ble\common\ble_srv_common.h	76;"	d
BLE_UUID_EXTERNAL_REPORT_REF_DESCR	components\ble\common\ble_srv_common.h	125;"	d
BLE_UUID_FIRMWARE_REVISION_STRING_CHAR	components\ble\common\ble_srv_common.h	77;"	d
BLE_UUID_GLUCOSE_FEATURE_CHAR	components\ble\common\ble_srv_common.h	78;"	d
BLE_UUID_GLUCOSE_MEASUREMENT_CHAR	components\ble\common\ble_srv_common.h	79;"	d
BLE_UUID_GLUCOSE_MEASUREMENT_CONTEXT_CHAR	components\ble\common\ble_srv_common.h	80;"	d
BLE_UUID_GLUCOSE_SERVICE	components\ble\common\ble_srv_common.h	39;"	d
BLE_UUID_HARDWARE_REVISION_STRING_CHAR	components\ble\common\ble_srv_common.h	81;"	d
BLE_UUID_HEALTH_THERMOMETER_SERVICE	components\ble\common\ble_srv_common.h	40;"	d
BLE_UUID_HEART_RATE_CONTROL_POINT_CHAR	components\ble\common\ble_srv_common.h	82;"	d
BLE_UUID_HEART_RATE_MEASUREMENT_CHAR	components\ble\common\ble_srv_common.h	83;"	d
BLE_UUID_HEART_RATE_SERVICE	components\ble\common\ble_srv_common.h	41;"	d
BLE_UUID_HID_CONTROL_POINT_CHAR	components\ble\common\ble_srv_common.h	84;"	d
BLE_UUID_HID_INFORMATION_CHAR	components\ble\common\ble_srv_common.h	85;"	d
BLE_UUID_HUMAN_INTERFACE_DEVICE_SERVICE	components\ble\common\ble_srv_common.h	42;"	d
BLE_UUID_IEEE_REGULATORY_CERTIFICATION_DATA_LIST_CHAR	components\ble\common\ble_srv_common.h	86;"	d
BLE_UUID_IMMEDIATE_ALERT_SERVICE	components\ble\common\ble_srv_common.h	43;"	d
BLE_UUID_INTERMEDIATE_CUFF_PRESSURE_CHAR	components\ble\common\ble_srv_common.h	87;"	d
BLE_UUID_INTERMEDIATE_TEMPERATURE_CHAR	components\ble\common\ble_srv_common.h	88;"	d
BLE_UUID_LINK_LOSS_SERVICE	components\ble\common\ble_srv_common.h	44;"	d
BLE_UUID_LOCAL_TIME_INFORMATION_CHAR	components\ble\common\ble_srv_common.h	89;"	d
BLE_UUID_MANUFACTURER_NAME_STRING_CHAR	components\ble\common\ble_srv_common.h	90;"	d
BLE_UUID_MEASUREMENT_INTERVAL_CHAR	components\ble\common\ble_srv_common.h	91;"	d
BLE_UUID_MODEL_NUMBER_STRING_CHAR	components\ble\common\ble_srv_common.h	92;"	d
BLE_UUID_NEW_ALERT_CHAR	components\ble\common\ble_srv_common.h	94;"	d
BLE_UUID_NEXT_DST_CHANGE_SERVICE	components\ble\common\ble_srv_common.h	45;"	d
BLE_UUID_PHONE_ALERT_STATUS_SERVICE	components\ble\common\ble_srv_common.h	46;"	d
BLE_UUID_PNP_ID_CHAR	components\ble\common\ble_srv_common.h	95;"	d
BLE_UUID_PROTOCOL_MODE_CHAR	components\ble\common\ble_srv_common.h	96;"	d
BLE_UUID_RECORD_ACCESS_CONTROL_POINT_CHAR	components\ble\common\ble_srv_common.h	97;"	d
BLE_UUID_REFERENCE_TIME_INFORMATION_CHAR	components\ble\common\ble_srv_common.h	98;"	d
BLE_UUID_REFERENCE_TIME_UPDATE_SERVICE	components\ble\common\ble_srv_common.h	47;"	d
BLE_UUID_REMOVABLE_CHAR	components\ble\common\ble_srv_common.h	57;"	d
BLE_UUID_REPORT_CHAR	components\ble\common\ble_srv_common.h	99;"	d
BLE_UUID_REPORT_MAP_CHAR	components\ble\common\ble_srv_common.h	100;"	d
BLE_UUID_REPORT_REF_DESCR	components\ble\common\ble_srv_common.h	126;"	d
BLE_UUID_RINGER_CONTROL_POINT_CHAR	components\ble\common\ble_srv_common.h	101;"	d
BLE_UUID_RINGER_SETTING_CHAR	components\ble\common\ble_srv_common.h	102;"	d
BLE_UUID_RSC_FEATURE_CHAR	components\ble\common\ble_srv_common.h	121;"	d
BLE_UUID_RSC_MEASUREMENT_CHAR	components\ble\common\ble_srv_common.h	123;"	d
BLE_UUID_RUNNING_SPEED_AND_CADENCE	components\ble\common\ble_srv_common.h	48;"	d
BLE_UUID_SCAN_INTERVAL_WINDOW_CHAR	components\ble\common\ble_srv_common.h	103;"	d
BLE_UUID_SCAN_PARAMETERS_SERVICE	components\ble\common\ble_srv_common.h	49;"	d
BLE_UUID_SCAN_REFRESH_CHAR	components\ble\common\ble_srv_common.h	104;"	d
BLE_UUID_SC_CTRLPT_CHAR	components\ble\common\ble_srv_common.h	122;"	d
BLE_UUID_SENSOR_LOCATION_CHAR	components\ble\common\ble_srv_common.h	124;"	d
BLE_UUID_SERIAL_NUMBER_STRING_CHAR	components\ble\common\ble_srv_common.h	105;"	d
BLE_UUID_SERVICE_REQUIRED_CHAR	components\ble\common\ble_srv_common.h	58;"	d
BLE_UUID_SOFTWARE_REVISION_STRING_CHAR	components\ble\common\ble_srv_common.h	106;"	d
BLE_UUID_SUPPORTED_NEW_ALERT_CATEGORY_CHAR	components\ble\common\ble_srv_common.h	107;"	d
BLE_UUID_SUPPORTED_UNREAD_ALERT_CATEGORY_CHAR	components\ble\common\ble_srv_common.h	108;"	d
BLE_UUID_SYSTEM_ID_CHAR	components\ble\common\ble_srv_common.h	109;"	d
BLE_UUID_TEMPERATURE_MEASUREMENT_CHAR	components\ble\common\ble_srv_common.h	110;"	d
BLE_UUID_TEMPERATURE_TYPE_CHAR	components\ble\common\ble_srv_common.h	111;"	d
BLE_UUID_TIME_ACCURACY_CHAR	components\ble\common\ble_srv_common.h	112;"	d
BLE_UUID_TIME_SOURCE_CHAR	components\ble\common\ble_srv_common.h	113;"	d
BLE_UUID_TIME_UPDATE_CONTROL_POINT_CHAR	components\ble\common\ble_srv_common.h	114;"	d
BLE_UUID_TIME_UPDATE_STATE_CHAR	components\ble\common\ble_srv_common.h	115;"	d
BLE_UUID_TIME_WITH_DST_CHAR	components\ble\common\ble_srv_common.h	116;"	d
BLE_UUID_TIME_ZONE_CHAR	components\ble\common\ble_srv_common.h	117;"	d
BLE_UUID_TX_POWER_LEVEL_CHAR	components\ble\common\ble_srv_common.h	118;"	d
BLE_UUID_TX_POWER_SERVICE	components\ble\common\ble_srv_common.h	50;"	d
BLE_UUID_UNREAD_ALERT_CHAR	components\ble\common\ble_srv_common.h	93;"	d
ble_srv_cccd_security_mode_t	components\ble\common\ble_srv_common.h	/^} ble_srv_cccd_security_mode_t;$/;"	t	typeref:struct:__anon163
ble_srv_error_handler_t	components\ble\common\ble_srv_common.h	/^typedef void (*ble_srv_error_handler_t) (uint32_t nrf_error);$/;"	t
ble_srv_is_indication_enabled	components\ble\common\ble_srv_common.h	/^static __INLINE bool ble_srv_is_indication_enabled(uint8_t * p_encoded_data)$/;"	f
ble_srv_is_notification_enabled	components\ble\common\ble_srv_common.h	/^static __INLINE bool ble_srv_is_notification_enabled(uint8_t * p_encoded_data)$/;"	f
ble_srv_report_ref_t	components\ble\common\ble_srv_common.h	/^} ble_srv_report_ref_t;$/;"	t	typeref:struct:__anon160
ble_srv_security_mode_t	components\ble\common\ble_srv_common.h	/^} ble_srv_security_mode_t;$/;"	t	typeref:struct:__anon162
ble_srv_utf8_str_t	components\ble\common\ble_srv_common.h	/^} ble_srv_utf8_str_t;$/;"	t	typeref:struct:__anon161
cccd_write_perm	components\ble\common\ble_srv_common.h	/^    ble_gap_conn_sec_mode_t cccd_write_perm;$/;"	m	struct:__anon163
length	components\ble\common\ble_srv_common.h	/^    uint16_t  length;                                   \/**< String length. *\/$/;"	m	struct:__anon161
p_str	components\ble\common\ble_srv_common.h	/^    uint8_t * p_str;                                    \/**< String data. *\/$/;"	m	struct:__anon161
read_perm	components\ble\common\ble_srv_common.h	/^    ble_gap_conn_sec_mode_t read_perm;                  \/**< Read permissions. *\/$/;"	m	struct:__anon162
read_perm	components\ble\common\ble_srv_common.h	/^    ble_gap_conn_sec_mode_t read_perm;                  \/**< Read permissions. *\/$/;"	m	struct:__anon163
report_id	components\ble\common\ble_srv_common.h	/^    uint8_t report_id;                                  \/**< Non-zero value if these is more than one instance of the same Report Type *\/$/;"	m	struct:__anon160
report_type	components\ble\common\ble_srv_common.h	/^    uint8_t report_type;                                \/**< Type of Report characteristic @if (SD_S110) (see @ref BLE_HIDS_REPORT_TYPE) @endif *\/$/;"	m	struct:__anon160
write_perm	components\ble\common\ble_srv_common.h	/^    ble_gap_conn_sec_mode_t write_perm;                 \/**< Write permissions. *\/$/;"	m	struct:__anon162
write_perm	components\ble\common\ble_srv_common.h	/^    ble_gap_conn_sec_mode_t write_perm;                 \/**< Write permissions. *\/$/;"	m	struct:__anon163
DEVICE_MANAGER_APP_CONTEXT_SIZE	components\ble\device_manager\config\device_manager_cnfg.h	92;"	d
DEVICE_MANAGER_CNFG_H__	components\ble\device_manager\config\device_manager_cnfg.h	27;"	d
DEVICE_MANAGER_MAX_APPLICATIONS	components\ble\device_manager\config\device_manager_cnfg.h	42;"	d
DEVICE_MANAGER_MAX_BONDS	components\ble\device_manager\config\device_manager_cnfg.h	67;"	d
DEVICE_MANAGER_MAX_CONNECTIONS	components\ble\device_manager\config\device_manager_cnfg.h	52;"	d
DM_GATT_CCCD_COUNT	components\ble\device_manager\config\device_manager_cnfg.h	78;"	d
DEVICE_MANAGER_H__	components\ble\device_manager\device_manager.h	65;"	d
DM_EVT_APPL_CONTEXT_DELETED	components\ble\device_manager\device_manager.h	168;"	d
DM_EVT_APPL_CONTEXT_LOADED	components\ble\device_manager\device_manager.h	166;"	d
DM_EVT_APPL_CONTEXT_STORED	components\ble\device_manager\device_manager.h	167;"	d
DM_EVT_CONNECTION	components\ble\device_manager\device_manager.h	143;"	d
DM_EVT_DEVICE_CONTEXT_DELETED	components\ble\device_manager\device_manager.h	162;"	d
DM_EVT_DEVICE_CONTEXT_LOADED	components\ble\device_manager\device_manager.h	160;"	d
DM_EVT_DEVICE_CONTEXT_STORED	components\ble\device_manager\device_manager.h	161;"	d
DM_EVT_DISCONNECTION	components\ble\device_manager\device_manager.h	144;"	d
DM_EVT_ERROR	components\ble\device_manager\device_manager.h	124;"	d
DM_EVT_LINK_SECURED	components\ble\device_manager\device_manager.h	147;"	d
DM_EVT_RFU	components\ble\device_manager\device_manager.h	123;"	d
DM_EVT_SECURITY_SETUP	components\ble\device_manager\device_manager.h	145;"	d
DM_EVT_SECURITY_SETUP_COMPLETE	components\ble\device_manager\device_manager.h	146;"	d
DM_EVT_SECURITY_SETUP_REFRESH	components\ble\device_manager\device_manager.h	148;"	d
DM_EVT_SERVICE_CONTEXT_DELETED	components\ble\device_manager\device_manager.h	165;"	d
DM_EVT_SERVICE_CONTEXT_LOADED	components\ble\device_manager\device_manager.h	163;"	d
DM_EVT_SERVICE_CONTEXT_STORED	components\ble\device_manager\device_manager.h	164;"	d
DM_INVALID_ID	components\ble\device_manager\device_manager.h	172;"	d
DM_PROTOCOL_CNTXT_ALL	components\ble\device_manager\device_manager.h	90;"	d
DM_PROTOCOL_CNTXT_GATT_CLI_ID	components\ble\device_manager\device_manager.h	89;"	d
DM_PROTOCOL_CNTXT_GATT_SRVR_ID	components\ble\device_manager\device_manager.h	88;"	d
DM_PROTOCOL_CNTXT_NONE	components\ble\device_manager\device_manager.h	87;"	d
ENCRYPTED	components\ble\device_manager\device_manager.h	/^    ENCRYPTED               \/**< The link is secure.*\/$/;"	e	enum:__anon172
ENCRYPTION_IN_PROGRESS	components\ble\device_manager\device_manager.h	/^    ENCRYPTION_IN_PROGRESS, \/**< Link security is being established.*\/$/;"	e	enum:__anon172
NOT_ENCRYPTED	components\ble\device_manager\device_manager.h	/^    NOT_ENCRYPTED,          \/**< The link is not secured. *\/$/;"	e	enum:__anon172
appl_id	components\ble\device_manager\device_manager.h	/^    dm_application_instance_t    appl_id;       \/**< Identifies the application instances for the device that is being managed. *\/$/;"	m	struct:device_handle
clear_persistent_data	components\ble\device_manager\device_manager.h	/^    bool clear_persistent_data; \/**< Set to true in case the module should clear all persistent data. *\/$/;"	m	struct:__anon170
connection_id	components\ble\device_manager\device_manager.h	/^    dm_connection_instance_t     connection_id; \/**< Identifies the active connection instance. *\/$/;"	m	struct:device_handle
context_data	components\ble\device_manager\device_manager.h	/^    dm_context_t   context_data; \/**< Contains length and pointer to context data *\/$/;"	m	struct:__anon167
device_handle	components\ble\device_manager\device_manager.h	/^typedef struct device_handle$/;"	s
device_id	components\ble\device_manager\device_manager.h	/^    dm_device_instance_t         device_id;     \/**< Identifies peer instance in the data base. *\/$/;"	m	struct:device_handle
dm_application_context_t	components\ble\device_manager\device_manager.h	/^typedef dm_context_t dm_application_context_t;$/;"	t
dm_application_instance_t	components\ble\device_manager\device_manager.h	/^typedef uint8_t dm_application_instance_t;$/;"	t
dm_application_param_t	components\ble\device_manager\device_manager.h	/^} dm_application_param_t;$/;"	t	typeref:struct:__anon171
dm_connection_instance_t	components\ble\device_manager\device_manager.h	/^typedef uint8_t dm_connection_instance_t;$/;"	t
dm_context_t	components\ble\device_manager\device_manager.h	/^} dm_context_t;$/;"	t	typeref:struct:__anon166
dm_device_context_t	components\ble\device_manager\device_manager.h	/^typedef dm_context_t dm_device_context_t;$/;"	t
dm_device_instance_t	components\ble\device_manager\device_manager.h	/^typedef uint8_t dm_device_instance_t;$/;"	t
dm_enc_key	components\ble\device_manager\device_manager.h	/^typedef struct dm_enc_key$/;"	s
dm_enc_key_t	components\ble\device_manager\device_manager.h	/^} dm_enc_key_t;$/;"	t	typeref:struct:dm_enc_key
dm_event_cb_t	components\ble\device_manager\device_manager.h	/^typedef ret_code_t (*dm_event_cb_t)(dm_handle_t const * p_handle,$/;"	t
dm_event_param_t	components\ble\device_manager\device_manager.h	/^} dm_event_param_t;$/;"	t	typeref:union:__anon168
dm_event_t	components\ble\device_manager\device_manager.h	/^} dm_event_t;$/;"	t	typeref:struct:__anon169
dm_handle_t	components\ble\device_manager\device_manager.h	/^} dm_handle_t;$/;"	t	typeref:struct:device_handle
dm_id_key	components\ble\device_manager\device_manager.h	/^typedef struct dm_id_key$/;"	s
dm_id_key_t	components\ble\device_manager\device_manager.h	/^} dm_id_key_t;$/;"	t	typeref:struct:dm_id_key
dm_init_param_t	components\ble\device_manager\device_manager.h	/^} dm_init_param_t;$/;"	t	typeref:struct:__anon170
dm_sec_keys_t	components\ble\device_manager\device_manager.h	/^} dm_sec_keys_t;$/;"	t	typeref:struct:dm_sec_keyset
dm_sec_keyset	components\ble\device_manager\device_manager.h	/^typedef struct dm_sec_keyset$/;"	s
dm_sec_keyset_t	components\ble\device_manager\device_manager.h	/^} dm_sec_keyset_t;$/;"	t	typeref:struct:__anon165
dm_security_status_t	components\ble\device_manager\device_manager.h	/^} dm_security_status_t;$/;"	t	typeref:enum:__anon172
dm_service_context_t	components\ble\device_manager\device_manager.h	/^} dm_service_context_t;$/;"	t	typeref:struct:__anon167
dm_service_instance_t	components\ble\device_manager\device_manager.h	/^typedef uint8_t dm_service_instance_t;$/;"	t
dm_sign_key	components\ble\device_manager\device_manager.h	/^typedef struct dm_sign_key$/;"	s
dm_sign_key_t	components\ble\device_manager\device_manager.h	/^} dm_sign_key_t;$/;"	t	typeref:struct:dm_sign_key
enc_info	components\ble\device_manager\device_manager.h	/^    ble_gap_enc_info_t  enc_info;  \/**< GAP encryption information. *\/$/;"	m	struct:dm_enc_key
enc_key	components\ble\device_manager\device_manager.h	/^    } enc_key;$/;"	m	struct:dm_sec_keyset	typeref:union:dm_sec_keyset::__anon164
event_id	components\ble\device_manager\device_manager.h	/^    uint8_t          event_id;       \/**< Identifies the event. See \\ref dm_events for details on event types and their significance. *\/$/;"	m	struct:__anon169
event_param	components\ble\device_manager\device_manager.h	/^    dm_event_param_t event_param;    \/**< Event parameters. Can be NULL if the event does not have any parameters. *\/$/;"	m	struct:__anon169
event_paramlen	components\ble\device_manager\device_manager.h	/^    uint16_t         event_paramlen; \/**< Length of the event parameters, is zero if the event does not have any parameters. *\/$/;"	m	struct:__anon169
evt_handler	components\ble\device_manager\device_manager.h	/^    dm_event_cb_t        evt_handler;  \/**< Event Handler to be registered. It will receive asynchronous notification from the module, see \\ref dm_events for asynchronous events. *\/$/;"	m	struct:__anon171
flags	components\ble\device_manager\device_manager.h	/^    uint32_t  flags;  \/**< Additional flags identifying data. *\/$/;"	m	struct:__anon166
id_addr_info	components\ble\device_manager\device_manager.h	/^  ble_gap_addr_t id_addr_info; \/**< Identity address information. *\/$/;"	m	struct:dm_id_key
id_info	components\ble\device_manager\device_manager.h	/^  ble_gap_irk_t  id_info;      \/**< Identity information. *\/$/;"	m	struct:dm_id_key
keys_central	components\ble\device_manager\device_manager.h	/^  dm_sec_keys_t keys_central; \/**< Keys distributed by the device in the Central role. *\/$/;"	m	struct:__anon165
keys_periph	components\ble\device_manager\device_manager.h	/^  dm_sec_keys_t keys_periph;  \/**< Keys distributed by the device in the Peripheral role. *\/$/;"	m	struct:__anon165
len	components\ble\device_manager\device_manager.h	/^    uint32_t  len;    \/**< Length of data. *\/$/;"	m	struct:__anon166
master_id	components\ble\device_manager\device_manager.h	/^    ble_gap_master_id_t master_id; \/**< Master identification. *\/$/;"	m	struct:dm_enc_key
p_app_context	components\ble\device_manager\device_manager.h	/^    dm_application_context_t * p_app_context;     \/**< All events that are associated with application context procedures of store, load, and deletion have this as event parameter. *\/$/;"	m	union:__anon168
p_data	components\ble\device_manager\device_manager.h	/^    uint8_t * p_data; \/**< Pointer to contextual data, a copy is made of the data. *\/$/;"	m	struct:__anon166
p_device_context	components\ble\device_manager\device_manager.h	/^    dm_device_context_t      * p_device_context;  \/**< All events that are associated with device context procedures of store, load and deletion have this as event parameter. *\/$/;"	m	union:__anon168
p_enc_key	components\ble\device_manager\device_manager.h	/^        dm_enc_key_t       * p_enc_key;  \/**< Pointer to Device Manager encryption information structure. *\/$/;"	m	union:dm_sec_keyset::__anon164
p_gap_param	components\ble\device_manager\device_manager.h	/^    ble_gap_evt_t            * p_gap_param;       \/**< All events that are triggered in device manager as a result of GAP events, like connection, disconnection and security procedures are accompanied with GAP parameters. *\/$/;"	m	union:__anon168
p_id_key	components\ble\device_manager\device_manager.h	/^    dm_id_key_t   * p_id_key;            \/**< Identity key, or NULL. *\/$/;"	m	struct:dm_sec_keyset
p_service_context	components\ble\device_manager\device_manager.h	/^    dm_service_context_t     * p_service_context; \/**< All events that are associated with service context procedures of store, load and deletion have this as event parameter. *\/$/;"	m	union:__anon168
p_sign_key	components\ble\device_manager\device_manager.h	/^    dm_sign_key_t * p_sign_key;          \/**< Signing key, or NULL. *\/$/;"	m	struct:dm_sec_keyset
sec_param	components\ble\device_manager\device_manager.h	/^    ble_gap_sec_params_t sec_param;    \/**< Security parameters to be used for the application. *\/$/;"	m	struct:__anon171
service_id	components\ble\device_manager\device_manager.h	/^    dm_service_instance_t        service_id;    \/**< Service instance identifier. *\/$/;"	m	struct:device_handle
service_type	components\ble\device_manager\device_manager.h	/^    service_type_t service_type; \/**< Identifies the service\/protocol to which the context data is related. *\/$/;"	m	struct:__anon167
service_type	components\ble\device_manager\device_manager.h	/^    uint8_t              service_type; \/**< Bit mask identifying services that the application intends to support for all peers. *\/$/;"	m	struct:__anon171
service_type_t	components\ble\device_manager\device_manager.h	/^typedef uint8_t service_type_t;$/;"	t
sign_key	components\ble\device_manager\device_manager.h	/^    ble_gap_sign_info_t sign_key; \/**< GAP signing information. *\/$/;"	m	struct:dm_sign_key
ADDR_ENTRY	components\ble\device_manager\device_manager_central.c	54;"	d	file:
ALL_CONTEXT_SIZE	components\ble\device_manager\device_manager_central.c	116;"	d	file:
APP_CONTEXT_ENTRY	components\ble\device_manager\device_manager_central.c	56;"	d	file:
APP_CONTEXT_MIN_SIZE	components\ble\device_manager\device_manager_central.c	110;"	d	file:
APP_CONTEXT_SIZE	components\ble\device_manager\device_manager_central.c	112;"	d	file:
APP_CONTEXT_SIZE	components\ble\device_manager\device_manager_central.c	114;"	d	file:
APP_CONTEXT_STORAGE_OFFSET	components\ble\device_manager\device_manager_central.c	95;"	d	file:
BOND_SIZE	components\ble\device_manager\device_manager_central.c	105;"	d	file:
BOND_STORAGE_OFFSET	components\ble\device_manager\device_manager_central.c	93;"	d	file:
DEVICE_CONTEXT_SIZE	components\ble\device_manager\device_manager_central.c	106;"	d	file:
DM_CLEAR_OPERATION_ID	components\ble\device_manager\device_manager_central.c	169;"	d	file:
DM_DUMP	components\ble\device_manager\device_manager_central.c	136;"	d	file:
DM_DUMP	components\ble\device_manager\device_manager_central.c	138;"	d	file:
DM_ERR	components\ble\device_manager\device_manager_central.c	134;"	d	file:
DM_ERR	components\ble\device_manager\device_manager_central.c	140;"	d	file:
DM_EVT_APP_CONTEXT_BASE	components\ble\device_manager\device_manager_central.c	166;"	d	file:
DM_EVT_DEVICE_CONTEXT_BASE	components\ble\device_manager\device_manager_central.c	164;"	d	file:
DM_EVT_SERVICE_CONTEXT_BASE	components\ble\device_manager\device_manager_central.c	165;"	d	file:
DM_GATTS_INVALID_SIZE	components\ble\device_manager\device_manager_central.c	172;"	d	file:
DM_GATT_ATTR_SIZE	components\ble\device_manager\device_manager_central.c	161;"	d	file:
DM_GATT_SERVER_ATTR_MAX_SIZE	components\ble\device_manager\device_manager_central.c	162;"	d	file:
DM_LOAD_OPERATION_ID	components\ble\device_manager\device_manager_central.c	167;"	d	file:
DM_LOG	components\ble\device_manager\device_manager_central.c	133;"	d	file:
DM_LOG	components\ble\device_manager\device_manager_central.c	139;"	d	file:
DM_MUTEX_LOCK	components\ble\device_manager\device_manager_central.c	152;"	d	file:
DM_MUTEX_UNLOCK	components\ble\device_manager\device_manager_central.c	153;"	d	file:
DM_SERVICE_CONTEXT_COUNT	components\ble\device_manager\device_manager_central.c	163;"	d	file:
DM_STORE_OPERATION_ID	components\ble\device_manager\device_manager_central.c	168;"	d	file:
DM_TRC	components\ble\device_manager\device_manager_central.c	135;"	d	file:
DM_TRC	components\ble\device_manager\device_manager_central.c	141;"	d	file:
FIRST_BOND_STORE	components\ble\device_manager\device_manager_central.c	/^    FIRST_BOND_STORE,  \/**< Store bond. *\/$/;"	e	enum:__anon173	file:
GATTC_SERVICE_CONTEXT_SIZE	components\ble\device_manager\device_manager_central.c	108;"	d	file:
GATTS_SERVICE_CONTEXT_SIZE	components\ble\device_manager\device_manager_central.c	107;"	d	file:
INVALID_ADDR_TYPE	components\ble\device_manager\device_manager_central.c	19;"	d	file:
INVALID_CONTEXT_LEN	components\ble\device_manager\device_manager_central.c	305;"	d	file:
IRK_ENTRY	components\ble\device_manager\device_manager_central.c	53;"	d	file:
NULL_PARAM_CHECK	components\ble\device_manager\device_manager_central.c	193;"	d	file:
NULL_PARAM_CHECK	components\ble\device_manager\device_manager_central.c	295;"	d	file:
PEER_ID_SIZE	components\ble\device_manager\device_manager_central.c	104;"	d	file:
PEER_ID_STORAGE_OFFSET	components\ble\device_manager\device_manager_central.c	92;"	d	file:
SERVICE_CONTEXT_ENTRY	components\ble\device_manager\device_manager_central.c	55;"	d	file:
SERVICE_CONTEXT_SIZE	components\ble\device_manager\device_manager_central.c	109;"	d	file:
SERVICE_STORAGE_OFFSET	components\ble\device_manager\device_manager_central.c	94;"	d	file:
SIZE_CHECK_APP_CONTEXT	components\ble\device_manager\device_manager_central.c	312;"	d	file:
STATE_BONDED	components\ble\device_manager\device_manager_central.c	36;"	d	file:
STATE_BOND_INFO_UPDATE	components\ble\device_manager\device_manager_central.c	39;"	d	file:
STATE_CONNECTED	components\ble\device_manager\device_manager_central.c	34;"	d	file:
STATE_CONTROL_PROCEDURE_IN_PROGRESS	components\ble\device_manager\device_manager_central.c	25;"	d	file:
STATE_DISCONNECTING	components\ble\device_manager\device_manager_central.c	37;"	d	file:
STATE_IDLE	components\ble\device_manager\device_manager_central.c	33;"	d	file:
STATE_LINK_ENCRYPTED	components\ble\device_manager\device_manager_central.c	40;"	d	file:
STATE_PAIRING	components\ble\device_manager\device_manager_central.c	35;"	d	file:
STATE_PAIRING_PENDING	components\ble\device_manager\device_manager_central.c	38;"	d	file:
STATE_QUEUED_CONTROL_REQUEST	components\ble\device_manager\device_manager_central.c	26;"	d	file:
STORE_ALL_CONTEXT	components\ble\device_manager\device_manager_central.c	/^    STORE_ALL_CONTEXT, \/**< Store all context. *\/$/;"	e	enum:__anon173	file:
UNASSIGNED	components\ble\device_manager\device_manager_central.c	52;"	d	file:
UPDATE_PEER_ADDR	components\ble\device_manager\device_manager_central.c	/^    UPDATE_PEER_ADDR   \/**< Update peer address. *\/$/;"	e	enum:__anon173	file:
VERIFY_APP_REGISTERED	components\ble\device_manager\device_manager_central.c	234;"	d	file:
VERIFY_APP_REGISTERED	components\ble\device_manager\device_manager_central.c	298;"	d	file:
VERIFY_APP_REGISTERED_VOID	components\ble\device_manager\device_manager_central.c	250;"	d	file:
VERIFY_APP_REGISTERED_VOID	components\ble\device_manager\device_manager_central.c	299;"	d	file:
VERIFY_CONNECTION_INSTANCE	components\ble\device_manager\device_manager_central.c	268;"	d	file:
VERIFY_CONNECTION_INSTANCE	components\ble\device_manager\device_manager_central.c	300;"	d	file:
VERIFY_DEVICE_INSTANCE	components\ble\device_manager\device_manager_central.c	285;"	d	file:
VERIFY_DEVICE_INSTANCE	components\ble\device_manager\device_manager_central.c	301;"	d	file:
VERIFY_MODULE_INITIALIZED	components\ble\device_manager\device_manager_central.c	205;"	d	file:
VERIFY_MODULE_INITIALIZED	components\ble\device_manager\device_manager_central.c	296;"	d	file:
VERIFY_MODULE_INITIALIZED_VOID	components\ble\device_manager\device_manager_central.c	217;"	d	file:
VERIFY_MODULE_INITIALIZED_VOID	components\ble\device_manager\device_manager_central.c	297;"	d	file:
app_evt_notify	components\ble\device_manager\device_manager_central.c	/^static __INLINE void app_evt_notify(dm_handle_t const * const p_handle,$/;"	f	file:
application_instance_init	components\ble\device_manager\device_manager_central.c	/^static __INLINE void application_instance_init(uint32_t index)$/;"	f	file:
application_instance_t	components\ble\device_manager\device_manager_central.c	/^} application_instance_t;$/;"	t	typeref:struct:__anon179	file:
attributes	components\ble\device_manager\device_manager_central.c	/^    uint8_t  attributes[DM_GATT_SERVER_ATTR_MAX_SIZE]; \/**< Array to hold the server attributes. *\/$/;"	m	struct:__anon176	file:
bond_context_t	components\ble\device_manager\device_manager_central.c	/^} bond_context_t;$/;"	t	typeref:struct:__anon175	file:
bonded_dev_id	components\ble\device_manager\device_manager_central.c	/^    uint8_t        bonded_dev_id; \/**< In case the device is bonded, this points to the corresponding bonded device. This index can be used to index service and bond context as well. *\/$/;"	m	struct:__anon178	file:
conn_handle	components\ble\device_manager\device_manager_central.c	/^    uint16_t       conn_handle;   \/**< Connection handle for the device. *\/$/;"	m	struct:__anon178	file:
connection_instance_allocate	components\ble\device_manager\device_manager_central.c	/^static __INLINE uint32_t connection_instance_allocate(uint32_t * p_instance)$/;"	f	file:
connection_instance_find	components\ble\device_manager\device_manager_central.c	/^static ret_code_t connection_instance_find(uint16_t   conn_handle,$/;"	f	file:
connection_instance_free	components\ble\device_manager\device_manager_central.c	/^static __INLINE void connection_instance_free(uint32_t const * p_instance)$/;"	f	file:
connection_instance_init	components\ble\device_manager\device_manager_central.c	/^static __INLINE void connection_instance_init(uint32_t index)$/;"	f	file:
connection_instance_t	components\ble\device_manager\device_manager_central.c	/^} connection_instance_t;$/;"	t	typeref:struct:__anon178	file:
device_context_store	components\ble\device_manager\device_manager_central.c	/^static __INLINE void device_context_store(dm_handle_t const * p_handle, device_store_state_t state)$/;"	f	file:
device_instance_allocate	components\ble\device_manager\device_manager_central.c	/^static __INLINE ret_code_t device_instance_allocate(uint8_t *              p_device_index,$/;"	f	file:
device_instance_find	components\ble\device_manager\device_manager_central.c	/^static ret_code_t device_instance_find(ble_gap_addr_t const * p_addr, uint32_t * p_device_index)$/;"	f	file:
device_instance_free	components\ble\device_manager\device_manager_central.c	/^static __INLINE ret_code_t device_instance_free(uint32_t device_index)$/;"	f	file:
device_store_state_t	components\ble\device_manager\device_manager_central.c	/^} device_store_state_t;$/;"	t	typeref:enum:__anon173	file:
dm_application_context_delete	components\ble\device_manager\device_manager_central.c	/^ret_code_t dm_application_context_delete(const dm_handle_t * p_handle)$/;"	f
dm_application_context_get	components\ble\device_manager\device_manager_central.c	/^ret_code_t dm_application_context_get(dm_handle_t const        * p_handle,$/;"	f
dm_application_context_set	components\ble\device_manager\device_manager_central.c	/^ret_code_t dm_application_context_set(dm_handle_t const              * p_handle,$/;"	f
dm_application_instance_set	components\ble\device_manager\device_manager_central.c	/^ret_code_t dm_application_instance_set(dm_application_instance_t const * p_appl_instance,$/;"	f
dm_ble_evt_handler	components\ble\device_manager\device_manager_central.c	/^void dm_ble_evt_handler(ble_evt_t * p_ble_evt)$/;"	f
dm_device_add	components\ble\device_manager\device_manager_central.c	/^ret_code_t dm_device_add(dm_handle_t               * p_handle,$/;"	f
dm_device_delete	components\ble\device_manager\device_manager_central.c	/^ret_code_t dm_device_delete(dm_handle_t const * p_handle)$/;"	f
dm_device_delete_all	components\ble\device_manager\device_manager_central.c	/^ret_code_t dm_device_delete_all(dm_application_instance_t const * p_handle)$/;"	f
dm_distributed_keys_get	components\ble\device_manager\device_manager_central.c	/^ret_code_t dm_distributed_keys_get(dm_handle_t const * p_handle,$/;"	f
dm_gatt_client_context_t	components\ble\device_manager\device_manager_central.c	/^} dm_gatt_client_context_t;$/;"	t	typeref:struct:__anon177	file:
dm_gatts_context_t	components\ble\device_manager\device_manager_central.c	/^} dm_gatts_context_t;$/;"	t	typeref:struct:__anon176	file:
dm_handle_initialize	components\ble\device_manager\device_manager_central.c	/^uint32_t dm_handle_initialize(dm_handle_t * p_handle)$/;"	f
dm_init	components\ble\device_manager\device_manager_central.c	/^ret_code_t dm_init(dm_init_param_t const * const p_init_param)$/;"	f
dm_peer_addr_get	components\ble\device_manager\device_manager_central.c	/^ret_code_t dm_peer_addr_get(dm_handle_t const * p_handle,$/;"	f
dm_peer_addr_set	components\ble\device_manager\device_manager_central.c	/^ret_code_t dm_peer_addr_set(dm_handle_t const    * p_handle,$/;"	f
dm_pstorage_cb_handler	components\ble\device_manager\device_manager_central.c	/^static void dm_pstorage_cb_handler(pstorage_handle_t * p_handle,$/;"	f	file:
dm_register	components\ble\device_manager\device_manager_central.c	/^ret_code_t dm_register(dm_application_instance_t    * p_appl_instance,$/;"	f
dm_security_setup_req	components\ble\device_manager\device_manager_central.c	/^ret_code_t dm_security_setup_req(dm_handle_t * p_handle)$/;"	f
dm_security_status_req	components\ble\device_manager\device_manager_central.c	/^ret_code_t dm_security_status_req(dm_handle_t const    * p_handle,$/;"	f
dm_service_context_delete	components\ble\device_manager\device_manager_central.c	/^ret_code_t dm_service_context_delete(dm_handle_t const * p_handle)$/;"	f
dm_service_context_get	components\ble\device_manager\device_manager_central.c	/^ret_code_t dm_service_context_get(dm_handle_t const    * p_handle,$/;"	f
dm_service_context_set	components\ble\device_manager\device_manager_central.c	/^ret_code_t dm_service_context_set(dm_handle_t const          * p_handle,$/;"	f
dm_whitelist_create	components\ble\device_manager\device_manager_central.c	/^ret_code_t dm_whitelist_create(dm_application_instance_t const * p_handle,$/;"	f
gattc_context_apply	components\ble\device_manager\device_manager_central.c	/^static __INLINE ret_code_t gattc_context_apply(dm_handle_t * p_handle)$/;"	f	file:
gattc_context_load	components\ble\device_manager\device_manager_central.c	/^static __INLINE ret_code_t gattc_context_load(pstorage_handle_t const * p_block_handle,$/;"	f	file:
gattc_context_store	components\ble\device_manager\device_manager_central.c	/^static __INLINE ret_code_t gattc_context_store(pstorage_handle_t const * p_block_handle,$/;"	f	file:
gatts_context_apply	components\ble\device_manager\device_manager_central.c	/^static __INLINE ret_code_t gatts_context_apply(dm_handle_t * p_handle)$/;"	f	file:
gatts_context_load	components\ble\device_manager\device_manager_central.c	/^static __INLINE ret_code_t gatts_context_load(pstorage_handle_t const * p_block_handle,$/;"	f	file:
gatts_context_store	components\ble\device_manager\device_manager_central.c	/^static __INLINE ret_code_t gatts_context_store(pstorage_handle_t const * p_block_handle,$/;"	f	file:
gattsc_context_apply	components\ble\device_manager\device_manager_central.c	/^static __INLINE ret_code_t gattsc_context_apply(dm_handle_t * p_handle)$/;"	f	file:
gattsc_context_load	components\ble\device_manager\device_manager_central.c	/^static __INLINE ret_code_t gattsc_context_load(pstorage_handle_t const * p_block_handle,$/;"	f	file:
gattsc_context_store	components\ble\device_manager\device_manager_central.c	/^static __INLINE ret_code_t gattsc_context_store(pstorage_handle_t const * p_block_handle,$/;"	f	file:
id_bitmap	components\ble\device_manager\device_manager_central.c	/^    uint8_t          id_bitmap; \/**< Contains information if above field is valid. *\/$/;"	m	struct:__anon174	file:
initiate_security_request	components\ble\device_manager\device_manager_central.c	/^uint32_t initiate_security_request(const dm_handle_t * p_handle)$/;"	f
m_app_context_table	components\ble\device_manager\device_manager_central.c	/^static uint8_t *               m_app_context_table[DEVICE_MANAGER_MAX_BONDS];         \/**< Table to remember application contexts of bonded devices. *\/$/;"	v	file:
m_application_table	components\ble\device_manager\device_manager_central.c	/^static application_instance_t  m_application_table[DEVICE_MANAGER_MAX_APPLICATIONS];  \/**< Table to maintain application instances. *\/$/;"	v	file:
m_bond_table	components\ble\device_manager\device_manager_central.c	/^static bond_context_t          m_bond_table[DEVICE_MANAGER_MAX_CONNECTIONS];          \/**< Table to maintain bond information for active peers. *\/$/;"	v	file:
m_connection_table	components\ble\device_manager\device_manager_central.c	/^static connection_instance_t   m_connection_table[DEVICE_MANAGER_MAX_CONNECTIONS];    \/**< Table to maintain active peer information. An instance is allocated in the table when a new connection is established and freed on disconnection. *\/$/;"	v	file:
m_context_init_len	components\ble\device_manager\device_manager_central.c	/^const uint32_t m_context_init_len = 0xFFFFFFFF; \/**< Constant used to update the initial value for context in the flash. *\/$/;"	v
m_gatts_table	components\ble\device_manager\device_manager_central.c	/^static dm_gatts_context_t      m_gatts_table[DEVICE_MANAGER_MAX_CONNECTIONS];         \/**< Table for service information for active connection instances. *\/$/;"	v	file:
m_local_id_info	components\ble\device_manager\device_manager_central.c	/^static ble_gap_id_key_t        m_local_id_info;                                       \/**< ID information of central in case resolvable address is used. *\/$/;"	v	file:
m_module_initialized	components\ble\device_manager\device_manager_central.c	/^static bool                    m_module_initialized = false;                          \/**< State indicating if module is initialized or not. *\/$/;"	v	file:
m_peer_addr_update	components\ble\device_manager\device_manager_central.c	/^static uint32_t                m_peer_addr_update;                                    \/**< 32-bit bitmap to remember peer device address update. *\/$/;"	v	file:
m_peer_table	components\ble\device_manager\device_manager_central.c	/^static peer_id_t               m_peer_table[DEVICE_MANAGER_MAX_BONDS];                \/**< Table to maintain bonded devices' identification information, an instance is allocated in the table when a device is bonded and freed when bond information is deleted. *\/$/;"	v	file:
m_service_context_apply	components\ble\device_manager\device_manager_central.c	/^const service_context_apply_t m_service_context_apply[DM_SERVICE_CONTEXT_COUNT] =$/;"	v
m_service_context_load	components\ble\device_manager\device_manager_central.c	/^const service_context_access_t m_service_context_load[DM_SERVICE_CONTEXT_COUNT] =$/;"	v
m_service_context_store	components\ble\device_manager\device_manager_central.c	/^const service_context_access_t m_service_context_store[DM_SERVICE_CONTEXT_COUNT] =$/;"	v
m_storage_handle	components\ble\device_manager\device_manager_central.c	/^static pstorage_handle_t       m_storage_handle;                                      \/**< Persistent storage handle for blocks requested by the module. *\/$/;"	v	file:
nDM_DISABLE_LOGS	components\ble\device_manager\device_manager_central.c	130;"	d	file:
no_service_context_apply	components\ble\device_manager\device_manager_central.c	/^static __INLINE ret_code_t no_service_context_apply(dm_handle_t * p_handle)$/;"	f	file:
no_service_context_load	components\ble\device_manager\device_manager_central.c	/^static __INLINE ret_code_t no_service_context_load(pstorage_handle_t const * p_block_handle,$/;"	f	file:
no_service_context_store	components\ble\device_manager\device_manager_central.c	/^static __INLINE ret_code_t no_service_context_store(pstorage_handle_t const * p_block_handle,$/;"	f	file:
ntf_cb	components\ble\device_manager\device_manager_central.c	/^    dm_event_cb_t        ntf_cb;    \/**< Callback registered with the application. *\/$/;"	m	struct:__anon179	file:
p_dummy	components\ble\device_manager\device_manager_central.c	/^    void * p_dummy; \/**< Placeholder, currently unused. *\/$/;"	m	struct:__anon177	file:
peer_addr	components\ble\device_manager\device_manager_central.c	/^    ble_gap_addr_t peer_addr;     \/**< Peer identification information. This information is retained as long as the connection session exists, once disconnected, for non-bonded devices this information is not stored persistently. *\/$/;"	m	struct:__anon178	file:
peer_enc_key	components\ble\device_manager\device_manager_central.c	/^    ble_gap_enc_key_t peer_enc_key; \/**< Local LTK info, central IRK and address *\/$/;"	m	struct:__anon175	file:
peer_id	components\ble\device_manager\device_manager_central.c	/^    ble_gap_id_key_t peer_id;   \/**< IRK and\/or address of peer. *\/$/;"	m	struct:__anon174	file:
peer_id_t	components\ble\device_manager\device_manager_central.c	/^} peer_id_t;$/;"	t	typeref:struct:__anon174	file:
peer_instance_init	components\ble\device_manager\device_manager_central.c	/^static __INLINE void peer_instance_init(uint32_t index)$/;"	f	file:
sec_param	components\ble\device_manager\device_manager_central.c	/^    ble_gap_sec_params_t sec_param; \/**< Local security parameters registered by the application. *\/$/;"	m	struct:__anon179	file:
service	components\ble\device_manager\device_manager_central.c	/^    uint8_t              service;   \/**< Service registered by the application. *\/$/;"	m	struct:__anon179	file:
service_context_access_t	components\ble\device_manager\device_manager_central.c	/^typedef ret_code_t (* service_context_access_t)(pstorage_handle_t const * p_block_handle,$/;"	t	file:
service_context_apply_t	components\ble\device_manager\device_manager_central.c	/^typedef ret_code_t (* service_context_apply_t)(dm_handle_t * p_handle);$/;"	t	file:
size	components\ble\device_manager\device_manager_central.c	/^    uint32_t size;                                     \/**< Size of stored attributes. *\/$/;"	m	struct:__anon176	file:
state	components\ble\device_manager\device_manager_central.c	/^    uint8_t              state;     \/**< Application state. Currently this is used only for knowing if any security procedure is in progress and\/or a security procedure is pending to be requested. *\/$/;"	m	struct:__anon179	file:
state	components\ble\device_manager\device_manager_central.c	/^    uint8_t        state;         \/**< Link state. *\/$/;"	m	struct:__anon178	file:
storage_operation	components\ble\device_manager\device_manager_central.c	/^typedef uint32_t (* storage_operation)(pstorage_handle_t * p_dest,$/;"	t	file:
storage_operation_dummy_handler	components\ble\device_manager\device_manager_central.c	/^static uint32_t storage_operation_dummy_handler(pstorage_handle_t * p_dest,$/;"	f	file:
update_status_bit_is_set	components\ble\device_manager\device_manager_central.c	/^static __INLINE bool update_status_bit_is_set(uint32_t index)$/;"	f	file:
update_status_bit_reset	components\ble\device_manager\device_manager_central.c	/^static __INLINE void update_status_bit_reset(uint32_t index)$/;"	f	file:
update_status_bit_set	components\ble\device_manager\device_manager_central.c	/^static __INLINE void update_status_bit_set(uint32_t index)$/;"	f	file:
ADDR_ENTRY	components\ble\device_manager\device_manager_peripheral.c	68;"	d	file:
ALL_CONTEXT_SIZE	components\ble\device_manager\device_manager_peripheral.c	130;"	d	file:
APP_CONTEXT_ENTRY	components\ble\device_manager\device_manager_peripheral.c	70;"	d	file:
APP_CONTEXT_MIN_SIZE	components\ble\device_manager\device_manager_peripheral.c	124;"	d	file:
APP_CONTEXT_SIZE	components\ble\device_manager\device_manager_peripheral.c	126;"	d	file:
APP_CONTEXT_SIZE	components\ble\device_manager\device_manager_peripheral.c	128;"	d	file:
APP_CONTEXT_STORAGE_OFFSET	components\ble\device_manager\device_manager_peripheral.c	109;"	d	file:
BOND_SIZE	components\ble\device_manager\device_manager_peripheral.c	119;"	d	file:
BOND_STORAGE_OFFSET	components\ble\device_manager\device_manager_peripheral.c	107;"	d	file:
DEVICE_CONTEXT_SIZE	components\ble\device_manager\device_manager_peripheral.c	120;"	d	file:
DM_CLEAR_OPERATION_ID	components\ble\device_manager\device_manager_peripheral.c	183;"	d	file:
DM_DUMP	components\ble\device_manager\device_manager_peripheral.c	150;"	d	file:
DM_DUMP	components\ble\device_manager\device_manager_peripheral.c	152;"	d	file:
DM_ERR	components\ble\device_manager\device_manager_peripheral.c	148;"	d	file:
DM_ERR	components\ble\device_manager\device_manager_peripheral.c	154;"	d	file:
DM_EVT_APP_CONTEXT_BASE	components\ble\device_manager\device_manager_peripheral.c	180;"	d	file:
DM_EVT_DEVICE_CONTEXT_BASE	components\ble\device_manager\device_manager_peripheral.c	178;"	d	file:
DM_EVT_SERVICE_CONTEXT_BASE	components\ble\device_manager\device_manager_peripheral.c	179;"	d	file:
DM_GATTS_INVALID_SIZE	components\ble\device_manager\device_manager_peripheral.c	186;"	d	file:
DM_GATT_ATTR_SIZE	components\ble\device_manager\device_manager_peripheral.c	175;"	d	file:
DM_GATT_SERVER_ATTR_MAX_SIZE	components\ble\device_manager\device_manager_peripheral.c	176;"	d	file:
DM_LOAD_OPERATION_ID	components\ble\device_manager\device_manager_peripheral.c	181;"	d	file:
DM_LOG	components\ble\device_manager\device_manager_peripheral.c	147;"	d	file:
DM_LOG	components\ble\device_manager\device_manager_peripheral.c	153;"	d	file:
DM_MUTEX_LOCK	components\ble\device_manager\device_manager_peripheral.c	166;"	d	file:
DM_MUTEX_UNLOCK	components\ble\device_manager\device_manager_peripheral.c	167;"	d	file:
DM_SERVICE_CONTEXT_COUNT	components\ble\device_manager\device_manager_peripheral.c	177;"	d	file:
DM_STORE_OPERATION_ID	components\ble\device_manager\device_manager_peripheral.c	182;"	d	file:
DM_TRC	components\ble\device_manager\device_manager_peripheral.c	149;"	d	file:
DM_TRC	components\ble\device_manager\device_manager_peripheral.c	155;"	d	file:
EDIV_INIT_VAL	components\ble\device_manager\device_manager_peripheral.c	33;"	d	file:
FIRST_BOND_STORE	components\ble\device_manager\device_manager_peripheral.c	/^    FIRST_BOND_STORE,  \/**< Store bond. *\/$/;"	e	enum:__anon180	file:
GATTC_SERVICE_CONTEXT_SIZE	components\ble\device_manager\device_manager_peripheral.c	122;"	d	file:
GATTS_SERVICE_CONTEXT_SIZE	components\ble\device_manager\device_manager_peripheral.c	121;"	d	file:
INVALID_ADDR_TYPE	components\ble\device_manager\device_manager_peripheral.c	32;"	d	file:
INVALID_CONTEXT_LEN	components\ble\device_manager\device_manager_peripheral.c	334;"	d	file:
IRK_ENTRY	components\ble\device_manager\device_manager_peripheral.c	67;"	d	file:
NULL_PARAM_CHECK	components\ble\device_manager\device_manager_peripheral.c	207;"	d	file:
NULL_PARAM_CHECK	components\ble\device_manager\device_manager_peripheral.c	324;"	d	file:
PEER_ID_SIZE	components\ble\device_manager\device_manager_peripheral.c	118;"	d	file:
PEER_ID_STORAGE_OFFSET	components\ble\device_manager\device_manager_peripheral.c	106;"	d	file:
SERVICE_CONTEXT_ENTRY	components\ble\device_manager\device_manager_peripheral.c	69;"	d	file:
SERVICE_CONTEXT_SIZE	components\ble\device_manager\device_manager_peripheral.c	123;"	d	file:
SERVICE_STORAGE_OFFSET	components\ble\device_manager\device_manager_peripheral.c	108;"	d	file:
SIZE_CHECK_APP_CONTEXT	components\ble\device_manager\device_manager_peripheral.c	341;"	d	file:
STATE_BONDED	components\ble\device_manager\device_manager_peripheral.c	50;"	d	file:
STATE_BOND_INFO_UPDATE	components\ble\device_manager\device_manager_peripheral.c	53;"	d	file:
STATE_CONNECTED	components\ble\device_manager\device_manager_peripheral.c	48;"	d	file:
STATE_CONTROL_PROCEDURE_IN_PROGRESS	components\ble\device_manager\device_manager_peripheral.c	39;"	d	file:
STATE_DISCONNECTING	components\ble\device_manager\device_manager_peripheral.c	51;"	d	file:
STATE_IDLE	components\ble\device_manager\device_manager_peripheral.c	47;"	d	file:
STATE_LINK_ENCRYPTED	components\ble\device_manager\device_manager_peripheral.c	54;"	d	file:
STATE_PAIRING	components\ble\device_manager\device_manager_peripheral.c	49;"	d	file:
STATE_PAIRING_PENDING	components\ble\device_manager\device_manager_peripheral.c	52;"	d	file:
STATE_QUEUED_CONTROL_REQUEST	components\ble\device_manager\device_manager_peripheral.c	40;"	d	file:
STORE_ALL_CONTEXT	components\ble\device_manager\device_manager_peripheral.c	/^    STORE_ALL_CONTEXT, \/**< Store all context. *\/$/;"	e	enum:__anon180	file:
UNASSIGNED	components\ble\device_manager\device_manager_peripheral.c	66;"	d	file:
UPDATE_PEER_ADDR	components\ble\device_manager\device_manager_peripheral.c	/^    UPDATE_PEER_ADDR   \/**< Update peer address. *\/$/;"	e	enum:__anon180	file:
VERIFY_APP_REGISTERED	components\ble\device_manager\device_manager_peripheral.c	248;"	d	file:
VERIFY_APP_REGISTERED	components\ble\device_manager\device_manager_peripheral.c	327;"	d	file:
VERIFY_APP_REGISTERED_VOID	components\ble\device_manager\device_manager_peripheral.c	264;"	d	file:
VERIFY_APP_REGISTERED_VOID	components\ble\device_manager\device_manager_peripheral.c	328;"	d	file:
VERIFY_CONNECTION_INSTANCE	components\ble\device_manager\device_manager_peripheral.c	282;"	d	file:
VERIFY_CONNECTION_INSTANCE	components\ble\device_manager\device_manager_peripheral.c	329;"	d	file:
VERIFY_DEVICE_BOND	components\ble\device_manager\device_manager_peripheral.c	315;"	d	file:
VERIFY_DEVICE_INSTANCE	components\ble\device_manager\device_manager_peripheral.c	299;"	d	file:
VERIFY_DEVICE_INSTANCE	components\ble\device_manager\device_manager_peripheral.c	330;"	d	file:
VERIFY_MODULE_INITIALIZED	components\ble\device_manager\device_manager_peripheral.c	219;"	d	file:
VERIFY_MODULE_INITIALIZED	components\ble\device_manager\device_manager_peripheral.c	325;"	d	file:
VERIFY_MODULE_INITIALIZED_VOID	components\ble\device_manager\device_manager_peripheral.c	231;"	d	file:
VERIFY_MODULE_INITIALIZED_VOID	components\ble\device_manager\device_manager_peripheral.c	326;"	d	file:
__ALIGN	components\ble\device_manager\device_manager_peripheral.c	20;"	d	file:
__ALIGN	components\ble\device_manager\device_manager_peripheral.c	24;"	d	file:
__ALIGN	components\ble\device_manager\device_manager_peripheral.c	28;"	d	file:
app_evt_notify	components\ble\device_manager\device_manager_peripheral.c	/^static __INLINE void app_evt_notify(dm_handle_t const * const p_handle,$/;"	f	file:
application_instance_init	components\ble\device_manager\device_manager_peripheral.c	/^static __INLINE void application_instance_init(uint32_t index)$/;"	f	file:
application_instance_t	components\ble\device_manager\device_manager_peripheral.c	/^} application_instance_t;$/;"	t	typeref:struct:__anon186	file:
attributes	components\ble\device_manager\device_manager_peripheral.c	/^    uint8_t  attributes[DM_GATT_SERVER_ATTR_MAX_SIZE]; \/**< Array to hold the server attributes. *\/$/;"	m	struct:__anon183	file:
bond_context_t	components\ble\device_manager\device_manager_peripheral.c	/^} bond_context_t;$/;"	t	typeref:struct:__anon182	file:
bond_data_load	components\ble\device_manager\device_manager_peripheral.c	/^void bond_data_load(dm_handle_t * p_handle)$/;"	f
bonded_dev_id	components\ble\device_manager\device_manager_peripheral.c	/^    uint8_t        bonded_dev_id; \/**< In case the device is bonded, this points to the corresponding bonded device. This index can be used to index service and bond context as well. *\/$/;"	m	struct:__anon185	file:
conn_handle	components\ble\device_manager\device_manager_peripheral.c	/^    uint16_t       conn_handle;   \/**< Connection handle for the device. *\/$/;"	m	struct:__anon185	file:
connection_instance_allocate	components\ble\device_manager\device_manager_peripheral.c	/^static __INLINE uint32_t connection_instance_allocate(uint32_t * p_instance)$/;"	f	file:
connection_instance_find	components\ble\device_manager\device_manager_peripheral.c	/^static ret_code_t connection_instance_find(uint16_t   conn_handle,$/;"	f	file:
connection_instance_free	components\ble\device_manager\device_manager_peripheral.c	/^static __INLINE void connection_instance_free(uint32_t const * p_instance)$/;"	f	file:
connection_instance_init	components\ble\device_manager\device_manager_peripheral.c	/^static __INLINE void connection_instance_init(uint32_t index)$/;"	f	file:
connection_instance_t	components\ble\device_manager\device_manager_peripheral.c	/^} connection_instance_t;$/;"	t	typeref:struct:__anon185	file:
device_context_store	components\ble\device_manager\device_manager_peripheral.c	/^static __INLINE void device_context_store(dm_handle_t const * p_handle, device_store_state_t state)$/;"	f	file:
device_instance_allocate	components\ble\device_manager\device_manager_peripheral.c	/^static __INLINE ret_code_t device_instance_allocate(uint8_t *              p_device_index,$/;"	f	file:
device_instance_find	components\ble\device_manager\device_manager_peripheral.c	/^static ret_code_t device_instance_find(ble_gap_addr_t const * p_addr, uint32_t * p_device_index, uint16_t ediv)$/;"	f	file:
device_instance_free	components\ble\device_manager\device_manager_peripheral.c	/^static __INLINE ret_code_t device_instance_free(uint32_t device_index)$/;"	f	file:
device_store_state_t	components\ble\device_manager\device_manager_peripheral.c	/^} device_store_state_t;$/;"	t	typeref:enum:__anon180	file:
dm_application_context_delete	components\ble\device_manager\device_manager_peripheral.c	/^ret_code_t dm_application_context_delete(const dm_handle_t * p_handle)$/;"	f
dm_application_context_get	components\ble\device_manager\device_manager_peripheral.c	/^ret_code_t dm_application_context_get(dm_handle_t const        * p_handle,$/;"	f
dm_application_context_set	components\ble\device_manager\device_manager_peripheral.c	/^ret_code_t dm_application_context_set(dm_handle_t const              * p_handle,$/;"	f
dm_application_instance_set	components\ble\device_manager\device_manager_peripheral.c	/^ret_code_t dm_application_instance_set(dm_application_instance_t const * p_appl_instance,$/;"	f
dm_ble_evt_handler	components\ble\device_manager\device_manager_peripheral.c	/^void dm_ble_evt_handler(ble_evt_t * p_ble_evt)$/;"	f
dm_device_add	components\ble\device_manager\device_manager_peripheral.c	/^ret_code_t dm_device_add(dm_handle_t               * p_handle,$/;"	f
dm_device_delete	components\ble\device_manager\device_manager_peripheral.c	/^ret_code_t dm_device_delete(dm_handle_t const * p_handle)$/;"	f
dm_device_delete_all	components\ble\device_manager\device_manager_peripheral.c	/^ret_code_t dm_device_delete_all(dm_application_instance_t const * p_handle)$/;"	f
dm_distributed_keys_get	components\ble\device_manager\device_manager_peripheral.c	/^ret_code_t dm_distributed_keys_get(dm_handle_t const * p_handle,$/;"	f
dm_gatt_client_context_t	components\ble\device_manager\device_manager_peripheral.c	/^} dm_gatt_client_context_t;$/;"	t	typeref:struct:__anon184	file:
dm_gatts_context_t	components\ble\device_manager\device_manager_peripheral.c	/^} dm_gatts_context_t;$/;"	t	typeref:struct:__anon183	file:
dm_handle_get	components\ble\device_manager\device_manager_peripheral.c	/^ret_code_t dm_handle_get(uint16_t conn_handle, dm_handle_t * p_handle)$/;"	f
dm_handle_initialize	components\ble\device_manager\device_manager_peripheral.c	/^uint32_t dm_handle_initialize(dm_handle_t * p_handle)$/;"	f
dm_init	components\ble\device_manager\device_manager_peripheral.c	/^ret_code_t dm_init(dm_init_param_t const * const p_init_param)$/;"	f
dm_peer_addr_get	components\ble\device_manager\device_manager_peripheral.c	/^ret_code_t dm_peer_addr_get(dm_handle_t const * p_handle,$/;"	f
dm_peer_addr_set	components\ble\device_manager\device_manager_peripheral.c	/^ret_code_t dm_peer_addr_set(dm_handle_t const    * p_handle,$/;"	f
dm_pstorage_cb_handler	components\ble\device_manager\device_manager_peripheral.c	/^static void dm_pstorage_cb_handler(pstorage_handle_t * p_handle,$/;"	f	file:
dm_register	components\ble\device_manager\device_manager_peripheral.c	/^ret_code_t dm_register(dm_application_instance_t    * p_appl_instance,$/;"	f
dm_security_setup_req	components\ble\device_manager\device_manager_peripheral.c	/^ret_code_t dm_security_setup_req(dm_handle_t * p_handle)$/;"	f
dm_security_status_req	components\ble\device_manager\device_manager_peripheral.c	/^ret_code_t dm_security_status_req(dm_handle_t const    * p_handle,$/;"	f
dm_service_context_delete	components\ble\device_manager\device_manager_peripheral.c	/^ret_code_t dm_service_context_delete(dm_handle_t const * p_handle)$/;"	f
dm_service_context_get	components\ble\device_manager\device_manager_peripheral.c	/^ret_code_t dm_service_context_get(dm_handle_t const    * p_handle,$/;"	f
dm_service_context_set	components\ble\device_manager\device_manager_peripheral.c	/^ret_code_t dm_service_context_set(dm_handle_t const          * p_handle,$/;"	f
dm_whitelist_create	components\ble\device_manager\device_manager_peripheral.c	/^ret_code_t dm_whitelist_create(dm_application_instance_t const * p_handle,$/;"	f
ediv	components\ble\device_manager\device_manager_peripheral.c	/^    uint16_t         ediv;      \/**< Peer's encrypted diversifier. *\/$/;"	m	struct:__anon181	file:
flags	components\ble\device_manager\device_manager_peripheral.c	/^    uint32_t flags;                                    \/**< Flags identifying the stored attributes. *\/$/;"	m	struct:__anon183	file:
gattc_context_apply	components\ble\device_manager\device_manager_peripheral.c	/^static __INLINE ret_code_t gattc_context_apply(dm_handle_t * p_handle)$/;"	f	file:
gattc_context_load	components\ble\device_manager\device_manager_peripheral.c	/^static __INLINE ret_code_t gattc_context_load(pstorage_handle_t const * p_block_handle,$/;"	f	file:
gattc_context_store	components\ble\device_manager\device_manager_peripheral.c	/^static __INLINE ret_code_t gattc_context_store(pstorage_handle_t const * p_block_handle,$/;"	f	file:
gatts_context_apply	components\ble\device_manager\device_manager_peripheral.c	/^static __INLINE ret_code_t gatts_context_apply(dm_handle_t * p_handle)$/;"	f	file:
gatts_context_load	components\ble\device_manager\device_manager_peripheral.c	/^static __INLINE ret_code_t gatts_context_load(pstorage_handle_t const * p_block_handle,$/;"	f	file:
gatts_context_store	components\ble\device_manager\device_manager_peripheral.c	/^static __INLINE ret_code_t gatts_context_store(pstorage_handle_t const * p_block_handle,$/;"	f	file:
gattsc_context_apply	components\ble\device_manager\device_manager_peripheral.c	/^static __INLINE ret_code_t gattsc_context_apply(dm_handle_t * p_handle)$/;"	f	file:
gattsc_context_load	components\ble\device_manager\device_manager_peripheral.c	/^static __INLINE ret_code_t gattsc_context_load(pstorage_handle_t const * p_block_handle,$/;"	f	file:
gattsc_context_store	components\ble\device_manager\device_manager_peripheral.c	/^static __INLINE ret_code_t gattsc_context_store(pstorage_handle_t const * p_block_handle,$/;"	f	file:
id_bitmap	components\ble\device_manager\device_manager_peripheral.c	/^    uint8_t          id_bitmap; \/**< Contains information if above field is valid. *\/$/;"	m	struct:__anon181	file:
m_app_context_table	components\ble\device_manager\device_manager_peripheral.c	/^static uint8_t * m_app_context_table[DEVICE_MANAGER_MAX_BONDS];                     \/**< Table to remember application contexts of bonded devices. *\/$/;"	v	file:
m_application_table	components\ble\device_manager\device_manager_peripheral.c	/^static application_instance_t m_application_table[DEVICE_MANAGER_MAX_APPLICATIONS]; \/**< Table to maintain application instances. *\/$/;"	v	file:
m_bond_table	components\ble\device_manager\device_manager_peripheral.c	/^static bond_context_t         m_bond_table[DEVICE_MANAGER_MAX_CONNECTIONS];         \/**< Table to maintain bond information for active peers. *\/$/;"	v	file:
m_connection_table	components\ble\device_manager\device_manager_peripheral.c	/^static connection_instance_t  m_connection_table[DEVICE_MANAGER_MAX_CONNECTIONS];   \/**< Table to maintain active peer information. An instance is allocated in the table when a new connection is established and freed on disconnection. *\/$/;"	v	file:
m_context_init_len	components\ble\device_manager\device_manager_peripheral.c	/^const uint32_t m_context_init_len = 0xFFFFFFFF; \/**< Constant used to update the initial value for context in the flash. *\/$/;"	v
m_gatts_table	components\ble\device_manager\device_manager_peripheral.c	/^static dm_gatts_context_t     m_gatts_table[DEVICE_MANAGER_MAX_CONNECTIONS];        \/**< Table for service information for active connection instances. *\/$/;"	v	file:
m_irk_index_table	components\ble\device_manager\device_manager_peripheral.c	/^static uint8_t                m_irk_index_table[DEVICE_MANAGER_MAX_BONDS];          \/**< List maintaining IRK index list. *\/$/;"	v	file:
m_local_id_info	components\ble\device_manager\device_manager_peripheral.c	/^static ble_gap_id_key_t       m_local_id_info;                                      \/**< ID information of central in case resolvable address is used. *\/$/;"	v	file:
m_module_initialized	components\ble\device_manager\device_manager_peripheral.c	/^static bool                   m_module_initialized = false;                         \/**< State indicating if module is initialized or not. *\/$/;"	v	file:
m_peer_addr_update	components\ble\device_manager\device_manager_peripheral.c	/^static uint32_t               m_peer_addr_update;                                   \/**< 32-bit bitmap to remember peer device address update. *\/$/;"	v	file:
m_peer_table	components\ble\device_manager\device_manager_peripheral.c	/^static peer_id_t              m_peer_table[DEVICE_MANAGER_MAX_BONDS] ;              \/**< Table to maintain bonded devices' identification information, an instance is allocated in the table when a device is bonded and freed when bond information is deleted. *\/$/;"	v	file:
m_service_context_apply	components\ble\device_manager\device_manager_peripheral.c	/^const service_context_apply_t m_service_context_apply[DM_SERVICE_CONTEXT_COUNT] =$/;"	v
m_service_context_load	components\ble\device_manager\device_manager_peripheral.c	/^const service_context_access_t m_service_context_load[DM_SERVICE_CONTEXT_COUNT] =$/;"	v
m_service_context_store	components\ble\device_manager\device_manager_peripheral.c	/^const service_context_access_t m_service_context_store[DM_SERVICE_CONTEXT_COUNT] =$/;"	v
m_storage_handle	components\ble\device_manager\device_manager_peripheral.c	/^static pstorage_handle_t      m_storage_handle;                                     \/**< Persistent storage handle for blocks requested by the module. *\/$/;"	v	file:
nDM_DISABLE_LOGS	components\ble\device_manager\device_manager_peripheral.c	144;"	d	file:
no_service_context_apply	components\ble\device_manager\device_manager_peripheral.c	/^static __INLINE ret_code_t no_service_context_apply(dm_handle_t * p_handle)$/;"	f	file:
no_service_context_load	components\ble\device_manager\device_manager_peripheral.c	/^static __INLINE ret_code_t no_service_context_load(pstorage_handle_t const * p_block_handle,$/;"	f	file:
no_service_context_store	components\ble\device_manager\device_manager_peripheral.c	/^static __INLINE ret_code_t no_service_context_store(pstorage_handle_t const * p_block_handle,$/;"	f	file:
ntf_cb	components\ble\device_manager\device_manager_peripheral.c	/^    dm_event_cb_t        ntf_cb;    \/**< Callback registered with the application. *\/$/;"	m	struct:__anon186	file:
p_dummy	components\ble\device_manager\device_manager_peripheral.c	/^    void * p_dummy; \/**< Placeholder, currently unused. *\/$/;"	m	struct:__anon184	file:
peer_addr	components\ble\device_manager\device_manager_peripheral.c	/^    ble_gap_addr_t peer_addr;     \/**< Peer identification information. This information is retained as long as the connection session exists, once disconnected, for non-bonded devices this information is not stored persistently. *\/$/;"	m	struct:__anon185	file:
peer_enc_key	components\ble\device_manager\device_manager_peripheral.c	/^    ble_gap_enc_key_t peer_enc_key; \/**< Local LTK info, central IRK and address *\/$/;"	m	struct:__anon182	file:
peer_id	components\ble\device_manager\device_manager_peripheral.c	/^    ble_gap_id_key_t peer_id;   \/**< IRK and\/or address of peer. *\/$/;"	m	struct:__anon181	file:
peer_id_t	components\ble\device_manager\device_manager_peripheral.c	/^} peer_id_t;$/;"	t	typeref:struct:__anon181	file:
peer_instance_init	components\ble\device_manager\device_manager_peripheral.c	/^static __INLINE void peer_instance_init(uint32_t index)$/;"	f	file:
sec_param	components\ble\device_manager\device_manager_peripheral.c	/^    ble_gap_sec_params_t sec_param; \/**< Local security parameters registered by the application. *\/$/;"	m	struct:__anon186	file:
service	components\ble\device_manager\device_manager_peripheral.c	/^    uint8_t              service;   \/**< Service registered by the application. *\/$/;"	m	struct:__anon186	file:
service_context_access_t	components\ble\device_manager\device_manager_peripheral.c	/^typedef ret_code_t (* service_context_access_t)(pstorage_handle_t const * p_block_handle,$/;"	t	file:
service_context_apply_t	components\ble\device_manager\device_manager_peripheral.c	/^typedef ret_code_t (* service_context_apply_t)(dm_handle_t * p_handle);$/;"	t	file:
size	components\ble\device_manager\device_manager_peripheral.c	/^    uint32_t size;                                     \/**< Size of stored attributes. *\/$/;"	m	struct:__anon183	file:
state	components\ble\device_manager\device_manager_peripheral.c	/^    uint8_t              state;     \/**< Application state. Currently this is used only for knowing if any security procedure is in progress and\/or a security procedure is pending to be requested. *\/$/;"	m	struct:__anon186	file:
state	components\ble\device_manager\device_manager_peripheral.c	/^    uint8_t        state;         \/**< Link state. *\/$/;"	m	struct:__anon185	file:
storage_operation	components\ble\device_manager\device_manager_peripheral.c	/^typedef uint32_t (* storage_operation)(pstorage_handle_t * p_dest,$/;"	t	file:
storage_operation_dummy_handler	components\ble\device_manager\device_manager_peripheral.c	/^static uint32_t storage_operation_dummy_handler(pstorage_handle_t * p_dest,$/;"	f	file:
update_status_bit_is_set	components\ble\device_manager\device_manager_peripheral.c	/^static __INLINE bool update_status_bit_is_set(uint32_t index)$/;"	f	file:
update_status_bit_reset	components\ble\device_manager\device_manager_peripheral.c	/^static __INLINE void update_status_bit_reset(uint32_t index)$/;"	f	file:
update_status_bit_set	components\ble\device_manager\device_manager_peripheral.c	/^static __INLINE void update_status_bit_set(uint32_t index)$/;"	f	file:
GET_SP	components\device\compiler_abstraction.h	103;"	d
GET_SP	components\device\compiler_abstraction.h	49;"	d
GET_SP	components\device\compiler_abstraction.h	65;"	d
GET_SP	components\device\compiler_abstraction.h	81;"	d
_COMPILER_ABSTRACTION_H	components\device\compiler_abstraction.h	31;"	d
__ASM	components\device\compiler_abstraction.h	38;"	d
__ASM	components\device\compiler_abstraction.h	54;"	d
__ASM	components\device\compiler_abstraction.h	70;"	d
__ASM	components\device\compiler_abstraction.h	92;"	d
__INLINE	components\device\compiler_abstraction.h	42;"	d
__INLINE	components\device\compiler_abstraction.h	58;"	d
__INLINE	components\device\compiler_abstraction.h	74;"	d
__INLINE	components\device\compiler_abstraction.h	96;"	d
__WEAK	components\device\compiler_abstraction.h	100;"	d
__WEAK	components\device\compiler_abstraction.h	46;"	d
__WEAK	components\device\compiler_abstraction.h	62;"	d
__WEAK	components\device\compiler_abstraction.h	78;"	d
gcc_current_sp	components\device\compiler_abstraction.h	/^    static inline unsigned int gcc_current_sp(void)$/;"	f
NRF_H	components\device\nrf.h	32;"	d
AAR	components\device\nrf51.h	/^  __IO uint32_t  AAR;                               \/*!< Configurable priority configuration register for AAR.                 *\/$/;"	m	struct:__anon188
ACC	components\device\nrf51.h	/^  __I  int32_t   ACC;                               \/*!< Accumulated valid transitions register.                               *\/$/;"	m	struct:__anon215
ACCDBL	components\device\nrf51.h	/^  __I  uint32_t  ACCDBL;                            \/*!< Accumulated double (error) transitions register.                      *\/$/;"	m	struct:__anon215
ACCDBLREAD	components\device\nrf51.h	/^  __I  uint32_t  ACCDBLREAD;                        \/*!< Snapshot of ACCDBL register. Value generated by the TASKS_READCLEACC$/;"	m	struct:__anon215
ACCREAD	components\device\nrf51.h	/^  __I  int32_t   ACCREAD;                           \/*!< Snapshot of ACC register. Value generated by the TASKS_READCLEACC$/;"	m	struct:__anon215
ADC_IRQn	components\device\nrf51.h	/^  ADC_IRQn                      =   7,              \/*!<   7  ADC                                                              *\/$/;"	e	enum:__anon187
ADDRESS	components\device\nrf51.h	/^  __IO uint32_t  ADDRESS;                           \/*!< Address used in the two-wire transfer.                                *\/$/;"	m	struct:__anon202
ADDRPTR	components\device\nrf51.h	/^  __IO uint32_t  ADDRPTR;                           \/*!< Pointer to the resolvable address (6 bytes).                          *\/$/;"	m	struct:__anon212
AMLI_RAMPRI_Type	components\device\nrf51.h	/^} AMLI_RAMPRI_Type;$/;"	t	typeref:struct:__anon188
AMOUNT	components\device\nrf51.h	/^  __I  uint32_t  AMOUNT;                            \/*!< Number of bytes received in the last transaction.                     *\/$/;"	m	struct:__anon190
AMOUNT	components\device\nrf51.h	/^  __I  uint32_t  AMOUNT;                            \/*!< Number of bytes sent in the last transaction.                         *\/$/;"	m	struct:__anon191
AMOUNTRX	components\device\nrf51.h	/^  __I  uint32_t  AMOUNTRX;                          \/*!< Number of bytes received in last granted transaction.                 *\/$/;"	m	struct:__anon203
AMOUNTTX	components\device\nrf51.h	/^  __I  uint32_t  AMOUNTTX;                          \/*!< Number of bytes transmitted in last granted transaction.              *\/$/;"	m	struct:__anon203
ANADETECT	components\device\nrf51.h	/^  __IO uint32_t  ANADETECT;                         \/*!< Analog detect configuration.                                          *\/$/;"	m	struct:__anon216
BASE0	components\device\nrf51.h	/^  __IO uint32_t  BASE0;                             \/*!< Radio base address 0. Decision point: START task.                     *\/$/;"	m	struct:__anon199
BASE1	components\device\nrf51.h	/^  __IO uint32_t  BASE1;                             \/*!< Radio base address 1. Decision point: START task.                     *\/$/;"	m	struct:__anon199
BAUDRATE	components\device\nrf51.h	/^  __IO uint32_t  BAUDRATE;                          \/*!< UART Baudrate.                                                        *\/$/;"	m	struct:__anon200
BCC	components\device\nrf51.h	/^  __IO uint32_t  BCC;                               \/*!< Bit counter compare.                                                  *\/$/;"	m	struct:__anon199
BITMODE	components\device\nrf51.h	/^  __IO uint32_t  BITMODE;                           \/*!< Sets timer behaviour.                                                 *\/$/;"	m	struct:__anon207
BLE_1MBIT	components\device\nrf51.h	/^  __I  uint32_t  BLE_1MBIT[5];                      \/*!< Override values for the OVERRIDEn registers in RADIO for BLE_1Mbit$/;"	m	struct:__anon222
BOOTLOADERADDR	components\device\nrf51.h	/^    __IO uint32_t  BOOTLOADERADDR;                  \/*!< Bootloader start address.                                             *\/$/;"	m	union:__anon224::__anon225
BUSY	components\device\nrf51.h	/^  __I  uint32_t  BUSY;                              \/*!< ADC busy register.                                                    *\/$/;"	m	struct:__anon206
CC	components\device\nrf51.h	/^  __IO uint32_t  CC[4];                             \/*!< Capture\/compare registers.                                            *\/$/;"	m	struct:__anon207
CC	components\device\nrf51.h	/^  __IO uint32_t  CC[4];                             \/*!< Capture\/compare registers.                                            *\/$/;"	m	struct:__anon208
CCM	components\device\nrf51.h	/^  __IO uint32_t  CCM;                               \/*!< Configurable priority configuration register for CCM.                 *\/$/;"	m	struct:__anon188
CCM_AAR_IRQn	components\device\nrf51.h	/^  CCM_AAR_IRQn                  =  15,              \/*!<  15  CCM_AAR                                                          *\/$/;"	e	enum:__anon187
CD	components\device\nrf51.h	/^  __I  uint32_t  CD;                                \/*!< Carrier detect.                                                       *\/$/;"	m	struct:__anon199
CH	components\device\nrf51.h	/^  PPI_CH_Type CH[16];                               \/*!< PPI Channel.                                                          *\/$/;"	m	struct:__anon221
CHEN	components\device\nrf51.h	/^  __IO uint32_t  CHEN;                              \/*!< Channel enable.                                                       *\/$/;"	m	struct:__anon221
CHENCLR	components\device\nrf51.h	/^  __IO uint32_t  CHENCLR;                           \/*!< Channel enable clear.                                                 *\/$/;"	m	struct:__anon221
CHENSET	components\device\nrf51.h	/^  __IO uint32_t  CHENSET;                           \/*!< Channel enable set.                                                   *\/$/;"	m	struct:__anon221
CHG	components\device\nrf51.h	/^  __IO uint32_t  CHG[4];                            \/*!< Channel group configuration.                                          *\/$/;"	m	struct:__anon221
CLENR0	components\device\nrf51.h	/^  __I  uint32_t  CLENR0;                            \/*!< Length of code region 0 in bytes.                                     *\/$/;"	m	struct:__anon222
CLENR0	components\device\nrf51.h	/^  __IO uint32_t  CLENR0;                            \/*!< Length of code region 0.                                              *\/$/;"	m	struct:__anon224
CNFPTR	components\device\nrf51.h	/^  __IO uint32_t  CNFPTR;                            \/*!< Pointer to a data structure holding AES key and NONCE vector.         *\/$/;"	m	struct:__anon213
CODEPAGESIZE	components\device\nrf51.h	/^  __I  uint32_t  CODEPAGESIZE;                      \/*!< Code memory page size in bytes.                                       *\/$/;"	m	struct:__anon222
CODESIZE	components\device\nrf51.h	/^  __I  uint32_t  CODESIZE;                          \/*!< Code memory size in pages.                                            *\/$/;"	m	struct:__anon222
CONFIG	components\device\nrf51.h	/^  __IO uint32_t  CONFIG;                            \/*!< ADC configuration register.                                           *\/$/;"	m	struct:__anon206
CONFIG	components\device\nrf51.h	/^  __IO uint32_t  CONFIG;                            \/*!< Configuration of parity and hardware flow control register.           *\/$/;"	m	struct:__anon200
CONFIG	components\device\nrf51.h	/^  __IO uint32_t  CONFIG;                            \/*!< Configuration register.                                               *\/$/;"	m	struct:__anon201
CONFIG	components\device\nrf51.h	/^  __IO uint32_t  CONFIG;                            \/*!< Configuration register.                                               *\/$/;"	m	struct:__anon203
CONFIG	components\device\nrf51.h	/^  __IO uint32_t  CONFIG;                            \/*!< Configuration register.                                               *\/$/;"	m	struct:__anon204
CONFIG	components\device\nrf51.h	/^  __IO uint32_t  CONFIG;                            \/*!< Configuration register.                                               *\/$/;"	m	struct:__anon210
CONFIG	components\device\nrf51.h	/^  __IO uint32_t  CONFIG;                            \/*!< Configuration register.                                               *\/$/;"	m	struct:__anon214
CONFIG	components\device\nrf51.h	/^  __IO uint32_t  CONFIG;                            \/*!< Configuration register.                                               *\/$/;"	m	struct:__anon218
CONFIG	components\device\nrf51.h	/^  __IO uint32_t  CONFIG[4];                         \/*!< Channel configuration registers.                                      *\/$/;"	m	struct:__anon205
CONFIGID	components\device\nrf51.h	/^  __I  uint32_t  CONFIGID;                          \/*!< Configuration identifier.                                             *\/$/;"	m	struct:__anon222
COUNTER	components\device\nrf51.h	/^  __I  uint32_t  COUNTER;                           \/*!< Current COUNTER value.                                                *\/$/;"	m	struct:__anon208
CPU0	components\device\nrf51.h	/^  __IO uint32_t  CPU0;                              \/*!< Configurable priority configuration register for CPU0.                *\/$/;"	m	struct:__anon188
CRCCNF	components\device\nrf51.h	/^  __IO uint32_t  CRCCNF;                            \/*!< CRC configuration.                                                    *\/$/;"	m	struct:__anon199
CRCINIT	components\device\nrf51.h	/^  __IO uint32_t  CRCINIT;                           \/*!< CRC initial value.                                                    *\/$/;"	m	struct:__anon199
CRCPOLY	components\device\nrf51.h	/^  __IO uint32_t  CRCPOLY;                           \/*!< CRC polynomial.                                                       *\/$/;"	m	struct:__anon199
CRCSTATUS	components\device\nrf51.h	/^  __I  uint32_t  CRCSTATUS;                         \/*!< CRC status of received packet.                                        *\/$/;"	m	struct:__anon199
CRV	components\device\nrf51.h	/^  __IO uint32_t  CRV;                               \/*!< Counter reload value in number of 32kiHz clock cycles.                *\/$/;"	m	struct:__anon214
CTIV	components\device\nrf51.h	/^  __IO uint32_t  CTIV;                              \/*!< Calibration timer interval.                                           *\/$/;"	m	struct:__anon195
CUSTOMER	components\device\nrf51.h	/^  __IO uint32_t  CUSTOMER[32];                      \/*!< Reserved for customer.                                                *\/$/;"	m	struct:__anon224
DAB	components\device\nrf51.h	/^  __IO uint32_t  DAB[8];                            \/*!< Device address base segment.                                          *\/$/;"	m	struct:__anon199
DACNF	components\device\nrf51.h	/^  __IO uint32_t  DACNF;                             \/*!< Device address match configuration.                                   *\/$/;"	m	struct:__anon199
DAI	components\device\nrf51.h	/^  __I  uint32_t  DAI;                               \/*!< Device address match index.                                           *\/$/;"	m	struct:__anon199
DAP	components\device\nrf51.h	/^  __IO uint32_t  DAP[8];                            \/*!< Device address prefix.                                                *\/$/;"	m	struct:__anon199
DATAWHITEIV	components\device\nrf51.h	/^  __IO uint32_t  DATAWHITEIV;                       \/*!< Data whitening initial value.                                         *\/$/;"	m	struct:__anon199
DBFEN	components\device\nrf51.h	/^  __IO uint32_t  DBFEN;                             \/*!< Enable debouncer input filters.                                       *\/$/;"	m	struct:__anon215
DCDCEN	components\device\nrf51.h	/^  __IO uint32_t  DCDCEN;                            \/*!< DCDC converter enable configuration register.                         *\/$/;"	m	struct:__anon194
DCDCFORCE	components\device\nrf51.h	/^  __IO uint32_t  DCDCFORCE;                         \/*!< DCDC power-up force register.                                         *\/$/;"	m	struct:__anon194
DEF	components\device\nrf51.h	/^  __IO uint32_t  DEF;                               \/*!< Default character.                                                    *\/$/;"	m	struct:__anon203
DEVICEADDR	components\device\nrf51.h	/^  __I  uint32_t  DEVICEADDR[2];                     \/*!< Device address.                                                       *\/$/;"	m	struct:__anon222
DEVICEADDRTYPE	components\device\nrf51.h	/^  __I  uint32_t  DEVICEADDRTYPE;                    \/*!< Device address type.                                                  *\/$/;"	m	struct:__anon222
DEVICEID	components\device\nrf51.h	/^  __I  uint32_t  DEVICEID[2];                       \/*!< Device identifier.                                                    *\/$/;"	m	struct:__anon222
DIR	components\device\nrf51.h	/^  __IO uint32_t  DIR;                               \/*!< Direction of GPIO pins.                                               *\/$/;"	m	struct:__anon226
DIRCLR	components\device\nrf51.h	/^  __IO uint32_t  DIRCLR;                            \/*!< DIR clear register.                                                   *\/$/;"	m	struct:__anon226
DIRSET	components\device\nrf51.h	/^  __IO uint32_t  DIRSET;                            \/*!< DIR set register.                                                     *\/$/;"	m	struct:__anon226
DIS	components\device\nrf51.h	/^  __O  uint32_t  DIS;                               \/*!< Disable channel group.                                                *\/$/;"	m	struct:__anon192
DISABLEINDEBUG	components\device\nrf51.h	/^  __IO uint32_t  DISABLEINDEBUG;                    \/*!< Disable erase and write protection mechanism in debug mode.           *\/$/;"	m	struct:__anon196
DebugMonitor_IRQn	components\device\nrf51.h	/^  DebugMonitor_IRQn             =  -4,              \/*!<  12  Debug Monitor                                                    *\/$/;"	e	enum:__anon187
ECB	components\device\nrf51.h	/^  __IO uint32_t  ECB;                               \/*!< Configurable priority configuration register for ECB.                 *\/$/;"	m	struct:__anon188
ECBDATAPTR	components\device\nrf51.h	/^  __IO uint32_t  ECBDATAPTR;                        \/*!< ECB block encrypt memory pointer.                                     *\/$/;"	m	struct:__anon211
ECB_IRQn	components\device\nrf51.h	/^  ECB_IRQn                      =  14,              \/*!<  14  ECB                                                              *\/$/;"	e	enum:__anon187
EEP	components\device\nrf51.h	/^  __IO uint32_t  EEP;                               \/*!< Channel event end-point.                                              *\/$/;"	m	struct:__anon193
EN	components\device\nrf51.h	/^  __O  uint32_t  EN;                                \/*!< Enable channel group.                                                 *\/$/;"	m	struct:__anon192
ENABLE	components\device\nrf51.h	/^  __IO uint32_t  ENABLE;                            \/*!< ADC enable.                                                           *\/$/;"	m	struct:__anon206
ENABLE	components\device\nrf51.h	/^  __IO uint32_t  ENABLE;                            \/*!< CCM enable.                                                           *\/$/;"	m	struct:__anon213
ENABLE	components\device\nrf51.h	/^  __IO uint32_t  ENABLE;                            \/*!< Enable AAR.                                                           *\/$/;"	m	struct:__anon212
ENABLE	components\device\nrf51.h	/^  __IO uint32_t  ENABLE;                            \/*!< Enable SPI.                                                           *\/$/;"	m	struct:__anon201
ENABLE	components\device\nrf51.h	/^  __IO uint32_t  ENABLE;                            \/*!< Enable SPIM.                                                          *\/$/;"	m	struct:__anon204
ENABLE	components\device\nrf51.h	/^  __IO uint32_t  ENABLE;                            \/*!< Enable SPIS.                                                          *\/$/;"	m	struct:__anon203
ENABLE	components\device\nrf51.h	/^  __IO uint32_t  ENABLE;                            \/*!< Enable UART and acquire IOs.                                          *\/$/;"	m	struct:__anon200
ENABLE	components\device\nrf51.h	/^  __IO uint32_t  ENABLE;                            \/*!< Enable the LPCOMP.                                                    *\/$/;"	m	struct:__anon216
ENABLE	components\device\nrf51.h	/^  __IO uint32_t  ENABLE;                            \/*!< Enable the QDEC.                                                      *\/$/;"	m	struct:__anon215
ENABLE	components\device\nrf51.h	/^  __IO uint32_t  ENABLE;                            \/*!< Enable two-wire master.                                               *\/$/;"	m	struct:__anon202
ER	components\device\nrf51.h	/^  __I  uint32_t  ER[4];                             \/*!< Encryption root.                                                      *\/$/;"	m	struct:__anon222
ERASEALL	components\device\nrf51.h	/^  __IO uint32_t  ERASEALL;                          \/*!< Register for erasing all non-volatile user memory.                    *\/$/;"	m	struct:__anon218
ERASEPAGE	components\device\nrf51.h	/^    __IO uint32_t  ERASEPAGE;                       \/*!< Register for erasing a non-protected non-volatile memory page.        *\/$/;"	m	union:__anon218::__anon219
ERASEPCR0	components\device\nrf51.h	/^    __IO uint32_t  ERASEPCR0;                       \/*!< Register for erasing a protected non-volatile memory page.            *\/$/;"	m	union:__anon218::__anon220
ERASEPCR1	components\device\nrf51.h	/^    __IO uint32_t  ERASEPCR1;                       \/*!< Register for erasing a non-protected non-volatile memory page.        *\/$/;"	m	union:__anon218::__anon219
ERASEPROTECTEDPAGE	components\device\nrf51.h	/^    __IO uint32_t  ERASEPROTECTEDPAGE;              \/*!< Register for erasing a protected non-volatile memory page.            *\/$/;"	m	union:__anon218::__anon220
ERASEUICR	components\device\nrf51.h	/^  __IO uint32_t  ERASEUICR;                         \/*!< Register for start erasing User Information Congfiguration Registers. *\/$/;"	m	struct:__anon218
ERRORSRC	components\device\nrf51.h	/^  __IO uint32_t  ERRORSRC;                          \/*!< Error source. Write error field to 1 to clear error.                  *\/$/;"	m	struct:__anon200
ERRORSRC	components\device\nrf51.h	/^  __IO uint32_t  ERRORSRC;                          \/*!< Two-wire error source. Write error field to 1 to clear error.         *\/$/;"	m	struct:__anon202
EVENTS_ACCOF	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_ACCOF;                      \/*!< ACC or ACCDBL register overflow.                                      *\/$/;"	m	struct:__anon215
EVENTS_ACQUIRED	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_ACQUIRED;                   \/*!< Semaphore acquired.                                                   *\/$/;"	m	struct:__anon203
EVENTS_ADDRESS	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_ADDRESS;                    \/*!< Address event.                                                        *\/$/;"	m	struct:__anon199
EVENTS_BB	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_BB;                         \/*!< Two-wire byte boundary.                                               *\/$/;"	m	struct:__anon202
EVENTS_BCMATCH	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_BCMATCH;                    \/*!< Bit counter reached bit count value specified in BCC register.        *\/$/;"	m	struct:__anon199
EVENTS_COMPARE	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_COMPARE[4];                 \/*!< Compare event on CC[n] match.                                         *\/$/;"	m	struct:__anon207
EVENTS_COMPARE	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_COMPARE[4];                 \/*!< Compare event on CC[n] match.                                         *\/$/;"	m	struct:__anon208
EVENTS_CROSS	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_CROSS;                      \/*!< Input voltage crossed the threshold in any direction.                 *\/$/;"	m	struct:__anon216
EVENTS_CTS	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_CTS;                        \/*!< CTS activated.                                                        *\/$/;"	m	struct:__anon200
EVENTS_CTTO	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_CTTO;                       \/*!< Calibration timer timeout.                                            *\/$/;"	m	struct:__anon195
EVENTS_DATARDY	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_DATARDY;                    \/*!< Temperature measurement complete, data ready event.                   *\/$/;"	m	struct:__anon209
EVENTS_DEVMATCH	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_DEVMATCH;                   \/*!< A device address match occurred on the last received packet.          *\/$/;"	m	struct:__anon199
EVENTS_DEVMISS	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_DEVMISS;                    \/*!< No device address match occurred on the last received packet.         *\/$/;"	m	struct:__anon199
EVENTS_DISABLED	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_DISABLED;                   \/*!< Disable event.                                                        *\/$/;"	m	struct:__anon199
EVENTS_DONE	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_DONE;                       \/*!< Calibration of LFCLK RC oscillator completed.                         *\/$/;"	m	struct:__anon195
EVENTS_DOWN	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_DOWN;                       \/*!< Input voltage crossed the threshold going down.                       *\/$/;"	m	struct:__anon216
EVENTS_END	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_END;                        \/*!< ADC conversion complete.                                              *\/$/;"	m	struct:__anon206
EVENTS_END	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_END;                        \/*!< Address resolution procedure completed.                               *\/$/;"	m	struct:__anon212
EVENTS_END	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_END;                        \/*!< End event.                                                            *\/$/;"	m	struct:__anon199
EVENTS_END	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_END;                        \/*!< End of RXD buffer and TXD buffer reached.                             *\/$/;"	m	struct:__anon204
EVENTS_END	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_END;                        \/*!< Granted transaction completed.                                        *\/$/;"	m	struct:__anon203
EVENTS_ENDCRYPT	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_ENDCRYPT;                   \/*!< Encrypt\/decrypt completed.                                            *\/$/;"	m	struct:__anon213
EVENTS_ENDECB	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_ENDECB;                     \/*!< ECB block encrypt complete.                                           *\/$/;"	m	struct:__anon211
EVENTS_ENDKSGEN	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_ENDKSGEN;                   \/*!< Keystream generation completed.                                       *\/$/;"	m	struct:__anon213
EVENTS_ENDRX	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_ENDRX;                      \/*!< End of RXD buffer reached.                                            *\/$/;"	m	struct:__anon204
EVENTS_ENDTX	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_ENDTX;                      \/*!< End of TXD buffer reached.                                            *\/$/;"	m	struct:__anon204
EVENTS_ERROR	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_ERROR;                      \/*!< Error detected.                                                       *\/$/;"	m	struct:__anon200
EVENTS_ERROR	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_ERROR;                      \/*!< Error happened.                                                       *\/$/;"	m	struct:__anon213
EVENTS_ERROR	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_ERROR;                      \/*!< Two-wire error detected.                                              *\/$/;"	m	struct:__anon202
EVENTS_ERRORECB	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_ERRORECB;                   \/*!< ECB block encrypt aborted due to a STOPECB task or due to an$/;"	m	struct:__anon211
EVENTS_HFCLKSTARTED	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_HFCLKSTARTED;               \/*!< HFCLK oscillator started.                                             *\/$/;"	m	struct:__anon195
EVENTS_IN	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_IN[4];                      \/*!< Tasks asssociated with GPIOTE channels.                               *\/$/;"	m	struct:__anon205
EVENTS_LFCLKSTARTED	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_LFCLKSTARTED;               \/*!< LFCLK oscillator started.                                             *\/$/;"	m	struct:__anon195
EVENTS_NCTS	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_NCTS;                       \/*!< CTS deactivated.                                                      *\/$/;"	m	struct:__anon200
EVENTS_NOTRESOLVED	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_NOTRESOLVED;                \/*!< Address not resolved.                                                 *\/$/;"	m	struct:__anon212
EVENTS_OVRFLW	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_OVRFLW;                     \/*!< Event on COUNTER overflow.                                            *\/$/;"	m	struct:__anon208
EVENTS_PAYLOAD	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_PAYLOAD;                    \/*!< Payload event.                                                        *\/$/;"	m	struct:__anon199
EVENTS_POFWARN	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_POFWARN;                    \/*!< Power failure warning.                                                *\/$/;"	m	struct:__anon194
EVENTS_PORT	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_PORT;                       \/*!< Event generated from multiple pins.                                   *\/$/;"	m	struct:__anon205
EVENTS_READY	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_READY;                      \/*!< LPCOMP is ready and output is valid.                                  *\/$/;"	m	struct:__anon216
EVENTS_READY	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_READY;                      \/*!< Ready event.                                                          *\/$/;"	m	struct:__anon199
EVENTS_READY	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_READY;                      \/*!< TXD byte sent and RXD byte received.                                  *\/$/;"	m	struct:__anon201
EVENTS_REPORTRDY	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_REPORTRDY;                  \/*!< REPORTPER number of samples accumulated in ACC register, and$/;"	m	struct:__anon215
EVENTS_RESOLVED	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_RESOLVED;                   \/*!< Address resolved.                                                     *\/$/;"	m	struct:__anon212
EVENTS_RSSIEND	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_RSSIEND;                    \/*!< Sampling of the receive signal strength complete. A new RSSI$/;"	m	struct:__anon199
EVENTS_RXDRDY	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_RXDRDY;                     \/*!< Data received in RXD.                                                 *\/$/;"	m	struct:__anon200
EVENTS_RXDREADY	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_RXDREADY;                   \/*!< Two-wire ready to deliver new RXD byte received.                      *\/$/;"	m	struct:__anon202
EVENTS_RXTO	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_RXTO;                       \/*!< Receiver timeout.                                                     *\/$/;"	m	struct:__anon200
EVENTS_SAMPLERDY	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_SAMPLERDY;                  \/*!< A new sample is written to the sample register.                       *\/$/;"	m	struct:__anon215
EVENTS_STARTED	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_STARTED;                    \/*!< Transaction started.                                                  *\/$/;"	m	struct:__anon204
EVENTS_STOPPED	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_STOPPED;                    \/*!< SPI transaction has stopped.                                          *\/$/;"	m	struct:__anon204
EVENTS_STOPPED	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_STOPPED;                    \/*!< Two-wire stopped.                                                     *\/$/;"	m	struct:__anon202
EVENTS_SUSPENDED	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_SUSPENDED;                  \/*!< Two-wire suspended.                                                   *\/$/;"	m	struct:__anon202
EVENTS_TICK	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_TICK;                       \/*!< Event on COUNTER increment.                                           *\/$/;"	m	struct:__anon208
EVENTS_TIMEOUT	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_TIMEOUT;                    \/*!< Watchdog timeout.                                                     *\/$/;"	m	struct:__anon214
EVENTS_TXDRDY	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_TXDRDY;                     \/*!< Data sent from TXD.                                                   *\/$/;"	m	struct:__anon200
EVENTS_TXDSENT	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_TXDSENT;                    \/*!< Two-wire finished sending last TXD byte.                              *\/$/;"	m	struct:__anon202
EVENTS_UP	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_UP;                         \/*!< Input voltage crossed the threshold going up.                         *\/$/;"	m	struct:__anon216
EVENTS_VALRDY	components\device\nrf51.h	/^  __IO uint32_t  EVENTS_VALRDY;                     \/*!< New random number generated and written to VALUE register.            *\/$/;"	m	struct:__anon210
EVTEN	components\device\nrf51.h	/^  __IO uint32_t  EVTEN;                             \/*!< Configures event enable routing to PPI for each RTC event.            *\/$/;"	m	struct:__anon208
EVTENCLR	components\device\nrf51.h	/^  __IO uint32_t  EVTENCLR;                          \/*!< Disable events routing to PPI. The reading of this register$/;"	m	struct:__anon208
EVTENSET	components\device\nrf51.h	/^  __IO uint32_t  EVTENSET;                          \/*!< Enable events routing to PPI. The reading of this register gives$/;"	m	struct:__anon208
EXTREFSEL	components\device\nrf51.h	/^  __IO uint32_t  EXTREFSEL;                         \/*!< External reference select.                                            *\/$/;"	m	struct:__anon216
FREQUENCY	components\device\nrf51.h	/^  __IO uint32_t  FREQUENCY;                         \/*!< Frequency.                                                            *\/$/;"	m	struct:__anon199
FREQUENCY	components\device\nrf51.h	/^  __IO uint32_t  FREQUENCY;                         \/*!< SPI frequency                                                         *\/$/;"	m	struct:__anon201
FREQUENCY	components\device\nrf51.h	/^  __IO uint32_t  FREQUENCY;                         \/*!< SPI frequency.                                                        *\/$/;"	m	struct:__anon204
FREQUENCY	components\device\nrf51.h	/^  __IO uint32_t  FREQUENCY;                         \/*!< Two-wire frequency.                                                   *\/$/;"	m	struct:__anon202
FWID	components\device\nrf51.h	/^  __I  uint32_t  FWID;                              \/*!< Firmware ID.                                                          *\/$/;"	m	struct:__anon224
GPIOTE_IRQn	components\device\nrf51.h	/^  GPIOTE_IRQn                   =   6,              \/*!<   6  GPIOTE                                                           *\/$/;"	e	enum:__anon187
GPREGRET	components\device\nrf51.h	/^  __IO uint32_t  GPREGRET;                          \/*!< General purpose retention register. This register is a retained$/;"	m	struct:__anon194
HFCLKRUN	components\device\nrf51.h	/^  __I  uint32_t  HFCLKRUN;                          \/*!< Task HFCLKSTART trigger status.                                       *\/$/;"	m	struct:__anon195
HFCLKSTAT	components\device\nrf51.h	/^  __I  uint32_t  HFCLKSTAT;                         \/*!< High frequency clock status.                                          *\/$/;"	m	struct:__anon195
HardFault_IRQn	components\device\nrf51.h	/^  HardFault_IRQn                = -13,              \/*!<   3  Hard Fault, all classes of Fault                                 *\/$/;"	e	enum:__anon187
IN	components\device\nrf51.h	/^  __I  uint32_t  IN;                                \/*!< Read GPIO port.                                                       *\/$/;"	m	struct:__anon226
INPTR	components\device\nrf51.h	/^  __IO uint32_t  INPTR;                             \/*!< Pointer to the input packet.                                          *\/$/;"	m	struct:__anon213
INTENCLR	components\device\nrf51.h	/^  __IO uint32_t  INTENCLR;                          \/*!< Interrupt enable clear register                                       *\/$/;"	m	struct:__anon210
INTENCLR	components\device\nrf51.h	/^  __IO uint32_t  INTENCLR;                          \/*!< Interrupt enable clear register.                                      *\/$/;"	m	struct:__anon194
INTENCLR	components\device\nrf51.h	/^  __IO uint32_t  INTENCLR;                          \/*!< Interrupt enable clear register.                                      *\/$/;"	m	struct:__anon195
INTENCLR	components\device\nrf51.h	/^  __IO uint32_t  INTENCLR;                          \/*!< Interrupt enable clear register.                                      *\/$/;"	m	struct:__anon199
INTENCLR	components\device\nrf51.h	/^  __IO uint32_t  INTENCLR;                          \/*!< Interrupt enable clear register.                                      *\/$/;"	m	struct:__anon200
INTENCLR	components\device\nrf51.h	/^  __IO uint32_t  INTENCLR;                          \/*!< Interrupt enable clear register.                                      *\/$/;"	m	struct:__anon201
INTENCLR	components\device\nrf51.h	/^  __IO uint32_t  INTENCLR;                          \/*!< Interrupt enable clear register.                                      *\/$/;"	m	struct:__anon202
INTENCLR	components\device\nrf51.h	/^  __IO uint32_t  INTENCLR;                          \/*!< Interrupt enable clear register.                                      *\/$/;"	m	struct:__anon203
INTENCLR	components\device\nrf51.h	/^  __IO uint32_t  INTENCLR;                          \/*!< Interrupt enable clear register.                                      *\/$/;"	m	struct:__anon204
INTENCLR	components\device\nrf51.h	/^  __IO uint32_t  INTENCLR;                          \/*!< Interrupt enable clear register.                                      *\/$/;"	m	struct:__anon205
INTENCLR	components\device\nrf51.h	/^  __IO uint32_t  INTENCLR;                          \/*!< Interrupt enable clear register.                                      *\/$/;"	m	struct:__anon206
INTENCLR	components\device\nrf51.h	/^  __IO uint32_t  INTENCLR;                          \/*!< Interrupt enable clear register.                                      *\/$/;"	m	struct:__anon207
INTENCLR	components\device\nrf51.h	/^  __IO uint32_t  INTENCLR;                          \/*!< Interrupt enable clear register.                                      *\/$/;"	m	struct:__anon208
INTENCLR	components\device\nrf51.h	/^  __IO uint32_t  INTENCLR;                          \/*!< Interrupt enable clear register.                                      *\/$/;"	m	struct:__anon209
INTENCLR	components\device\nrf51.h	/^  __IO uint32_t  INTENCLR;                          \/*!< Interrupt enable clear register.                                      *\/$/;"	m	struct:__anon211
INTENCLR	components\device\nrf51.h	/^  __IO uint32_t  INTENCLR;                          \/*!< Interrupt enable clear register.                                      *\/$/;"	m	struct:__anon212
INTENCLR	components\device\nrf51.h	/^  __IO uint32_t  INTENCLR;                          \/*!< Interrupt enable clear register.                                      *\/$/;"	m	struct:__anon213
INTENCLR	components\device\nrf51.h	/^  __IO uint32_t  INTENCLR;                          \/*!< Interrupt enable clear register.                                      *\/$/;"	m	struct:__anon214
INTENCLR	components\device\nrf51.h	/^  __IO uint32_t  INTENCLR;                          \/*!< Interrupt enable clear register.                                      *\/$/;"	m	struct:__anon215
INTENCLR	components\device\nrf51.h	/^  __IO uint32_t  INTENCLR;                          \/*!< Interrupt enable clear register.                                      *\/$/;"	m	struct:__anon216
INTENSET	components\device\nrf51.h	/^  __IO uint32_t  INTENSET;                          \/*!< Interrupt enable set register                                         *\/$/;"	m	struct:__anon210
INTENSET	components\device\nrf51.h	/^  __IO uint32_t  INTENSET;                          \/*!< Interrupt enable set register.                                        *\/$/;"	m	struct:__anon194
INTENSET	components\device\nrf51.h	/^  __IO uint32_t  INTENSET;                          \/*!< Interrupt enable set register.                                        *\/$/;"	m	struct:__anon195
INTENSET	components\device\nrf51.h	/^  __IO uint32_t  INTENSET;                          \/*!< Interrupt enable set register.                                        *\/$/;"	m	struct:__anon199
INTENSET	components\device\nrf51.h	/^  __IO uint32_t  INTENSET;                          \/*!< Interrupt enable set register.                                        *\/$/;"	m	struct:__anon200
INTENSET	components\device\nrf51.h	/^  __IO uint32_t  INTENSET;                          \/*!< Interrupt enable set register.                                        *\/$/;"	m	struct:__anon201
INTENSET	components\device\nrf51.h	/^  __IO uint32_t  INTENSET;                          \/*!< Interrupt enable set register.                                        *\/$/;"	m	struct:__anon202
INTENSET	components\device\nrf51.h	/^  __IO uint32_t  INTENSET;                          \/*!< Interrupt enable set register.                                        *\/$/;"	m	struct:__anon203
INTENSET	components\device\nrf51.h	/^  __IO uint32_t  INTENSET;                          \/*!< Interrupt enable set register.                                        *\/$/;"	m	struct:__anon204
INTENSET	components\device\nrf51.h	/^  __IO uint32_t  INTENSET;                          \/*!< Interrupt enable set register.                                        *\/$/;"	m	struct:__anon205
INTENSET	components\device\nrf51.h	/^  __IO uint32_t  INTENSET;                          \/*!< Interrupt enable set register.                                        *\/$/;"	m	struct:__anon206
INTENSET	components\device\nrf51.h	/^  __IO uint32_t  INTENSET;                          \/*!< Interrupt enable set register.                                        *\/$/;"	m	struct:__anon207
INTENSET	components\device\nrf51.h	/^  __IO uint32_t  INTENSET;                          \/*!< Interrupt enable set register.                                        *\/$/;"	m	struct:__anon208
INTENSET	components\device\nrf51.h	/^  __IO uint32_t  INTENSET;                          \/*!< Interrupt enable set register.                                        *\/$/;"	m	struct:__anon209
INTENSET	components\device\nrf51.h	/^  __IO uint32_t  INTENSET;                          \/*!< Interrupt enable set register.                                        *\/$/;"	m	struct:__anon211
INTENSET	components\device\nrf51.h	/^  __IO uint32_t  INTENSET;                          \/*!< Interrupt enable set register.                                        *\/$/;"	m	struct:__anon212
INTENSET	components\device\nrf51.h	/^  __IO uint32_t  INTENSET;                          \/*!< Interrupt enable set register.                                        *\/$/;"	m	struct:__anon213
INTENSET	components\device\nrf51.h	/^  __IO uint32_t  INTENSET;                          \/*!< Interrupt enable set register.                                        *\/$/;"	m	struct:__anon214
INTENSET	components\device\nrf51.h	/^  __IO uint32_t  INTENSET;                          \/*!< Interrupt enable set register.                                        *\/$/;"	m	struct:__anon215
INTENSET	components\device\nrf51.h	/^  __IO uint32_t  INTENSET;                          \/*!< Interrupt enable set register.                                        *\/$/;"	m	struct:__anon216
IR	components\device\nrf51.h	/^  __I  uint32_t  IR[4];                             \/*!< Identity root.                                                        *\/$/;"	m	struct:__anon222
IRKPTR	components\device\nrf51.h	/^  __IO uint32_t  IRKPTR;                            \/*!< Pointer to the IRK data structure.                                    *\/$/;"	m	struct:__anon212
IRQn_Type	components\device\nrf51.h	/^} IRQn_Type;$/;"	t	typeref:enum:__anon187
LEDPOL	components\device\nrf51.h	/^  __IO uint32_t  LEDPOL;                            \/*!< LED output pin polarity.                                              *\/$/;"	m	struct:__anon215
LEDPRE	components\device\nrf51.h	/^  __IO uint32_t  LEDPRE;                            \/*!< Time LED is switched ON before the sample.                            *\/$/;"	m	struct:__anon215
LFCLKRUN	components\device\nrf51.h	/^  __I  uint32_t  LFCLKRUN;                          \/*!< Task LFCLKSTART triggered status.                                     *\/$/;"	m	struct:__anon195
LFCLKSRC	components\device\nrf51.h	/^  __IO uint32_t  LFCLKSRC;                          \/*!< Clock source for the LFCLK clock.                                     *\/$/;"	m	struct:__anon195
LFCLKSRCCOPY	components\device\nrf51.h	/^  __I  uint32_t  LFCLKSRCCOPY;                      \/*!< Clock source for the LFCLK clock, set when task LKCLKSTART is$/;"	m	struct:__anon195
LFCLKSTAT	components\device\nrf51.h	/^  __I  uint32_t  LFCLKSTAT;                         \/*!< Low frequency clock status.                                           *\/$/;"	m	struct:__anon195
LPCOMP_IRQn	components\device\nrf51.h	/^  LPCOMP_IRQn                   =  19,              \/*!<  19  LPCOMP                                                           *\/$/;"	e	enum:__anon187
MAXCNT	components\device\nrf51.h	/^  __IO uint32_t  MAXCNT;                            \/*!< Maximum number of buffer bytes to receive.                            *\/$/;"	m	struct:__anon190
MAXCNT	components\device\nrf51.h	/^  __IO uint32_t  MAXCNT;                            \/*!< Maximum number of buffer bytes to send.                               *\/$/;"	m	struct:__anon191
MAXRX	components\device\nrf51.h	/^  __IO uint32_t  MAXRX;                             \/*!< Maximum number of bytes in the receive buffer.                        *\/$/;"	m	struct:__anon203
MAXTX	components\device\nrf51.h	/^  __IO uint32_t  MAXTX;                             \/*!< Maximum number of bytes in the transmit buffer.                       *\/$/;"	m	struct:__anon203
MICSTATUS	components\device\nrf51.h	/^  __I  uint32_t  MICSTATUS;                         \/*!< CCM RX MIC check result.                                              *\/$/;"	m	struct:__anon213
MISO	components\device\nrf51.h	/^  __IO uint32_t  MISO;                              \/*!< Pin select for MISO.                                                  *\/$/;"	m	struct:__anon189
MODE	components\device\nrf51.h	/^  __IO uint32_t  MODE;                              \/*!< Data rate and modulation.                                             *\/$/;"	m	struct:__anon199
MODE	components\device\nrf51.h	/^  __IO uint32_t  MODE;                              \/*!< Operation mode.                                                       *\/$/;"	m	struct:__anon213
MODE	components\device\nrf51.h	/^  __IO uint32_t  MODE;                              \/*!< Timer Mode selection.                                                 *\/$/;"	m	struct:__anon207
MOSI	components\device\nrf51.h	/^  __IO uint32_t  MOSI;                              \/*!< Pin select for MOSI.                                                  *\/$/;"	m	struct:__anon189
NIRK	components\device\nrf51.h	/^  __IO uint32_t  NIRK;                              \/*!< Number of Identity root Keys in the IRK data structure.               *\/$/;"	m	struct:__anon212
NRF51_H	components\device\nrf51.h	56;"	d
NRFFW	components\device\nrf51.h	/^    __IO uint32_t  NRFFW[15];                       \/*!< Reserved for Nordic firmware design.                                  *\/$/;"	m	union:__anon224::__anon225
NRFHW	components\device\nrf51.h	/^  __IO uint32_t  NRFHW[12];                         \/*!< Reserved for Nordic hardware design.                                  *\/$/;"	m	struct:__anon224
NRF_1MBIT	components\device\nrf51.h	/^  __I  uint32_t  NRF_1MBIT[5];                      \/*!< Override values for the OVERRIDEn registers in RADIO for NRF_1Mbit$/;"	m	struct:__anon222
NRF_AAR	components\device\nrf51.h	1290;"	d
NRF_AAR_BASE	components\device\nrf51.h	1250;"	d
NRF_AAR_Type	components\device\nrf51.h	/^} NRF_AAR_Type;$/;"	t	typeref:struct:__anon212
NRF_ADC	components\device\nrf51.h	1282;"	d
NRF_ADC_BASE	components\device\nrf51.h	1242;"	d
NRF_ADC_Type	components\device\nrf51.h	/^} NRF_ADC_Type;$/;"	t	typeref:struct:__anon206
NRF_AMLI	components\device\nrf51.h	1272;"	d
NRF_AMLI_BASE	components\device\nrf51.h	1232;"	d
NRF_AMLI_Type	components\device\nrf51.h	/^} NRF_AMLI_Type;$/;"	t	typeref:struct:__anon198
NRF_CCM	components\device\nrf51.h	1291;"	d
NRF_CCM_BASE	components\device\nrf51.h	1251;"	d
NRF_CCM_Type	components\device\nrf51.h	/^} NRF_CCM_Type;$/;"	t	typeref:struct:__anon213
NRF_CLOCK	components\device\nrf51.h	1269;"	d
NRF_CLOCK_BASE	components\device\nrf51.h	1229;"	d
NRF_CLOCK_Type	components\device\nrf51.h	/^} NRF_CLOCK_Type;$/;"	t	typeref:struct:__anon195
NRF_ECB	components\device\nrf51.h	1289;"	d
NRF_ECB_BASE	components\device\nrf51.h	1249;"	d
NRF_ECB_Type	components\device\nrf51.h	/^} NRF_ECB_Type;$/;"	t	typeref:struct:__anon211
NRF_FICR	components\device\nrf51.h	1299;"	d
NRF_FICR_BASE	components\device\nrf51.h	1259;"	d
NRF_FICR_Type	components\device\nrf51.h	/^} NRF_FICR_Type;$/;"	t	typeref:struct:__anon222
NRF_GPIO	components\device\nrf51.h	1301;"	d
NRF_GPIOTE	components\device\nrf51.h	1281;"	d
NRF_GPIOTE_BASE	components\device\nrf51.h	1241;"	d
NRF_GPIOTE_Type	components\device\nrf51.h	/^} NRF_GPIOTE_Type;$/;"	t	typeref:struct:__anon205
NRF_GPIO_BASE	components\device\nrf51.h	1261;"	d
NRF_GPIO_Type	components\device\nrf51.h	/^} NRF_GPIO_Type;$/;"	t	typeref:struct:__anon226
NRF_LPCOMP	components\device\nrf51.h	1295;"	d
NRF_LPCOMP_BASE	components\device\nrf51.h	1255;"	d
NRF_LPCOMP_Type	components\device\nrf51.h	/^} NRF_LPCOMP_Type;$/;"	t	typeref:struct:__anon216
NRF_MPU	components\device\nrf51.h	1270;"	d
NRF_MPU_BASE	components\device\nrf51.h	1230;"	d
NRF_MPU_Type	components\device\nrf51.h	/^} NRF_MPU_Type;$/;"	t	typeref:struct:__anon196
NRF_NVMC	components\device\nrf51.h	1297;"	d
NRF_NVMC_BASE	components\device\nrf51.h	1257;"	d
NRF_NVMC_Type	components\device\nrf51.h	/^} NRF_NVMC_Type;$/;"	t	typeref:struct:__anon218
NRF_POWER	components\device\nrf51.h	1268;"	d
NRF_POWER_BASE	components\device\nrf51.h	1228;"	d
NRF_POWER_Type	components\device\nrf51.h	/^} NRF_POWER_Type;$/;"	t	typeref:struct:__anon194
NRF_PPI	components\device\nrf51.h	1298;"	d
NRF_PPI_BASE	components\device\nrf51.h	1258;"	d
NRF_PPI_Type	components\device\nrf51.h	/^} NRF_PPI_Type;$/;"	t	typeref:struct:__anon221
NRF_PU	components\device\nrf51.h	1271;"	d
NRF_PU_BASE	components\device\nrf51.h	1231;"	d
NRF_PU_Type	components\device\nrf51.h	/^} NRF_PU_Type;$/;"	t	typeref:struct:__anon197
NRF_QDEC	components\device\nrf51.h	1294;"	d
NRF_QDEC_BASE	components\device\nrf51.h	1254;"	d
NRF_QDEC_Type	components\device\nrf51.h	/^} NRF_QDEC_Type;$/;"	t	typeref:struct:__anon215
NRF_RADIO	components\device\nrf51.h	1273;"	d
NRF_RADIO_BASE	components\device\nrf51.h	1233;"	d
NRF_RADIO_Type	components\device\nrf51.h	/^} NRF_RADIO_Type;$/;"	t	typeref:struct:__anon199
NRF_RNG	components\device\nrf51.h	1288;"	d
NRF_RNG_BASE	components\device\nrf51.h	1248;"	d
NRF_RNG_Type	components\device\nrf51.h	/^} NRF_RNG_Type;$/;"	t	typeref:struct:__anon210
NRF_RTC0	components\device\nrf51.h	1286;"	d
NRF_RTC0_BASE	components\device\nrf51.h	1246;"	d
NRF_RTC1	components\device\nrf51.h	1293;"	d
NRF_RTC1_BASE	components\device\nrf51.h	1253;"	d
NRF_RTC_Type	components\device\nrf51.h	/^} NRF_RTC_Type;$/;"	t	typeref:struct:__anon208
NRF_SPI0	components\device\nrf51.h	1275;"	d
NRF_SPI0_BASE	components\device\nrf51.h	1235;"	d
NRF_SPI1	components\device\nrf51.h	1277;"	d
NRF_SPI1_BASE	components\device\nrf51.h	1237;"	d
NRF_SPIM1	components\device\nrf51.h	1280;"	d
NRF_SPIM1_BASE	components\device\nrf51.h	1240;"	d
NRF_SPIM_Type	components\device\nrf51.h	/^} NRF_SPIM_Type;$/;"	t	typeref:struct:__anon204
NRF_SPIS1	components\device\nrf51.h	1279;"	d
NRF_SPIS1_BASE	components\device\nrf51.h	1239;"	d
NRF_SPIS_Type	components\device\nrf51.h	/^} NRF_SPIS_Type;$/;"	t	typeref:struct:__anon203
NRF_SPI_Type	components\device\nrf51.h	/^} NRF_SPI_Type;$/;"	t	typeref:struct:__anon201
NRF_SWI	components\device\nrf51.h	1296;"	d
NRF_SWI_BASE	components\device\nrf51.h	1256;"	d
NRF_SWI_Type	components\device\nrf51.h	/^} NRF_SWI_Type;$/;"	t	typeref:struct:__anon217
NRF_TEMP	components\device\nrf51.h	1287;"	d
NRF_TEMP_BASE	components\device\nrf51.h	1247;"	d
NRF_TEMP_Type	components\device\nrf51.h	/^} NRF_TEMP_Type;$/;"	t	typeref:struct:__anon209
NRF_TIMER0	components\device\nrf51.h	1283;"	d
NRF_TIMER0_BASE	components\device\nrf51.h	1243;"	d
NRF_TIMER1	components\device\nrf51.h	1284;"	d
NRF_TIMER1_BASE	components\device\nrf51.h	1244;"	d
NRF_TIMER2	components\device\nrf51.h	1285;"	d
NRF_TIMER2_BASE	components\device\nrf51.h	1245;"	d
NRF_TIMER_Type	components\device\nrf51.h	/^} NRF_TIMER_Type;$/;"	t	typeref:struct:__anon207
NRF_TWI0	components\device\nrf51.h	1276;"	d
NRF_TWI0_BASE	components\device\nrf51.h	1236;"	d
NRF_TWI1	components\device\nrf51.h	1278;"	d
NRF_TWI1_BASE	components\device\nrf51.h	1238;"	d
NRF_TWI_Type	components\device\nrf51.h	/^} NRF_TWI_Type;$/;"	t	typeref:struct:__anon202
NRF_UART0	components\device\nrf51.h	1274;"	d
NRF_UART0_BASE	components\device\nrf51.h	1234;"	d
NRF_UART_Type	components\device\nrf51.h	/^} NRF_UART_Type;$/;"	t	typeref:struct:__anon200
NRF_UICR	components\device\nrf51.h	1300;"	d
NRF_UICR_BASE	components\device\nrf51.h	1260;"	d
NRF_UICR_Type	components\device\nrf51.h	/^} NRF_UICR_Type;$/;"	t	typeref:struct:__anon224
NRF_WDT	components\device\nrf51.h	1292;"	d
NRF_WDT_BASE	components\device\nrf51.h	1252;"	d
NRF_WDT_Type	components\device\nrf51.h	/^} NRF_WDT_Type;$/;"	t	typeref:struct:__anon214
NUMRAMBLOCK	components\device\nrf51.h	/^  __I  uint32_t  NUMRAMBLOCK;                       \/*!< Number of individualy controllable RAM blocks.                        *\/$/;"	m	struct:__anon222
NonMaskableInt_IRQn	components\device\nrf51.h	/^  NonMaskableInt_IRQn           = -14,              \/*!<   2  Non maskable Interrupt, cannot be stopped or preempted           *\/$/;"	e	enum:__anon187
ORC	components\device\nrf51.h	/^  __IO uint32_t  ORC;                               \/*!< Over-read character.                                                  *\/$/;"	m	struct:__anon203
ORC	components\device\nrf51.h	/^  __IO uint32_t  ORC;                               \/*!< Over-read character.                                                  *\/$/;"	m	struct:__anon204
OUT	components\device\nrf51.h	/^  __IO uint32_t  OUT;                               \/*!< Write GPIO port.                                                      *\/$/;"	m	struct:__anon226
OUTCLR	components\device\nrf51.h	/^  __IO uint32_t  OUTCLR;                            \/*!< Clear individual bits in GPIO port.                                   *\/$/;"	m	struct:__anon226
OUTPTR	components\device\nrf51.h	/^  __IO uint32_t  OUTPTR;                            \/*!< Pointer to the output packet.                                         *\/$/;"	m	struct:__anon213
OUTSET	components\device\nrf51.h	/^  __IO uint32_t  OUTSET;                            \/*!< Set individual bits in GPIO port.                                     *\/$/;"	m	struct:__anon226
OVERRIDE0	components\device\nrf51.h	/^  __IO uint32_t  OVERRIDE0;                         \/*!< Trim value override register 0.                                       *\/$/;"	m	struct:__anon199
OVERRIDE1	components\device\nrf51.h	/^  __IO uint32_t  OVERRIDE1;                         \/*!< Trim value override register 1.                                       *\/$/;"	m	struct:__anon199
OVERRIDE2	components\device\nrf51.h	/^  __IO uint32_t  OVERRIDE2;                         \/*!< Trim value override register 2.                                       *\/$/;"	m	struct:__anon199
OVERRIDE3	components\device\nrf51.h	/^  __IO uint32_t  OVERRIDE3;                         \/*!< Trim value override register 3.                                       *\/$/;"	m	struct:__anon199
OVERRIDE4	components\device\nrf51.h	/^  __IO uint32_t  OVERRIDE4;                         \/*!< Trim value override register 4.                                       *\/$/;"	m	struct:__anon199
OVERRIDEEN	components\device\nrf51.h	/^  __I  uint32_t  OVERRIDEEN;                        \/*!< Radio calibration override enable.                                    *\/$/;"	m	struct:__anon222
PACKETPTR	components\device\nrf51.h	/^  __IO uint32_t  PACKETPTR;                         \/*!< Packet pointer. Decision point: START task.                           *\/$/;"	m	struct:__anon199
PATCHADDR	components\device\nrf51.h	/^  __IO uint32_t  PATCHADDR[8];                      \/*!< Relative address of patch instructions.                               *\/$/;"	m	struct:__anon197
PATCHEN	components\device\nrf51.h	/^  __IO uint32_t  PATCHEN;                           \/*!< Patch enable register.                                                *\/$/;"	m	struct:__anon197
PATCHENCLR	components\device\nrf51.h	/^  __IO uint32_t  PATCHENCLR;                        \/*!< Patch disable register.                                               *\/$/;"	m	struct:__anon197
PATCHENSET	components\device\nrf51.h	/^  __IO uint32_t  PATCHENSET;                        \/*!< Patch enable register.                                                *\/$/;"	m	struct:__anon197
PCNF0	components\device\nrf51.h	/^  __IO uint32_t  PCNF0;                             \/*!< Packet configuration 0.                                               *\/$/;"	m	struct:__anon199
PCNF1	components\device\nrf51.h	/^  __IO uint32_t  PCNF1;                             \/*!< Packet configuration 1.                                               *\/$/;"	m	struct:__anon199
PERR0	components\device\nrf51.h	/^  __IO uint32_t  PERR0;                             \/*!< Configuration of peripherals in mpu regions.                          *\/$/;"	m	struct:__anon196
PIN_CNF	components\device\nrf51.h	/^  __IO uint32_t  PIN_CNF[32];                       \/*!< Configuration of GPIO pins.                                           *\/$/;"	m	struct:__anon226
POFCON	components\device\nrf51.h	/^  __IO uint32_t  POFCON;                            \/*!< Power failure configuration.                                          *\/$/;"	m	struct:__anon194
POWER	components\device\nrf51.h	/^  __IO uint32_t  POWER;                             \/*!< Peripheral power control.                                             *\/$/;"	m	struct:__anon199
POWER	components\device\nrf51.h	/^  __IO uint32_t  POWER;                             \/*!< Peripheral power control.                                             *\/$/;"	m	struct:__anon200
POWER	components\device\nrf51.h	/^  __IO uint32_t  POWER;                             \/*!< Peripheral power control.                                             *\/$/;"	m	struct:__anon201
POWER	components\device\nrf51.h	/^  __IO uint32_t  POWER;                             \/*!< Peripheral power control.                                             *\/$/;"	m	struct:__anon202
POWER	components\device\nrf51.h	/^  __IO uint32_t  POWER;                             \/*!< Peripheral power control.                                             *\/$/;"	m	struct:__anon203
POWER	components\device\nrf51.h	/^  __IO uint32_t  POWER;                             \/*!< Peripheral power control.                                             *\/$/;"	m	struct:__anon204
POWER	components\device\nrf51.h	/^  __IO uint32_t  POWER;                             \/*!< Peripheral power control.                                             *\/$/;"	m	struct:__anon205
POWER	components\device\nrf51.h	/^  __IO uint32_t  POWER;                             \/*!< Peripheral power control.                                             *\/$/;"	m	struct:__anon206
POWER	components\device\nrf51.h	/^  __IO uint32_t  POWER;                             \/*!< Peripheral power control.                                             *\/$/;"	m	struct:__anon207
POWER	components\device\nrf51.h	/^  __IO uint32_t  POWER;                             \/*!< Peripheral power control.                                             *\/$/;"	m	struct:__anon208
POWER	components\device\nrf51.h	/^  __IO uint32_t  POWER;                             \/*!< Peripheral power control.                                             *\/$/;"	m	struct:__anon209
POWER	components\device\nrf51.h	/^  __IO uint32_t  POWER;                             \/*!< Peripheral power control.                                             *\/$/;"	m	struct:__anon210
POWER	components\device\nrf51.h	/^  __IO uint32_t  POWER;                             \/*!< Peripheral power control.                                             *\/$/;"	m	struct:__anon211
POWER	components\device\nrf51.h	/^  __IO uint32_t  POWER;                             \/*!< Peripheral power control.                                             *\/$/;"	m	struct:__anon212
POWER	components\device\nrf51.h	/^  __IO uint32_t  POWER;                             \/*!< Peripheral power control.                                             *\/$/;"	m	struct:__anon213
POWER	components\device\nrf51.h	/^  __IO uint32_t  POWER;                             \/*!< Peripheral power control.                                             *\/$/;"	m	struct:__anon214
POWER	components\device\nrf51.h	/^  __IO uint32_t  POWER;                             \/*!< Peripheral power control.                                             *\/$/;"	m	struct:__anon215
POWER	components\device\nrf51.h	/^  __IO uint32_t  POWER;                             \/*!< Peripheral power control.                                             *\/$/;"	m	struct:__anon216
POWER_CLOCK_IRQn	components\device\nrf51.h	/^  POWER_CLOCK_IRQn              =   0,              \/*!<   0  POWER_CLOCK                                                      *\/$/;"	e	enum:__anon187
PPFC	components\device\nrf51.h	/^  __I  uint32_t  PPFC;                              \/*!< Pre-programmed factory code present.                                  *\/$/;"	m	struct:__anon222
PPI_CH_Type	components\device\nrf51.h	/^} PPI_CH_Type;$/;"	t	typeref:struct:__anon193
PPI_TASKS_CHG_Type	components\device\nrf51.h	/^} PPI_TASKS_CHG_Type;$/;"	t	typeref:struct:__anon192
PREFIX0	components\device\nrf51.h	/^  __IO uint32_t  PREFIX0;                           \/*!< Prefixes bytes for logical addresses 0 to 3.                          *\/$/;"	m	struct:__anon199
PREFIX1	components\device\nrf51.h	/^  __IO uint32_t  PREFIX1;                           \/*!< Prefixes bytes for logical addresses 4 to 7.                          *\/$/;"	m	struct:__anon199
PRESCALER	components\device\nrf51.h	/^  __IO uint32_t  PRESCALER;                         \/*!< 12-bit prescaler for COUNTER frequency (32768\/(PRESCALER+1)).$/;"	m	struct:__anon208
PRESCALER	components\device\nrf51.h	/^  __IO uint32_t  PRESCALER;                         \/*!< 4-bit prescaler to source clock frequency (max value 9). Source$/;"	m	struct:__anon207
PROTBLOCKSIZE	components\device\nrf51.h	/^  __IO uint32_t  PROTBLOCKSIZE;                     \/*!< Erase and write protection block size.                                *\/$/;"	m	struct:__anon196
PROTENSET0	components\device\nrf51.h	/^  __IO uint32_t  PROTENSET0;                        \/*!< Erase and write protection bit enable set register.                   *\/$/;"	m	struct:__anon196
PROTENSET1	components\device\nrf51.h	/^  __IO uint32_t  PROTENSET1;                        \/*!< Erase and write protection bit enable set register.                   *\/$/;"	m	struct:__anon196
PSEL	components\device\nrf51.h	/^  SPIM_PSEL_Type PSEL;                              \/*!< Pin select configuration.                                             *\/$/;"	m	struct:__anon204
PSEL	components\device\nrf51.h	/^  __IO uint32_t  PSEL;                              \/*!< Input pin select.                                                     *\/$/;"	m	struct:__anon216
PSELA	components\device\nrf51.h	/^  __IO uint32_t  PSELA;                             \/*!< Pin select for phase A input.                                         *\/$/;"	m	struct:__anon215
PSELB	components\device\nrf51.h	/^  __IO uint32_t  PSELB;                             \/*!< Pin select for phase B input.                                         *\/$/;"	m	struct:__anon215
PSELCSN	components\device\nrf51.h	/^  __IO uint32_t  PSELCSN;                           \/*!< Pin select for CSN.                                                   *\/$/;"	m	struct:__anon203
PSELCTS	components\device\nrf51.h	/^  __IO uint32_t  PSELCTS;                           \/*!< Pin select for CTS.                                                   *\/$/;"	m	struct:__anon200
PSELLED	components\device\nrf51.h	/^  __IO uint32_t  PSELLED;                           \/*!< Pin select for LED output.                                            *\/$/;"	m	struct:__anon215
PSELMISO	components\device\nrf51.h	/^  __IO uint32_t  PSELMISO;                          \/*!< Pin select for MISO.                                                  *\/$/;"	m	struct:__anon201
PSELMISO	components\device\nrf51.h	/^  __IO uint32_t  PSELMISO;                          \/*!< Pin select for MISO.                                                  *\/$/;"	m	struct:__anon203
PSELMOSI	components\device\nrf51.h	/^  __IO uint32_t  PSELMOSI;                          \/*!< Pin select for MOSI.                                                  *\/$/;"	m	struct:__anon201
PSELMOSI	components\device\nrf51.h	/^  __IO uint32_t  PSELMOSI;                          \/*!< Pin select for MOSI.                                                  *\/$/;"	m	struct:__anon203
PSELRTS	components\device\nrf51.h	/^  __IO uint32_t  PSELRTS;                           \/*!< Pin select for RTS.                                                   *\/$/;"	m	struct:__anon200
PSELRXD	components\device\nrf51.h	/^  __IO uint32_t  PSELRXD;                           \/*!< Pin select for RXD.                                                   *\/$/;"	m	struct:__anon200
PSELSCK	components\device\nrf51.h	/^  __IO uint32_t  PSELSCK;                           \/*!< Pin select for SCK.                                                   *\/$/;"	m	struct:__anon201
PSELSCK	components\device\nrf51.h	/^  __IO uint32_t  PSELSCK;                           \/*!< Pin select for SCK.                                                   *\/$/;"	m	struct:__anon203
PSELSCL	components\device\nrf51.h	/^  __IO uint32_t  PSELSCL;                           \/*!< Pin select for SCL.                                                   *\/$/;"	m	struct:__anon202
PSELSDA	components\device\nrf51.h	/^  __IO uint32_t  PSELSDA;                           \/*!< Pin select for SDA.                                                   *\/$/;"	m	struct:__anon202
PSELTXD	components\device\nrf51.h	/^  __IO uint32_t  PSELTXD;                           \/*!< Pin select for TXD.                                                   *\/$/;"	m	struct:__anon200
PTR	components\device\nrf51.h	/^  __IO uint32_t  PTR;                               \/*!< Data pointer.                                                         *\/$/;"	m	struct:__anon190
PTR	components\device\nrf51.h	/^  __IO uint32_t  PTR;                               \/*!< Data pointer.                                                         *\/$/;"	m	struct:__anon191
PendSV_IRQn	components\device\nrf51.h	/^  PendSV_IRQn                   =  -2,              \/*!<  14  Pendable request for system service                              *\/$/;"	e	enum:__anon187
QDEC_IRQn	components\device\nrf51.h	/^  QDEC_IRQn                     =  18,              \/*!<  18  QDEC                                                             *\/$/;"	e	enum:__anon187
RADIO	components\device\nrf51.h	/^  __IO uint32_t  RADIO;                             \/*!< Configurable priority configuration register for RADIO.               *\/$/;"	m	struct:__anon188
RADIO_IRQn	components\device\nrf51.h	/^  RADIO_IRQn                    =   1,              \/*!<   1  RADIO                                                            *\/$/;"	e	enum:__anon187
RAMON	components\device\nrf51.h	/^  __IO uint32_t  RAMON;                             \/*!< Ram on\/off.                                                           *\/$/;"	m	struct:__anon194
RAMONB	components\device\nrf51.h	/^  __IO uint32_t  RAMONB;                            \/*!< Ram on\/off.                                                           *\/$/;"	m	struct:__anon194
RAMPRI	components\device\nrf51.h	/^  AMLI_RAMPRI_Type RAMPRI;                          \/*!< RAM configurable priority configuration structure.                    *\/$/;"	m	struct:__anon198
RAMSTATUS	components\device\nrf51.h	/^  __I  uint32_t  RAMSTATUS;                         \/*!< Ram status register.                                                  *\/$/;"	m	struct:__anon194
RBPCONF	components\device\nrf51.h	/^  __IO uint32_t  RBPCONF;                           \/*!< Readback protection configuration.                                    *\/$/;"	m	struct:__anon224
READY	components\device\nrf51.h	/^  __I  uint32_t  READY;                             \/*!< Ready flag.                                                           *\/$/;"	m	struct:__anon218
REFSEL	components\device\nrf51.h	/^  __IO uint32_t  REFSEL;                            \/*!< Reference select.                                                     *\/$/;"	m	struct:__anon216
REPLACEADDR	components\device\nrf51.h	/^  __IO uint32_t  REPLACEADDR[8];                    \/*!< Address of first instruction to replace.                              *\/$/;"	m	struct:__anon197
REPORTPER	components\device\nrf51.h	/^  __IO uint32_t  REPORTPER;                         \/*!< Number of samples to generate an EVENT_REPORTRDY.                     *\/$/;"	m	struct:__anon215
REQSTATUS	components\device\nrf51.h	/^  __I  uint32_t  REQSTATUS;                         \/*!< Request status.                                                       *\/$/;"	m	struct:__anon214
RESERVED0	components\device\nrf51.h	/^  __I  uint32_t  RESERVED0;$/;"	m	struct:__anon202
RESERVED0	components\device\nrf51.h	/^  __I  uint32_t  RESERVED0;$/;"	m	struct:__anon212
RESERVED0	components\device\nrf51.h	/^  __I  uint32_t  RESERVED0;$/;"	m	struct:__anon224
RESERVED0	components\device\nrf51.h	/^  __I  uint32_t  RESERVED0[11];$/;"	m	struct:__anon207
RESERVED0	components\device\nrf51.h	/^  __I  uint32_t  RESERVED0[256];$/;"	m	struct:__anon218
RESERVED0	components\device\nrf51.h	/^  __I  uint32_t  RESERVED0[30];$/;"	m	struct:__anon194
RESERVED0	components\device\nrf51.h	/^  __I  uint32_t  RESERVED0[312];$/;"	m	struct:__anon221
RESERVED0	components\device\nrf51.h	/^  __I  uint32_t  RESERVED0[321];$/;"	m	struct:__anon226
RESERVED0	components\device\nrf51.h	/^  __I  uint32_t  RESERVED0[330];$/;"	m	struct:__anon196
RESERVED0	components\device\nrf51.h	/^  __I  uint32_t  RESERVED0[3];$/;"	m	struct:__anon200
RESERVED0	components\device\nrf51.h	/^  __I  uint32_t  RESERVED0[448];$/;"	m	struct:__anon197
RESERVED0	components\device\nrf51.h	/^  __I  uint32_t  RESERVED0[4];$/;"	m	struct:__anon204
RESERVED0	components\device\nrf51.h	/^  __I  uint32_t  RESERVED0[4];$/;"	m	struct:__anon222
RESERVED0	components\device\nrf51.h	/^  __I  uint32_t  RESERVED0[55];$/;"	m	struct:__anon199
RESERVED0	components\device\nrf51.h	/^  __I  uint32_t  RESERVED0[57];$/;"	m	struct:__anon195
RESERVED0	components\device\nrf51.h	/^  __I  uint32_t  RESERVED0[60];$/;"	m	struct:__anon205
RESERVED0	components\device\nrf51.h	/^  __I  uint32_t  RESERVED0[60];$/;"	m	struct:__anon208
RESERVED0	components\device\nrf51.h	/^  __I  uint32_t  RESERVED0[61];$/;"	m	struct:__anon213
RESERVED0	components\device\nrf51.h	/^  __I  uint32_t  RESERVED0[61];$/;"	m	struct:__anon215
RESERVED0	components\device\nrf51.h	/^  __I  uint32_t  RESERVED0[61];$/;"	m	struct:__anon216
RESERVED0	components\device\nrf51.h	/^  __I  uint32_t  RESERVED0[62];$/;"	m	struct:__anon206
RESERVED0	components\device\nrf51.h	/^  __I  uint32_t  RESERVED0[62];$/;"	m	struct:__anon209
RESERVED0	components\device\nrf51.h	/^  __I  uint32_t  RESERVED0[62];$/;"	m	struct:__anon210
RESERVED0	components\device\nrf51.h	/^  __I  uint32_t  RESERVED0[62];$/;"	m	struct:__anon211
RESERVED0	components\device\nrf51.h	/^  __I  uint32_t  RESERVED0[63];$/;"	m	struct:__anon214
RESERVED0	components\device\nrf51.h	/^  __I  uint32_t  RESERVED0[66];$/;"	m	struct:__anon201
RESERVED0	components\device\nrf51.h	/^  __I  uint32_t  RESERVED0[896];$/;"	m	struct:__anon198
RESERVED0	components\device\nrf51.h	/^  __I  uint32_t  RESERVED0[9];$/;"	m	struct:__anon203
RESERVED1	components\device\nrf51.h	/^  __I  uint32_t  RESERVED1;$/;"	m	struct:__anon195
RESERVED1	components\device\nrf51.h	/^  __I  uint32_t  RESERVED1;$/;"	m	struct:__anon204
RESERVED1	components\device\nrf51.h	/^  __I  uint32_t  RESERVED1;$/;"	m	struct:__anon221
RESERVED1	components\device\nrf51.h	/^  __I  uint32_t  RESERVED1[120];$/;"	m	struct:__anon226
RESERVED1	components\device\nrf51.h	/^  __I  uint32_t  RESERVED1[126];$/;"	m	struct:__anon201
RESERVED1	components\device\nrf51.h	/^  __I  uint32_t  RESERVED1[127];$/;"	m	struct:__anon211
RESERVED1	components\device\nrf51.h	/^  __I  uint32_t  RESERVED1[128];$/;"	m	struct:__anon206
RESERVED1	components\device\nrf51.h	/^  __I  uint32_t  RESERVED1[128];$/;"	m	struct:__anon209
RESERVED1	components\device\nrf51.h	/^  __I  uint32_t  RESERVED1[128];$/;"	m	struct:__anon214
RESERVED1	components\device\nrf51.h	/^  __I  uint32_t  RESERVED1[14];$/;"	m	struct:__anon208
RESERVED1	components\device\nrf51.h	/^  __I  uint32_t  RESERVED1[24];$/;"	m	struct:__anon197
RESERVED1	components\device\nrf51.h	/^  __I  uint32_t  RESERVED1[27];$/;"	m	struct:__anon205
RESERVED1	components\device\nrf51.h	/^  __I  uint32_t  RESERVED1[2];$/;"	m	struct:__anon199
RESERVED1	components\device\nrf51.h	/^  __I  uint32_t  RESERVED1[2];$/;"	m	struct:__anon202
RESERVED1	components\device\nrf51.h	/^  __I  uint32_t  RESERVED1[34];$/;"	m	struct:__anon194
RESERVED1	components\device\nrf51.h	/^  __I  uint32_t  RESERVED1[4];$/;"	m	struct:__anon222
RESERVED1	components\device\nrf51.h	/^  __I  uint32_t  RESERVED1[52];$/;"	m	struct:__anon196
RESERVED1	components\device\nrf51.h	/^  __I  uint32_t  RESERVED1[54];$/;"	m	struct:__anon203
RESERVED1	components\device\nrf51.h	/^  __I  uint32_t  RESERVED1[56];$/;"	m	struct:__anon200
RESERVED1	components\device\nrf51.h	/^  __I  uint32_t  RESERVED1[60];$/;"	m	struct:__anon207
RESERVED1	components\device\nrf51.h	/^  __I  uint32_t  RESERVED1[60];$/;"	m	struct:__anon216
RESERVED1	components\device\nrf51.h	/^  __I  uint32_t  RESERVED1[61];$/;"	m	struct:__anon212
RESERVED1	components\device\nrf51.h	/^  __I  uint32_t  RESERVED1[61];$/;"	m	struct:__anon213
RESERVED1	components\device\nrf51.h	/^  __I  uint32_t  RESERVED1[61];$/;"	m	struct:__anon215
RESERVED1	components\device\nrf51.h	/^  __I  uint32_t  RESERVED1[63];$/;"	m	struct:__anon210
RESERVED1	components\device\nrf51.h	/^  __I  uint32_t  RESERVED1[64];$/;"	m	struct:__anon218
RESERVED10	components\device\nrf51.h	/^  __I  uint32_t  RESERVED10;$/;"	m	struct:__anon200
RESERVED10	components\device\nrf51.h	/^  __I  uint32_t  RESERVED10;$/;"	m	struct:__anon203
RESERVED10	components\device\nrf51.h	/^  __I  uint32_t  RESERVED10;$/;"	m	struct:__anon204
RESERVED10	components\device\nrf51.h	/^  __I  uint32_t  RESERVED10[110];$/;"	m	struct:__anon202
RESERVED10	components\device\nrf51.h	/^  __I  uint32_t  RESERVED10[3];$/;"	m	struct:__anon194
RESERVED10	components\device\nrf51.h	/^  __I  uint32_t  RESERVED10[561];$/;"	m	struct:__anon199
RESERVED11	components\device\nrf51.h	/^  __I  uint32_t  RESERVED11;$/;"	m	struct:__anon203
RESERVED11	components\device\nrf51.h	/^  __I  uint32_t  RESERVED11[14];$/;"	m	struct:__anon202
RESERVED11	components\device\nrf51.h	/^  __I  uint32_t  RESERVED11[17];$/;"	m	struct:__anon200
RESERVED11	components\device\nrf51.h	/^  __I  uint32_t  RESERVED11[4];$/;"	m	struct:__anon204
RESERVED11	components\device\nrf51.h	/^  __I  uint32_t  RESERVED11[8];$/;"	m	struct:__anon194
RESERVED12	components\device\nrf51.h	/^  __I  uint32_t  RESERVED12;$/;"	m	struct:__anon202
RESERVED12	components\device\nrf51.h	/^  __I  uint32_t  RESERVED12;$/;"	m	struct:__anon203
RESERVED12	components\device\nrf51.h	/^  __I  uint32_t  RESERVED12[291];$/;"	m	struct:__anon194
RESERVED12	components\device\nrf51.h	/^  __I  uint32_t  RESERVED12[3];$/;"	m	struct:__anon204
RESERVED12	components\device\nrf51.h	/^  __I  uint32_t  RESERVED12[675];$/;"	m	struct:__anon200
RESERVED13	components\device\nrf51.h	/^  __I  uint32_t  RESERVED13;$/;"	m	struct:__anon204
RESERVED13	components\device\nrf51.h	/^  __I  uint32_t  RESERVED13[24];$/;"	m	struct:__anon203
RESERVED13	components\device\nrf51.h	/^  __I  uint32_t  RESERVED13[2];$/;"	m	struct:__anon202
RESERVED14	components\device\nrf51.h	/^  __I  uint32_t  RESERVED14;$/;"	m	struct:__anon202
RESERVED14	components\device\nrf51.h	/^  __I  uint32_t  RESERVED14;$/;"	m	struct:__anon204
RESERVED14	components\device\nrf51.h	/^  __I  uint32_t  RESERVED14[654];$/;"	m	struct:__anon203
RESERVED15	components\device\nrf51.h	/^  __I  uint32_t  RESERVED15[24];$/;"	m	struct:__anon202
RESERVED15	components\device\nrf51.h	/^  __I  uint32_t  RESERVED15[26];$/;"	m	struct:__anon204
RESERVED16	components\device\nrf51.h	/^  __I  uint32_t  RESERVED16[654];$/;"	m	struct:__anon204
RESERVED16	components\device\nrf51.h	/^  __I  uint32_t  RESERVED16[668];$/;"	m	struct:__anon202
RESERVED2	components\device\nrf51.h	/^  __I  uint32_t  RESERVED2;$/;"	m	struct:__anon202
RESERVED2	components\device\nrf51.h	/^  __I  uint32_t  RESERVED2;$/;"	m	struct:__anon222
RESERVED2	components\device\nrf51.h	/^  __I  uint32_t  RESERVED2[109];$/;"	m	struct:__anon208
RESERVED2	components\device\nrf51.h	/^  __I  uint32_t  RESERVED2[124];$/;"	m	struct:__anon195
RESERVED2	components\device\nrf51.h	/^  __I  uint32_t  RESERVED2[125];$/;"	m	struct:__anon201
RESERVED2	components\device\nrf51.h	/^  __I  uint32_t  RESERVED2[126];$/;"	m	struct:__anon194
RESERVED2	components\device\nrf51.h	/^  __I  uint32_t  RESERVED2[126];$/;"	m	struct:__anon211
RESERVED2	components\device\nrf51.h	/^  __I  uint32_t  RESERVED2[126];$/;"	m	struct:__anon212
RESERVED2	components\device\nrf51.h	/^  __I  uint32_t  RESERVED2[127];$/;"	m	struct:__anon209
RESERVED2	components\device\nrf51.h	/^  __I  uint32_t  RESERVED2[156];$/;"	m	struct:__anon221
RESERVED2	components\device\nrf51.h	/^  __I  uint32_t  RESERVED2[24];$/;"	m	struct:__anon197
RESERVED2	components\device\nrf51.h	/^  __I  uint32_t  RESERVED2[44];$/;"	m	struct:__anon207
RESERVED2	components\device\nrf51.h	/^  __I  uint32_t  RESERVED2[4];$/;"	m	struct:__anon200
RESERVED2	components\device\nrf51.h	/^  __I  uint32_t  RESERVED2[53];$/;"	m	struct:__anon199
RESERVED2	components\device\nrf51.h	/^  __I  uint32_t  RESERVED2[56];$/;"	m	struct:__anon204
RESERVED2	components\device\nrf51.h	/^  __I  uint32_t  RESERVED2[61];$/;"	m	struct:__anon206
RESERVED2	components\device\nrf51.h	/^  __I  uint32_t  RESERVED2[61];$/;"	m	struct:__anon214
RESERVED2	components\device\nrf51.h	/^  __I  uint32_t  RESERVED2[64];$/;"	m	struct:__anon210
RESERVED2	components\device\nrf51.h	/^  __I  uint32_t  RESERVED2[64];$/;"	m	struct:__anon213
RESERVED2	components\device\nrf51.h	/^  __I  uint32_t  RESERVED2[64];$/;"	m	struct:__anon215
RESERVED2	components\device\nrf51.h	/^  __I  uint32_t  RESERVED2[64];$/;"	m	struct:__anon216
RESERVED2	components\device\nrf51.h	/^  __I  uint32_t  RESERVED2[8];$/;"	m	struct:__anon203
RESERVED2	components\device\nrf51.h	/^  __I  uint32_t  RESERVED2[97];$/;"	m	struct:__anon205
RESERVED3	components\device\nrf51.h	/^  __I  uint32_t  RESERVED3;$/;"	m	struct:__anon200
RESERVED3	components\device\nrf51.h	/^  __I  uint32_t  RESERVED3;$/;"	m	struct:__anon201
RESERVED3	components\device\nrf51.h	/^  __I  uint32_t  RESERVED3[125];$/;"	m	struct:__anon215
RESERVED3	components\device\nrf51.h	/^  __I  uint32_t  RESERVED3[126];$/;"	m	struct:__anon210
RESERVED3	components\device\nrf51.h	/^  __I  uint32_t  RESERVED3[129];$/;"	m	struct:__anon205
RESERVED3	components\device\nrf51.h	/^  __I  uint32_t  RESERVED3[13];$/;"	m	struct:__anon208
RESERVED3	components\device\nrf51.h	/^  __I  uint32_t  RESERVED3[2];$/;"	m	struct:__anon204
RESERVED3	components\device\nrf51.h	/^  __I  uint32_t  RESERVED3[53];$/;"	m	struct:__anon203
RESERVED3	components\device\nrf51.h	/^  __I  uint32_t  RESERVED3[56];$/;"	m	struct:__anon202
RESERVED3	components\device\nrf51.h	/^  __I  uint32_t  RESERVED3[5];$/;"	m	struct:__anon222
RESERVED3	components\device\nrf51.h	/^  __I  uint32_t  RESERVED3[61];$/;"	m	struct:__anon194
RESERVED3	components\device\nrf51.h	/^  __I  uint32_t  RESERVED3[61];$/;"	m	struct:__anon212
RESERVED3	components\device\nrf51.h	/^  __I  uint32_t  RESERVED3[61];$/;"	m	struct:__anon213
RESERVED3	components\device\nrf51.h	/^  __I  uint32_t  RESERVED3[61];$/;"	m	struct:__anon216
RESERVED3	components\device\nrf51.h	/^  __I  uint32_t  RESERVED3[63];$/;"	m	struct:__anon195
RESERVED3	components\device\nrf51.h	/^  __I  uint32_t  RESERVED3[63];$/;"	m	struct:__anon206
RESERVED3	components\device\nrf51.h	/^  __I  uint32_t  RESERVED3[63];$/;"	m	struct:__anon214
RESERVED3	components\device\nrf51.h	/^  __I  uint32_t  RESERVED3[64];$/;"	m	struct:__anon199
RESERVED3	components\device\nrf51.h	/^  __I  uint32_t  RESERVED3[64];$/;"	m	struct:__anon207
RESERVED3	components\device\nrf51.h	/^  __I  uint32_t  RESERVED3[700];$/;"	m	struct:__anon209
RESERVED3	components\device\nrf51.h	/^  __I  uint32_t  RESERVED3[701];$/;"	m	struct:__anon211
RESERVED4	components\device\nrf51.h	/^  __I  uint32_t  RESERVED4;$/;"	m	struct:__anon195
RESERVED4	components\device\nrf51.h	/^  __I  uint32_t  RESERVED4;$/;"	m	struct:__anon201
RESERVED4	components\device\nrf51.h	/^  __I  uint32_t  RESERVED4;$/;"	m	struct:__anon204
RESERVED4	components\device\nrf51.h	/^  __I  uint32_t  RESERVED4[110];$/;"	m	struct:__anon208
RESERVED4	components\device\nrf51.h	/^  __I  uint32_t  RESERVED4[126];$/;"	m	struct:__anon207
RESERVED4	components\device\nrf51.h	/^  __I  uint32_t  RESERVED4[4];$/;"	m	struct:__anon202
RESERVED4	components\device\nrf51.h	/^  __I  uint32_t  RESERVED4[5];$/;"	m	struct:__anon215
RESERVED4	components\device\nrf51.h	/^  __I  uint32_t  RESERVED4[60];$/;"	m	struct:__anon214
RESERVED4	components\device\nrf51.h	/^  __I  uint32_t  RESERVED4[61];$/;"	m	struct:__anon199
RESERVED4	components\device\nrf51.h	/^  __I  uint32_t  RESERVED4[63];$/;"	m	struct:__anon212
RESERVED4	components\device\nrf51.h	/^  __I  uint32_t  RESERVED4[63];$/;"	m	struct:__anon213
RESERVED4	components\device\nrf51.h	/^  __I  uint32_t  RESERVED4[63];$/;"	m	struct:__anon216
RESERVED4	components\device\nrf51.h	/^  __I  uint32_t  RESERVED4[64];$/;"	m	struct:__anon203
RESERVED4	components\device\nrf51.h	/^  __I  uint32_t  RESERVED4[695];$/;"	m	struct:__anon205
RESERVED4	components\device\nrf51.h	/^  __I  uint32_t  RESERVED4[6];$/;"	m	struct:__anon222
RESERVED4	components\device\nrf51.h	/^  __I  uint32_t  RESERVED4[700];$/;"	m	struct:__anon206
RESERVED4	components\device\nrf51.h	/^  __I  uint32_t  RESERVED4[700];$/;"	m	struct:__anon210
RESERVED4	components\device\nrf51.h	/^  __I  uint32_t  RESERVED4[7];$/;"	m	struct:__anon200
RESERVED4	components\device\nrf51.h	/^  __I  uint32_t  RESERVED4[9];$/;"	m	struct:__anon194
RESERVED5	components\device\nrf51.h	/^  __I  uint32_t  RESERVED5;$/;"	m	struct:__anon201
RESERVED5	components\device\nrf51.h	/^  __I  uint32_t  RESERVED5;$/;"	m	struct:__anon202
RESERVED5	components\device\nrf51.h	/^  __I  uint32_t  RESERVED5;$/;"	m	struct:__anon204
RESERVED5	components\device\nrf51.h	/^  __I  uint32_t  RESERVED5;$/;"	m	struct:__anon207
RESERVED5	components\device\nrf51.h	/^  __I  uint32_t  RESERVED5;$/;"	m	struct:__anon212
RESERVED5	components\device\nrf51.h	/^  __I  uint32_t  RESERVED5[10];$/;"	m	struct:__anon222
RESERVED5	components\device\nrf51.h	/^  __I  uint32_t  RESERVED5[13];$/;"	m	struct:__anon208
RESERVED5	components\device\nrf51.h	/^  __I  uint32_t  RESERVED5[46];$/;"	m	struct:__anon200
RESERVED5	components\device\nrf51.h	/^  __I  uint32_t  RESERVED5[4];$/;"	m	struct:__anon216
RESERVED5	components\device\nrf51.h	/^  __I  uint32_t  RESERVED5[53];$/;"	m	struct:__anon194
RESERVED5	components\device\nrf51.h	/^  __I  uint32_t  RESERVED5[60];$/;"	m	struct:__anon199
RESERVED5	components\device\nrf51.h	/^  __I  uint32_t  RESERVED5[61];$/;"	m	struct:__anon203
RESERVED5	components\device\nrf51.h	/^  __I  uint32_t  RESERVED5[62];$/;"	m	struct:__anon195
RESERVED5	components\device\nrf51.h	/^  __I  uint32_t  RESERVED5[631];$/;"	m	struct:__anon214
RESERVED5	components\device\nrf51.h	/^  __I  uint32_t  RESERVED5[684];$/;"	m	struct:__anon215
RESERVED5	components\device\nrf51.h	/^  __I  uint32_t  RESERVED5[697];$/;"	m	struct:__anon213
RESERVED6	components\device\nrf51.h	/^  __I  uint32_t  RESERVED6;$/;"	m	struct:__anon199
RESERVED6	components\device\nrf51.h	/^  __I  uint32_t  RESERVED6[10];$/;"	m	struct:__anon204
RESERVED6	components\device\nrf51.h	/^  __I  uint32_t  RESERVED6[11];$/;"	m	struct:__anon201
RESERVED6	components\device\nrf51.h	/^  __I  uint32_t  RESERVED6[11];$/;"	m	struct:__anon207
RESERVED6	components\device\nrf51.h	/^  __I  uint32_t  RESERVED6[15];$/;"	m	struct:__anon203
RESERVED6	components\device\nrf51.h	/^  __I  uint32_t  RESERVED6[3];$/;"	m	struct:__anon194
RESERVED6	components\device\nrf51.h	/^  __I  uint32_t  RESERVED6[4];$/;"	m	struct:__anon202
RESERVED6	components\device\nrf51.h	/^  __I  uint32_t  RESERVED6[64];$/;"	m	struct:__anon200
RESERVED6	components\device\nrf51.h	/^  __I  uint32_t  RESERVED6[683];$/;"	m	struct:__anon208
RESERVED6	components\device\nrf51.h	/^  __I  uint32_t  RESERVED6[694];$/;"	m	struct:__anon216
RESERVED6	components\device\nrf51.h	/^  __I  uint32_t  RESERVED6[697];$/;"	m	struct:__anon212
RESERVED6	components\device\nrf51.h	/^  __I  uint32_t  RESERVED6[7];$/;"	m	struct:__anon195
RESERVED7	components\device\nrf51.h	/^  __I  uint32_t  RESERVED7[2];$/;"	m	struct:__anon194
RESERVED7	components\device\nrf51.h	/^  __I  uint32_t  RESERVED7[2];$/;"	m	struct:__anon199
RESERVED7	components\device\nrf51.h	/^  __I  uint32_t  RESERVED7[3];$/;"	m	struct:__anon202
RESERVED7	components\device\nrf51.h	/^  __I  uint32_t  RESERVED7[44];$/;"	m	struct:__anon204
RESERVED7	components\device\nrf51.h	/^  __I  uint32_t  RESERVED7[47];$/;"	m	struct:__anon203
RESERVED7	components\device\nrf51.h	/^  __I  uint32_t  RESERVED7[5];$/;"	m	struct:__anon195
RESERVED7	components\device\nrf51.h	/^  __I  uint32_t  RESERVED7[681];$/;"	m	struct:__anon201
RESERVED7	components\device\nrf51.h	/^  __I  uint32_t  RESERVED7[683];$/;"	m	struct:__anon207
RESERVED7	components\device\nrf51.h	/^  __I  uint32_t  RESERVED7[93];$/;"	m	struct:__anon200
RESERVED8	components\device\nrf51.h	/^  __I  uint32_t  RESERVED8;$/;"	m	struct:__anon194
RESERVED8	components\device\nrf51.h	/^  __I  uint32_t  RESERVED8;$/;"	m	struct:__anon203
RESERVED8	components\device\nrf51.h	/^  __I  uint32_t  RESERVED8[31];$/;"	m	struct:__anon200
RESERVED8	components\device\nrf51.h	/^  __I  uint32_t  RESERVED8[39];$/;"	m	struct:__anon199
RESERVED8	components\device\nrf51.h	/^  __I  uint32_t  RESERVED8[45];$/;"	m	struct:__anon202
RESERVED8	components\device\nrf51.h	/^  __I  uint32_t  RESERVED8[64];$/;"	m	struct:__anon204
RESERVED9	components\device\nrf51.h	/^  __I  uint32_t  RESERVED9;$/;"	m	struct:__anon200
RESERVED9	components\device\nrf51.h	/^  __I  uint32_t  RESERVED9[125];$/;"	m	struct:__anon204
RESERVED9	components\device\nrf51.h	/^  __I  uint32_t  RESERVED9[56];$/;"	m	struct:__anon199
RESERVED9	components\device\nrf51.h	/^  __I  uint32_t  RESERVED9[64];$/;"	m	struct:__anon202
RESERVED9	components\device\nrf51.h	/^  __I  uint32_t  RESERVED9[7];$/;"	m	struct:__anon194
RESERVED9	components\device\nrf51.h	/^  __I  uint32_t  RESERVED9[7];$/;"	m	struct:__anon203
RESET	components\device\nrf51.h	/^  __IO uint32_t  RESET;                             \/*!< Pin reset functionality configuration register. This register$/;"	m	struct:__anon194
RESETREAS	components\device\nrf51.h	/^  __IO uint32_t  RESETREAS;                         \/*!< Reset reason.                                                         *\/$/;"	m	struct:__anon194
RESULT	components\device\nrf51.h	/^  __I  uint32_t  RESULT;                            \/*!< Result of ADC conversion.                                             *\/$/;"	m	struct:__anon206
RESULT	components\device\nrf51.h	/^  __I  uint32_t  RESULT;                            \/*!< Result of last compare.                                               *\/$/;"	m	struct:__anon216
RLENR0	components\device\nrf51.h	/^  __IO uint32_t  RLENR0;                            \/*!< Length of RAM region 0.                                               *\/$/;"	m	struct:__anon196
RNG_IRQn	components\device\nrf51.h	/^  RNG_IRQn                      =  13,              \/*!<  13  RNG                                                              *\/$/;"	e	enum:__anon187
RR	components\device\nrf51.h	/^  __O  uint32_t  RR[8];                             \/*!< Reload requests registers.                                            *\/$/;"	m	struct:__anon214
RREN	components\device\nrf51.h	/^  __IO uint32_t  RREN;                              \/*!< Reload request enable.                                                *\/$/;"	m	struct:__anon214
RSSISAMPLE	components\device\nrf51.h	/^  __I  uint32_t  RSSISAMPLE;                        \/*!< RSSI sample.                                                          *\/$/;"	m	struct:__anon199
RTC0_IRQn	components\device\nrf51.h	/^  RTC0_IRQn                     =  11,              \/*!<  11  RTC0                                                             *\/$/;"	e	enum:__anon187
RTC1_IRQn	components\device\nrf51.h	/^  RTC1_IRQn                     =  17,              \/*!<  17  RTC1                                                             *\/$/;"	e	enum:__anon187
RUNSTATUS	components\device\nrf51.h	/^  __I  uint32_t  RUNSTATUS;                         \/*!< Watchdog running status.                                              *\/$/;"	m	struct:__anon214
RXADDRESSES	components\device\nrf51.h	/^  __IO uint32_t  RXADDRESSES;                       \/*!< Receive address select.                                               *\/$/;"	m	struct:__anon199
RXCRC	components\device\nrf51.h	/^  __I  uint32_t  RXCRC;                             \/*!< Received CRC.                                                         *\/$/;"	m	struct:__anon199
RXD	components\device\nrf51.h	/^  SPIM_RXD_Type RXD;                                \/*!< RXD EasyDMA configuration and status.                                 *\/$/;"	m	struct:__anon204
RXD	components\device\nrf51.h	/^  __I  uint32_t  RXD;                               \/*!< RX data register.                                                     *\/$/;"	m	struct:__anon202
RXD	components\device\nrf51.h	/^  __I  uint32_t  RXD;                               \/*!< RX data.                                                              *\/$/;"	m	struct:__anon201
RXD	components\device\nrf51.h	/^  __I  uint32_t  RXD;                               \/*!< RXD register. On read action the buffer pointer is displaced.$/;"	m	struct:__anon200
RXDPTR	components\device\nrf51.h	/^  __IO uint32_t  RXDPTR;                            \/*!< RX data pointer.                                                      *\/$/;"	m	struct:__anon203
RXMATCH	components\device\nrf51.h	/^  __I  uint32_t  RXMATCH;                           \/*!< Received address.                                                     *\/$/;"	m	struct:__anon199
Reset_IRQn	components\device\nrf51.h	/^  Reset_IRQn                    = -15,              \/*!<   1  Reset Vector, invoked on Power up and warm reset                 *\/$/;"	e	enum:__anon187
SAMPLE	components\device\nrf51.h	/^  __I  int32_t   SAMPLE;                            \/*!< Motion sample value.                                                  *\/$/;"	m	struct:__anon215
SAMPLEPER	components\device\nrf51.h	/^  __IO uint32_t  SAMPLEPER;                         \/*!< Sample period.                                                        *\/$/;"	m	struct:__anon215
SCK	components\device\nrf51.h	/^  __IO uint32_t  SCK;                               \/*!< Pin select for SCK.                                                   *\/$/;"	m	struct:__anon189
SCRATCHPTR	components\device\nrf51.h	/^  __IO uint32_t  SCRATCHPTR;                        \/*!< Pointer to a "scratch" data area used for temporary storage$/;"	m	struct:__anon212
SCRATCHPTR	components\device\nrf51.h	/^  __IO uint32_t  SCRATCHPTR;                        \/*!< Pointer to a "scratch" data area used for temporary storage$/;"	m	struct:__anon213
SEMSTAT	components\device\nrf51.h	/^  __I  uint32_t  SEMSTAT;                           \/*!< Semaphore status.                                                     *\/$/;"	m	struct:__anon203
SHORTS	components\device\nrf51.h	/^  __IO uint32_t  SHORTS;                            \/*!< Shortcuts for SPIM.                                                   *\/$/;"	m	struct:__anon204
SHORTS	components\device\nrf51.h	/^  __IO uint32_t  SHORTS;                            \/*!< Shortcuts for SPIS.                                                   *\/$/;"	m	struct:__anon203
SHORTS	components\device\nrf51.h	/^  __IO uint32_t  SHORTS;                            \/*!< Shortcuts for TWI.                                                    *\/$/;"	m	struct:__anon202
SHORTS	components\device\nrf51.h	/^  __IO uint32_t  SHORTS;                            \/*!< Shortcuts for Timer.                                                  *\/$/;"	m	struct:__anon207
SHORTS	components\device\nrf51.h	/^  __IO uint32_t  SHORTS;                            \/*!< Shortcuts for UART.                                                   *\/$/;"	m	struct:__anon200
SHORTS	components\device\nrf51.h	/^  __IO uint32_t  SHORTS;                            \/*!< Shortcuts for the CCM.                                                *\/$/;"	m	struct:__anon213
SHORTS	components\device\nrf51.h	/^  __IO uint32_t  SHORTS;                            \/*!< Shortcuts for the LPCOMP.                                             *\/$/;"	m	struct:__anon216
SHORTS	components\device\nrf51.h	/^  __IO uint32_t  SHORTS;                            \/*!< Shortcuts for the QDEC.                                               *\/$/;"	m	struct:__anon215
SHORTS	components\device\nrf51.h	/^  __IO uint32_t  SHORTS;                            \/*!< Shortcuts for the RNG.                                                *\/$/;"	m	struct:__anon210
SHORTS	components\device\nrf51.h	/^  __IO uint32_t  SHORTS;                            \/*!< Shortcuts for the radio.                                              *\/$/;"	m	struct:__anon199
SIZERAMBLOCK	components\device\nrf51.h	/^    __I  uint32_t  SIZERAMBLOCK[4];                 \/*!< Deprecated array of size of RAM block in bytes. This name is$/;"	m	union:__anon222::__anon223
SIZERAMBLOCKS	components\device\nrf51.h	/^    __I  uint32_t  SIZERAMBLOCKS;                   \/*!< Size of RAM blocks in bytes.                                          *\/$/;"	m	union:__anon222::__anon223
SPI0_TWI0_IRQn	components\device\nrf51.h	/^  SPI0_TWI0_IRQn                =   3,              \/*!<   3  SPI0_TWI0                                                        *\/$/;"	e	enum:__anon187
SPI1_TWI1_IRQn	components\device\nrf51.h	/^  SPI1_TWI1_IRQn                =   4,              \/*!<   4  SPI1_TWI1                                                        *\/$/;"	e	enum:__anon187
SPIM_PSEL_Type	components\device\nrf51.h	/^} SPIM_PSEL_Type;$/;"	t	typeref:struct:__anon189
SPIM_RXD_Type	components\device\nrf51.h	/^} SPIM_RXD_Type;$/;"	t	typeref:struct:__anon190
SPIM_TXD_Type	components\device\nrf51.h	/^} SPIM_TXD_Type;$/;"	t	typeref:struct:__anon191
SPIS1	components\device\nrf51.h	/^  __IO uint32_t  SPIS1;                             \/*!< Configurable priority configuration register for SPIS1.               *\/$/;"	m	struct:__anon188
STATE	components\device\nrf51.h	/^  __I  uint32_t  STATE;                             \/*!< Current radio state.                                                  *\/$/;"	m	struct:__anon199
STATUS	components\device\nrf51.h	/^  __I  uint32_t  STATUS;                            \/*!< Resolution status.                                                    *\/$/;"	m	struct:__anon212
STATUS	components\device\nrf51.h	/^  __IO uint32_t  STATUS;                            \/*!< Status from last transaction.                                         *\/$/;"	m	struct:__anon203
SVCall_IRQn	components\device\nrf51.h	/^  SVCall_IRQn                   =  -5,              \/*!<  11  System Service Call via SVC instruction                          *\/$/;"	e	enum:__anon187
SWI0_IRQn	components\device\nrf51.h	/^  SWI0_IRQn                     =  20,              \/*!<  20  SWI0                                                             *\/$/;"	e	enum:__anon187
SWI1_IRQn	components\device\nrf51.h	/^  SWI1_IRQn                     =  21,              \/*!<  21  SWI1                                                             *\/$/;"	e	enum:__anon187
SWI2_IRQn	components\device\nrf51.h	/^  SWI2_IRQn                     =  22,              \/*!<  22  SWI2                                                             *\/$/;"	e	enum:__anon187
SWI3_IRQn	components\device\nrf51.h	/^  SWI3_IRQn                     =  23,              \/*!<  23  SWI3                                                             *\/$/;"	e	enum:__anon187
SWI4_IRQn	components\device\nrf51.h	/^  SWI4_IRQn                     =  24,              \/*!<  24  SWI4                                                             *\/$/;"	e	enum:__anon187
SWI5_IRQn	components\device\nrf51.h	/^  SWI5_IRQn                     =  25               \/*!<  25  SWI5                                                             *\/$/;"	e	enum:__anon187
SYSTEMOFF	components\device\nrf51.h	/^  __O  uint32_t  SYSTEMOFF;                         \/*!< System off register.                                                  *\/$/;"	m	struct:__anon194
SysTick_IRQn	components\device\nrf51.h	/^  SysTick_IRQn                  =  -1,              \/*!<  15  System Tick Timer                                                *\/$/;"	e	enum:__anon187
TASKS_ACQUIRE	components\device\nrf51.h	/^  __O  uint32_t  TASKS_ACQUIRE;                     \/*!< Acquire SPI semaphore.                                                *\/$/;"	m	struct:__anon203
TASKS_BCSTART	components\device\nrf51.h	/^  __O  uint32_t  TASKS_BCSTART;                     \/*!< Start the bit counter.                                                *\/$/;"	m	struct:__anon199
TASKS_BCSTOP	components\device\nrf51.h	/^  __O  uint32_t  TASKS_BCSTOP;                      \/*!< Stop the bit counter.                                                 *\/$/;"	m	struct:__anon199
TASKS_CAL	components\device\nrf51.h	/^  __O  uint32_t  TASKS_CAL;                         \/*!< Start calibration of LFCLK RC oscillator.                             *\/$/;"	m	struct:__anon195
TASKS_CAPTURE	components\device\nrf51.h	/^  __O  uint32_t  TASKS_CAPTURE[4];                  \/*!< Capture Timer value to CC[n] registers.                               *\/$/;"	m	struct:__anon207
TASKS_CHG	components\device\nrf51.h	/^  PPI_TASKS_CHG_Type TASKS_CHG[4];                  \/*!< Channel group tasks.                                                  *\/$/;"	m	struct:__anon221
TASKS_CLEAR	components\device\nrf51.h	/^  __O  uint32_t  TASKS_CLEAR;                       \/*!< Clear RTC Counter.                                                    *\/$/;"	m	struct:__anon208
TASKS_CLEAR	components\device\nrf51.h	/^  __O  uint32_t  TASKS_CLEAR;                       \/*!< Clear timer.                                                          *\/$/;"	m	struct:__anon207
TASKS_CONSTLAT	components\device\nrf51.h	/^  __O  uint32_t  TASKS_CONSTLAT;                    \/*!< Enable constant latency mode.                                         *\/$/;"	m	struct:__anon194
TASKS_COUNT	components\device\nrf51.h	/^  __O  uint32_t  TASKS_COUNT;                       \/*!< Increment Timer (In counter mode).                                    *\/$/;"	m	struct:__anon207
TASKS_CRYPT	components\device\nrf51.h	/^  __O  uint32_t  TASKS_CRYPT;                       \/*!< Start encrypt\/decrypt. This operation will stop by itself when$/;"	m	struct:__anon213
TASKS_CTSTART	components\device\nrf51.h	/^  __O  uint32_t  TASKS_CTSTART;                     \/*!< Start calibration timer.                                              *\/$/;"	m	struct:__anon195
TASKS_CTSTOP	components\device\nrf51.h	/^  __O  uint32_t  TASKS_CTSTOP;                      \/*!< Stop calibration timer.                                               *\/$/;"	m	struct:__anon195
TASKS_DISABLE	components\device\nrf51.h	/^  __O  uint32_t  TASKS_DISABLE;                     \/*!< Disable radio.                                                        *\/$/;"	m	struct:__anon199
TASKS_HFCLKSTART	components\device\nrf51.h	/^  __O  uint32_t  TASKS_HFCLKSTART;                  \/*!< Start HFCLK clock source.                                             *\/$/;"	m	struct:__anon195
TASKS_HFCLKSTOP	components\device\nrf51.h	/^  __O  uint32_t  TASKS_HFCLKSTOP;                   \/*!< Stop HFCLK clock source.                                              *\/$/;"	m	struct:__anon195
TASKS_KSGEN	components\device\nrf51.h	/^  __O  uint32_t  TASKS_KSGEN;                       \/*!< Start generation of key-stream. This operation will stop by$/;"	m	struct:__anon213
TASKS_LFCLKSTART	components\device\nrf51.h	/^  __O  uint32_t  TASKS_LFCLKSTART;                  \/*!< Start LFCLK clock source.                                             *\/$/;"	m	struct:__anon195
TASKS_LFCLKSTOP	components\device\nrf51.h	/^  __O  uint32_t  TASKS_LFCLKSTOP;                   \/*!< Stop LFCLK clock source.                                              *\/$/;"	m	struct:__anon195
TASKS_LOWPWR	components\device\nrf51.h	/^  __O  uint32_t  TASKS_LOWPWR;                      \/*!< Enable low power mode (variable latency).                             *\/$/;"	m	struct:__anon194
TASKS_OUT	components\device\nrf51.h	/^  __O  uint32_t  TASKS_OUT[4];                      \/*!< Tasks asssociated with GPIOTE channels.                               *\/$/;"	m	struct:__anon205
TASKS_READCLRACC	components\device\nrf51.h	/^  __O  uint32_t  TASKS_READCLRACC;                  \/*!< Transfers the content from ACC registers to ACCREAD registers,$/;"	m	struct:__anon215
TASKS_RELEASE	components\device\nrf51.h	/^  __O  uint32_t  TASKS_RELEASE;                     \/*!< Release SPI semaphore.                                                *\/$/;"	m	struct:__anon203
TASKS_RESUME	components\device\nrf51.h	/^  __O  uint32_t  TASKS_RESUME;                      \/*!< Resume 2-Wire transaction.                                            *\/$/;"	m	struct:__anon202
TASKS_RESUME	components\device\nrf51.h	/^  __O  uint32_t  TASKS_RESUME;                      \/*!< Resume SPI transaction.                                               *\/$/;"	m	struct:__anon204
TASKS_RSSISTART	components\device\nrf51.h	/^  __O  uint32_t  TASKS_RSSISTART;                   \/*!< Start the RSSI and take one sample of the receive signal strength.    *\/$/;"	m	struct:__anon199
TASKS_RSSISTOP	components\device\nrf51.h	/^  __O  uint32_t  TASKS_RSSISTOP;                    \/*!< Stop the RSSI measurement.                                            *\/$/;"	m	struct:__anon199
TASKS_RXEN	components\device\nrf51.h	/^  __O  uint32_t  TASKS_RXEN;                        \/*!< Enable radio in RX mode.                                              *\/$/;"	m	struct:__anon199
TASKS_SAMPLE	components\device\nrf51.h	/^  __O  uint32_t  TASKS_SAMPLE;                      \/*!< Sample comparator value.                                              *\/$/;"	m	struct:__anon216
TASKS_SHUTDOWN	components\device\nrf51.h	/^  __O  uint32_t  TASKS_SHUTDOWN;                    \/*!< Shutdown timer.                                                       *\/$/;"	m	struct:__anon207
TASKS_START	components\device\nrf51.h	/^  __O  uint32_t  TASKS_START;                       \/*!< Start RTC Counter.                                                    *\/$/;"	m	struct:__anon208
TASKS_START	components\device\nrf51.h	/^  __O  uint32_t  TASKS_START;                       \/*!< Start SPI transaction.                                                *\/$/;"	m	struct:__anon204
TASKS_START	components\device\nrf51.h	/^  __O  uint32_t  TASKS_START;                       \/*!< Start Timer.                                                          *\/$/;"	m	struct:__anon207
TASKS_START	components\device\nrf51.h	/^  __O  uint32_t  TASKS_START;                       \/*!< Start an ADC conversion.                                              *\/$/;"	m	struct:__anon206
TASKS_START	components\device\nrf51.h	/^  __O  uint32_t  TASKS_START;                       \/*!< Start radio.                                                          *\/$/;"	m	struct:__anon199
TASKS_START	components\device\nrf51.h	/^  __O  uint32_t  TASKS_START;                       \/*!< Start resolving addresses based on IRKs specified in the IRK$/;"	m	struct:__anon212
TASKS_START	components\device\nrf51.h	/^  __O  uint32_t  TASKS_START;                       \/*!< Start temperature measurement.                                        *\/$/;"	m	struct:__anon209
TASKS_START	components\device\nrf51.h	/^  __O  uint32_t  TASKS_START;                       \/*!< Start the comparator.                                                 *\/$/;"	m	struct:__anon216
TASKS_START	components\device\nrf51.h	/^  __O  uint32_t  TASKS_START;                       \/*!< Start the quadrature decoder.                                         *\/$/;"	m	struct:__anon215
TASKS_START	components\device\nrf51.h	/^  __O  uint32_t  TASKS_START;                       \/*!< Start the random number generator.                                    *\/$/;"	m	struct:__anon210
TASKS_START	components\device\nrf51.h	/^  __O  uint32_t  TASKS_START;                       \/*!< Start the watchdog.                                                   *\/$/;"	m	struct:__anon214
TASKS_STARTECB	components\device\nrf51.h	/^  __O  uint32_t  TASKS_STARTECB;                    \/*!< Start ECB block encrypt. If a crypto operation is running, this$/;"	m	struct:__anon211
TASKS_STARTRX	components\device\nrf51.h	/^  __O  uint32_t  TASKS_STARTRX;                     \/*!< Start 2-Wire master receive sequence.                                 *\/$/;"	m	struct:__anon202
TASKS_STARTRX	components\device\nrf51.h	/^  __O  uint32_t  TASKS_STARTRX;                     \/*!< Start UART receiver.                                                  *\/$/;"	m	struct:__anon200
TASKS_STARTTX	components\device\nrf51.h	/^  __O  uint32_t  TASKS_STARTTX;                     \/*!< Start 2-Wire master transmit sequence.                                *\/$/;"	m	struct:__anon202
TASKS_STARTTX	components\device\nrf51.h	/^  __O  uint32_t  TASKS_STARTTX;                     \/*!< Start UART transmitter.                                               *\/$/;"	m	struct:__anon200
TASKS_STOP	components\device\nrf51.h	/^  __O  uint32_t  TASKS_STOP;                        \/*!< Stop 2-Wire transaction.                                              *\/$/;"	m	struct:__anon202
TASKS_STOP	components\device\nrf51.h	/^  __O  uint32_t  TASKS_STOP;                        \/*!< Stop ADC.                                                             *\/$/;"	m	struct:__anon206
TASKS_STOP	components\device\nrf51.h	/^  __O  uint32_t  TASKS_STOP;                        \/*!< Stop RTC Counter.                                                     *\/$/;"	m	struct:__anon208
TASKS_STOP	components\device\nrf51.h	/^  __O  uint32_t  TASKS_STOP;                        \/*!< Stop SPI transaction.                                                 *\/$/;"	m	struct:__anon204
TASKS_STOP	components\device\nrf51.h	/^  __O  uint32_t  TASKS_STOP;                        \/*!< Stop Timer.                                                           *\/$/;"	m	struct:__anon207
TASKS_STOP	components\device\nrf51.h	/^  __O  uint32_t  TASKS_STOP;                        \/*!< Stop encrypt\/decrypt.                                                 *\/$/;"	m	struct:__anon213
TASKS_STOP	components\device\nrf51.h	/^  __O  uint32_t  TASKS_STOP;                        \/*!< Stop radio.                                                           *\/$/;"	m	struct:__anon199
TASKS_STOP	components\device\nrf51.h	/^  __O  uint32_t  TASKS_STOP;                        \/*!< Stop resolving addresses.                                             *\/$/;"	m	struct:__anon212
TASKS_STOP	components\device\nrf51.h	/^  __O  uint32_t  TASKS_STOP;                        \/*!< Stop temperature measurement.                                         *\/$/;"	m	struct:__anon209
TASKS_STOP	components\device\nrf51.h	/^  __O  uint32_t  TASKS_STOP;                        \/*!< Stop the comparator.                                                  *\/$/;"	m	struct:__anon216
TASKS_STOP	components\device\nrf51.h	/^  __O  uint32_t  TASKS_STOP;                        \/*!< Stop the quadrature decoder.                                          *\/$/;"	m	struct:__anon215
TASKS_STOP	components\device\nrf51.h	/^  __O  uint32_t  TASKS_STOP;                        \/*!< Stop the random number generator.                                     *\/$/;"	m	struct:__anon210
TASKS_STOPECB	components\device\nrf51.h	/^  __O  uint32_t  TASKS_STOPECB;                     \/*!< Stop current ECB encryption. If a crypto operation is running,$/;"	m	struct:__anon211
TASKS_STOPRX	components\device\nrf51.h	/^  __O  uint32_t  TASKS_STOPRX;                      \/*!< Stop UART receiver.                                                   *\/$/;"	m	struct:__anon200
TASKS_STOPTX	components\device\nrf51.h	/^  __O  uint32_t  TASKS_STOPTX;                      \/*!< Stop UART transmitter.                                                *\/$/;"	m	struct:__anon200
TASKS_SUSPEND	components\device\nrf51.h	/^  __O  uint32_t  TASKS_SUSPEND;                     \/*!< Suspend 2-Wire transaction.                                           *\/$/;"	m	struct:__anon202
TASKS_SUSPEND	components\device\nrf51.h	/^  __O  uint32_t  TASKS_SUSPEND;                     \/*!< Suspend SPI transaction.                                              *\/$/;"	m	struct:__anon204
TASKS_SUSPEND	components\device\nrf51.h	/^  __O  uint32_t  TASKS_SUSPEND;                     \/*!< Suspend UART.                                                         *\/$/;"	m	struct:__anon200
TASKS_TRIGOVRFLW	components\device\nrf51.h	/^  __O  uint32_t  TASKS_TRIGOVRFLW;                  \/*!< Set COUNTER to 0xFFFFFFF0.                                            *\/$/;"	m	struct:__anon208
TASKS_TXEN	components\device\nrf51.h	/^  __O  uint32_t  TASKS_TXEN;                        \/*!< Enable radio in TX mode.                                              *\/$/;"	m	struct:__anon199
TEMP	components\device\nrf51.h	/^  __I  int32_t   TEMP;                              \/*!< Die temperature in degC, 2's complement format, 0.25 degC pecision.   *\/$/;"	m	struct:__anon209
TEMP_IRQn	components\device\nrf51.h	/^  TEMP_IRQn                     =  12,              \/*!<  12  TEMP                                                             *\/$/;"	e	enum:__anon187
TEP	components\device\nrf51.h	/^  __IO uint32_t  TEP;                               \/*!< Channel task end-point.                                               *\/$/;"	m	struct:__anon193
TEST	components\device\nrf51.h	/^  __IO uint32_t  TEST;                              \/*!< Test features enable register.                                        *\/$/;"	m	struct:__anon199
TIFS	components\device\nrf51.h	/^  __IO uint32_t  TIFS;                              \/*!< Inter Frame Spacing in microseconds.                                  *\/$/;"	m	struct:__anon199
TIMER0_IRQn	components\device\nrf51.h	/^  TIMER0_IRQn                   =   8,              \/*!<   8  TIMER0                                                           *\/$/;"	e	enum:__anon187
TIMER1_IRQn	components\device\nrf51.h	/^  TIMER1_IRQn                   =   9,              \/*!<   9  TIMER1                                                           *\/$/;"	e	enum:__anon187
TIMER2_IRQn	components\device\nrf51.h	/^  TIMER2_IRQn                   =  10,              \/*!<  10  TIMER2                                                           *\/$/;"	e	enum:__anon187
TXADDRESS	components\device\nrf51.h	/^  __IO uint32_t  TXADDRESS;                         \/*!< Transmit address select.                                              *\/$/;"	m	struct:__anon199
TXD	components\device\nrf51.h	/^  SPIM_TXD_Type TXD;                                \/*!< TXD EasyDMA configuration and status.                                 *\/$/;"	m	struct:__anon204
TXD	components\device\nrf51.h	/^  __IO uint32_t  TXD;                               \/*!< TX data register.                                                     *\/$/;"	m	struct:__anon202
TXD	components\device\nrf51.h	/^  __IO uint32_t  TXD;                               \/*!< TX data.                                                              *\/$/;"	m	struct:__anon201
TXD	components\device\nrf51.h	/^  __O  uint32_t  TXD;                               \/*!< TXD register.                                                         *\/$/;"	m	struct:__anon200
TXDPTR	components\device\nrf51.h	/^  __IO uint32_t  TXDPTR;                            \/*!< TX data pointer.                                                      *\/$/;"	m	struct:__anon203
TXPOWER	components\device\nrf51.h	/^  __IO uint32_t  TXPOWER;                           \/*!< Output power.                                                         *\/$/;"	m	struct:__anon199
UART0_IRQn	components\device\nrf51.h	/^  UART0_IRQn                    =   2,              \/*!<   2  UART0                                                            *\/$/;"	e	enum:__anon187
UNUSED	components\device\nrf51.h	/^  __I  uint32_t  UNUSED;                            \/*!< Unused.                                                               *\/$/;"	m	struct:__anon217
VALUE	components\device\nrf51.h	/^  __I  uint32_t  VALUE;                             \/*!< RNG random number.                                                    *\/$/;"	m	struct:__anon210
WDT_IRQn	components\device\nrf51.h	/^  WDT_IRQn                      =  16,              \/*!<  16  WDT                                                              *\/$/;"	e	enum:__anon187
XTALFREQ	components\device\nrf51.h	/^  __IO uint32_t  XTALFREQ;                          \/*!< Crystal frequency.                                                    *\/$/;"	m	struct:__anon195
XTALFREQ	components\device\nrf51.h	/^  __IO uint32_t  XTALFREQ;                          \/*!< Reset value for CLOCK XTALFREQ register.                              *\/$/;"	m	struct:__anon224
__CM0_REV	components\device\nrf51.h	113;"	d
__MPU_PRESENT	components\device\nrf51.h	114;"	d
__NVIC_PRIO_BITS	components\device\nrf51.h	115;"	d
__Vendor_SysTickConfig	components\device\nrf51.h	116;"	d
AAR_ENABLE_ENABLE_Disabled	components\device\nrf51_bitfields.h	99;"	d
AAR_ENABLE_ENABLE_Enabled	components\device\nrf51_bitfields.h	100;"	d
AAR_ENABLE_ENABLE_Msk	components\device\nrf51_bitfields.h	98;"	d
AAR_ENABLE_ENABLE_Pos	components\device\nrf51_bitfields.h	97;"	d
AAR_INTENCLR_END_Clear	components\device\nrf51_bitfields.h	84;"	d
AAR_INTENCLR_END_Disabled	components\device\nrf51_bitfields.h	82;"	d
AAR_INTENCLR_END_Enabled	components\device\nrf51_bitfields.h	83;"	d
AAR_INTENCLR_END_Msk	components\device\nrf51_bitfields.h	81;"	d
AAR_INTENCLR_END_Pos	components\device\nrf51_bitfields.h	80;"	d
AAR_INTENCLR_NOTRESOLVED_Clear	components\device\nrf51_bitfields.h	70;"	d
AAR_INTENCLR_NOTRESOLVED_Disabled	components\device\nrf51_bitfields.h	68;"	d
AAR_INTENCLR_NOTRESOLVED_Enabled	components\device\nrf51_bitfields.h	69;"	d
AAR_INTENCLR_NOTRESOLVED_Msk	components\device\nrf51_bitfields.h	67;"	d
AAR_INTENCLR_NOTRESOLVED_Pos	components\device\nrf51_bitfields.h	66;"	d
AAR_INTENCLR_RESOLVED_Clear	components\device\nrf51_bitfields.h	77;"	d
AAR_INTENCLR_RESOLVED_Disabled	components\device\nrf51_bitfields.h	75;"	d
AAR_INTENCLR_RESOLVED_Enabled	components\device\nrf51_bitfields.h	76;"	d
AAR_INTENCLR_RESOLVED_Msk	components\device\nrf51_bitfields.h	74;"	d
AAR_INTENCLR_RESOLVED_Pos	components\device\nrf51_bitfields.h	73;"	d
AAR_INTENSET_END_Disabled	components\device\nrf51_bitfields.h	58;"	d
AAR_INTENSET_END_Enabled	components\device\nrf51_bitfields.h	59;"	d
AAR_INTENSET_END_Msk	components\device\nrf51_bitfields.h	57;"	d
AAR_INTENSET_END_Pos	components\device\nrf51_bitfields.h	56;"	d
AAR_INTENSET_END_Set	components\device\nrf51_bitfields.h	60;"	d
AAR_INTENSET_NOTRESOLVED_Disabled	components\device\nrf51_bitfields.h	44;"	d
AAR_INTENSET_NOTRESOLVED_Enabled	components\device\nrf51_bitfields.h	45;"	d
AAR_INTENSET_NOTRESOLVED_Msk	components\device\nrf51_bitfields.h	43;"	d
AAR_INTENSET_NOTRESOLVED_Pos	components\device\nrf51_bitfields.h	42;"	d
AAR_INTENSET_NOTRESOLVED_Set	components\device\nrf51_bitfields.h	46;"	d
AAR_INTENSET_RESOLVED_Disabled	components\device\nrf51_bitfields.h	51;"	d
AAR_INTENSET_RESOLVED_Enabled	components\device\nrf51_bitfields.h	52;"	d
AAR_INTENSET_RESOLVED_Msk	components\device\nrf51_bitfields.h	50;"	d
AAR_INTENSET_RESOLVED_Pos	components\device\nrf51_bitfields.h	49;"	d
AAR_INTENSET_RESOLVED_Set	components\device\nrf51_bitfields.h	53;"	d
AAR_NIRK_NIRK_Msk	components\device\nrf51_bitfields.h	107;"	d
AAR_NIRK_NIRK_Pos	components\device\nrf51_bitfields.h	106;"	d
AAR_POWER_POWER_Disabled	components\device\nrf51_bitfields.h	115;"	d
AAR_POWER_POWER_Enabled	components\device\nrf51_bitfields.h	116;"	d
AAR_POWER_POWER_Msk	components\device\nrf51_bitfields.h	114;"	d
AAR_POWER_POWER_Pos	components\device\nrf51_bitfields.h	113;"	d
AAR_STATUS_STATUS_Msk	components\device\nrf51_bitfields.h	91;"	d
AAR_STATUS_STATUS_Pos	components\device\nrf51_bitfields.h	90;"	d
ADC_BUSY_BUSY_Busy	components\device\nrf51_bitfields.h	149;"	d
ADC_BUSY_BUSY_Msk	components\device\nrf51_bitfields.h	147;"	d
ADC_BUSY_BUSY_Pos	components\device\nrf51_bitfields.h	146;"	d
ADC_BUSY_BUSY_Ready	components\device\nrf51_bitfields.h	148;"	d
ADC_CONFIG_EXTREFSEL_AnalogReference0	components\device\nrf51_bitfields.h	167;"	d
ADC_CONFIG_EXTREFSEL_AnalogReference1	components\device\nrf51_bitfields.h	168;"	d
ADC_CONFIG_EXTREFSEL_Msk	components\device\nrf51_bitfields.h	165;"	d
ADC_CONFIG_EXTREFSEL_None	components\device\nrf51_bitfields.h	166;"	d
ADC_CONFIG_EXTREFSEL_Pos	components\device\nrf51_bitfields.h	164;"	d
ADC_CONFIG_INPSEL_AnalogInputNoPrescaling	components\device\nrf51_bitfields.h	194;"	d
ADC_CONFIG_INPSEL_AnalogInputOneThirdPrescaling	components\device\nrf51_bitfields.h	196;"	d
ADC_CONFIG_INPSEL_AnalogInputTwoThirdsPrescaling	components\device\nrf51_bitfields.h	195;"	d
ADC_CONFIG_INPSEL_Msk	components\device\nrf51_bitfields.h	193;"	d
ADC_CONFIG_INPSEL_Pos	components\device\nrf51_bitfields.h	192;"	d
ADC_CONFIG_INPSEL_SupplyOneThirdPrescaling	components\device\nrf51_bitfields.h	198;"	d
ADC_CONFIG_INPSEL_SupplyTwoThirdsPrescaling	components\device\nrf51_bitfields.h	197;"	d
ADC_CONFIG_PSEL_AnalogInput0	components\device\nrf51_bitfields.h	174;"	d
ADC_CONFIG_PSEL_AnalogInput1	components\device\nrf51_bitfields.h	175;"	d
ADC_CONFIG_PSEL_AnalogInput2	components\device\nrf51_bitfields.h	176;"	d
ADC_CONFIG_PSEL_AnalogInput3	components\device\nrf51_bitfields.h	177;"	d
ADC_CONFIG_PSEL_AnalogInput4	components\device\nrf51_bitfields.h	178;"	d
ADC_CONFIG_PSEL_AnalogInput5	components\device\nrf51_bitfields.h	179;"	d
ADC_CONFIG_PSEL_AnalogInput6	components\device\nrf51_bitfields.h	180;"	d
ADC_CONFIG_PSEL_AnalogInput7	components\device\nrf51_bitfields.h	181;"	d
ADC_CONFIG_PSEL_Disabled	components\device\nrf51_bitfields.h	173;"	d
ADC_CONFIG_PSEL_Msk	components\device\nrf51_bitfields.h	172;"	d
ADC_CONFIG_PSEL_Pos	components\device\nrf51_bitfields.h	171;"	d
ADC_CONFIG_REFSEL_External	components\device\nrf51_bitfields.h	187;"	d
ADC_CONFIG_REFSEL_Msk	components\device\nrf51_bitfields.h	185;"	d
ADC_CONFIG_REFSEL_Pos	components\device\nrf51_bitfields.h	184;"	d
ADC_CONFIG_REFSEL_SupplyOneHalfPrescaling	components\device\nrf51_bitfields.h	188;"	d
ADC_CONFIG_REFSEL_SupplyOneThirdPrescaling	components\device\nrf51_bitfields.h	189;"	d
ADC_CONFIG_REFSEL_VBG	components\device\nrf51_bitfields.h	186;"	d
ADC_CONFIG_RES_10bit	components\device\nrf51_bitfields.h	205;"	d
ADC_CONFIG_RES_8bit	components\device\nrf51_bitfields.h	203;"	d
ADC_CONFIG_RES_9bit	components\device\nrf51_bitfields.h	204;"	d
ADC_CONFIG_RES_Msk	components\device\nrf51_bitfields.h	202;"	d
ADC_CONFIG_RES_Pos	components\device\nrf51_bitfields.h	201;"	d
ADC_ENABLE_ENABLE_Disabled	components\device\nrf51_bitfields.h	157;"	d
ADC_ENABLE_ENABLE_Enabled	components\device\nrf51_bitfields.h	158;"	d
ADC_ENABLE_ENABLE_Msk	components\device\nrf51_bitfields.h	156;"	d
ADC_ENABLE_ENABLE_Pos	components\device\nrf51_bitfields.h	155;"	d
ADC_INTENCLR_END_Clear	components\device\nrf51_bitfields.h	140;"	d
ADC_INTENCLR_END_Disabled	components\device\nrf51_bitfields.h	138;"	d
ADC_INTENCLR_END_Enabled	components\device\nrf51_bitfields.h	139;"	d
ADC_INTENCLR_END_Msk	components\device\nrf51_bitfields.h	137;"	d
ADC_INTENCLR_END_Pos	components\device\nrf51_bitfields.h	136;"	d
ADC_INTENSET_END_Disabled	components\device\nrf51_bitfields.h	128;"	d
ADC_INTENSET_END_Enabled	components\device\nrf51_bitfields.h	129;"	d
ADC_INTENSET_END_Msk	components\device\nrf51_bitfields.h	127;"	d
ADC_INTENSET_END_Pos	components\device\nrf51_bitfields.h	126;"	d
ADC_INTENSET_END_Set	components\device\nrf51_bitfields.h	130;"	d
ADC_POWER_POWER_Disabled	components\device\nrf51_bitfields.h	220;"	d
ADC_POWER_POWER_Enabled	components\device\nrf51_bitfields.h	221;"	d
ADC_POWER_POWER_Msk	components\device\nrf51_bitfields.h	219;"	d
ADC_POWER_POWER_Pos	components\device\nrf51_bitfields.h	218;"	d
ADC_RESULT_RESULT_Msk	components\device\nrf51_bitfields.h	212;"	d
ADC_RESULT_RESULT_Pos	components\device\nrf51_bitfields.h	211;"	d
AMLI_RAMPRI_AAR_RAM0_Msk	components\device\nrf51_bitfields.h	811;"	d
AMLI_RAMPRI_AAR_RAM0_Pos	components\device\nrf51_bitfields.h	810;"	d
AMLI_RAMPRI_AAR_RAM0_Pri0	components\device\nrf51_bitfields.h	812;"	d
AMLI_RAMPRI_AAR_RAM0_Pri10	components\device\nrf51_bitfields.h	817;"	d
AMLI_RAMPRI_AAR_RAM0_Pri12	components\device\nrf51_bitfields.h	818;"	d
AMLI_RAMPRI_AAR_RAM0_Pri14	components\device\nrf51_bitfields.h	819;"	d
AMLI_RAMPRI_AAR_RAM0_Pri2	components\device\nrf51_bitfields.h	813;"	d
AMLI_RAMPRI_AAR_RAM0_Pri4	components\device\nrf51_bitfields.h	814;"	d
AMLI_RAMPRI_AAR_RAM0_Pri6	components\device\nrf51_bitfields.h	815;"	d
AMLI_RAMPRI_AAR_RAM0_Pri8	components\device\nrf51_bitfields.h	816;"	d
AMLI_RAMPRI_AAR_RAM1_Msk	components\device\nrf51_bitfields.h	799;"	d
AMLI_RAMPRI_AAR_RAM1_Pos	components\device\nrf51_bitfields.h	798;"	d
AMLI_RAMPRI_AAR_RAM1_Pri0	components\device\nrf51_bitfields.h	800;"	d
AMLI_RAMPRI_AAR_RAM1_Pri10	components\device\nrf51_bitfields.h	805;"	d
AMLI_RAMPRI_AAR_RAM1_Pri12	components\device\nrf51_bitfields.h	806;"	d
AMLI_RAMPRI_AAR_RAM1_Pri14	components\device\nrf51_bitfields.h	807;"	d
AMLI_RAMPRI_AAR_RAM1_Pri2	components\device\nrf51_bitfields.h	801;"	d
AMLI_RAMPRI_AAR_RAM1_Pri4	components\device\nrf51_bitfields.h	802;"	d
AMLI_RAMPRI_AAR_RAM1_Pri6	components\device\nrf51_bitfields.h	803;"	d
AMLI_RAMPRI_AAR_RAM1_Pri8	components\device\nrf51_bitfields.h	804;"	d
AMLI_RAMPRI_AAR_RAM2_Msk	components\device\nrf51_bitfields.h	787;"	d
AMLI_RAMPRI_AAR_RAM2_Pos	components\device\nrf51_bitfields.h	786;"	d
AMLI_RAMPRI_AAR_RAM2_Pri0	components\device\nrf51_bitfields.h	788;"	d
AMLI_RAMPRI_AAR_RAM2_Pri10	components\device\nrf51_bitfields.h	793;"	d
AMLI_RAMPRI_AAR_RAM2_Pri12	components\device\nrf51_bitfields.h	794;"	d
AMLI_RAMPRI_AAR_RAM2_Pri14	components\device\nrf51_bitfields.h	795;"	d
AMLI_RAMPRI_AAR_RAM2_Pri2	components\device\nrf51_bitfields.h	789;"	d
AMLI_RAMPRI_AAR_RAM2_Pri4	components\device\nrf51_bitfields.h	790;"	d
AMLI_RAMPRI_AAR_RAM2_Pri6	components\device\nrf51_bitfields.h	791;"	d
AMLI_RAMPRI_AAR_RAM2_Pri8	components\device\nrf51_bitfields.h	792;"	d
AMLI_RAMPRI_AAR_RAM3_Msk	components\device\nrf51_bitfields.h	775;"	d
AMLI_RAMPRI_AAR_RAM3_Pos	components\device\nrf51_bitfields.h	774;"	d
AMLI_RAMPRI_AAR_RAM3_Pri0	components\device\nrf51_bitfields.h	776;"	d
AMLI_RAMPRI_AAR_RAM3_Pri10	components\device\nrf51_bitfields.h	781;"	d
AMLI_RAMPRI_AAR_RAM3_Pri12	components\device\nrf51_bitfields.h	782;"	d
AMLI_RAMPRI_AAR_RAM3_Pri14	components\device\nrf51_bitfields.h	783;"	d
AMLI_RAMPRI_AAR_RAM3_Pri2	components\device\nrf51_bitfields.h	777;"	d
AMLI_RAMPRI_AAR_RAM3_Pri4	components\device\nrf51_bitfields.h	778;"	d
AMLI_RAMPRI_AAR_RAM3_Pri6	components\device\nrf51_bitfields.h	779;"	d
AMLI_RAMPRI_AAR_RAM3_Pri8	components\device\nrf51_bitfields.h	780;"	d
AMLI_RAMPRI_AAR_RAM4_Msk	components\device\nrf51_bitfields.h	763;"	d
AMLI_RAMPRI_AAR_RAM4_Pos	components\device\nrf51_bitfields.h	762;"	d
AMLI_RAMPRI_AAR_RAM4_Pri0	components\device\nrf51_bitfields.h	764;"	d
AMLI_RAMPRI_AAR_RAM4_Pri10	components\device\nrf51_bitfields.h	769;"	d
AMLI_RAMPRI_AAR_RAM4_Pri12	components\device\nrf51_bitfields.h	770;"	d
AMLI_RAMPRI_AAR_RAM4_Pri14	components\device\nrf51_bitfields.h	771;"	d
AMLI_RAMPRI_AAR_RAM4_Pri2	components\device\nrf51_bitfields.h	765;"	d
AMLI_RAMPRI_AAR_RAM4_Pri4	components\device\nrf51_bitfields.h	766;"	d
AMLI_RAMPRI_AAR_RAM4_Pri6	components\device\nrf51_bitfields.h	767;"	d
AMLI_RAMPRI_AAR_RAM4_Pri8	components\device\nrf51_bitfields.h	768;"	d
AMLI_RAMPRI_AAR_RAM5_Msk	components\device\nrf51_bitfields.h	751;"	d
AMLI_RAMPRI_AAR_RAM5_Pos	components\device\nrf51_bitfields.h	750;"	d
AMLI_RAMPRI_AAR_RAM5_Pri0	components\device\nrf51_bitfields.h	752;"	d
AMLI_RAMPRI_AAR_RAM5_Pri10	components\device\nrf51_bitfields.h	757;"	d
AMLI_RAMPRI_AAR_RAM5_Pri12	components\device\nrf51_bitfields.h	758;"	d
AMLI_RAMPRI_AAR_RAM5_Pri14	components\device\nrf51_bitfields.h	759;"	d
AMLI_RAMPRI_AAR_RAM5_Pri2	components\device\nrf51_bitfields.h	753;"	d
AMLI_RAMPRI_AAR_RAM5_Pri4	components\device\nrf51_bitfields.h	754;"	d
AMLI_RAMPRI_AAR_RAM5_Pri6	components\device\nrf51_bitfields.h	755;"	d
AMLI_RAMPRI_AAR_RAM5_Pri8	components\device\nrf51_bitfields.h	756;"	d
AMLI_RAMPRI_AAR_RAM6_Msk	components\device\nrf51_bitfields.h	739;"	d
AMLI_RAMPRI_AAR_RAM6_Pos	components\device\nrf51_bitfields.h	738;"	d
AMLI_RAMPRI_AAR_RAM6_Pri0	components\device\nrf51_bitfields.h	740;"	d
AMLI_RAMPRI_AAR_RAM6_Pri10	components\device\nrf51_bitfields.h	745;"	d
AMLI_RAMPRI_AAR_RAM6_Pri12	components\device\nrf51_bitfields.h	746;"	d
AMLI_RAMPRI_AAR_RAM6_Pri14	components\device\nrf51_bitfields.h	747;"	d
AMLI_RAMPRI_AAR_RAM6_Pri2	components\device\nrf51_bitfields.h	741;"	d
AMLI_RAMPRI_AAR_RAM6_Pri4	components\device\nrf51_bitfields.h	742;"	d
AMLI_RAMPRI_AAR_RAM6_Pri6	components\device\nrf51_bitfields.h	743;"	d
AMLI_RAMPRI_AAR_RAM6_Pri8	components\device\nrf51_bitfields.h	744;"	d
AMLI_RAMPRI_AAR_RAM7_Msk	components\device\nrf51_bitfields.h	727;"	d
AMLI_RAMPRI_AAR_RAM7_Pos	components\device\nrf51_bitfields.h	726;"	d
AMLI_RAMPRI_AAR_RAM7_Pri0	components\device\nrf51_bitfields.h	728;"	d
AMLI_RAMPRI_AAR_RAM7_Pri10	components\device\nrf51_bitfields.h	733;"	d
AMLI_RAMPRI_AAR_RAM7_Pri12	components\device\nrf51_bitfields.h	734;"	d
AMLI_RAMPRI_AAR_RAM7_Pri14	components\device\nrf51_bitfields.h	735;"	d
AMLI_RAMPRI_AAR_RAM7_Pri2	components\device\nrf51_bitfields.h	729;"	d
AMLI_RAMPRI_AAR_RAM7_Pri4	components\device\nrf51_bitfields.h	730;"	d
AMLI_RAMPRI_AAR_RAM7_Pri6	components\device\nrf51_bitfields.h	731;"	d
AMLI_RAMPRI_AAR_RAM7_Pri8	components\device\nrf51_bitfields.h	732;"	d
AMLI_RAMPRI_CCM_RAM0_Msk	components\device\nrf51_bitfields.h	712;"	d
AMLI_RAMPRI_CCM_RAM0_Pos	components\device\nrf51_bitfields.h	711;"	d
AMLI_RAMPRI_CCM_RAM0_Pri0	components\device\nrf51_bitfields.h	713;"	d
AMLI_RAMPRI_CCM_RAM0_Pri10	components\device\nrf51_bitfields.h	718;"	d
AMLI_RAMPRI_CCM_RAM0_Pri12	components\device\nrf51_bitfields.h	719;"	d
AMLI_RAMPRI_CCM_RAM0_Pri14	components\device\nrf51_bitfields.h	720;"	d
AMLI_RAMPRI_CCM_RAM0_Pri2	components\device\nrf51_bitfields.h	714;"	d
AMLI_RAMPRI_CCM_RAM0_Pri4	components\device\nrf51_bitfields.h	715;"	d
AMLI_RAMPRI_CCM_RAM0_Pri6	components\device\nrf51_bitfields.h	716;"	d
AMLI_RAMPRI_CCM_RAM0_Pri8	components\device\nrf51_bitfields.h	717;"	d
AMLI_RAMPRI_CCM_RAM1_Msk	components\device\nrf51_bitfields.h	700;"	d
AMLI_RAMPRI_CCM_RAM1_Pos	components\device\nrf51_bitfields.h	699;"	d
AMLI_RAMPRI_CCM_RAM1_Pri0	components\device\nrf51_bitfields.h	701;"	d
AMLI_RAMPRI_CCM_RAM1_Pri10	components\device\nrf51_bitfields.h	706;"	d
AMLI_RAMPRI_CCM_RAM1_Pri12	components\device\nrf51_bitfields.h	707;"	d
AMLI_RAMPRI_CCM_RAM1_Pri14	components\device\nrf51_bitfields.h	708;"	d
AMLI_RAMPRI_CCM_RAM1_Pri2	components\device\nrf51_bitfields.h	702;"	d
AMLI_RAMPRI_CCM_RAM1_Pri4	components\device\nrf51_bitfields.h	703;"	d
AMLI_RAMPRI_CCM_RAM1_Pri6	components\device\nrf51_bitfields.h	704;"	d
AMLI_RAMPRI_CCM_RAM1_Pri8	components\device\nrf51_bitfields.h	705;"	d
AMLI_RAMPRI_CCM_RAM2_Msk	components\device\nrf51_bitfields.h	688;"	d
AMLI_RAMPRI_CCM_RAM2_Pos	components\device\nrf51_bitfields.h	687;"	d
AMLI_RAMPRI_CCM_RAM2_Pri0	components\device\nrf51_bitfields.h	689;"	d
AMLI_RAMPRI_CCM_RAM2_Pri10	components\device\nrf51_bitfields.h	694;"	d
AMLI_RAMPRI_CCM_RAM2_Pri12	components\device\nrf51_bitfields.h	695;"	d
AMLI_RAMPRI_CCM_RAM2_Pri14	components\device\nrf51_bitfields.h	696;"	d
AMLI_RAMPRI_CCM_RAM2_Pri2	components\device\nrf51_bitfields.h	690;"	d
AMLI_RAMPRI_CCM_RAM2_Pri4	components\device\nrf51_bitfields.h	691;"	d
AMLI_RAMPRI_CCM_RAM2_Pri6	components\device\nrf51_bitfields.h	692;"	d
AMLI_RAMPRI_CCM_RAM2_Pri8	components\device\nrf51_bitfields.h	693;"	d
AMLI_RAMPRI_CCM_RAM3_Msk	components\device\nrf51_bitfields.h	676;"	d
AMLI_RAMPRI_CCM_RAM3_Pos	components\device\nrf51_bitfields.h	675;"	d
AMLI_RAMPRI_CCM_RAM3_Pri0	components\device\nrf51_bitfields.h	677;"	d
AMLI_RAMPRI_CCM_RAM3_Pri10	components\device\nrf51_bitfields.h	682;"	d
AMLI_RAMPRI_CCM_RAM3_Pri12	components\device\nrf51_bitfields.h	683;"	d
AMLI_RAMPRI_CCM_RAM3_Pri14	components\device\nrf51_bitfields.h	684;"	d
AMLI_RAMPRI_CCM_RAM3_Pri2	components\device\nrf51_bitfields.h	678;"	d
AMLI_RAMPRI_CCM_RAM3_Pri4	components\device\nrf51_bitfields.h	679;"	d
AMLI_RAMPRI_CCM_RAM3_Pri6	components\device\nrf51_bitfields.h	680;"	d
AMLI_RAMPRI_CCM_RAM3_Pri8	components\device\nrf51_bitfields.h	681;"	d
AMLI_RAMPRI_CCM_RAM4_Msk	components\device\nrf51_bitfields.h	664;"	d
AMLI_RAMPRI_CCM_RAM4_Pos	components\device\nrf51_bitfields.h	663;"	d
AMLI_RAMPRI_CCM_RAM4_Pri0	components\device\nrf51_bitfields.h	665;"	d
AMLI_RAMPRI_CCM_RAM4_Pri10	components\device\nrf51_bitfields.h	670;"	d
AMLI_RAMPRI_CCM_RAM4_Pri12	components\device\nrf51_bitfields.h	671;"	d
AMLI_RAMPRI_CCM_RAM4_Pri14	components\device\nrf51_bitfields.h	672;"	d
AMLI_RAMPRI_CCM_RAM4_Pri2	components\device\nrf51_bitfields.h	666;"	d
AMLI_RAMPRI_CCM_RAM4_Pri4	components\device\nrf51_bitfields.h	667;"	d
AMLI_RAMPRI_CCM_RAM4_Pri6	components\device\nrf51_bitfields.h	668;"	d
AMLI_RAMPRI_CCM_RAM4_Pri8	components\device\nrf51_bitfields.h	669;"	d
AMLI_RAMPRI_CCM_RAM5_Msk	components\device\nrf51_bitfields.h	652;"	d
AMLI_RAMPRI_CCM_RAM5_Pos	components\device\nrf51_bitfields.h	651;"	d
AMLI_RAMPRI_CCM_RAM5_Pri0	components\device\nrf51_bitfields.h	653;"	d
AMLI_RAMPRI_CCM_RAM5_Pri10	components\device\nrf51_bitfields.h	658;"	d
AMLI_RAMPRI_CCM_RAM5_Pri12	components\device\nrf51_bitfields.h	659;"	d
AMLI_RAMPRI_CCM_RAM5_Pri14	components\device\nrf51_bitfields.h	660;"	d
AMLI_RAMPRI_CCM_RAM5_Pri2	components\device\nrf51_bitfields.h	654;"	d
AMLI_RAMPRI_CCM_RAM5_Pri4	components\device\nrf51_bitfields.h	655;"	d
AMLI_RAMPRI_CCM_RAM5_Pri6	components\device\nrf51_bitfields.h	656;"	d
AMLI_RAMPRI_CCM_RAM5_Pri8	components\device\nrf51_bitfields.h	657;"	d
AMLI_RAMPRI_CCM_RAM6_Msk	components\device\nrf51_bitfields.h	640;"	d
AMLI_RAMPRI_CCM_RAM6_Pos	components\device\nrf51_bitfields.h	639;"	d
AMLI_RAMPRI_CCM_RAM6_Pri0	components\device\nrf51_bitfields.h	641;"	d
AMLI_RAMPRI_CCM_RAM6_Pri10	components\device\nrf51_bitfields.h	646;"	d
AMLI_RAMPRI_CCM_RAM6_Pri12	components\device\nrf51_bitfields.h	647;"	d
AMLI_RAMPRI_CCM_RAM6_Pri14	components\device\nrf51_bitfields.h	648;"	d
AMLI_RAMPRI_CCM_RAM6_Pri2	components\device\nrf51_bitfields.h	642;"	d
AMLI_RAMPRI_CCM_RAM6_Pri4	components\device\nrf51_bitfields.h	643;"	d
AMLI_RAMPRI_CCM_RAM6_Pri6	components\device\nrf51_bitfields.h	644;"	d
AMLI_RAMPRI_CCM_RAM6_Pri8	components\device\nrf51_bitfields.h	645;"	d
AMLI_RAMPRI_CCM_RAM7_Msk	components\device\nrf51_bitfields.h	628;"	d
AMLI_RAMPRI_CCM_RAM7_Pos	components\device\nrf51_bitfields.h	627;"	d
AMLI_RAMPRI_CCM_RAM7_Pri0	components\device\nrf51_bitfields.h	629;"	d
AMLI_RAMPRI_CCM_RAM7_Pri10	components\device\nrf51_bitfields.h	634;"	d
AMLI_RAMPRI_CCM_RAM7_Pri12	components\device\nrf51_bitfields.h	635;"	d
AMLI_RAMPRI_CCM_RAM7_Pri14	components\device\nrf51_bitfields.h	636;"	d
AMLI_RAMPRI_CCM_RAM7_Pri2	components\device\nrf51_bitfields.h	630;"	d
AMLI_RAMPRI_CCM_RAM7_Pri4	components\device\nrf51_bitfields.h	631;"	d
AMLI_RAMPRI_CCM_RAM7_Pri6	components\device\nrf51_bitfields.h	632;"	d
AMLI_RAMPRI_CCM_RAM7_Pri8	components\device\nrf51_bitfields.h	633;"	d
AMLI_RAMPRI_CPU0_RAM0_Msk	components\device\nrf51_bitfields.h	316;"	d
AMLI_RAMPRI_CPU0_RAM0_Pos	components\device\nrf51_bitfields.h	315;"	d
AMLI_RAMPRI_CPU0_RAM0_Pri0	components\device\nrf51_bitfields.h	317;"	d
AMLI_RAMPRI_CPU0_RAM0_Pri10	components\device\nrf51_bitfields.h	322;"	d
AMLI_RAMPRI_CPU0_RAM0_Pri12	components\device\nrf51_bitfields.h	323;"	d
AMLI_RAMPRI_CPU0_RAM0_Pri14	components\device\nrf51_bitfields.h	324;"	d
AMLI_RAMPRI_CPU0_RAM0_Pri2	components\device\nrf51_bitfields.h	318;"	d
AMLI_RAMPRI_CPU0_RAM0_Pri4	components\device\nrf51_bitfields.h	319;"	d
AMLI_RAMPRI_CPU0_RAM0_Pri6	components\device\nrf51_bitfields.h	320;"	d
AMLI_RAMPRI_CPU0_RAM0_Pri8	components\device\nrf51_bitfields.h	321;"	d
AMLI_RAMPRI_CPU0_RAM1_Msk	components\device\nrf51_bitfields.h	304;"	d
AMLI_RAMPRI_CPU0_RAM1_Pos	components\device\nrf51_bitfields.h	303;"	d
AMLI_RAMPRI_CPU0_RAM1_Pri0	components\device\nrf51_bitfields.h	305;"	d
AMLI_RAMPRI_CPU0_RAM1_Pri10	components\device\nrf51_bitfields.h	310;"	d
AMLI_RAMPRI_CPU0_RAM1_Pri12	components\device\nrf51_bitfields.h	311;"	d
AMLI_RAMPRI_CPU0_RAM1_Pri14	components\device\nrf51_bitfields.h	312;"	d
AMLI_RAMPRI_CPU0_RAM1_Pri2	components\device\nrf51_bitfields.h	306;"	d
AMLI_RAMPRI_CPU0_RAM1_Pri4	components\device\nrf51_bitfields.h	307;"	d
AMLI_RAMPRI_CPU0_RAM1_Pri6	components\device\nrf51_bitfields.h	308;"	d
AMLI_RAMPRI_CPU0_RAM1_Pri8	components\device\nrf51_bitfields.h	309;"	d
AMLI_RAMPRI_CPU0_RAM2_Msk	components\device\nrf51_bitfields.h	292;"	d
AMLI_RAMPRI_CPU0_RAM2_Pos	components\device\nrf51_bitfields.h	291;"	d
AMLI_RAMPRI_CPU0_RAM2_Pri0	components\device\nrf51_bitfields.h	293;"	d
AMLI_RAMPRI_CPU0_RAM2_Pri10	components\device\nrf51_bitfields.h	298;"	d
AMLI_RAMPRI_CPU0_RAM2_Pri12	components\device\nrf51_bitfields.h	299;"	d
AMLI_RAMPRI_CPU0_RAM2_Pri14	components\device\nrf51_bitfields.h	300;"	d
AMLI_RAMPRI_CPU0_RAM2_Pri2	components\device\nrf51_bitfields.h	294;"	d
AMLI_RAMPRI_CPU0_RAM2_Pri4	components\device\nrf51_bitfields.h	295;"	d
AMLI_RAMPRI_CPU0_RAM2_Pri6	components\device\nrf51_bitfields.h	296;"	d
AMLI_RAMPRI_CPU0_RAM2_Pri8	components\device\nrf51_bitfields.h	297;"	d
AMLI_RAMPRI_CPU0_RAM3_Msk	components\device\nrf51_bitfields.h	280;"	d
AMLI_RAMPRI_CPU0_RAM3_Pos	components\device\nrf51_bitfields.h	279;"	d
AMLI_RAMPRI_CPU0_RAM3_Pri0	components\device\nrf51_bitfields.h	281;"	d
AMLI_RAMPRI_CPU0_RAM3_Pri10	components\device\nrf51_bitfields.h	286;"	d
AMLI_RAMPRI_CPU0_RAM3_Pri12	components\device\nrf51_bitfields.h	287;"	d
AMLI_RAMPRI_CPU0_RAM3_Pri14	components\device\nrf51_bitfields.h	288;"	d
AMLI_RAMPRI_CPU0_RAM3_Pri2	components\device\nrf51_bitfields.h	282;"	d
AMLI_RAMPRI_CPU0_RAM3_Pri4	components\device\nrf51_bitfields.h	283;"	d
AMLI_RAMPRI_CPU0_RAM3_Pri6	components\device\nrf51_bitfields.h	284;"	d
AMLI_RAMPRI_CPU0_RAM3_Pri8	components\device\nrf51_bitfields.h	285;"	d
AMLI_RAMPRI_CPU0_RAM4_Msk	components\device\nrf51_bitfields.h	268;"	d
AMLI_RAMPRI_CPU0_RAM4_Pos	components\device\nrf51_bitfields.h	267;"	d
AMLI_RAMPRI_CPU0_RAM4_Pri0	components\device\nrf51_bitfields.h	269;"	d
AMLI_RAMPRI_CPU0_RAM4_Pri10	components\device\nrf51_bitfields.h	274;"	d
AMLI_RAMPRI_CPU0_RAM4_Pri12	components\device\nrf51_bitfields.h	275;"	d
AMLI_RAMPRI_CPU0_RAM4_Pri14	components\device\nrf51_bitfields.h	276;"	d
AMLI_RAMPRI_CPU0_RAM4_Pri2	components\device\nrf51_bitfields.h	270;"	d
AMLI_RAMPRI_CPU0_RAM4_Pri4	components\device\nrf51_bitfields.h	271;"	d
AMLI_RAMPRI_CPU0_RAM4_Pri6	components\device\nrf51_bitfields.h	272;"	d
AMLI_RAMPRI_CPU0_RAM4_Pri8	components\device\nrf51_bitfields.h	273;"	d
AMLI_RAMPRI_CPU0_RAM5_Msk	components\device\nrf51_bitfields.h	256;"	d
AMLI_RAMPRI_CPU0_RAM5_Pos	components\device\nrf51_bitfields.h	255;"	d
AMLI_RAMPRI_CPU0_RAM5_Pri0	components\device\nrf51_bitfields.h	257;"	d
AMLI_RAMPRI_CPU0_RAM5_Pri10	components\device\nrf51_bitfields.h	262;"	d
AMLI_RAMPRI_CPU0_RAM5_Pri12	components\device\nrf51_bitfields.h	263;"	d
AMLI_RAMPRI_CPU0_RAM5_Pri14	components\device\nrf51_bitfields.h	264;"	d
AMLI_RAMPRI_CPU0_RAM5_Pri2	components\device\nrf51_bitfields.h	258;"	d
AMLI_RAMPRI_CPU0_RAM5_Pri4	components\device\nrf51_bitfields.h	259;"	d
AMLI_RAMPRI_CPU0_RAM5_Pri6	components\device\nrf51_bitfields.h	260;"	d
AMLI_RAMPRI_CPU0_RAM5_Pri8	components\device\nrf51_bitfields.h	261;"	d
AMLI_RAMPRI_CPU0_RAM6_Msk	components\device\nrf51_bitfields.h	244;"	d
AMLI_RAMPRI_CPU0_RAM6_Pos	components\device\nrf51_bitfields.h	243;"	d
AMLI_RAMPRI_CPU0_RAM6_Pri0	components\device\nrf51_bitfields.h	245;"	d
AMLI_RAMPRI_CPU0_RAM6_Pri10	components\device\nrf51_bitfields.h	250;"	d
AMLI_RAMPRI_CPU0_RAM6_Pri12	components\device\nrf51_bitfields.h	251;"	d
AMLI_RAMPRI_CPU0_RAM6_Pri14	components\device\nrf51_bitfields.h	252;"	d
AMLI_RAMPRI_CPU0_RAM6_Pri2	components\device\nrf51_bitfields.h	246;"	d
AMLI_RAMPRI_CPU0_RAM6_Pri4	components\device\nrf51_bitfields.h	247;"	d
AMLI_RAMPRI_CPU0_RAM6_Pri6	components\device\nrf51_bitfields.h	248;"	d
AMLI_RAMPRI_CPU0_RAM6_Pri8	components\device\nrf51_bitfields.h	249;"	d
AMLI_RAMPRI_CPU0_RAM7_Msk	components\device\nrf51_bitfields.h	232;"	d
AMLI_RAMPRI_CPU0_RAM7_Pos	components\device\nrf51_bitfields.h	231;"	d
AMLI_RAMPRI_CPU0_RAM7_Pri0	components\device\nrf51_bitfields.h	233;"	d
AMLI_RAMPRI_CPU0_RAM7_Pri10	components\device\nrf51_bitfields.h	238;"	d
AMLI_RAMPRI_CPU0_RAM7_Pri12	components\device\nrf51_bitfields.h	239;"	d
AMLI_RAMPRI_CPU0_RAM7_Pri14	components\device\nrf51_bitfields.h	240;"	d
AMLI_RAMPRI_CPU0_RAM7_Pri2	components\device\nrf51_bitfields.h	234;"	d
AMLI_RAMPRI_CPU0_RAM7_Pri4	components\device\nrf51_bitfields.h	235;"	d
AMLI_RAMPRI_CPU0_RAM7_Pri6	components\device\nrf51_bitfields.h	236;"	d
AMLI_RAMPRI_CPU0_RAM7_Pri8	components\device\nrf51_bitfields.h	237;"	d
AMLI_RAMPRI_ECB_RAM0_Msk	components\device\nrf51_bitfields.h	613;"	d
AMLI_RAMPRI_ECB_RAM0_Pos	components\device\nrf51_bitfields.h	612;"	d
AMLI_RAMPRI_ECB_RAM0_Pri0	components\device\nrf51_bitfields.h	614;"	d
AMLI_RAMPRI_ECB_RAM0_Pri10	components\device\nrf51_bitfields.h	619;"	d
AMLI_RAMPRI_ECB_RAM0_Pri12	components\device\nrf51_bitfields.h	620;"	d
AMLI_RAMPRI_ECB_RAM0_Pri14	components\device\nrf51_bitfields.h	621;"	d
AMLI_RAMPRI_ECB_RAM0_Pri2	components\device\nrf51_bitfields.h	615;"	d
AMLI_RAMPRI_ECB_RAM0_Pri4	components\device\nrf51_bitfields.h	616;"	d
AMLI_RAMPRI_ECB_RAM0_Pri6	components\device\nrf51_bitfields.h	617;"	d
AMLI_RAMPRI_ECB_RAM0_Pri8	components\device\nrf51_bitfields.h	618;"	d
AMLI_RAMPRI_ECB_RAM1_Msk	components\device\nrf51_bitfields.h	601;"	d
AMLI_RAMPRI_ECB_RAM1_Pos	components\device\nrf51_bitfields.h	600;"	d
AMLI_RAMPRI_ECB_RAM1_Pri0	components\device\nrf51_bitfields.h	602;"	d
AMLI_RAMPRI_ECB_RAM1_Pri10	components\device\nrf51_bitfields.h	607;"	d
AMLI_RAMPRI_ECB_RAM1_Pri12	components\device\nrf51_bitfields.h	608;"	d
AMLI_RAMPRI_ECB_RAM1_Pri14	components\device\nrf51_bitfields.h	609;"	d
AMLI_RAMPRI_ECB_RAM1_Pri2	components\device\nrf51_bitfields.h	603;"	d
AMLI_RAMPRI_ECB_RAM1_Pri4	components\device\nrf51_bitfields.h	604;"	d
AMLI_RAMPRI_ECB_RAM1_Pri6	components\device\nrf51_bitfields.h	605;"	d
AMLI_RAMPRI_ECB_RAM1_Pri8	components\device\nrf51_bitfields.h	606;"	d
AMLI_RAMPRI_ECB_RAM2_Msk	components\device\nrf51_bitfields.h	589;"	d
AMLI_RAMPRI_ECB_RAM2_Pos	components\device\nrf51_bitfields.h	588;"	d
AMLI_RAMPRI_ECB_RAM2_Pri0	components\device\nrf51_bitfields.h	590;"	d
AMLI_RAMPRI_ECB_RAM2_Pri10	components\device\nrf51_bitfields.h	595;"	d
AMLI_RAMPRI_ECB_RAM2_Pri12	components\device\nrf51_bitfields.h	596;"	d
AMLI_RAMPRI_ECB_RAM2_Pri14	components\device\nrf51_bitfields.h	597;"	d
AMLI_RAMPRI_ECB_RAM2_Pri2	components\device\nrf51_bitfields.h	591;"	d
AMLI_RAMPRI_ECB_RAM2_Pri4	components\device\nrf51_bitfields.h	592;"	d
AMLI_RAMPRI_ECB_RAM2_Pri6	components\device\nrf51_bitfields.h	593;"	d
AMLI_RAMPRI_ECB_RAM2_Pri8	components\device\nrf51_bitfields.h	594;"	d
AMLI_RAMPRI_ECB_RAM3_Msk	components\device\nrf51_bitfields.h	577;"	d
AMLI_RAMPRI_ECB_RAM3_Pos	components\device\nrf51_bitfields.h	576;"	d
AMLI_RAMPRI_ECB_RAM3_Pri0	components\device\nrf51_bitfields.h	578;"	d
AMLI_RAMPRI_ECB_RAM3_Pri10	components\device\nrf51_bitfields.h	583;"	d
AMLI_RAMPRI_ECB_RAM3_Pri12	components\device\nrf51_bitfields.h	584;"	d
AMLI_RAMPRI_ECB_RAM3_Pri14	components\device\nrf51_bitfields.h	585;"	d
AMLI_RAMPRI_ECB_RAM3_Pri2	components\device\nrf51_bitfields.h	579;"	d
AMLI_RAMPRI_ECB_RAM3_Pri4	components\device\nrf51_bitfields.h	580;"	d
AMLI_RAMPRI_ECB_RAM3_Pri6	components\device\nrf51_bitfields.h	581;"	d
AMLI_RAMPRI_ECB_RAM3_Pri8	components\device\nrf51_bitfields.h	582;"	d
AMLI_RAMPRI_ECB_RAM4_Msk	components\device\nrf51_bitfields.h	565;"	d
AMLI_RAMPRI_ECB_RAM4_Pos	components\device\nrf51_bitfields.h	564;"	d
AMLI_RAMPRI_ECB_RAM4_Pri0	components\device\nrf51_bitfields.h	566;"	d
AMLI_RAMPRI_ECB_RAM4_Pri10	components\device\nrf51_bitfields.h	571;"	d
AMLI_RAMPRI_ECB_RAM4_Pri12	components\device\nrf51_bitfields.h	572;"	d
AMLI_RAMPRI_ECB_RAM4_Pri14	components\device\nrf51_bitfields.h	573;"	d
AMLI_RAMPRI_ECB_RAM4_Pri2	components\device\nrf51_bitfields.h	567;"	d
AMLI_RAMPRI_ECB_RAM4_Pri4	components\device\nrf51_bitfields.h	568;"	d
AMLI_RAMPRI_ECB_RAM4_Pri6	components\device\nrf51_bitfields.h	569;"	d
AMLI_RAMPRI_ECB_RAM4_Pri8	components\device\nrf51_bitfields.h	570;"	d
AMLI_RAMPRI_ECB_RAM5_Msk	components\device\nrf51_bitfields.h	553;"	d
AMLI_RAMPRI_ECB_RAM5_Pos	components\device\nrf51_bitfields.h	552;"	d
AMLI_RAMPRI_ECB_RAM5_Pri0	components\device\nrf51_bitfields.h	554;"	d
AMLI_RAMPRI_ECB_RAM5_Pri10	components\device\nrf51_bitfields.h	559;"	d
AMLI_RAMPRI_ECB_RAM5_Pri12	components\device\nrf51_bitfields.h	560;"	d
AMLI_RAMPRI_ECB_RAM5_Pri14	components\device\nrf51_bitfields.h	561;"	d
AMLI_RAMPRI_ECB_RAM5_Pri2	components\device\nrf51_bitfields.h	555;"	d
AMLI_RAMPRI_ECB_RAM5_Pri4	components\device\nrf51_bitfields.h	556;"	d
AMLI_RAMPRI_ECB_RAM5_Pri6	components\device\nrf51_bitfields.h	557;"	d
AMLI_RAMPRI_ECB_RAM5_Pri8	components\device\nrf51_bitfields.h	558;"	d
AMLI_RAMPRI_ECB_RAM6_Msk	components\device\nrf51_bitfields.h	541;"	d
AMLI_RAMPRI_ECB_RAM6_Pos	components\device\nrf51_bitfields.h	540;"	d
AMLI_RAMPRI_ECB_RAM6_Pri0	components\device\nrf51_bitfields.h	542;"	d
AMLI_RAMPRI_ECB_RAM6_Pri10	components\device\nrf51_bitfields.h	547;"	d
AMLI_RAMPRI_ECB_RAM6_Pri12	components\device\nrf51_bitfields.h	548;"	d
AMLI_RAMPRI_ECB_RAM6_Pri14	components\device\nrf51_bitfields.h	549;"	d
AMLI_RAMPRI_ECB_RAM6_Pri2	components\device\nrf51_bitfields.h	543;"	d
AMLI_RAMPRI_ECB_RAM6_Pri4	components\device\nrf51_bitfields.h	544;"	d
AMLI_RAMPRI_ECB_RAM6_Pri6	components\device\nrf51_bitfields.h	545;"	d
AMLI_RAMPRI_ECB_RAM6_Pri8	components\device\nrf51_bitfields.h	546;"	d
AMLI_RAMPRI_ECB_RAM7_Msk	components\device\nrf51_bitfields.h	529;"	d
AMLI_RAMPRI_ECB_RAM7_Pos	components\device\nrf51_bitfields.h	528;"	d
AMLI_RAMPRI_ECB_RAM7_Pri0	components\device\nrf51_bitfields.h	530;"	d
AMLI_RAMPRI_ECB_RAM7_Pri10	components\device\nrf51_bitfields.h	535;"	d
AMLI_RAMPRI_ECB_RAM7_Pri12	components\device\nrf51_bitfields.h	536;"	d
AMLI_RAMPRI_ECB_RAM7_Pri14	components\device\nrf51_bitfields.h	537;"	d
AMLI_RAMPRI_ECB_RAM7_Pri2	components\device\nrf51_bitfields.h	531;"	d
AMLI_RAMPRI_ECB_RAM7_Pri4	components\device\nrf51_bitfields.h	532;"	d
AMLI_RAMPRI_ECB_RAM7_Pri6	components\device\nrf51_bitfields.h	533;"	d
AMLI_RAMPRI_ECB_RAM7_Pri8	components\device\nrf51_bitfields.h	534;"	d
AMLI_RAMPRI_RADIO_RAM0_Msk	components\device\nrf51_bitfields.h	514;"	d
AMLI_RAMPRI_RADIO_RAM0_Pos	components\device\nrf51_bitfields.h	513;"	d
AMLI_RAMPRI_RADIO_RAM0_Pri0	components\device\nrf51_bitfields.h	515;"	d
AMLI_RAMPRI_RADIO_RAM0_Pri10	components\device\nrf51_bitfields.h	520;"	d
AMLI_RAMPRI_RADIO_RAM0_Pri12	components\device\nrf51_bitfields.h	521;"	d
AMLI_RAMPRI_RADIO_RAM0_Pri14	components\device\nrf51_bitfields.h	522;"	d
AMLI_RAMPRI_RADIO_RAM0_Pri2	components\device\nrf51_bitfields.h	516;"	d
AMLI_RAMPRI_RADIO_RAM0_Pri4	components\device\nrf51_bitfields.h	517;"	d
AMLI_RAMPRI_RADIO_RAM0_Pri6	components\device\nrf51_bitfields.h	518;"	d
AMLI_RAMPRI_RADIO_RAM0_Pri8	components\device\nrf51_bitfields.h	519;"	d
AMLI_RAMPRI_RADIO_RAM1_Msk	components\device\nrf51_bitfields.h	502;"	d
AMLI_RAMPRI_RADIO_RAM1_Pos	components\device\nrf51_bitfields.h	501;"	d
AMLI_RAMPRI_RADIO_RAM1_Pri0	components\device\nrf51_bitfields.h	503;"	d
AMLI_RAMPRI_RADIO_RAM1_Pri10	components\device\nrf51_bitfields.h	508;"	d
AMLI_RAMPRI_RADIO_RAM1_Pri12	components\device\nrf51_bitfields.h	509;"	d
AMLI_RAMPRI_RADIO_RAM1_Pri14	components\device\nrf51_bitfields.h	510;"	d
AMLI_RAMPRI_RADIO_RAM1_Pri2	components\device\nrf51_bitfields.h	504;"	d
AMLI_RAMPRI_RADIO_RAM1_Pri4	components\device\nrf51_bitfields.h	505;"	d
AMLI_RAMPRI_RADIO_RAM1_Pri6	components\device\nrf51_bitfields.h	506;"	d
AMLI_RAMPRI_RADIO_RAM1_Pri8	components\device\nrf51_bitfields.h	507;"	d
AMLI_RAMPRI_RADIO_RAM2_Msk	components\device\nrf51_bitfields.h	490;"	d
AMLI_RAMPRI_RADIO_RAM2_Pos	components\device\nrf51_bitfields.h	489;"	d
AMLI_RAMPRI_RADIO_RAM2_Pri0	components\device\nrf51_bitfields.h	491;"	d
AMLI_RAMPRI_RADIO_RAM2_Pri10	components\device\nrf51_bitfields.h	496;"	d
AMLI_RAMPRI_RADIO_RAM2_Pri12	components\device\nrf51_bitfields.h	497;"	d
AMLI_RAMPRI_RADIO_RAM2_Pri14	components\device\nrf51_bitfields.h	498;"	d
AMLI_RAMPRI_RADIO_RAM2_Pri2	components\device\nrf51_bitfields.h	492;"	d
AMLI_RAMPRI_RADIO_RAM2_Pri4	components\device\nrf51_bitfields.h	493;"	d
AMLI_RAMPRI_RADIO_RAM2_Pri6	components\device\nrf51_bitfields.h	494;"	d
AMLI_RAMPRI_RADIO_RAM2_Pri8	components\device\nrf51_bitfields.h	495;"	d
AMLI_RAMPRI_RADIO_RAM3_Msk	components\device\nrf51_bitfields.h	478;"	d
AMLI_RAMPRI_RADIO_RAM3_Pos	components\device\nrf51_bitfields.h	477;"	d
AMLI_RAMPRI_RADIO_RAM3_Pri0	components\device\nrf51_bitfields.h	479;"	d
AMLI_RAMPRI_RADIO_RAM3_Pri10	components\device\nrf51_bitfields.h	484;"	d
AMLI_RAMPRI_RADIO_RAM3_Pri12	components\device\nrf51_bitfields.h	485;"	d
AMLI_RAMPRI_RADIO_RAM3_Pri14	components\device\nrf51_bitfields.h	486;"	d
AMLI_RAMPRI_RADIO_RAM3_Pri2	components\device\nrf51_bitfields.h	480;"	d
AMLI_RAMPRI_RADIO_RAM3_Pri4	components\device\nrf51_bitfields.h	481;"	d
AMLI_RAMPRI_RADIO_RAM3_Pri6	components\device\nrf51_bitfields.h	482;"	d
AMLI_RAMPRI_RADIO_RAM3_Pri8	components\device\nrf51_bitfields.h	483;"	d
AMLI_RAMPRI_RADIO_RAM4_Msk	components\device\nrf51_bitfields.h	466;"	d
AMLI_RAMPRI_RADIO_RAM4_Pos	components\device\nrf51_bitfields.h	465;"	d
AMLI_RAMPRI_RADIO_RAM4_Pri0	components\device\nrf51_bitfields.h	467;"	d
AMLI_RAMPRI_RADIO_RAM4_Pri10	components\device\nrf51_bitfields.h	472;"	d
AMLI_RAMPRI_RADIO_RAM4_Pri12	components\device\nrf51_bitfields.h	473;"	d
AMLI_RAMPRI_RADIO_RAM4_Pri14	components\device\nrf51_bitfields.h	474;"	d
AMLI_RAMPRI_RADIO_RAM4_Pri2	components\device\nrf51_bitfields.h	468;"	d
AMLI_RAMPRI_RADIO_RAM4_Pri4	components\device\nrf51_bitfields.h	469;"	d
AMLI_RAMPRI_RADIO_RAM4_Pri6	components\device\nrf51_bitfields.h	470;"	d
AMLI_RAMPRI_RADIO_RAM4_Pri8	components\device\nrf51_bitfields.h	471;"	d
AMLI_RAMPRI_RADIO_RAM5_Msk	components\device\nrf51_bitfields.h	454;"	d
AMLI_RAMPRI_RADIO_RAM5_Pos	components\device\nrf51_bitfields.h	453;"	d
AMLI_RAMPRI_RADIO_RAM5_Pri0	components\device\nrf51_bitfields.h	455;"	d
AMLI_RAMPRI_RADIO_RAM5_Pri10	components\device\nrf51_bitfields.h	460;"	d
AMLI_RAMPRI_RADIO_RAM5_Pri12	components\device\nrf51_bitfields.h	461;"	d
AMLI_RAMPRI_RADIO_RAM5_Pri14	components\device\nrf51_bitfields.h	462;"	d
AMLI_RAMPRI_RADIO_RAM5_Pri2	components\device\nrf51_bitfields.h	456;"	d
AMLI_RAMPRI_RADIO_RAM5_Pri4	components\device\nrf51_bitfields.h	457;"	d
AMLI_RAMPRI_RADIO_RAM5_Pri6	components\device\nrf51_bitfields.h	458;"	d
AMLI_RAMPRI_RADIO_RAM5_Pri8	components\device\nrf51_bitfields.h	459;"	d
AMLI_RAMPRI_RADIO_RAM6_Msk	components\device\nrf51_bitfields.h	442;"	d
AMLI_RAMPRI_RADIO_RAM6_Pos	components\device\nrf51_bitfields.h	441;"	d
AMLI_RAMPRI_RADIO_RAM6_Pri0	components\device\nrf51_bitfields.h	443;"	d
AMLI_RAMPRI_RADIO_RAM6_Pri10	components\device\nrf51_bitfields.h	448;"	d
AMLI_RAMPRI_RADIO_RAM6_Pri12	components\device\nrf51_bitfields.h	449;"	d
AMLI_RAMPRI_RADIO_RAM6_Pri14	components\device\nrf51_bitfields.h	450;"	d
AMLI_RAMPRI_RADIO_RAM6_Pri2	components\device\nrf51_bitfields.h	444;"	d
AMLI_RAMPRI_RADIO_RAM6_Pri4	components\device\nrf51_bitfields.h	445;"	d
AMLI_RAMPRI_RADIO_RAM6_Pri6	components\device\nrf51_bitfields.h	446;"	d
AMLI_RAMPRI_RADIO_RAM6_Pri8	components\device\nrf51_bitfields.h	447;"	d
AMLI_RAMPRI_RADIO_RAM7_Msk	components\device\nrf51_bitfields.h	430;"	d
AMLI_RAMPRI_RADIO_RAM7_Pos	components\device\nrf51_bitfields.h	429;"	d
AMLI_RAMPRI_RADIO_RAM7_Pri0	components\device\nrf51_bitfields.h	431;"	d
AMLI_RAMPRI_RADIO_RAM7_Pri10	components\device\nrf51_bitfields.h	436;"	d
AMLI_RAMPRI_RADIO_RAM7_Pri12	components\device\nrf51_bitfields.h	437;"	d
AMLI_RAMPRI_RADIO_RAM7_Pri14	components\device\nrf51_bitfields.h	438;"	d
AMLI_RAMPRI_RADIO_RAM7_Pri2	components\device\nrf51_bitfields.h	432;"	d
AMLI_RAMPRI_RADIO_RAM7_Pri4	components\device\nrf51_bitfields.h	433;"	d
AMLI_RAMPRI_RADIO_RAM7_Pri6	components\device\nrf51_bitfields.h	434;"	d
AMLI_RAMPRI_RADIO_RAM7_Pri8	components\device\nrf51_bitfields.h	435;"	d
AMLI_RAMPRI_SPIS1_RAM0_Msk	components\device\nrf51_bitfields.h	415;"	d
AMLI_RAMPRI_SPIS1_RAM0_Pos	components\device\nrf51_bitfields.h	414;"	d
AMLI_RAMPRI_SPIS1_RAM0_Pri0	components\device\nrf51_bitfields.h	416;"	d
AMLI_RAMPRI_SPIS1_RAM0_Pri10	components\device\nrf51_bitfields.h	421;"	d
AMLI_RAMPRI_SPIS1_RAM0_Pri12	components\device\nrf51_bitfields.h	422;"	d
AMLI_RAMPRI_SPIS1_RAM0_Pri14	components\device\nrf51_bitfields.h	423;"	d
AMLI_RAMPRI_SPIS1_RAM0_Pri2	components\device\nrf51_bitfields.h	417;"	d
AMLI_RAMPRI_SPIS1_RAM0_Pri4	components\device\nrf51_bitfields.h	418;"	d
AMLI_RAMPRI_SPIS1_RAM0_Pri6	components\device\nrf51_bitfields.h	419;"	d
AMLI_RAMPRI_SPIS1_RAM0_Pri8	components\device\nrf51_bitfields.h	420;"	d
AMLI_RAMPRI_SPIS1_RAM1_Msk	components\device\nrf51_bitfields.h	403;"	d
AMLI_RAMPRI_SPIS1_RAM1_Pos	components\device\nrf51_bitfields.h	402;"	d
AMLI_RAMPRI_SPIS1_RAM1_Pri0	components\device\nrf51_bitfields.h	404;"	d
AMLI_RAMPRI_SPIS1_RAM1_Pri10	components\device\nrf51_bitfields.h	409;"	d
AMLI_RAMPRI_SPIS1_RAM1_Pri12	components\device\nrf51_bitfields.h	410;"	d
AMLI_RAMPRI_SPIS1_RAM1_Pri14	components\device\nrf51_bitfields.h	411;"	d
AMLI_RAMPRI_SPIS1_RAM1_Pri2	components\device\nrf51_bitfields.h	405;"	d
AMLI_RAMPRI_SPIS1_RAM1_Pri4	components\device\nrf51_bitfields.h	406;"	d
AMLI_RAMPRI_SPIS1_RAM1_Pri6	components\device\nrf51_bitfields.h	407;"	d
AMLI_RAMPRI_SPIS1_RAM1_Pri8	components\device\nrf51_bitfields.h	408;"	d
AMLI_RAMPRI_SPIS1_RAM2_Msk	components\device\nrf51_bitfields.h	391;"	d
AMLI_RAMPRI_SPIS1_RAM2_Pos	components\device\nrf51_bitfields.h	390;"	d
AMLI_RAMPRI_SPIS1_RAM2_Pri0	components\device\nrf51_bitfields.h	392;"	d
AMLI_RAMPRI_SPIS1_RAM2_Pri10	components\device\nrf51_bitfields.h	397;"	d
AMLI_RAMPRI_SPIS1_RAM2_Pri12	components\device\nrf51_bitfields.h	398;"	d
AMLI_RAMPRI_SPIS1_RAM2_Pri14	components\device\nrf51_bitfields.h	399;"	d
AMLI_RAMPRI_SPIS1_RAM2_Pri2	components\device\nrf51_bitfields.h	393;"	d
AMLI_RAMPRI_SPIS1_RAM2_Pri4	components\device\nrf51_bitfields.h	394;"	d
AMLI_RAMPRI_SPIS1_RAM2_Pri6	components\device\nrf51_bitfields.h	395;"	d
AMLI_RAMPRI_SPIS1_RAM2_Pri8	components\device\nrf51_bitfields.h	396;"	d
AMLI_RAMPRI_SPIS1_RAM3_Msk	components\device\nrf51_bitfields.h	379;"	d
AMLI_RAMPRI_SPIS1_RAM3_Pos	components\device\nrf51_bitfields.h	378;"	d
AMLI_RAMPRI_SPIS1_RAM3_Pri0	components\device\nrf51_bitfields.h	380;"	d
AMLI_RAMPRI_SPIS1_RAM3_Pri10	components\device\nrf51_bitfields.h	385;"	d
AMLI_RAMPRI_SPIS1_RAM3_Pri12	components\device\nrf51_bitfields.h	386;"	d
AMLI_RAMPRI_SPIS1_RAM3_Pri14	components\device\nrf51_bitfields.h	387;"	d
AMLI_RAMPRI_SPIS1_RAM3_Pri2	components\device\nrf51_bitfields.h	381;"	d
AMLI_RAMPRI_SPIS1_RAM3_Pri4	components\device\nrf51_bitfields.h	382;"	d
AMLI_RAMPRI_SPIS1_RAM3_Pri6	components\device\nrf51_bitfields.h	383;"	d
AMLI_RAMPRI_SPIS1_RAM3_Pri8	components\device\nrf51_bitfields.h	384;"	d
AMLI_RAMPRI_SPIS1_RAM4_Msk	components\device\nrf51_bitfields.h	367;"	d
AMLI_RAMPRI_SPIS1_RAM4_Pos	components\device\nrf51_bitfields.h	366;"	d
AMLI_RAMPRI_SPIS1_RAM4_Pri0	components\device\nrf51_bitfields.h	368;"	d
AMLI_RAMPRI_SPIS1_RAM4_Pri10	components\device\nrf51_bitfields.h	373;"	d
AMLI_RAMPRI_SPIS1_RAM4_Pri12	components\device\nrf51_bitfields.h	374;"	d
AMLI_RAMPRI_SPIS1_RAM4_Pri14	components\device\nrf51_bitfields.h	375;"	d
AMLI_RAMPRI_SPIS1_RAM4_Pri2	components\device\nrf51_bitfields.h	369;"	d
AMLI_RAMPRI_SPIS1_RAM4_Pri4	components\device\nrf51_bitfields.h	370;"	d
AMLI_RAMPRI_SPIS1_RAM4_Pri6	components\device\nrf51_bitfields.h	371;"	d
AMLI_RAMPRI_SPIS1_RAM4_Pri8	components\device\nrf51_bitfields.h	372;"	d
AMLI_RAMPRI_SPIS1_RAM5_Msk	components\device\nrf51_bitfields.h	355;"	d
AMLI_RAMPRI_SPIS1_RAM5_Pos	components\device\nrf51_bitfields.h	354;"	d
AMLI_RAMPRI_SPIS1_RAM5_Pri0	components\device\nrf51_bitfields.h	356;"	d
AMLI_RAMPRI_SPIS1_RAM5_Pri10	components\device\nrf51_bitfields.h	361;"	d
AMLI_RAMPRI_SPIS1_RAM5_Pri12	components\device\nrf51_bitfields.h	362;"	d
AMLI_RAMPRI_SPIS1_RAM5_Pri14	components\device\nrf51_bitfields.h	363;"	d
AMLI_RAMPRI_SPIS1_RAM5_Pri2	components\device\nrf51_bitfields.h	357;"	d
AMLI_RAMPRI_SPIS1_RAM5_Pri4	components\device\nrf51_bitfields.h	358;"	d
AMLI_RAMPRI_SPIS1_RAM5_Pri6	components\device\nrf51_bitfields.h	359;"	d
AMLI_RAMPRI_SPIS1_RAM5_Pri8	components\device\nrf51_bitfields.h	360;"	d
AMLI_RAMPRI_SPIS1_RAM6_Msk	components\device\nrf51_bitfields.h	343;"	d
AMLI_RAMPRI_SPIS1_RAM6_Pos	components\device\nrf51_bitfields.h	342;"	d
AMLI_RAMPRI_SPIS1_RAM6_Pri0	components\device\nrf51_bitfields.h	344;"	d
AMLI_RAMPRI_SPIS1_RAM6_Pri10	components\device\nrf51_bitfields.h	349;"	d
AMLI_RAMPRI_SPIS1_RAM6_Pri12	components\device\nrf51_bitfields.h	350;"	d
AMLI_RAMPRI_SPIS1_RAM6_Pri14	components\device\nrf51_bitfields.h	351;"	d
AMLI_RAMPRI_SPIS1_RAM6_Pri2	components\device\nrf51_bitfields.h	345;"	d
AMLI_RAMPRI_SPIS1_RAM6_Pri4	components\device\nrf51_bitfields.h	346;"	d
AMLI_RAMPRI_SPIS1_RAM6_Pri6	components\device\nrf51_bitfields.h	347;"	d
AMLI_RAMPRI_SPIS1_RAM6_Pri8	components\device\nrf51_bitfields.h	348;"	d
AMLI_RAMPRI_SPIS1_RAM7_Msk	components\device\nrf51_bitfields.h	331;"	d
AMLI_RAMPRI_SPIS1_RAM7_Pos	components\device\nrf51_bitfields.h	330;"	d
AMLI_RAMPRI_SPIS1_RAM7_Pri0	components\device\nrf51_bitfields.h	332;"	d
AMLI_RAMPRI_SPIS1_RAM7_Pri10	components\device\nrf51_bitfields.h	337;"	d
AMLI_RAMPRI_SPIS1_RAM7_Pri12	components\device\nrf51_bitfields.h	338;"	d
AMLI_RAMPRI_SPIS1_RAM7_Pri14	components\device\nrf51_bitfields.h	339;"	d
AMLI_RAMPRI_SPIS1_RAM7_Pri2	components\device\nrf51_bitfields.h	333;"	d
AMLI_RAMPRI_SPIS1_RAM7_Pri4	components\device\nrf51_bitfields.h	334;"	d
AMLI_RAMPRI_SPIS1_RAM7_Pri6	components\device\nrf51_bitfields.h	335;"	d
AMLI_RAMPRI_SPIS1_RAM7_Pri8	components\device\nrf51_bitfields.h	336;"	d
CCM_ENABLE_ENABLE_Disabled	components\device\nrf51_bitfields.h	897;"	d
CCM_ENABLE_ENABLE_Enabled	components\device\nrf51_bitfields.h	898;"	d
CCM_ENABLE_ENABLE_Msk	components\device\nrf51_bitfields.h	896;"	d
CCM_ENABLE_ENABLE_Pos	components\device\nrf51_bitfields.h	895;"	d
CCM_INTENCLR_ENDCRYPT_Clear	components\device\nrf51_bitfields.h	873;"	d
CCM_INTENCLR_ENDCRYPT_Disabled	components\device\nrf51_bitfields.h	871;"	d
CCM_INTENCLR_ENDCRYPT_Enabled	components\device\nrf51_bitfields.h	872;"	d
CCM_INTENCLR_ENDCRYPT_Msk	components\device\nrf51_bitfields.h	870;"	d
CCM_INTENCLR_ENDCRYPT_Pos	components\device\nrf51_bitfields.h	869;"	d
CCM_INTENCLR_ENDKSGEN_Clear	components\device\nrf51_bitfields.h	880;"	d
CCM_INTENCLR_ENDKSGEN_Disabled	components\device\nrf51_bitfields.h	878;"	d
CCM_INTENCLR_ENDKSGEN_Enabled	components\device\nrf51_bitfields.h	879;"	d
CCM_INTENCLR_ENDKSGEN_Msk	components\device\nrf51_bitfields.h	877;"	d
CCM_INTENCLR_ENDKSGEN_Pos	components\device\nrf51_bitfields.h	876;"	d
CCM_INTENCLR_ERROR_Clear	components\device\nrf51_bitfields.h	866;"	d
CCM_INTENCLR_ERROR_Disabled	components\device\nrf51_bitfields.h	864;"	d
CCM_INTENCLR_ERROR_Enabled	components\device\nrf51_bitfields.h	865;"	d
CCM_INTENCLR_ERROR_Msk	components\device\nrf51_bitfields.h	863;"	d
CCM_INTENCLR_ERROR_Pos	components\device\nrf51_bitfields.h	862;"	d
CCM_INTENSET_ENDCRYPT_Disabled	components\device\nrf51_bitfields.h	847;"	d
CCM_INTENSET_ENDCRYPT_Enabled	components\device\nrf51_bitfields.h	848;"	d
CCM_INTENSET_ENDCRYPT_Msk	components\device\nrf51_bitfields.h	846;"	d
CCM_INTENSET_ENDCRYPT_Pos	components\device\nrf51_bitfields.h	845;"	d
CCM_INTENSET_ENDCRYPT_Set	components\device\nrf51_bitfields.h	849;"	d
CCM_INTENSET_ENDKSGEN_Disabled	components\device\nrf51_bitfields.h	854;"	d
CCM_INTENSET_ENDKSGEN_Enabled	components\device\nrf51_bitfields.h	855;"	d
CCM_INTENSET_ENDKSGEN_Msk	components\device\nrf51_bitfields.h	853;"	d
CCM_INTENSET_ENDKSGEN_Pos	components\device\nrf51_bitfields.h	852;"	d
CCM_INTENSET_ENDKSGEN_Set	components\device\nrf51_bitfields.h	856;"	d
CCM_INTENSET_ERROR_Disabled	components\device\nrf51_bitfields.h	840;"	d
CCM_INTENSET_ERROR_Enabled	components\device\nrf51_bitfields.h	841;"	d
CCM_INTENSET_ERROR_Msk	components\device\nrf51_bitfields.h	839;"	d
CCM_INTENSET_ERROR_Pos	components\device\nrf51_bitfields.h	838;"	d
CCM_INTENSET_ERROR_Set	components\device\nrf51_bitfields.h	842;"	d
CCM_MICSTATUS_MICSTATUS_CheckFailed	components\device\nrf51_bitfields.h	888;"	d
CCM_MICSTATUS_MICSTATUS_CheckPassed	components\device\nrf51_bitfields.h	889;"	d
CCM_MICSTATUS_MICSTATUS_Msk	components\device\nrf51_bitfields.h	887;"	d
CCM_MICSTATUS_MICSTATUS_Pos	components\device\nrf51_bitfields.h	886;"	d
CCM_MODE_MODE_Decryption	components\device\nrf51_bitfields.h	907;"	d
CCM_MODE_MODE_Encryption	components\device\nrf51_bitfields.h	906;"	d
CCM_MODE_MODE_Msk	components\device\nrf51_bitfields.h	905;"	d
CCM_MODE_MODE_Pos	components\device\nrf51_bitfields.h	904;"	d
CCM_POWER_POWER_Disabled	components\device\nrf51_bitfields.h	915;"	d
CCM_POWER_POWER_Enabled	components\device\nrf51_bitfields.h	916;"	d
CCM_POWER_POWER_Msk	components\device\nrf51_bitfields.h	914;"	d
CCM_POWER_POWER_Pos	components\device\nrf51_bitfields.h	913;"	d
CCM_SHORTS_ENDKSGEN_CRYPT_Disabled	components\device\nrf51_bitfields.h	831;"	d
CCM_SHORTS_ENDKSGEN_CRYPT_Enabled	components\device\nrf51_bitfields.h	832;"	d
CCM_SHORTS_ENDKSGEN_CRYPT_Msk	components\device\nrf51_bitfields.h	830;"	d
CCM_SHORTS_ENDKSGEN_CRYPT_Pos	components\device\nrf51_bitfields.h	829;"	d
CLOCK_CTIV_CTIV_Msk	components\device\nrf51_bitfields.h	1058;"	d
CLOCK_CTIV_CTIV_Pos	components\device\nrf51_bitfields.h	1057;"	d
CLOCK_HFCLKRUN_STATUS_Msk	components\device\nrf51_bitfields.h	989;"	d
CLOCK_HFCLKRUN_STATUS_NotTriggered	components\device\nrf51_bitfields.h	990;"	d
CLOCK_HFCLKRUN_STATUS_Pos	components\device\nrf51_bitfields.h	988;"	d
CLOCK_HFCLKRUN_STATUS_Triggered	components\device\nrf51_bitfields.h	991;"	d
CLOCK_HFCLKSTAT_SRC_Msk	components\device\nrf51_bitfields.h	1004;"	d
CLOCK_HFCLKSTAT_SRC_Pos	components\device\nrf51_bitfields.h	1003;"	d
CLOCK_HFCLKSTAT_SRC_RC	components\device\nrf51_bitfields.h	1005;"	d
CLOCK_HFCLKSTAT_SRC_Xtal	components\device\nrf51_bitfields.h	1006;"	d
CLOCK_HFCLKSTAT_STATE_Msk	components\device\nrf51_bitfields.h	998;"	d
CLOCK_HFCLKSTAT_STATE_NotRunning	components\device\nrf51_bitfields.h	999;"	d
CLOCK_HFCLKSTAT_STATE_Pos	components\device\nrf51_bitfields.h	997;"	d
CLOCK_HFCLKSTAT_STATE_Running	components\device\nrf51_bitfields.h	1000;"	d
CLOCK_INTENCLR_CTTO_Clear	components\device\nrf51_bitfields.h	961;"	d
CLOCK_INTENCLR_CTTO_Disabled	components\device\nrf51_bitfields.h	959;"	d
CLOCK_INTENCLR_CTTO_Enabled	components\device\nrf51_bitfields.h	960;"	d
CLOCK_INTENCLR_CTTO_Msk	components\device\nrf51_bitfields.h	958;"	d
CLOCK_INTENCLR_CTTO_Pos	components\device\nrf51_bitfields.h	957;"	d
CLOCK_INTENCLR_DONE_Clear	components\device\nrf51_bitfields.h	968;"	d
CLOCK_INTENCLR_DONE_Disabled	components\device\nrf51_bitfields.h	966;"	d
CLOCK_INTENCLR_DONE_Enabled	components\device\nrf51_bitfields.h	967;"	d
CLOCK_INTENCLR_DONE_Msk	components\device\nrf51_bitfields.h	965;"	d
CLOCK_INTENCLR_DONE_Pos	components\device\nrf51_bitfields.h	964;"	d
CLOCK_INTENCLR_HFCLKSTARTED_Clear	components\device\nrf51_bitfields.h	982;"	d
CLOCK_INTENCLR_HFCLKSTARTED_Disabled	components\device\nrf51_bitfields.h	980;"	d
CLOCK_INTENCLR_HFCLKSTARTED_Enabled	components\device\nrf51_bitfields.h	981;"	d
CLOCK_INTENCLR_HFCLKSTARTED_Msk	components\device\nrf51_bitfields.h	979;"	d
CLOCK_INTENCLR_HFCLKSTARTED_Pos	components\device\nrf51_bitfields.h	978;"	d
CLOCK_INTENCLR_LFCLKSTARTED_Clear	components\device\nrf51_bitfields.h	975;"	d
CLOCK_INTENCLR_LFCLKSTARTED_Disabled	components\device\nrf51_bitfields.h	973;"	d
CLOCK_INTENCLR_LFCLKSTARTED_Enabled	components\device\nrf51_bitfields.h	974;"	d
CLOCK_INTENCLR_LFCLKSTARTED_Msk	components\device\nrf51_bitfields.h	972;"	d
CLOCK_INTENCLR_LFCLKSTARTED_Pos	components\device\nrf51_bitfields.h	971;"	d
CLOCK_INTENSET_CTTO_Disabled	components\device\nrf51_bitfields.h	928;"	d
CLOCK_INTENSET_CTTO_Enabled	components\device\nrf51_bitfields.h	929;"	d
CLOCK_INTENSET_CTTO_Msk	components\device\nrf51_bitfields.h	927;"	d
CLOCK_INTENSET_CTTO_Pos	components\device\nrf51_bitfields.h	926;"	d
CLOCK_INTENSET_CTTO_Set	components\device\nrf51_bitfields.h	930;"	d
CLOCK_INTENSET_DONE_Disabled	components\device\nrf51_bitfields.h	935;"	d
CLOCK_INTENSET_DONE_Enabled	components\device\nrf51_bitfields.h	936;"	d
CLOCK_INTENSET_DONE_Msk	components\device\nrf51_bitfields.h	934;"	d
CLOCK_INTENSET_DONE_Pos	components\device\nrf51_bitfields.h	933;"	d
CLOCK_INTENSET_DONE_Set	components\device\nrf51_bitfields.h	937;"	d
CLOCK_INTENSET_HFCLKSTARTED_Disabled	components\device\nrf51_bitfields.h	949;"	d
CLOCK_INTENSET_HFCLKSTARTED_Enabled	components\device\nrf51_bitfields.h	950;"	d
CLOCK_INTENSET_HFCLKSTARTED_Msk	components\device\nrf51_bitfields.h	948;"	d
CLOCK_INTENSET_HFCLKSTARTED_Pos	components\device\nrf51_bitfields.h	947;"	d
CLOCK_INTENSET_HFCLKSTARTED_Set	components\device\nrf51_bitfields.h	951;"	d
CLOCK_INTENSET_LFCLKSTARTED_Disabled	components\device\nrf51_bitfields.h	942;"	d
CLOCK_INTENSET_LFCLKSTARTED_Enabled	components\device\nrf51_bitfields.h	943;"	d
CLOCK_INTENSET_LFCLKSTARTED_Msk	components\device\nrf51_bitfields.h	941;"	d
CLOCK_INTENSET_LFCLKSTARTED_Pos	components\device\nrf51_bitfields.h	940;"	d
CLOCK_INTENSET_LFCLKSTARTED_Set	components\device\nrf51_bitfields.h	944;"	d
CLOCK_LFCLKRUN_STATUS_Msk	components\device\nrf51_bitfields.h	1013;"	d
CLOCK_LFCLKRUN_STATUS_NotTriggered	components\device\nrf51_bitfields.h	1014;"	d
CLOCK_LFCLKRUN_STATUS_Pos	components\device\nrf51_bitfields.h	1012;"	d
CLOCK_LFCLKRUN_STATUS_Triggered	components\device\nrf51_bitfields.h	1015;"	d
CLOCK_LFCLKSRCCOPY_SRC_Msk	components\device\nrf51_bitfields.h	1038;"	d
CLOCK_LFCLKSRCCOPY_SRC_Pos	components\device\nrf51_bitfields.h	1037;"	d
CLOCK_LFCLKSRCCOPY_SRC_RC	components\device\nrf51_bitfields.h	1039;"	d
CLOCK_LFCLKSRCCOPY_SRC_Synth	components\device\nrf51_bitfields.h	1041;"	d
CLOCK_LFCLKSRCCOPY_SRC_Xtal	components\device\nrf51_bitfields.h	1040;"	d
CLOCK_LFCLKSRC_SRC_Msk	components\device\nrf51_bitfields.h	1048;"	d
CLOCK_LFCLKSRC_SRC_Pos	components\device\nrf51_bitfields.h	1047;"	d
CLOCK_LFCLKSRC_SRC_RC	components\device\nrf51_bitfields.h	1049;"	d
CLOCK_LFCLKSRC_SRC_Synth	components\device\nrf51_bitfields.h	1051;"	d
CLOCK_LFCLKSRC_SRC_Xtal	components\device\nrf51_bitfields.h	1050;"	d
CLOCK_LFCLKSTAT_SRC_Msk	components\device\nrf51_bitfields.h	1028;"	d
CLOCK_LFCLKSTAT_SRC_Pos	components\device\nrf51_bitfields.h	1027;"	d
CLOCK_LFCLKSTAT_SRC_RC	components\device\nrf51_bitfields.h	1029;"	d
CLOCK_LFCLKSTAT_SRC_Synth	components\device\nrf51_bitfields.h	1031;"	d
CLOCK_LFCLKSTAT_SRC_Xtal	components\device\nrf51_bitfields.h	1030;"	d
CLOCK_LFCLKSTAT_STATE_Msk	components\device\nrf51_bitfields.h	1022;"	d
CLOCK_LFCLKSTAT_STATE_NotRunning	components\device\nrf51_bitfields.h	1023;"	d
CLOCK_LFCLKSTAT_STATE_Pos	components\device\nrf51_bitfields.h	1021;"	d
CLOCK_LFCLKSTAT_STATE_Running	components\device\nrf51_bitfields.h	1024;"	d
CLOCK_XTALFREQ_XTALFREQ_16MHz	components\device\nrf51_bitfields.h	1067;"	d
CLOCK_XTALFREQ_XTALFREQ_32MHz	components\device\nrf51_bitfields.h	1066;"	d
CLOCK_XTALFREQ_XTALFREQ_Msk	components\device\nrf51_bitfields.h	1065;"	d
CLOCK_XTALFREQ_XTALFREQ_Pos	components\device\nrf51_bitfields.h	1064;"	d
ECB_INTENCLR_ENDECB_Clear	components\device\nrf51_bitfields.h	1105;"	d
ECB_INTENCLR_ENDECB_Disabled	components\device\nrf51_bitfields.h	1103;"	d
ECB_INTENCLR_ENDECB_Enabled	components\device\nrf51_bitfields.h	1104;"	d
ECB_INTENCLR_ENDECB_Msk	components\device\nrf51_bitfields.h	1102;"	d
ECB_INTENCLR_ENDECB_Pos	components\device\nrf51_bitfields.h	1101;"	d
ECB_INTENCLR_ERRORECB_Clear	components\device\nrf51_bitfields.h	1098;"	d
ECB_INTENCLR_ERRORECB_Disabled	components\device\nrf51_bitfields.h	1096;"	d
ECB_INTENCLR_ERRORECB_Enabled	components\device\nrf51_bitfields.h	1097;"	d
ECB_INTENCLR_ERRORECB_Msk	components\device\nrf51_bitfields.h	1095;"	d
ECB_INTENCLR_ERRORECB_Pos	components\device\nrf51_bitfields.h	1094;"	d
ECB_INTENSET_ENDECB_Disabled	components\device\nrf51_bitfields.h	1086;"	d
ECB_INTENSET_ENDECB_Enabled	components\device\nrf51_bitfields.h	1087;"	d
ECB_INTENSET_ENDECB_Msk	components\device\nrf51_bitfields.h	1085;"	d
ECB_INTENSET_ENDECB_Pos	components\device\nrf51_bitfields.h	1084;"	d
ECB_INTENSET_ENDECB_Set	components\device\nrf51_bitfields.h	1088;"	d
ECB_INTENSET_ERRORECB_Disabled	components\device\nrf51_bitfields.h	1079;"	d
ECB_INTENSET_ERRORECB_Enabled	components\device\nrf51_bitfields.h	1080;"	d
ECB_INTENSET_ERRORECB_Msk	components\device\nrf51_bitfields.h	1078;"	d
ECB_INTENSET_ERRORECB_Pos	components\device\nrf51_bitfields.h	1077;"	d
ECB_INTENSET_ERRORECB_Set	components\device\nrf51_bitfields.h	1081;"	d
ECB_POWER_POWER_Disabled	components\device\nrf51_bitfields.h	1113;"	d
ECB_POWER_POWER_Enabled	components\device\nrf51_bitfields.h	1114;"	d
ECB_POWER_POWER_Msk	components\device\nrf51_bitfields.h	1112;"	d
ECB_POWER_POWER_Pos	components\device\nrf51_bitfields.h	1111;"	d
FICR_CONFIGID_FWID_Msk	components\device\nrf51_bitfields.h	1134;"	d
FICR_CONFIGID_FWID_Pos	components\device\nrf51_bitfields.h	1133;"	d
FICR_CONFIGID_HWID_Msk	components\device\nrf51_bitfields.h	1138;"	d
FICR_CONFIGID_HWID_Pos	components\device\nrf51_bitfields.h	1137;"	d
FICR_DEVICEADDRTYPE_DEVICEADDRTYPE_Msk	components\device\nrf51_bitfields.h	1145;"	d
FICR_DEVICEADDRTYPE_DEVICEADDRTYPE_Pos	components\device\nrf51_bitfields.h	1144;"	d
FICR_DEVICEADDRTYPE_DEVICEADDRTYPE_Public	components\device\nrf51_bitfields.h	1146;"	d
FICR_DEVICEADDRTYPE_DEVICEADDRTYPE_Random	components\device\nrf51_bitfields.h	1147;"	d
FICR_OVERRIDEEN_BLE_1MBIT_Msk	components\device\nrf51_bitfields.h	1154;"	d
FICR_OVERRIDEEN_BLE_1MBIT_NotOverride	components\device\nrf51_bitfields.h	1156;"	d
FICR_OVERRIDEEN_BLE_1MBIT_Override	components\device\nrf51_bitfields.h	1155;"	d
FICR_OVERRIDEEN_BLE_1MBIT_Pos	components\device\nrf51_bitfields.h	1153;"	d
FICR_OVERRIDEEN_NRF_1MBIT_Msk	components\device\nrf51_bitfields.h	1160;"	d
FICR_OVERRIDEEN_NRF_1MBIT_NotOverride	components\device\nrf51_bitfields.h	1162;"	d
FICR_OVERRIDEEN_NRF_1MBIT_Override	components\device\nrf51_bitfields.h	1161;"	d
FICR_OVERRIDEEN_NRF_1MBIT_Pos	components\device\nrf51_bitfields.h	1159;"	d
FICR_PPFC_PPFC_Msk	components\device\nrf51_bitfields.h	1125;"	d
FICR_PPFC_PPFC_NotPresent	components\device\nrf51_bitfields.h	1127;"	d
FICR_PPFC_PPFC_Pos	components\device\nrf51_bitfields.h	1124;"	d
FICR_PPFC_PPFC_Present	components\device\nrf51_bitfields.h	1126;"	d
GPIOTE_CONFIG_MODE_Disabled	components\device\nrf51_bitfields.h	2806;"	d
GPIOTE_CONFIG_MODE_Event	components\device\nrf51_bitfields.h	2807;"	d
GPIOTE_CONFIG_MODE_Msk	components\device\nrf51_bitfields.h	2805;"	d
GPIOTE_CONFIG_MODE_Pos	components\device\nrf51_bitfields.h	2804;"	d
GPIOTE_CONFIG_MODE_Task	components\device\nrf51_bitfields.h	2808;"	d
GPIOTE_CONFIG_OUTINIT_High	components\device\nrf51_bitfields.h	2789;"	d
GPIOTE_CONFIG_OUTINIT_Low	components\device\nrf51_bitfields.h	2788;"	d
GPIOTE_CONFIG_OUTINIT_Msk	components\device\nrf51_bitfields.h	2787;"	d
GPIOTE_CONFIG_OUTINIT_Pos	components\device\nrf51_bitfields.h	2786;"	d
GPIOTE_CONFIG_POLARITY_HiToLo	components\device\nrf51_bitfields.h	2796;"	d
GPIOTE_CONFIG_POLARITY_LoToHi	components\device\nrf51_bitfields.h	2795;"	d
GPIOTE_CONFIG_POLARITY_Msk	components\device\nrf51_bitfields.h	2793;"	d
GPIOTE_CONFIG_POLARITY_None	components\device\nrf51_bitfields.h	2794;"	d
GPIOTE_CONFIG_POLARITY_Pos	components\device\nrf51_bitfields.h	2792;"	d
GPIOTE_CONFIG_POLARITY_Toggle	components\device\nrf51_bitfields.h	2797;"	d
GPIOTE_CONFIG_PSEL_Msk	components\device\nrf51_bitfields.h	2801;"	d
GPIOTE_CONFIG_PSEL_Pos	components\device\nrf51_bitfields.h	2800;"	d
GPIOTE_INTENCLR_IN0_Clear	components\device\nrf51_bitfields.h	2780;"	d
GPIOTE_INTENCLR_IN0_Disabled	components\device\nrf51_bitfields.h	2778;"	d
GPIOTE_INTENCLR_IN0_Enabled	components\device\nrf51_bitfields.h	2779;"	d
GPIOTE_INTENCLR_IN0_Msk	components\device\nrf51_bitfields.h	2777;"	d
GPIOTE_INTENCLR_IN0_Pos	components\device\nrf51_bitfields.h	2776;"	d
GPIOTE_INTENCLR_IN1_Clear	components\device\nrf51_bitfields.h	2773;"	d
GPIOTE_INTENCLR_IN1_Disabled	components\device\nrf51_bitfields.h	2771;"	d
GPIOTE_INTENCLR_IN1_Enabled	components\device\nrf51_bitfields.h	2772;"	d
GPIOTE_INTENCLR_IN1_Msk	components\device\nrf51_bitfields.h	2770;"	d
GPIOTE_INTENCLR_IN1_Pos	components\device\nrf51_bitfields.h	2769;"	d
GPIOTE_INTENCLR_IN2_Clear	components\device\nrf51_bitfields.h	2766;"	d
GPIOTE_INTENCLR_IN2_Disabled	components\device\nrf51_bitfields.h	2764;"	d
GPIOTE_INTENCLR_IN2_Enabled	components\device\nrf51_bitfields.h	2765;"	d
GPIOTE_INTENCLR_IN2_Msk	components\device\nrf51_bitfields.h	2763;"	d
GPIOTE_INTENCLR_IN2_Pos	components\device\nrf51_bitfields.h	2762;"	d
GPIOTE_INTENCLR_IN3_Clear	components\device\nrf51_bitfields.h	2759;"	d
GPIOTE_INTENCLR_IN3_Disabled	components\device\nrf51_bitfields.h	2757;"	d
GPIOTE_INTENCLR_IN3_Enabled	components\device\nrf51_bitfields.h	2758;"	d
GPIOTE_INTENCLR_IN3_Msk	components\device\nrf51_bitfields.h	2756;"	d
GPIOTE_INTENCLR_IN3_Pos	components\device\nrf51_bitfields.h	2755;"	d
GPIOTE_INTENCLR_PORT_Clear	components\device\nrf51_bitfields.h	2752;"	d
GPIOTE_INTENCLR_PORT_Disabled	components\device\nrf51_bitfields.h	2750;"	d
GPIOTE_INTENCLR_PORT_Enabled	components\device\nrf51_bitfields.h	2751;"	d
GPIOTE_INTENCLR_PORT_Msk	components\device\nrf51_bitfields.h	2749;"	d
GPIOTE_INTENCLR_PORT_Pos	components\device\nrf51_bitfields.h	2748;"	d
GPIOTE_INTENSET_IN0_Disabled	components\device\nrf51_bitfields.h	2740;"	d
GPIOTE_INTENSET_IN0_Enabled	components\device\nrf51_bitfields.h	2741;"	d
GPIOTE_INTENSET_IN0_Msk	components\device\nrf51_bitfields.h	2739;"	d
GPIOTE_INTENSET_IN0_Pos	components\device\nrf51_bitfields.h	2738;"	d
GPIOTE_INTENSET_IN0_Set	components\device\nrf51_bitfields.h	2742;"	d
GPIOTE_INTENSET_IN1_Disabled	components\device\nrf51_bitfields.h	2733;"	d
GPIOTE_INTENSET_IN1_Enabled	components\device\nrf51_bitfields.h	2734;"	d
GPIOTE_INTENSET_IN1_Msk	components\device\nrf51_bitfields.h	2732;"	d
GPIOTE_INTENSET_IN1_Pos	components\device\nrf51_bitfields.h	2731;"	d
GPIOTE_INTENSET_IN1_Set	components\device\nrf51_bitfields.h	2735;"	d
GPIOTE_INTENSET_IN2_Disabled	components\device\nrf51_bitfields.h	2726;"	d
GPIOTE_INTENSET_IN2_Enabled	components\device\nrf51_bitfields.h	2727;"	d
GPIOTE_INTENSET_IN2_Msk	components\device\nrf51_bitfields.h	2725;"	d
GPIOTE_INTENSET_IN2_Pos	components\device\nrf51_bitfields.h	2724;"	d
GPIOTE_INTENSET_IN2_Set	components\device\nrf51_bitfields.h	2728;"	d
GPIOTE_INTENSET_IN3_Disabled	components\device\nrf51_bitfields.h	2719;"	d
GPIOTE_INTENSET_IN3_Enabled	components\device\nrf51_bitfields.h	2720;"	d
GPIOTE_INTENSET_IN3_Msk	components\device\nrf51_bitfields.h	2718;"	d
GPIOTE_INTENSET_IN3_Pos	components\device\nrf51_bitfields.h	2717;"	d
GPIOTE_INTENSET_IN3_Set	components\device\nrf51_bitfields.h	2721;"	d
GPIOTE_INTENSET_PORT_Disabled	components\device\nrf51_bitfields.h	2712;"	d
GPIOTE_INTENSET_PORT_Enabled	components\device\nrf51_bitfields.h	2713;"	d
GPIOTE_INTENSET_PORT_Msk	components\device\nrf51_bitfields.h	2711;"	d
GPIOTE_INTENSET_PORT_Pos	components\device\nrf51_bitfields.h	2710;"	d
GPIOTE_INTENSET_PORT_Set	components\device\nrf51_bitfields.h	2714;"	d
GPIOTE_POWER_POWER_Disabled	components\device\nrf51_bitfields.h	2816;"	d
GPIOTE_POWER_POWER_Enabled	components\device\nrf51_bitfields.h	2817;"	d
GPIOTE_POWER_POWER_Msk	components\device\nrf51_bitfields.h	2815;"	d
GPIOTE_POWER_POWER_Pos	components\device\nrf51_bitfields.h	2814;"	d
GPIO_DIRCLR_PIN0_Clear	components\device\nrf51_bitfields.h	2659;"	d
GPIO_DIRCLR_PIN0_Input	components\device\nrf51_bitfields.h	2657;"	d
GPIO_DIRCLR_PIN0_Msk	components\device\nrf51_bitfields.h	2656;"	d
GPIO_DIRCLR_PIN0_Output	components\device\nrf51_bitfields.h	2658;"	d
GPIO_DIRCLR_PIN0_Pos	components\device\nrf51_bitfields.h	2655;"	d
GPIO_DIRCLR_PIN10_Clear	components\device\nrf51_bitfields.h	2589;"	d
GPIO_DIRCLR_PIN10_Input	components\device\nrf51_bitfields.h	2587;"	d
GPIO_DIRCLR_PIN10_Msk	components\device\nrf51_bitfields.h	2586;"	d
GPIO_DIRCLR_PIN10_Output	components\device\nrf51_bitfields.h	2588;"	d
GPIO_DIRCLR_PIN10_Pos	components\device\nrf51_bitfields.h	2585;"	d
GPIO_DIRCLR_PIN11_Clear	components\device\nrf51_bitfields.h	2582;"	d
GPIO_DIRCLR_PIN11_Input	components\device\nrf51_bitfields.h	2580;"	d
GPIO_DIRCLR_PIN11_Msk	components\device\nrf51_bitfields.h	2579;"	d
GPIO_DIRCLR_PIN11_Output	components\device\nrf51_bitfields.h	2581;"	d
GPIO_DIRCLR_PIN11_Pos	components\device\nrf51_bitfields.h	2578;"	d
GPIO_DIRCLR_PIN12_Clear	components\device\nrf51_bitfields.h	2575;"	d
GPIO_DIRCLR_PIN12_Input	components\device\nrf51_bitfields.h	2573;"	d
GPIO_DIRCLR_PIN12_Msk	components\device\nrf51_bitfields.h	2572;"	d
GPIO_DIRCLR_PIN12_Output	components\device\nrf51_bitfields.h	2574;"	d
GPIO_DIRCLR_PIN12_Pos	components\device\nrf51_bitfields.h	2571;"	d
GPIO_DIRCLR_PIN13_Clear	components\device\nrf51_bitfields.h	2568;"	d
GPIO_DIRCLR_PIN13_Input	components\device\nrf51_bitfields.h	2566;"	d
GPIO_DIRCLR_PIN13_Msk	components\device\nrf51_bitfields.h	2565;"	d
GPIO_DIRCLR_PIN13_Output	components\device\nrf51_bitfields.h	2567;"	d
GPIO_DIRCLR_PIN13_Pos	components\device\nrf51_bitfields.h	2564;"	d
GPIO_DIRCLR_PIN14_Clear	components\device\nrf51_bitfields.h	2561;"	d
GPIO_DIRCLR_PIN14_Input	components\device\nrf51_bitfields.h	2559;"	d
GPIO_DIRCLR_PIN14_Msk	components\device\nrf51_bitfields.h	2558;"	d
GPIO_DIRCLR_PIN14_Output	components\device\nrf51_bitfields.h	2560;"	d
GPIO_DIRCLR_PIN14_Pos	components\device\nrf51_bitfields.h	2557;"	d
GPIO_DIRCLR_PIN15_Clear	components\device\nrf51_bitfields.h	2554;"	d
GPIO_DIRCLR_PIN15_Input	components\device\nrf51_bitfields.h	2552;"	d
GPIO_DIRCLR_PIN15_Msk	components\device\nrf51_bitfields.h	2551;"	d
GPIO_DIRCLR_PIN15_Output	components\device\nrf51_bitfields.h	2553;"	d
GPIO_DIRCLR_PIN15_Pos	components\device\nrf51_bitfields.h	2550;"	d
GPIO_DIRCLR_PIN16_Clear	components\device\nrf51_bitfields.h	2547;"	d
GPIO_DIRCLR_PIN16_Input	components\device\nrf51_bitfields.h	2545;"	d
GPIO_DIRCLR_PIN16_Msk	components\device\nrf51_bitfields.h	2544;"	d
GPIO_DIRCLR_PIN16_Output	components\device\nrf51_bitfields.h	2546;"	d
GPIO_DIRCLR_PIN16_Pos	components\device\nrf51_bitfields.h	2543;"	d
GPIO_DIRCLR_PIN17_Clear	components\device\nrf51_bitfields.h	2540;"	d
GPIO_DIRCLR_PIN17_Input	components\device\nrf51_bitfields.h	2538;"	d
GPIO_DIRCLR_PIN17_Msk	components\device\nrf51_bitfields.h	2537;"	d
GPIO_DIRCLR_PIN17_Output	components\device\nrf51_bitfields.h	2539;"	d
GPIO_DIRCLR_PIN17_Pos	components\device\nrf51_bitfields.h	2536;"	d
GPIO_DIRCLR_PIN18_Clear	components\device\nrf51_bitfields.h	2533;"	d
GPIO_DIRCLR_PIN18_Input	components\device\nrf51_bitfields.h	2531;"	d
GPIO_DIRCLR_PIN18_Msk	components\device\nrf51_bitfields.h	2530;"	d
GPIO_DIRCLR_PIN18_Output	components\device\nrf51_bitfields.h	2532;"	d
GPIO_DIRCLR_PIN18_Pos	components\device\nrf51_bitfields.h	2529;"	d
GPIO_DIRCLR_PIN19_Clear	components\device\nrf51_bitfields.h	2526;"	d
GPIO_DIRCLR_PIN19_Input	components\device\nrf51_bitfields.h	2524;"	d
GPIO_DIRCLR_PIN19_Msk	components\device\nrf51_bitfields.h	2523;"	d
GPIO_DIRCLR_PIN19_Output	components\device\nrf51_bitfields.h	2525;"	d
GPIO_DIRCLR_PIN19_Pos	components\device\nrf51_bitfields.h	2522;"	d
GPIO_DIRCLR_PIN1_Clear	components\device\nrf51_bitfields.h	2652;"	d
GPIO_DIRCLR_PIN1_Input	components\device\nrf51_bitfields.h	2650;"	d
GPIO_DIRCLR_PIN1_Msk	components\device\nrf51_bitfields.h	2649;"	d
GPIO_DIRCLR_PIN1_Output	components\device\nrf51_bitfields.h	2651;"	d
GPIO_DIRCLR_PIN1_Pos	components\device\nrf51_bitfields.h	2648;"	d
GPIO_DIRCLR_PIN20_Clear	components\device\nrf51_bitfields.h	2519;"	d
GPIO_DIRCLR_PIN20_Input	components\device\nrf51_bitfields.h	2517;"	d
GPIO_DIRCLR_PIN20_Msk	components\device\nrf51_bitfields.h	2516;"	d
GPIO_DIRCLR_PIN20_Output	components\device\nrf51_bitfields.h	2518;"	d
GPIO_DIRCLR_PIN20_Pos	components\device\nrf51_bitfields.h	2515;"	d
GPIO_DIRCLR_PIN21_Clear	components\device\nrf51_bitfields.h	2512;"	d
GPIO_DIRCLR_PIN21_Input	components\device\nrf51_bitfields.h	2510;"	d
GPIO_DIRCLR_PIN21_Msk	components\device\nrf51_bitfields.h	2509;"	d
GPIO_DIRCLR_PIN21_Output	components\device\nrf51_bitfields.h	2511;"	d
GPIO_DIRCLR_PIN21_Pos	components\device\nrf51_bitfields.h	2508;"	d
GPIO_DIRCLR_PIN22_Clear	components\device\nrf51_bitfields.h	2505;"	d
GPIO_DIRCLR_PIN22_Input	components\device\nrf51_bitfields.h	2503;"	d
GPIO_DIRCLR_PIN22_Msk	components\device\nrf51_bitfields.h	2502;"	d
GPIO_DIRCLR_PIN22_Output	components\device\nrf51_bitfields.h	2504;"	d
GPIO_DIRCLR_PIN22_Pos	components\device\nrf51_bitfields.h	2501;"	d
GPIO_DIRCLR_PIN23_Clear	components\device\nrf51_bitfields.h	2498;"	d
GPIO_DIRCLR_PIN23_Input	components\device\nrf51_bitfields.h	2496;"	d
GPIO_DIRCLR_PIN23_Msk	components\device\nrf51_bitfields.h	2495;"	d
GPIO_DIRCLR_PIN23_Output	components\device\nrf51_bitfields.h	2497;"	d
GPIO_DIRCLR_PIN23_Pos	components\device\nrf51_bitfields.h	2494;"	d
GPIO_DIRCLR_PIN24_Clear	components\device\nrf51_bitfields.h	2491;"	d
GPIO_DIRCLR_PIN24_Input	components\device\nrf51_bitfields.h	2489;"	d
GPIO_DIRCLR_PIN24_Msk	components\device\nrf51_bitfields.h	2488;"	d
GPIO_DIRCLR_PIN24_Output	components\device\nrf51_bitfields.h	2490;"	d
GPIO_DIRCLR_PIN24_Pos	components\device\nrf51_bitfields.h	2487;"	d
GPIO_DIRCLR_PIN25_Clear	components\device\nrf51_bitfields.h	2484;"	d
GPIO_DIRCLR_PIN25_Input	components\device\nrf51_bitfields.h	2482;"	d
GPIO_DIRCLR_PIN25_Msk	components\device\nrf51_bitfields.h	2481;"	d
GPIO_DIRCLR_PIN25_Output	components\device\nrf51_bitfields.h	2483;"	d
GPIO_DIRCLR_PIN25_Pos	components\device\nrf51_bitfields.h	2480;"	d
GPIO_DIRCLR_PIN26_Clear	components\device\nrf51_bitfields.h	2477;"	d
GPIO_DIRCLR_PIN26_Input	components\device\nrf51_bitfields.h	2475;"	d
GPIO_DIRCLR_PIN26_Msk	components\device\nrf51_bitfields.h	2474;"	d
GPIO_DIRCLR_PIN26_Output	components\device\nrf51_bitfields.h	2476;"	d
GPIO_DIRCLR_PIN26_Pos	components\device\nrf51_bitfields.h	2473;"	d
GPIO_DIRCLR_PIN27_Clear	components\device\nrf51_bitfields.h	2470;"	d
GPIO_DIRCLR_PIN27_Input	components\device\nrf51_bitfields.h	2468;"	d
GPIO_DIRCLR_PIN27_Msk	components\device\nrf51_bitfields.h	2467;"	d
GPIO_DIRCLR_PIN27_Output	components\device\nrf51_bitfields.h	2469;"	d
GPIO_DIRCLR_PIN27_Pos	components\device\nrf51_bitfields.h	2466;"	d
GPIO_DIRCLR_PIN28_Clear	components\device\nrf51_bitfields.h	2463;"	d
GPIO_DIRCLR_PIN28_Input	components\device\nrf51_bitfields.h	2461;"	d
GPIO_DIRCLR_PIN28_Msk	components\device\nrf51_bitfields.h	2460;"	d
GPIO_DIRCLR_PIN28_Output	components\device\nrf51_bitfields.h	2462;"	d
GPIO_DIRCLR_PIN28_Pos	components\device\nrf51_bitfields.h	2459;"	d
GPIO_DIRCLR_PIN29_Clear	components\device\nrf51_bitfields.h	2456;"	d
GPIO_DIRCLR_PIN29_Input	components\device\nrf51_bitfields.h	2454;"	d
GPIO_DIRCLR_PIN29_Msk	components\device\nrf51_bitfields.h	2453;"	d
GPIO_DIRCLR_PIN29_Output	components\device\nrf51_bitfields.h	2455;"	d
GPIO_DIRCLR_PIN29_Pos	components\device\nrf51_bitfields.h	2452;"	d
GPIO_DIRCLR_PIN2_Clear	components\device\nrf51_bitfields.h	2645;"	d
GPIO_DIRCLR_PIN2_Input	components\device\nrf51_bitfields.h	2643;"	d
GPIO_DIRCLR_PIN2_Msk	components\device\nrf51_bitfields.h	2642;"	d
GPIO_DIRCLR_PIN2_Output	components\device\nrf51_bitfields.h	2644;"	d
GPIO_DIRCLR_PIN2_Pos	components\device\nrf51_bitfields.h	2641;"	d
GPIO_DIRCLR_PIN30_Clear	components\device\nrf51_bitfields.h	2449;"	d
GPIO_DIRCLR_PIN30_Input	components\device\nrf51_bitfields.h	2447;"	d
GPIO_DIRCLR_PIN30_Msk	components\device\nrf51_bitfields.h	2446;"	d
GPIO_DIRCLR_PIN30_Output	components\device\nrf51_bitfields.h	2448;"	d
GPIO_DIRCLR_PIN30_Pos	components\device\nrf51_bitfields.h	2445;"	d
GPIO_DIRCLR_PIN31_Clear	components\device\nrf51_bitfields.h	2442;"	d
GPIO_DIRCLR_PIN31_Input	components\device\nrf51_bitfields.h	2440;"	d
GPIO_DIRCLR_PIN31_Msk	components\device\nrf51_bitfields.h	2439;"	d
GPIO_DIRCLR_PIN31_Output	components\device\nrf51_bitfields.h	2441;"	d
GPIO_DIRCLR_PIN31_Pos	components\device\nrf51_bitfields.h	2438;"	d
GPIO_DIRCLR_PIN3_Clear	components\device\nrf51_bitfields.h	2638;"	d
GPIO_DIRCLR_PIN3_Input	components\device\nrf51_bitfields.h	2636;"	d
GPIO_DIRCLR_PIN3_Msk	components\device\nrf51_bitfields.h	2635;"	d
GPIO_DIRCLR_PIN3_Output	components\device\nrf51_bitfields.h	2637;"	d
GPIO_DIRCLR_PIN3_Pos	components\device\nrf51_bitfields.h	2634;"	d
GPIO_DIRCLR_PIN4_Clear	components\device\nrf51_bitfields.h	2631;"	d
GPIO_DIRCLR_PIN4_Input	components\device\nrf51_bitfields.h	2629;"	d
GPIO_DIRCLR_PIN4_Msk	components\device\nrf51_bitfields.h	2628;"	d
GPIO_DIRCLR_PIN4_Output	components\device\nrf51_bitfields.h	2630;"	d
GPIO_DIRCLR_PIN4_Pos	components\device\nrf51_bitfields.h	2627;"	d
GPIO_DIRCLR_PIN5_Clear	components\device\nrf51_bitfields.h	2624;"	d
GPIO_DIRCLR_PIN5_Input	components\device\nrf51_bitfields.h	2622;"	d
GPIO_DIRCLR_PIN5_Msk	components\device\nrf51_bitfields.h	2621;"	d
GPIO_DIRCLR_PIN5_Output	components\device\nrf51_bitfields.h	2623;"	d
GPIO_DIRCLR_PIN5_Pos	components\device\nrf51_bitfields.h	2620;"	d
GPIO_DIRCLR_PIN6_Clear	components\device\nrf51_bitfields.h	2617;"	d
GPIO_DIRCLR_PIN6_Input	components\device\nrf51_bitfields.h	2615;"	d
GPIO_DIRCLR_PIN6_Msk	components\device\nrf51_bitfields.h	2614;"	d
GPIO_DIRCLR_PIN6_Output	components\device\nrf51_bitfields.h	2616;"	d
GPIO_DIRCLR_PIN6_Pos	components\device\nrf51_bitfields.h	2613;"	d
GPIO_DIRCLR_PIN7_Clear	components\device\nrf51_bitfields.h	2610;"	d
GPIO_DIRCLR_PIN7_Input	components\device\nrf51_bitfields.h	2608;"	d
GPIO_DIRCLR_PIN7_Msk	components\device\nrf51_bitfields.h	2607;"	d
GPIO_DIRCLR_PIN7_Output	components\device\nrf51_bitfields.h	2609;"	d
GPIO_DIRCLR_PIN7_Pos	components\device\nrf51_bitfields.h	2606;"	d
GPIO_DIRCLR_PIN8_Clear	components\device\nrf51_bitfields.h	2603;"	d
GPIO_DIRCLR_PIN8_Input	components\device\nrf51_bitfields.h	2601;"	d
GPIO_DIRCLR_PIN8_Msk	components\device\nrf51_bitfields.h	2600;"	d
GPIO_DIRCLR_PIN8_Output	components\device\nrf51_bitfields.h	2602;"	d
GPIO_DIRCLR_PIN8_Pos	components\device\nrf51_bitfields.h	2599;"	d
GPIO_DIRCLR_PIN9_Clear	components\device\nrf51_bitfields.h	2596;"	d
GPIO_DIRCLR_PIN9_Input	components\device\nrf51_bitfields.h	2594;"	d
GPIO_DIRCLR_PIN9_Msk	components\device\nrf51_bitfields.h	2593;"	d
GPIO_DIRCLR_PIN9_Output	components\device\nrf51_bitfields.h	2595;"	d
GPIO_DIRCLR_PIN9_Pos	components\device\nrf51_bitfields.h	2592;"	d
GPIO_DIRSET_PIN0_Input	components\device\nrf51_bitfields.h	2430;"	d
GPIO_DIRSET_PIN0_Msk	components\device\nrf51_bitfields.h	2429;"	d
GPIO_DIRSET_PIN0_Output	components\device\nrf51_bitfields.h	2431;"	d
GPIO_DIRSET_PIN0_Pos	components\device\nrf51_bitfields.h	2428;"	d
GPIO_DIRSET_PIN0_Set	components\device\nrf51_bitfields.h	2432;"	d
GPIO_DIRSET_PIN10_Input	components\device\nrf51_bitfields.h	2360;"	d
GPIO_DIRSET_PIN10_Msk	components\device\nrf51_bitfields.h	2359;"	d
GPIO_DIRSET_PIN10_Output	components\device\nrf51_bitfields.h	2361;"	d
GPIO_DIRSET_PIN10_Pos	components\device\nrf51_bitfields.h	2358;"	d
GPIO_DIRSET_PIN10_Set	components\device\nrf51_bitfields.h	2362;"	d
GPIO_DIRSET_PIN11_Input	components\device\nrf51_bitfields.h	2353;"	d
GPIO_DIRSET_PIN11_Msk	components\device\nrf51_bitfields.h	2352;"	d
GPIO_DIRSET_PIN11_Output	components\device\nrf51_bitfields.h	2354;"	d
GPIO_DIRSET_PIN11_Pos	components\device\nrf51_bitfields.h	2351;"	d
GPIO_DIRSET_PIN11_Set	components\device\nrf51_bitfields.h	2355;"	d
GPIO_DIRSET_PIN12_Input	components\device\nrf51_bitfields.h	2346;"	d
GPIO_DIRSET_PIN12_Msk	components\device\nrf51_bitfields.h	2345;"	d
GPIO_DIRSET_PIN12_Output	components\device\nrf51_bitfields.h	2347;"	d
GPIO_DIRSET_PIN12_Pos	components\device\nrf51_bitfields.h	2344;"	d
GPIO_DIRSET_PIN12_Set	components\device\nrf51_bitfields.h	2348;"	d
GPIO_DIRSET_PIN13_Input	components\device\nrf51_bitfields.h	2339;"	d
GPIO_DIRSET_PIN13_Msk	components\device\nrf51_bitfields.h	2338;"	d
GPIO_DIRSET_PIN13_Output	components\device\nrf51_bitfields.h	2340;"	d
GPIO_DIRSET_PIN13_Pos	components\device\nrf51_bitfields.h	2337;"	d
GPIO_DIRSET_PIN13_Set	components\device\nrf51_bitfields.h	2341;"	d
GPIO_DIRSET_PIN14_Input	components\device\nrf51_bitfields.h	2332;"	d
GPIO_DIRSET_PIN14_Msk	components\device\nrf51_bitfields.h	2331;"	d
GPIO_DIRSET_PIN14_Output	components\device\nrf51_bitfields.h	2333;"	d
GPIO_DIRSET_PIN14_Pos	components\device\nrf51_bitfields.h	2330;"	d
GPIO_DIRSET_PIN14_Set	components\device\nrf51_bitfields.h	2334;"	d
GPIO_DIRSET_PIN15_Input	components\device\nrf51_bitfields.h	2325;"	d
GPIO_DIRSET_PIN15_Msk	components\device\nrf51_bitfields.h	2324;"	d
GPIO_DIRSET_PIN15_Output	components\device\nrf51_bitfields.h	2326;"	d
GPIO_DIRSET_PIN15_Pos	components\device\nrf51_bitfields.h	2323;"	d
GPIO_DIRSET_PIN15_Set	components\device\nrf51_bitfields.h	2327;"	d
GPIO_DIRSET_PIN16_Input	components\device\nrf51_bitfields.h	2318;"	d
GPIO_DIRSET_PIN16_Msk	components\device\nrf51_bitfields.h	2317;"	d
GPIO_DIRSET_PIN16_Output	components\device\nrf51_bitfields.h	2319;"	d
GPIO_DIRSET_PIN16_Pos	components\device\nrf51_bitfields.h	2316;"	d
GPIO_DIRSET_PIN16_Set	components\device\nrf51_bitfields.h	2320;"	d
GPIO_DIRSET_PIN17_Input	components\device\nrf51_bitfields.h	2311;"	d
GPIO_DIRSET_PIN17_Msk	components\device\nrf51_bitfields.h	2310;"	d
GPIO_DIRSET_PIN17_Output	components\device\nrf51_bitfields.h	2312;"	d
GPIO_DIRSET_PIN17_Pos	components\device\nrf51_bitfields.h	2309;"	d
GPIO_DIRSET_PIN17_Set	components\device\nrf51_bitfields.h	2313;"	d
GPIO_DIRSET_PIN18_Input	components\device\nrf51_bitfields.h	2304;"	d
GPIO_DIRSET_PIN18_Msk	components\device\nrf51_bitfields.h	2303;"	d
GPIO_DIRSET_PIN18_Output	components\device\nrf51_bitfields.h	2305;"	d
GPIO_DIRSET_PIN18_Pos	components\device\nrf51_bitfields.h	2302;"	d
GPIO_DIRSET_PIN18_Set	components\device\nrf51_bitfields.h	2306;"	d
GPIO_DIRSET_PIN19_Input	components\device\nrf51_bitfields.h	2297;"	d
GPIO_DIRSET_PIN19_Msk	components\device\nrf51_bitfields.h	2296;"	d
GPIO_DIRSET_PIN19_Output	components\device\nrf51_bitfields.h	2298;"	d
GPIO_DIRSET_PIN19_Pos	components\device\nrf51_bitfields.h	2295;"	d
GPIO_DIRSET_PIN19_Set	components\device\nrf51_bitfields.h	2299;"	d
GPIO_DIRSET_PIN1_Input	components\device\nrf51_bitfields.h	2423;"	d
GPIO_DIRSET_PIN1_Msk	components\device\nrf51_bitfields.h	2422;"	d
GPIO_DIRSET_PIN1_Output	components\device\nrf51_bitfields.h	2424;"	d
GPIO_DIRSET_PIN1_Pos	components\device\nrf51_bitfields.h	2421;"	d
GPIO_DIRSET_PIN1_Set	components\device\nrf51_bitfields.h	2425;"	d
GPIO_DIRSET_PIN20_Input	components\device\nrf51_bitfields.h	2290;"	d
GPIO_DIRSET_PIN20_Msk	components\device\nrf51_bitfields.h	2289;"	d
GPIO_DIRSET_PIN20_Output	components\device\nrf51_bitfields.h	2291;"	d
GPIO_DIRSET_PIN20_Pos	components\device\nrf51_bitfields.h	2288;"	d
GPIO_DIRSET_PIN20_Set	components\device\nrf51_bitfields.h	2292;"	d
GPIO_DIRSET_PIN21_Input	components\device\nrf51_bitfields.h	2283;"	d
GPIO_DIRSET_PIN21_Msk	components\device\nrf51_bitfields.h	2282;"	d
GPIO_DIRSET_PIN21_Output	components\device\nrf51_bitfields.h	2284;"	d
GPIO_DIRSET_PIN21_Pos	components\device\nrf51_bitfields.h	2281;"	d
GPIO_DIRSET_PIN21_Set	components\device\nrf51_bitfields.h	2285;"	d
GPIO_DIRSET_PIN22_Input	components\device\nrf51_bitfields.h	2276;"	d
GPIO_DIRSET_PIN22_Msk	components\device\nrf51_bitfields.h	2275;"	d
GPIO_DIRSET_PIN22_Output	components\device\nrf51_bitfields.h	2277;"	d
GPIO_DIRSET_PIN22_Pos	components\device\nrf51_bitfields.h	2274;"	d
GPIO_DIRSET_PIN22_Set	components\device\nrf51_bitfields.h	2278;"	d
GPIO_DIRSET_PIN23_Input	components\device\nrf51_bitfields.h	2269;"	d
GPIO_DIRSET_PIN23_Msk	components\device\nrf51_bitfields.h	2268;"	d
GPIO_DIRSET_PIN23_Output	components\device\nrf51_bitfields.h	2270;"	d
GPIO_DIRSET_PIN23_Pos	components\device\nrf51_bitfields.h	2267;"	d
GPIO_DIRSET_PIN23_Set	components\device\nrf51_bitfields.h	2271;"	d
GPIO_DIRSET_PIN24_Input	components\device\nrf51_bitfields.h	2262;"	d
GPIO_DIRSET_PIN24_Msk	components\device\nrf51_bitfields.h	2261;"	d
GPIO_DIRSET_PIN24_Output	components\device\nrf51_bitfields.h	2263;"	d
GPIO_DIRSET_PIN24_Pos	components\device\nrf51_bitfields.h	2260;"	d
GPIO_DIRSET_PIN24_Set	components\device\nrf51_bitfields.h	2264;"	d
GPIO_DIRSET_PIN25_Input	components\device\nrf51_bitfields.h	2255;"	d
GPIO_DIRSET_PIN25_Msk	components\device\nrf51_bitfields.h	2254;"	d
GPIO_DIRSET_PIN25_Output	components\device\nrf51_bitfields.h	2256;"	d
GPIO_DIRSET_PIN25_Pos	components\device\nrf51_bitfields.h	2253;"	d
GPIO_DIRSET_PIN25_Set	components\device\nrf51_bitfields.h	2257;"	d
GPIO_DIRSET_PIN26_Input	components\device\nrf51_bitfields.h	2248;"	d
GPIO_DIRSET_PIN26_Msk	components\device\nrf51_bitfields.h	2247;"	d
GPIO_DIRSET_PIN26_Output	components\device\nrf51_bitfields.h	2249;"	d
GPIO_DIRSET_PIN26_Pos	components\device\nrf51_bitfields.h	2246;"	d
GPIO_DIRSET_PIN26_Set	components\device\nrf51_bitfields.h	2250;"	d
GPIO_DIRSET_PIN27_Input	components\device\nrf51_bitfields.h	2241;"	d
GPIO_DIRSET_PIN27_Msk	components\device\nrf51_bitfields.h	2240;"	d
GPIO_DIRSET_PIN27_Output	components\device\nrf51_bitfields.h	2242;"	d
GPIO_DIRSET_PIN27_Pos	components\device\nrf51_bitfields.h	2239;"	d
GPIO_DIRSET_PIN27_Set	components\device\nrf51_bitfields.h	2243;"	d
GPIO_DIRSET_PIN28_Input	components\device\nrf51_bitfields.h	2234;"	d
GPIO_DIRSET_PIN28_Msk	components\device\nrf51_bitfields.h	2233;"	d
GPIO_DIRSET_PIN28_Output	components\device\nrf51_bitfields.h	2235;"	d
GPIO_DIRSET_PIN28_Pos	components\device\nrf51_bitfields.h	2232;"	d
GPIO_DIRSET_PIN28_Set	components\device\nrf51_bitfields.h	2236;"	d
GPIO_DIRSET_PIN29_Input	components\device\nrf51_bitfields.h	2227;"	d
GPIO_DIRSET_PIN29_Msk	components\device\nrf51_bitfields.h	2226;"	d
GPIO_DIRSET_PIN29_Output	components\device\nrf51_bitfields.h	2228;"	d
GPIO_DIRSET_PIN29_Pos	components\device\nrf51_bitfields.h	2225;"	d
GPIO_DIRSET_PIN29_Set	components\device\nrf51_bitfields.h	2229;"	d
GPIO_DIRSET_PIN2_Input	components\device\nrf51_bitfields.h	2416;"	d
GPIO_DIRSET_PIN2_Msk	components\device\nrf51_bitfields.h	2415;"	d
GPIO_DIRSET_PIN2_Output	components\device\nrf51_bitfields.h	2417;"	d
GPIO_DIRSET_PIN2_Pos	components\device\nrf51_bitfields.h	2414;"	d
GPIO_DIRSET_PIN2_Set	components\device\nrf51_bitfields.h	2418;"	d
GPIO_DIRSET_PIN30_Input	components\device\nrf51_bitfields.h	2220;"	d
GPIO_DIRSET_PIN30_Msk	components\device\nrf51_bitfields.h	2219;"	d
GPIO_DIRSET_PIN30_Output	components\device\nrf51_bitfields.h	2221;"	d
GPIO_DIRSET_PIN30_Pos	components\device\nrf51_bitfields.h	2218;"	d
GPIO_DIRSET_PIN30_Set	components\device\nrf51_bitfields.h	2222;"	d
GPIO_DIRSET_PIN31_Input	components\device\nrf51_bitfields.h	2213;"	d
GPIO_DIRSET_PIN31_Msk	components\device\nrf51_bitfields.h	2212;"	d
GPIO_DIRSET_PIN31_Output	components\device\nrf51_bitfields.h	2214;"	d
GPIO_DIRSET_PIN31_Pos	components\device\nrf51_bitfields.h	2211;"	d
GPIO_DIRSET_PIN31_Set	components\device\nrf51_bitfields.h	2215;"	d
GPIO_DIRSET_PIN3_Input	components\device\nrf51_bitfields.h	2409;"	d
GPIO_DIRSET_PIN3_Msk	components\device\nrf51_bitfields.h	2408;"	d
GPIO_DIRSET_PIN3_Output	components\device\nrf51_bitfields.h	2410;"	d
GPIO_DIRSET_PIN3_Pos	components\device\nrf51_bitfields.h	2407;"	d
GPIO_DIRSET_PIN3_Set	components\device\nrf51_bitfields.h	2411;"	d
GPIO_DIRSET_PIN4_Input	components\device\nrf51_bitfields.h	2402;"	d
GPIO_DIRSET_PIN4_Msk	components\device\nrf51_bitfields.h	2401;"	d
GPIO_DIRSET_PIN4_Output	components\device\nrf51_bitfields.h	2403;"	d
GPIO_DIRSET_PIN4_Pos	components\device\nrf51_bitfields.h	2400;"	d
GPIO_DIRSET_PIN4_Set	components\device\nrf51_bitfields.h	2404;"	d
GPIO_DIRSET_PIN5_Input	components\device\nrf51_bitfields.h	2395;"	d
GPIO_DIRSET_PIN5_Msk	components\device\nrf51_bitfields.h	2394;"	d
GPIO_DIRSET_PIN5_Output	components\device\nrf51_bitfields.h	2396;"	d
GPIO_DIRSET_PIN5_Pos	components\device\nrf51_bitfields.h	2393;"	d
GPIO_DIRSET_PIN5_Set	components\device\nrf51_bitfields.h	2397;"	d
GPIO_DIRSET_PIN6_Input	components\device\nrf51_bitfields.h	2388;"	d
GPIO_DIRSET_PIN6_Msk	components\device\nrf51_bitfields.h	2387;"	d
GPIO_DIRSET_PIN6_Output	components\device\nrf51_bitfields.h	2389;"	d
GPIO_DIRSET_PIN6_Pos	components\device\nrf51_bitfields.h	2386;"	d
GPIO_DIRSET_PIN6_Set	components\device\nrf51_bitfields.h	2390;"	d
GPIO_DIRSET_PIN7_Input	components\device\nrf51_bitfields.h	2381;"	d
GPIO_DIRSET_PIN7_Msk	components\device\nrf51_bitfields.h	2380;"	d
GPIO_DIRSET_PIN7_Output	components\device\nrf51_bitfields.h	2382;"	d
GPIO_DIRSET_PIN7_Pos	components\device\nrf51_bitfields.h	2379;"	d
GPIO_DIRSET_PIN7_Set	components\device\nrf51_bitfields.h	2383;"	d
GPIO_DIRSET_PIN8_Input	components\device\nrf51_bitfields.h	2374;"	d
GPIO_DIRSET_PIN8_Msk	components\device\nrf51_bitfields.h	2373;"	d
GPIO_DIRSET_PIN8_Output	components\device\nrf51_bitfields.h	2375;"	d
GPIO_DIRSET_PIN8_Pos	components\device\nrf51_bitfields.h	2372;"	d
GPIO_DIRSET_PIN8_Set	components\device\nrf51_bitfields.h	2376;"	d
GPIO_DIRSET_PIN9_Input	components\device\nrf51_bitfields.h	2367;"	d
GPIO_DIRSET_PIN9_Msk	components\device\nrf51_bitfields.h	2366;"	d
GPIO_DIRSET_PIN9_Output	components\device\nrf51_bitfields.h	2368;"	d
GPIO_DIRSET_PIN9_Pos	components\device\nrf51_bitfields.h	2365;"	d
GPIO_DIRSET_PIN9_Set	components\device\nrf51_bitfields.h	2369;"	d
GPIO_DIR_PIN0_Input	components\device\nrf51_bitfields.h	2204;"	d
GPIO_DIR_PIN0_Msk	components\device\nrf51_bitfields.h	2203;"	d
GPIO_DIR_PIN0_Output	components\device\nrf51_bitfields.h	2205;"	d
GPIO_DIR_PIN0_Pos	components\device\nrf51_bitfields.h	2202;"	d
GPIO_DIR_PIN10_Input	components\device\nrf51_bitfields.h	2144;"	d
GPIO_DIR_PIN10_Msk	components\device\nrf51_bitfields.h	2143;"	d
GPIO_DIR_PIN10_Output	components\device\nrf51_bitfields.h	2145;"	d
GPIO_DIR_PIN10_Pos	components\device\nrf51_bitfields.h	2142;"	d
GPIO_DIR_PIN11_Input	components\device\nrf51_bitfields.h	2138;"	d
GPIO_DIR_PIN11_Msk	components\device\nrf51_bitfields.h	2137;"	d
GPIO_DIR_PIN11_Output	components\device\nrf51_bitfields.h	2139;"	d
GPIO_DIR_PIN11_Pos	components\device\nrf51_bitfields.h	2136;"	d
GPIO_DIR_PIN12_Input	components\device\nrf51_bitfields.h	2132;"	d
GPIO_DIR_PIN12_Msk	components\device\nrf51_bitfields.h	2131;"	d
GPIO_DIR_PIN12_Output	components\device\nrf51_bitfields.h	2133;"	d
GPIO_DIR_PIN12_Pos	components\device\nrf51_bitfields.h	2130;"	d
GPIO_DIR_PIN13_Input	components\device\nrf51_bitfields.h	2126;"	d
GPIO_DIR_PIN13_Msk	components\device\nrf51_bitfields.h	2125;"	d
GPIO_DIR_PIN13_Output	components\device\nrf51_bitfields.h	2127;"	d
GPIO_DIR_PIN13_Pos	components\device\nrf51_bitfields.h	2124;"	d
GPIO_DIR_PIN14_Input	components\device\nrf51_bitfields.h	2120;"	d
GPIO_DIR_PIN14_Msk	components\device\nrf51_bitfields.h	2119;"	d
GPIO_DIR_PIN14_Output	components\device\nrf51_bitfields.h	2121;"	d
GPIO_DIR_PIN14_Pos	components\device\nrf51_bitfields.h	2118;"	d
GPIO_DIR_PIN15_Input	components\device\nrf51_bitfields.h	2114;"	d
GPIO_DIR_PIN15_Msk	components\device\nrf51_bitfields.h	2113;"	d
GPIO_DIR_PIN15_Output	components\device\nrf51_bitfields.h	2115;"	d
GPIO_DIR_PIN15_Pos	components\device\nrf51_bitfields.h	2112;"	d
GPIO_DIR_PIN16_Input	components\device\nrf51_bitfields.h	2108;"	d
GPIO_DIR_PIN16_Msk	components\device\nrf51_bitfields.h	2107;"	d
GPIO_DIR_PIN16_Output	components\device\nrf51_bitfields.h	2109;"	d
GPIO_DIR_PIN16_Pos	components\device\nrf51_bitfields.h	2106;"	d
GPIO_DIR_PIN17_Input	components\device\nrf51_bitfields.h	2102;"	d
GPIO_DIR_PIN17_Msk	components\device\nrf51_bitfields.h	2101;"	d
GPIO_DIR_PIN17_Output	components\device\nrf51_bitfields.h	2103;"	d
GPIO_DIR_PIN17_Pos	components\device\nrf51_bitfields.h	2100;"	d
GPIO_DIR_PIN18_Input	components\device\nrf51_bitfields.h	2096;"	d
GPIO_DIR_PIN18_Msk	components\device\nrf51_bitfields.h	2095;"	d
GPIO_DIR_PIN18_Output	components\device\nrf51_bitfields.h	2097;"	d
GPIO_DIR_PIN18_Pos	components\device\nrf51_bitfields.h	2094;"	d
GPIO_DIR_PIN19_Input	components\device\nrf51_bitfields.h	2090;"	d
GPIO_DIR_PIN19_Msk	components\device\nrf51_bitfields.h	2089;"	d
GPIO_DIR_PIN19_Output	components\device\nrf51_bitfields.h	2091;"	d
GPIO_DIR_PIN19_Pos	components\device\nrf51_bitfields.h	2088;"	d
GPIO_DIR_PIN1_Input	components\device\nrf51_bitfields.h	2198;"	d
GPIO_DIR_PIN1_Msk	components\device\nrf51_bitfields.h	2197;"	d
GPIO_DIR_PIN1_Output	components\device\nrf51_bitfields.h	2199;"	d
GPIO_DIR_PIN1_Pos	components\device\nrf51_bitfields.h	2196;"	d
GPIO_DIR_PIN20_Input	components\device\nrf51_bitfields.h	2084;"	d
GPIO_DIR_PIN20_Msk	components\device\nrf51_bitfields.h	2083;"	d
GPIO_DIR_PIN20_Output	components\device\nrf51_bitfields.h	2085;"	d
GPIO_DIR_PIN20_Pos	components\device\nrf51_bitfields.h	2082;"	d
GPIO_DIR_PIN21_Input	components\device\nrf51_bitfields.h	2078;"	d
GPIO_DIR_PIN21_Msk	components\device\nrf51_bitfields.h	2077;"	d
GPIO_DIR_PIN21_Output	components\device\nrf51_bitfields.h	2079;"	d
GPIO_DIR_PIN21_Pos	components\device\nrf51_bitfields.h	2076;"	d
GPIO_DIR_PIN22_Input	components\device\nrf51_bitfields.h	2072;"	d
GPIO_DIR_PIN22_Msk	components\device\nrf51_bitfields.h	2071;"	d
GPIO_DIR_PIN22_Output	components\device\nrf51_bitfields.h	2073;"	d
GPIO_DIR_PIN22_Pos	components\device\nrf51_bitfields.h	2070;"	d
GPIO_DIR_PIN23_Input	components\device\nrf51_bitfields.h	2066;"	d
GPIO_DIR_PIN23_Msk	components\device\nrf51_bitfields.h	2065;"	d
GPIO_DIR_PIN23_Output	components\device\nrf51_bitfields.h	2067;"	d
GPIO_DIR_PIN23_Pos	components\device\nrf51_bitfields.h	2064;"	d
GPIO_DIR_PIN24_Input	components\device\nrf51_bitfields.h	2060;"	d
GPIO_DIR_PIN24_Msk	components\device\nrf51_bitfields.h	2059;"	d
GPIO_DIR_PIN24_Output	components\device\nrf51_bitfields.h	2061;"	d
GPIO_DIR_PIN24_Pos	components\device\nrf51_bitfields.h	2058;"	d
GPIO_DIR_PIN25_Input	components\device\nrf51_bitfields.h	2054;"	d
GPIO_DIR_PIN25_Msk	components\device\nrf51_bitfields.h	2053;"	d
GPIO_DIR_PIN25_Output	components\device\nrf51_bitfields.h	2055;"	d
GPIO_DIR_PIN25_Pos	components\device\nrf51_bitfields.h	2052;"	d
GPIO_DIR_PIN26_Input	components\device\nrf51_bitfields.h	2048;"	d
GPIO_DIR_PIN26_Msk	components\device\nrf51_bitfields.h	2047;"	d
GPIO_DIR_PIN26_Output	components\device\nrf51_bitfields.h	2049;"	d
GPIO_DIR_PIN26_Pos	components\device\nrf51_bitfields.h	2046;"	d
GPIO_DIR_PIN27_Input	components\device\nrf51_bitfields.h	2042;"	d
GPIO_DIR_PIN27_Msk	components\device\nrf51_bitfields.h	2041;"	d
GPIO_DIR_PIN27_Output	components\device\nrf51_bitfields.h	2043;"	d
GPIO_DIR_PIN27_Pos	components\device\nrf51_bitfields.h	2040;"	d
GPIO_DIR_PIN28_Input	components\device\nrf51_bitfields.h	2036;"	d
GPIO_DIR_PIN28_Msk	components\device\nrf51_bitfields.h	2035;"	d
GPIO_DIR_PIN28_Output	components\device\nrf51_bitfields.h	2037;"	d
GPIO_DIR_PIN28_Pos	components\device\nrf51_bitfields.h	2034;"	d
GPIO_DIR_PIN29_Input	components\device\nrf51_bitfields.h	2030;"	d
GPIO_DIR_PIN29_Msk	components\device\nrf51_bitfields.h	2029;"	d
GPIO_DIR_PIN29_Output	components\device\nrf51_bitfields.h	2031;"	d
GPIO_DIR_PIN29_Pos	components\device\nrf51_bitfields.h	2028;"	d
GPIO_DIR_PIN2_Input	components\device\nrf51_bitfields.h	2192;"	d
GPIO_DIR_PIN2_Msk	components\device\nrf51_bitfields.h	2191;"	d
GPIO_DIR_PIN2_Output	components\device\nrf51_bitfields.h	2193;"	d
GPIO_DIR_PIN2_Pos	components\device\nrf51_bitfields.h	2190;"	d
GPIO_DIR_PIN30_Input	components\device\nrf51_bitfields.h	2024;"	d
GPIO_DIR_PIN30_Msk	components\device\nrf51_bitfields.h	2023;"	d
GPIO_DIR_PIN30_Output	components\device\nrf51_bitfields.h	2025;"	d
GPIO_DIR_PIN30_Pos	components\device\nrf51_bitfields.h	2022;"	d
GPIO_DIR_PIN31_Input	components\device\nrf51_bitfields.h	2018;"	d
GPIO_DIR_PIN31_Msk	components\device\nrf51_bitfields.h	2017;"	d
GPIO_DIR_PIN31_Output	components\device\nrf51_bitfields.h	2019;"	d
GPIO_DIR_PIN31_Pos	components\device\nrf51_bitfields.h	2016;"	d
GPIO_DIR_PIN3_Input	components\device\nrf51_bitfields.h	2186;"	d
GPIO_DIR_PIN3_Msk	components\device\nrf51_bitfields.h	2185;"	d
GPIO_DIR_PIN3_Output	components\device\nrf51_bitfields.h	2187;"	d
GPIO_DIR_PIN3_Pos	components\device\nrf51_bitfields.h	2184;"	d
GPIO_DIR_PIN4_Input	components\device\nrf51_bitfields.h	2180;"	d
GPIO_DIR_PIN4_Msk	components\device\nrf51_bitfields.h	2179;"	d
GPIO_DIR_PIN4_Output	components\device\nrf51_bitfields.h	2181;"	d
GPIO_DIR_PIN4_Pos	components\device\nrf51_bitfields.h	2178;"	d
GPIO_DIR_PIN5_Input	components\device\nrf51_bitfields.h	2174;"	d
GPIO_DIR_PIN5_Msk	components\device\nrf51_bitfields.h	2173;"	d
GPIO_DIR_PIN5_Output	components\device\nrf51_bitfields.h	2175;"	d
GPIO_DIR_PIN5_Pos	components\device\nrf51_bitfields.h	2172;"	d
GPIO_DIR_PIN6_Input	components\device\nrf51_bitfields.h	2168;"	d
GPIO_DIR_PIN6_Msk	components\device\nrf51_bitfields.h	2167;"	d
GPIO_DIR_PIN6_Output	components\device\nrf51_bitfields.h	2169;"	d
GPIO_DIR_PIN6_Pos	components\device\nrf51_bitfields.h	2166;"	d
GPIO_DIR_PIN7_Input	components\device\nrf51_bitfields.h	2162;"	d
GPIO_DIR_PIN7_Msk	components\device\nrf51_bitfields.h	2161;"	d
GPIO_DIR_PIN7_Output	components\device\nrf51_bitfields.h	2163;"	d
GPIO_DIR_PIN7_Pos	components\device\nrf51_bitfields.h	2160;"	d
GPIO_DIR_PIN8_Input	components\device\nrf51_bitfields.h	2156;"	d
GPIO_DIR_PIN8_Msk	components\device\nrf51_bitfields.h	2155;"	d
GPIO_DIR_PIN8_Output	components\device\nrf51_bitfields.h	2157;"	d
GPIO_DIR_PIN8_Pos	components\device\nrf51_bitfields.h	2154;"	d
GPIO_DIR_PIN9_Input	components\device\nrf51_bitfields.h	2150;"	d
GPIO_DIR_PIN9_Msk	components\device\nrf51_bitfields.h	2149;"	d
GPIO_DIR_PIN9_Output	components\device\nrf51_bitfields.h	2151;"	d
GPIO_DIR_PIN9_Pos	components\device\nrf51_bitfields.h	2148;"	d
GPIO_IN_PIN0_High	components\device\nrf51_bitfields.h	2010;"	d
GPIO_IN_PIN0_Low	components\device\nrf51_bitfields.h	2009;"	d
GPIO_IN_PIN0_Msk	components\device\nrf51_bitfields.h	2008;"	d
GPIO_IN_PIN0_Pos	components\device\nrf51_bitfields.h	2007;"	d
GPIO_IN_PIN10_High	components\device\nrf51_bitfields.h	1950;"	d
GPIO_IN_PIN10_Low	components\device\nrf51_bitfields.h	1949;"	d
GPIO_IN_PIN10_Msk	components\device\nrf51_bitfields.h	1948;"	d
GPIO_IN_PIN10_Pos	components\device\nrf51_bitfields.h	1947;"	d
GPIO_IN_PIN11_High	components\device\nrf51_bitfields.h	1944;"	d
GPIO_IN_PIN11_Low	components\device\nrf51_bitfields.h	1943;"	d
GPIO_IN_PIN11_Msk	components\device\nrf51_bitfields.h	1942;"	d
GPIO_IN_PIN11_Pos	components\device\nrf51_bitfields.h	1941;"	d
GPIO_IN_PIN12_High	components\device\nrf51_bitfields.h	1938;"	d
GPIO_IN_PIN12_Low	components\device\nrf51_bitfields.h	1937;"	d
GPIO_IN_PIN12_Msk	components\device\nrf51_bitfields.h	1936;"	d
GPIO_IN_PIN12_Pos	components\device\nrf51_bitfields.h	1935;"	d
GPIO_IN_PIN13_High	components\device\nrf51_bitfields.h	1932;"	d
GPIO_IN_PIN13_Low	components\device\nrf51_bitfields.h	1931;"	d
GPIO_IN_PIN13_Msk	components\device\nrf51_bitfields.h	1930;"	d
GPIO_IN_PIN13_Pos	components\device\nrf51_bitfields.h	1929;"	d
GPIO_IN_PIN14_High	components\device\nrf51_bitfields.h	1926;"	d
GPIO_IN_PIN14_Low	components\device\nrf51_bitfields.h	1925;"	d
GPIO_IN_PIN14_Msk	components\device\nrf51_bitfields.h	1924;"	d
GPIO_IN_PIN14_Pos	components\device\nrf51_bitfields.h	1923;"	d
GPIO_IN_PIN15_High	components\device\nrf51_bitfields.h	1920;"	d
GPIO_IN_PIN15_Low	components\device\nrf51_bitfields.h	1919;"	d
GPIO_IN_PIN15_Msk	components\device\nrf51_bitfields.h	1918;"	d
GPIO_IN_PIN15_Pos	components\device\nrf51_bitfields.h	1917;"	d
GPIO_IN_PIN16_High	components\device\nrf51_bitfields.h	1914;"	d
GPIO_IN_PIN16_Low	components\device\nrf51_bitfields.h	1913;"	d
GPIO_IN_PIN16_Msk	components\device\nrf51_bitfields.h	1912;"	d
GPIO_IN_PIN16_Pos	components\device\nrf51_bitfields.h	1911;"	d
GPIO_IN_PIN17_High	components\device\nrf51_bitfields.h	1908;"	d
GPIO_IN_PIN17_Low	components\device\nrf51_bitfields.h	1907;"	d
GPIO_IN_PIN17_Msk	components\device\nrf51_bitfields.h	1906;"	d
GPIO_IN_PIN17_Pos	components\device\nrf51_bitfields.h	1905;"	d
GPIO_IN_PIN18_High	components\device\nrf51_bitfields.h	1902;"	d
GPIO_IN_PIN18_Low	components\device\nrf51_bitfields.h	1901;"	d
GPIO_IN_PIN18_Msk	components\device\nrf51_bitfields.h	1900;"	d
GPIO_IN_PIN18_Pos	components\device\nrf51_bitfields.h	1899;"	d
GPIO_IN_PIN19_High	components\device\nrf51_bitfields.h	1896;"	d
GPIO_IN_PIN19_Low	components\device\nrf51_bitfields.h	1895;"	d
GPIO_IN_PIN19_Msk	components\device\nrf51_bitfields.h	1894;"	d
GPIO_IN_PIN19_Pos	components\device\nrf51_bitfields.h	1893;"	d
GPIO_IN_PIN1_High	components\device\nrf51_bitfields.h	2004;"	d
GPIO_IN_PIN1_Low	components\device\nrf51_bitfields.h	2003;"	d
GPIO_IN_PIN1_Msk	components\device\nrf51_bitfields.h	2002;"	d
GPIO_IN_PIN1_Pos	components\device\nrf51_bitfields.h	2001;"	d
GPIO_IN_PIN20_High	components\device\nrf51_bitfields.h	1890;"	d
GPIO_IN_PIN20_Low	components\device\nrf51_bitfields.h	1889;"	d
GPIO_IN_PIN20_Msk	components\device\nrf51_bitfields.h	1888;"	d
GPIO_IN_PIN20_Pos	components\device\nrf51_bitfields.h	1887;"	d
GPIO_IN_PIN21_High	components\device\nrf51_bitfields.h	1884;"	d
GPIO_IN_PIN21_Low	components\device\nrf51_bitfields.h	1883;"	d
GPIO_IN_PIN21_Msk	components\device\nrf51_bitfields.h	1882;"	d
GPIO_IN_PIN21_Pos	components\device\nrf51_bitfields.h	1881;"	d
GPIO_IN_PIN22_High	components\device\nrf51_bitfields.h	1878;"	d
GPIO_IN_PIN22_Low	components\device\nrf51_bitfields.h	1877;"	d
GPIO_IN_PIN22_Msk	components\device\nrf51_bitfields.h	1876;"	d
GPIO_IN_PIN22_Pos	components\device\nrf51_bitfields.h	1875;"	d
GPIO_IN_PIN23_High	components\device\nrf51_bitfields.h	1872;"	d
GPIO_IN_PIN23_Low	components\device\nrf51_bitfields.h	1871;"	d
GPIO_IN_PIN23_Msk	components\device\nrf51_bitfields.h	1870;"	d
GPIO_IN_PIN23_Pos	components\device\nrf51_bitfields.h	1869;"	d
GPIO_IN_PIN24_High	components\device\nrf51_bitfields.h	1866;"	d
GPIO_IN_PIN24_Low	components\device\nrf51_bitfields.h	1865;"	d
GPIO_IN_PIN24_Msk	components\device\nrf51_bitfields.h	1864;"	d
GPIO_IN_PIN24_Pos	components\device\nrf51_bitfields.h	1863;"	d
GPIO_IN_PIN25_High	components\device\nrf51_bitfields.h	1860;"	d
GPIO_IN_PIN25_Low	components\device\nrf51_bitfields.h	1859;"	d
GPIO_IN_PIN25_Msk	components\device\nrf51_bitfields.h	1858;"	d
GPIO_IN_PIN25_Pos	components\device\nrf51_bitfields.h	1857;"	d
GPIO_IN_PIN26_High	components\device\nrf51_bitfields.h	1854;"	d
GPIO_IN_PIN26_Low	components\device\nrf51_bitfields.h	1853;"	d
GPIO_IN_PIN26_Msk	components\device\nrf51_bitfields.h	1852;"	d
GPIO_IN_PIN26_Pos	components\device\nrf51_bitfields.h	1851;"	d
GPIO_IN_PIN27_High	components\device\nrf51_bitfields.h	1848;"	d
GPIO_IN_PIN27_Low	components\device\nrf51_bitfields.h	1847;"	d
GPIO_IN_PIN27_Msk	components\device\nrf51_bitfields.h	1846;"	d
GPIO_IN_PIN27_Pos	components\device\nrf51_bitfields.h	1845;"	d
GPIO_IN_PIN28_High	components\device\nrf51_bitfields.h	1842;"	d
GPIO_IN_PIN28_Low	components\device\nrf51_bitfields.h	1841;"	d
GPIO_IN_PIN28_Msk	components\device\nrf51_bitfields.h	1840;"	d
GPIO_IN_PIN28_Pos	components\device\nrf51_bitfields.h	1839;"	d
GPIO_IN_PIN29_High	components\device\nrf51_bitfields.h	1836;"	d
GPIO_IN_PIN29_Low	components\device\nrf51_bitfields.h	1835;"	d
GPIO_IN_PIN29_Msk	components\device\nrf51_bitfields.h	1834;"	d
GPIO_IN_PIN29_Pos	components\device\nrf51_bitfields.h	1833;"	d
GPIO_IN_PIN2_High	components\device\nrf51_bitfields.h	1998;"	d
GPIO_IN_PIN2_Low	components\device\nrf51_bitfields.h	1997;"	d
GPIO_IN_PIN2_Msk	components\device\nrf51_bitfields.h	1996;"	d
GPIO_IN_PIN2_Pos	components\device\nrf51_bitfields.h	1995;"	d
GPIO_IN_PIN30_High	components\device\nrf51_bitfields.h	1830;"	d
GPIO_IN_PIN30_Low	components\device\nrf51_bitfields.h	1829;"	d
GPIO_IN_PIN30_Msk	components\device\nrf51_bitfields.h	1828;"	d
GPIO_IN_PIN30_Pos	components\device\nrf51_bitfields.h	1827;"	d
GPIO_IN_PIN31_High	components\device\nrf51_bitfields.h	1824;"	d
GPIO_IN_PIN31_Low	components\device\nrf51_bitfields.h	1823;"	d
GPIO_IN_PIN31_Msk	components\device\nrf51_bitfields.h	1822;"	d
GPIO_IN_PIN31_Pos	components\device\nrf51_bitfields.h	1821;"	d
GPIO_IN_PIN3_High	components\device\nrf51_bitfields.h	1992;"	d
GPIO_IN_PIN3_Low	components\device\nrf51_bitfields.h	1991;"	d
GPIO_IN_PIN3_Msk	components\device\nrf51_bitfields.h	1990;"	d
GPIO_IN_PIN3_Pos	components\device\nrf51_bitfields.h	1989;"	d
GPIO_IN_PIN4_High	components\device\nrf51_bitfields.h	1986;"	d
GPIO_IN_PIN4_Low	components\device\nrf51_bitfields.h	1985;"	d
GPIO_IN_PIN4_Msk	components\device\nrf51_bitfields.h	1984;"	d
GPIO_IN_PIN4_Pos	components\device\nrf51_bitfields.h	1983;"	d
GPIO_IN_PIN5_High	components\device\nrf51_bitfields.h	1980;"	d
GPIO_IN_PIN5_Low	components\device\nrf51_bitfields.h	1979;"	d
GPIO_IN_PIN5_Msk	components\device\nrf51_bitfields.h	1978;"	d
GPIO_IN_PIN5_Pos	components\device\nrf51_bitfields.h	1977;"	d
GPIO_IN_PIN6_High	components\device\nrf51_bitfields.h	1974;"	d
GPIO_IN_PIN6_Low	components\device\nrf51_bitfields.h	1973;"	d
GPIO_IN_PIN6_Msk	components\device\nrf51_bitfields.h	1972;"	d
GPIO_IN_PIN6_Pos	components\device\nrf51_bitfields.h	1971;"	d
GPIO_IN_PIN7_High	components\device\nrf51_bitfields.h	1968;"	d
GPIO_IN_PIN7_Low	components\device\nrf51_bitfields.h	1967;"	d
GPIO_IN_PIN7_Msk	components\device\nrf51_bitfields.h	1966;"	d
GPIO_IN_PIN7_Pos	components\device\nrf51_bitfields.h	1965;"	d
GPIO_IN_PIN8_High	components\device\nrf51_bitfields.h	1962;"	d
GPIO_IN_PIN8_Low	components\device\nrf51_bitfields.h	1961;"	d
GPIO_IN_PIN8_Msk	components\device\nrf51_bitfields.h	1960;"	d
GPIO_IN_PIN8_Pos	components\device\nrf51_bitfields.h	1959;"	d
GPIO_IN_PIN9_High	components\device\nrf51_bitfields.h	1956;"	d
GPIO_IN_PIN9_Low	components\device\nrf51_bitfields.h	1955;"	d
GPIO_IN_PIN9_Msk	components\device\nrf51_bitfields.h	1954;"	d
GPIO_IN_PIN9_Pos	components\device\nrf51_bitfields.h	1953;"	d
GPIO_OUTCLR_PIN0_Clear	components\device\nrf51_bitfields.h	1815;"	d
GPIO_OUTCLR_PIN0_High	components\device\nrf51_bitfields.h	1814;"	d
GPIO_OUTCLR_PIN0_Low	components\device\nrf51_bitfields.h	1813;"	d
GPIO_OUTCLR_PIN0_Msk	components\device\nrf51_bitfields.h	1812;"	d
GPIO_OUTCLR_PIN0_Pos	components\device\nrf51_bitfields.h	1811;"	d
GPIO_OUTCLR_PIN10_Clear	components\device\nrf51_bitfields.h	1745;"	d
GPIO_OUTCLR_PIN10_High	components\device\nrf51_bitfields.h	1744;"	d
GPIO_OUTCLR_PIN10_Low	components\device\nrf51_bitfields.h	1743;"	d
GPIO_OUTCLR_PIN10_Msk	components\device\nrf51_bitfields.h	1742;"	d
GPIO_OUTCLR_PIN10_Pos	components\device\nrf51_bitfields.h	1741;"	d
GPIO_OUTCLR_PIN11_Clear	components\device\nrf51_bitfields.h	1738;"	d
GPIO_OUTCLR_PIN11_High	components\device\nrf51_bitfields.h	1737;"	d
GPIO_OUTCLR_PIN11_Low	components\device\nrf51_bitfields.h	1736;"	d
GPIO_OUTCLR_PIN11_Msk	components\device\nrf51_bitfields.h	1735;"	d
GPIO_OUTCLR_PIN11_Pos	components\device\nrf51_bitfields.h	1734;"	d
GPIO_OUTCLR_PIN12_Clear	components\device\nrf51_bitfields.h	1731;"	d
GPIO_OUTCLR_PIN12_High	components\device\nrf51_bitfields.h	1730;"	d
GPIO_OUTCLR_PIN12_Low	components\device\nrf51_bitfields.h	1729;"	d
GPIO_OUTCLR_PIN12_Msk	components\device\nrf51_bitfields.h	1728;"	d
GPIO_OUTCLR_PIN12_Pos	components\device\nrf51_bitfields.h	1727;"	d
GPIO_OUTCLR_PIN13_Clear	components\device\nrf51_bitfields.h	1724;"	d
GPIO_OUTCLR_PIN13_High	components\device\nrf51_bitfields.h	1723;"	d
GPIO_OUTCLR_PIN13_Low	components\device\nrf51_bitfields.h	1722;"	d
GPIO_OUTCLR_PIN13_Msk	components\device\nrf51_bitfields.h	1721;"	d
GPIO_OUTCLR_PIN13_Pos	components\device\nrf51_bitfields.h	1720;"	d
GPIO_OUTCLR_PIN14_Clear	components\device\nrf51_bitfields.h	1717;"	d
GPIO_OUTCLR_PIN14_High	components\device\nrf51_bitfields.h	1716;"	d
GPIO_OUTCLR_PIN14_Low	components\device\nrf51_bitfields.h	1715;"	d
GPIO_OUTCLR_PIN14_Msk	components\device\nrf51_bitfields.h	1714;"	d
GPIO_OUTCLR_PIN14_Pos	components\device\nrf51_bitfields.h	1713;"	d
GPIO_OUTCLR_PIN15_Clear	components\device\nrf51_bitfields.h	1710;"	d
GPIO_OUTCLR_PIN15_High	components\device\nrf51_bitfields.h	1709;"	d
GPIO_OUTCLR_PIN15_Low	components\device\nrf51_bitfields.h	1708;"	d
GPIO_OUTCLR_PIN15_Msk	components\device\nrf51_bitfields.h	1707;"	d
GPIO_OUTCLR_PIN15_Pos	components\device\nrf51_bitfields.h	1706;"	d
GPIO_OUTCLR_PIN16_Clear	components\device\nrf51_bitfields.h	1703;"	d
GPIO_OUTCLR_PIN16_High	components\device\nrf51_bitfields.h	1702;"	d
GPIO_OUTCLR_PIN16_Low	components\device\nrf51_bitfields.h	1701;"	d
GPIO_OUTCLR_PIN16_Msk	components\device\nrf51_bitfields.h	1700;"	d
GPIO_OUTCLR_PIN16_Pos	components\device\nrf51_bitfields.h	1699;"	d
GPIO_OUTCLR_PIN17_Clear	components\device\nrf51_bitfields.h	1696;"	d
GPIO_OUTCLR_PIN17_High	components\device\nrf51_bitfields.h	1695;"	d
GPIO_OUTCLR_PIN17_Low	components\device\nrf51_bitfields.h	1694;"	d
GPIO_OUTCLR_PIN17_Msk	components\device\nrf51_bitfields.h	1693;"	d
GPIO_OUTCLR_PIN17_Pos	components\device\nrf51_bitfields.h	1692;"	d
GPIO_OUTCLR_PIN18_Clear	components\device\nrf51_bitfields.h	1689;"	d
GPIO_OUTCLR_PIN18_High	components\device\nrf51_bitfields.h	1688;"	d
GPIO_OUTCLR_PIN18_Low	components\device\nrf51_bitfields.h	1687;"	d
GPIO_OUTCLR_PIN18_Msk	components\device\nrf51_bitfields.h	1686;"	d
GPIO_OUTCLR_PIN18_Pos	components\device\nrf51_bitfields.h	1685;"	d
GPIO_OUTCLR_PIN19_Clear	components\device\nrf51_bitfields.h	1682;"	d
GPIO_OUTCLR_PIN19_High	components\device\nrf51_bitfields.h	1681;"	d
GPIO_OUTCLR_PIN19_Low	components\device\nrf51_bitfields.h	1680;"	d
GPIO_OUTCLR_PIN19_Msk	components\device\nrf51_bitfields.h	1679;"	d
GPIO_OUTCLR_PIN19_Pos	components\device\nrf51_bitfields.h	1678;"	d
GPIO_OUTCLR_PIN1_Clear	components\device\nrf51_bitfields.h	1808;"	d
GPIO_OUTCLR_PIN1_High	components\device\nrf51_bitfields.h	1807;"	d
GPIO_OUTCLR_PIN1_Low	components\device\nrf51_bitfields.h	1806;"	d
GPIO_OUTCLR_PIN1_Msk	components\device\nrf51_bitfields.h	1805;"	d
GPIO_OUTCLR_PIN1_Pos	components\device\nrf51_bitfields.h	1804;"	d
GPIO_OUTCLR_PIN20_Clear	components\device\nrf51_bitfields.h	1675;"	d
GPIO_OUTCLR_PIN20_High	components\device\nrf51_bitfields.h	1674;"	d
GPIO_OUTCLR_PIN20_Low	components\device\nrf51_bitfields.h	1673;"	d
GPIO_OUTCLR_PIN20_Msk	components\device\nrf51_bitfields.h	1672;"	d
GPIO_OUTCLR_PIN20_Pos	components\device\nrf51_bitfields.h	1671;"	d
GPIO_OUTCLR_PIN21_Clear	components\device\nrf51_bitfields.h	1668;"	d
GPIO_OUTCLR_PIN21_High	components\device\nrf51_bitfields.h	1667;"	d
GPIO_OUTCLR_PIN21_Low	components\device\nrf51_bitfields.h	1666;"	d
GPIO_OUTCLR_PIN21_Msk	components\device\nrf51_bitfields.h	1665;"	d
GPIO_OUTCLR_PIN21_Pos	components\device\nrf51_bitfields.h	1664;"	d
GPIO_OUTCLR_PIN22_Clear	components\device\nrf51_bitfields.h	1661;"	d
GPIO_OUTCLR_PIN22_High	components\device\nrf51_bitfields.h	1660;"	d
GPIO_OUTCLR_PIN22_Low	components\device\nrf51_bitfields.h	1659;"	d
GPIO_OUTCLR_PIN22_Msk	components\device\nrf51_bitfields.h	1658;"	d
GPIO_OUTCLR_PIN22_Pos	components\device\nrf51_bitfields.h	1657;"	d
GPIO_OUTCLR_PIN23_Clear	components\device\nrf51_bitfields.h	1654;"	d
GPIO_OUTCLR_PIN23_High	components\device\nrf51_bitfields.h	1653;"	d
GPIO_OUTCLR_PIN23_Low	components\device\nrf51_bitfields.h	1652;"	d
GPIO_OUTCLR_PIN23_Msk	components\device\nrf51_bitfields.h	1651;"	d
GPIO_OUTCLR_PIN23_Pos	components\device\nrf51_bitfields.h	1650;"	d
GPIO_OUTCLR_PIN24_Clear	components\device\nrf51_bitfields.h	1647;"	d
GPIO_OUTCLR_PIN24_High	components\device\nrf51_bitfields.h	1646;"	d
GPIO_OUTCLR_PIN24_Low	components\device\nrf51_bitfields.h	1645;"	d
GPIO_OUTCLR_PIN24_Msk	components\device\nrf51_bitfields.h	1644;"	d
GPIO_OUTCLR_PIN24_Pos	components\device\nrf51_bitfields.h	1643;"	d
GPIO_OUTCLR_PIN25_Clear	components\device\nrf51_bitfields.h	1640;"	d
GPIO_OUTCLR_PIN25_High	components\device\nrf51_bitfields.h	1639;"	d
GPIO_OUTCLR_PIN25_Low	components\device\nrf51_bitfields.h	1638;"	d
GPIO_OUTCLR_PIN25_Msk	components\device\nrf51_bitfields.h	1637;"	d
GPIO_OUTCLR_PIN25_Pos	components\device\nrf51_bitfields.h	1636;"	d
GPIO_OUTCLR_PIN26_Clear	components\device\nrf51_bitfields.h	1633;"	d
GPIO_OUTCLR_PIN26_High	components\device\nrf51_bitfields.h	1632;"	d
GPIO_OUTCLR_PIN26_Low	components\device\nrf51_bitfields.h	1631;"	d
GPIO_OUTCLR_PIN26_Msk	components\device\nrf51_bitfields.h	1630;"	d
GPIO_OUTCLR_PIN26_Pos	components\device\nrf51_bitfields.h	1629;"	d
GPIO_OUTCLR_PIN27_Clear	components\device\nrf51_bitfields.h	1626;"	d
GPIO_OUTCLR_PIN27_High	components\device\nrf51_bitfields.h	1625;"	d
GPIO_OUTCLR_PIN27_Low	components\device\nrf51_bitfields.h	1624;"	d
GPIO_OUTCLR_PIN27_Msk	components\device\nrf51_bitfields.h	1623;"	d
GPIO_OUTCLR_PIN27_Pos	components\device\nrf51_bitfields.h	1622;"	d
GPIO_OUTCLR_PIN28_Clear	components\device\nrf51_bitfields.h	1619;"	d
GPIO_OUTCLR_PIN28_High	components\device\nrf51_bitfields.h	1618;"	d
GPIO_OUTCLR_PIN28_Low	components\device\nrf51_bitfields.h	1617;"	d
GPIO_OUTCLR_PIN28_Msk	components\device\nrf51_bitfields.h	1616;"	d
GPIO_OUTCLR_PIN28_Pos	components\device\nrf51_bitfields.h	1615;"	d
GPIO_OUTCLR_PIN29_Clear	components\device\nrf51_bitfields.h	1612;"	d
GPIO_OUTCLR_PIN29_High	components\device\nrf51_bitfields.h	1611;"	d
GPIO_OUTCLR_PIN29_Low	components\device\nrf51_bitfields.h	1610;"	d
GPIO_OUTCLR_PIN29_Msk	components\device\nrf51_bitfields.h	1609;"	d
GPIO_OUTCLR_PIN29_Pos	components\device\nrf51_bitfields.h	1608;"	d
GPIO_OUTCLR_PIN2_Clear	components\device\nrf51_bitfields.h	1801;"	d
GPIO_OUTCLR_PIN2_High	components\device\nrf51_bitfields.h	1800;"	d
GPIO_OUTCLR_PIN2_Low	components\device\nrf51_bitfields.h	1799;"	d
GPIO_OUTCLR_PIN2_Msk	components\device\nrf51_bitfields.h	1798;"	d
GPIO_OUTCLR_PIN2_Pos	components\device\nrf51_bitfields.h	1797;"	d
GPIO_OUTCLR_PIN30_Clear	components\device\nrf51_bitfields.h	1605;"	d
GPIO_OUTCLR_PIN30_High	components\device\nrf51_bitfields.h	1604;"	d
GPIO_OUTCLR_PIN30_Low	components\device\nrf51_bitfields.h	1603;"	d
GPIO_OUTCLR_PIN30_Msk	components\device\nrf51_bitfields.h	1602;"	d
GPIO_OUTCLR_PIN30_Pos	components\device\nrf51_bitfields.h	1601;"	d
GPIO_OUTCLR_PIN31_Clear	components\device\nrf51_bitfields.h	1598;"	d
GPIO_OUTCLR_PIN31_High	components\device\nrf51_bitfields.h	1597;"	d
GPIO_OUTCLR_PIN31_Low	components\device\nrf51_bitfields.h	1596;"	d
GPIO_OUTCLR_PIN31_Msk	components\device\nrf51_bitfields.h	1595;"	d
GPIO_OUTCLR_PIN31_Pos	components\device\nrf51_bitfields.h	1594;"	d
GPIO_OUTCLR_PIN3_Clear	components\device\nrf51_bitfields.h	1794;"	d
GPIO_OUTCLR_PIN3_High	components\device\nrf51_bitfields.h	1793;"	d
GPIO_OUTCLR_PIN3_Low	components\device\nrf51_bitfields.h	1792;"	d
GPIO_OUTCLR_PIN3_Msk	components\device\nrf51_bitfields.h	1791;"	d
GPIO_OUTCLR_PIN3_Pos	components\device\nrf51_bitfields.h	1790;"	d
GPIO_OUTCLR_PIN4_Clear	components\device\nrf51_bitfields.h	1787;"	d
GPIO_OUTCLR_PIN4_High	components\device\nrf51_bitfields.h	1786;"	d
GPIO_OUTCLR_PIN4_Low	components\device\nrf51_bitfields.h	1785;"	d
GPIO_OUTCLR_PIN4_Msk	components\device\nrf51_bitfields.h	1784;"	d
GPIO_OUTCLR_PIN4_Pos	components\device\nrf51_bitfields.h	1783;"	d
GPIO_OUTCLR_PIN5_Clear	components\device\nrf51_bitfields.h	1780;"	d
GPIO_OUTCLR_PIN5_High	components\device\nrf51_bitfields.h	1779;"	d
GPIO_OUTCLR_PIN5_Low	components\device\nrf51_bitfields.h	1778;"	d
GPIO_OUTCLR_PIN5_Msk	components\device\nrf51_bitfields.h	1777;"	d
GPIO_OUTCLR_PIN5_Pos	components\device\nrf51_bitfields.h	1776;"	d
GPIO_OUTCLR_PIN6_Clear	components\device\nrf51_bitfields.h	1773;"	d
GPIO_OUTCLR_PIN6_High	components\device\nrf51_bitfields.h	1772;"	d
GPIO_OUTCLR_PIN6_Low	components\device\nrf51_bitfields.h	1771;"	d
GPIO_OUTCLR_PIN6_Msk	components\device\nrf51_bitfields.h	1770;"	d
GPIO_OUTCLR_PIN6_Pos	components\device\nrf51_bitfields.h	1769;"	d
GPIO_OUTCLR_PIN7_Clear	components\device\nrf51_bitfields.h	1766;"	d
GPIO_OUTCLR_PIN7_High	components\device\nrf51_bitfields.h	1765;"	d
GPIO_OUTCLR_PIN7_Low	components\device\nrf51_bitfields.h	1764;"	d
GPIO_OUTCLR_PIN7_Msk	components\device\nrf51_bitfields.h	1763;"	d
GPIO_OUTCLR_PIN7_Pos	components\device\nrf51_bitfields.h	1762;"	d
GPIO_OUTCLR_PIN8_Clear	components\device\nrf51_bitfields.h	1759;"	d
GPIO_OUTCLR_PIN8_High	components\device\nrf51_bitfields.h	1758;"	d
GPIO_OUTCLR_PIN8_Low	components\device\nrf51_bitfields.h	1757;"	d
GPIO_OUTCLR_PIN8_Msk	components\device\nrf51_bitfields.h	1756;"	d
GPIO_OUTCLR_PIN8_Pos	components\device\nrf51_bitfields.h	1755;"	d
GPIO_OUTCLR_PIN9_Clear	components\device\nrf51_bitfields.h	1752;"	d
GPIO_OUTCLR_PIN9_High	components\device\nrf51_bitfields.h	1751;"	d
GPIO_OUTCLR_PIN9_Low	components\device\nrf51_bitfields.h	1750;"	d
GPIO_OUTCLR_PIN9_Msk	components\device\nrf51_bitfields.h	1749;"	d
GPIO_OUTCLR_PIN9_Pos	components\device\nrf51_bitfields.h	1748;"	d
GPIO_OUTSET_PIN0_High	components\device\nrf51_bitfields.h	1587;"	d
GPIO_OUTSET_PIN0_Low	components\device\nrf51_bitfields.h	1586;"	d
GPIO_OUTSET_PIN0_Msk	components\device\nrf51_bitfields.h	1585;"	d
GPIO_OUTSET_PIN0_Pos	components\device\nrf51_bitfields.h	1584;"	d
GPIO_OUTSET_PIN0_Set	components\device\nrf51_bitfields.h	1588;"	d
GPIO_OUTSET_PIN10_High	components\device\nrf51_bitfields.h	1517;"	d
GPIO_OUTSET_PIN10_Low	components\device\nrf51_bitfields.h	1516;"	d
GPIO_OUTSET_PIN10_Msk	components\device\nrf51_bitfields.h	1515;"	d
GPIO_OUTSET_PIN10_Pos	components\device\nrf51_bitfields.h	1514;"	d
GPIO_OUTSET_PIN10_Set	components\device\nrf51_bitfields.h	1518;"	d
GPIO_OUTSET_PIN11_High	components\device\nrf51_bitfields.h	1510;"	d
GPIO_OUTSET_PIN11_Low	components\device\nrf51_bitfields.h	1509;"	d
GPIO_OUTSET_PIN11_Msk	components\device\nrf51_bitfields.h	1508;"	d
GPIO_OUTSET_PIN11_Pos	components\device\nrf51_bitfields.h	1507;"	d
GPIO_OUTSET_PIN11_Set	components\device\nrf51_bitfields.h	1511;"	d
GPIO_OUTSET_PIN12_High	components\device\nrf51_bitfields.h	1503;"	d
GPIO_OUTSET_PIN12_Low	components\device\nrf51_bitfields.h	1502;"	d
GPIO_OUTSET_PIN12_Msk	components\device\nrf51_bitfields.h	1501;"	d
GPIO_OUTSET_PIN12_Pos	components\device\nrf51_bitfields.h	1500;"	d
GPIO_OUTSET_PIN12_Set	components\device\nrf51_bitfields.h	1504;"	d
GPIO_OUTSET_PIN13_High	components\device\nrf51_bitfields.h	1496;"	d
GPIO_OUTSET_PIN13_Low	components\device\nrf51_bitfields.h	1495;"	d
GPIO_OUTSET_PIN13_Msk	components\device\nrf51_bitfields.h	1494;"	d
GPIO_OUTSET_PIN13_Pos	components\device\nrf51_bitfields.h	1493;"	d
GPIO_OUTSET_PIN13_Set	components\device\nrf51_bitfields.h	1497;"	d
GPIO_OUTSET_PIN14_High	components\device\nrf51_bitfields.h	1489;"	d
GPIO_OUTSET_PIN14_Low	components\device\nrf51_bitfields.h	1488;"	d
GPIO_OUTSET_PIN14_Msk	components\device\nrf51_bitfields.h	1487;"	d
GPIO_OUTSET_PIN14_Pos	components\device\nrf51_bitfields.h	1486;"	d
GPIO_OUTSET_PIN14_Set	components\device\nrf51_bitfields.h	1490;"	d
GPIO_OUTSET_PIN15_High	components\device\nrf51_bitfields.h	1482;"	d
GPIO_OUTSET_PIN15_Low	components\device\nrf51_bitfields.h	1481;"	d
GPIO_OUTSET_PIN15_Msk	components\device\nrf51_bitfields.h	1480;"	d
GPIO_OUTSET_PIN15_Pos	components\device\nrf51_bitfields.h	1479;"	d
GPIO_OUTSET_PIN15_Set	components\device\nrf51_bitfields.h	1483;"	d
GPIO_OUTSET_PIN16_High	components\device\nrf51_bitfields.h	1475;"	d
GPIO_OUTSET_PIN16_Low	components\device\nrf51_bitfields.h	1474;"	d
GPIO_OUTSET_PIN16_Msk	components\device\nrf51_bitfields.h	1473;"	d
GPIO_OUTSET_PIN16_Pos	components\device\nrf51_bitfields.h	1472;"	d
GPIO_OUTSET_PIN16_Set	components\device\nrf51_bitfields.h	1476;"	d
GPIO_OUTSET_PIN17_High	components\device\nrf51_bitfields.h	1468;"	d
GPIO_OUTSET_PIN17_Low	components\device\nrf51_bitfields.h	1467;"	d
GPIO_OUTSET_PIN17_Msk	components\device\nrf51_bitfields.h	1466;"	d
GPIO_OUTSET_PIN17_Pos	components\device\nrf51_bitfields.h	1465;"	d
GPIO_OUTSET_PIN17_Set	components\device\nrf51_bitfields.h	1469;"	d
GPIO_OUTSET_PIN18_High	components\device\nrf51_bitfields.h	1461;"	d
GPIO_OUTSET_PIN18_Low	components\device\nrf51_bitfields.h	1460;"	d
GPIO_OUTSET_PIN18_Msk	components\device\nrf51_bitfields.h	1459;"	d
GPIO_OUTSET_PIN18_Pos	components\device\nrf51_bitfields.h	1458;"	d
GPIO_OUTSET_PIN18_Set	components\device\nrf51_bitfields.h	1462;"	d
GPIO_OUTSET_PIN19_High	components\device\nrf51_bitfields.h	1454;"	d
GPIO_OUTSET_PIN19_Low	components\device\nrf51_bitfields.h	1453;"	d
GPIO_OUTSET_PIN19_Msk	components\device\nrf51_bitfields.h	1452;"	d
GPIO_OUTSET_PIN19_Pos	components\device\nrf51_bitfields.h	1451;"	d
GPIO_OUTSET_PIN19_Set	components\device\nrf51_bitfields.h	1455;"	d
GPIO_OUTSET_PIN1_High	components\device\nrf51_bitfields.h	1580;"	d
GPIO_OUTSET_PIN1_Low	components\device\nrf51_bitfields.h	1579;"	d
GPIO_OUTSET_PIN1_Msk	components\device\nrf51_bitfields.h	1578;"	d
GPIO_OUTSET_PIN1_Pos	components\device\nrf51_bitfields.h	1577;"	d
GPIO_OUTSET_PIN1_Set	components\device\nrf51_bitfields.h	1581;"	d
GPIO_OUTSET_PIN20_High	components\device\nrf51_bitfields.h	1447;"	d
GPIO_OUTSET_PIN20_Low	components\device\nrf51_bitfields.h	1446;"	d
GPIO_OUTSET_PIN20_Msk	components\device\nrf51_bitfields.h	1445;"	d
GPIO_OUTSET_PIN20_Pos	components\device\nrf51_bitfields.h	1444;"	d
GPIO_OUTSET_PIN20_Set	components\device\nrf51_bitfields.h	1448;"	d
GPIO_OUTSET_PIN21_High	components\device\nrf51_bitfields.h	1440;"	d
GPIO_OUTSET_PIN21_Low	components\device\nrf51_bitfields.h	1439;"	d
GPIO_OUTSET_PIN21_Msk	components\device\nrf51_bitfields.h	1438;"	d
GPIO_OUTSET_PIN21_Pos	components\device\nrf51_bitfields.h	1437;"	d
GPIO_OUTSET_PIN21_Set	components\device\nrf51_bitfields.h	1441;"	d
GPIO_OUTSET_PIN22_High	components\device\nrf51_bitfields.h	1433;"	d
GPIO_OUTSET_PIN22_Low	components\device\nrf51_bitfields.h	1432;"	d
GPIO_OUTSET_PIN22_Msk	components\device\nrf51_bitfields.h	1431;"	d
GPIO_OUTSET_PIN22_Pos	components\device\nrf51_bitfields.h	1430;"	d
GPIO_OUTSET_PIN22_Set	components\device\nrf51_bitfields.h	1434;"	d
GPIO_OUTSET_PIN23_High	components\device\nrf51_bitfields.h	1426;"	d
GPIO_OUTSET_PIN23_Low	components\device\nrf51_bitfields.h	1425;"	d
GPIO_OUTSET_PIN23_Msk	components\device\nrf51_bitfields.h	1424;"	d
GPIO_OUTSET_PIN23_Pos	components\device\nrf51_bitfields.h	1423;"	d
GPIO_OUTSET_PIN23_Set	components\device\nrf51_bitfields.h	1427;"	d
GPIO_OUTSET_PIN24_High	components\device\nrf51_bitfields.h	1419;"	d
GPIO_OUTSET_PIN24_Low	components\device\nrf51_bitfields.h	1418;"	d
GPIO_OUTSET_PIN24_Msk	components\device\nrf51_bitfields.h	1417;"	d
GPIO_OUTSET_PIN24_Pos	components\device\nrf51_bitfields.h	1416;"	d
GPIO_OUTSET_PIN24_Set	components\device\nrf51_bitfields.h	1420;"	d
GPIO_OUTSET_PIN25_High	components\device\nrf51_bitfields.h	1412;"	d
GPIO_OUTSET_PIN25_Low	components\device\nrf51_bitfields.h	1411;"	d
GPIO_OUTSET_PIN25_Msk	components\device\nrf51_bitfields.h	1410;"	d
GPIO_OUTSET_PIN25_Pos	components\device\nrf51_bitfields.h	1409;"	d
GPIO_OUTSET_PIN25_Set	components\device\nrf51_bitfields.h	1413;"	d
GPIO_OUTSET_PIN26_High	components\device\nrf51_bitfields.h	1405;"	d
GPIO_OUTSET_PIN26_Low	components\device\nrf51_bitfields.h	1404;"	d
GPIO_OUTSET_PIN26_Msk	components\device\nrf51_bitfields.h	1403;"	d
GPIO_OUTSET_PIN26_Pos	components\device\nrf51_bitfields.h	1402;"	d
GPIO_OUTSET_PIN26_Set	components\device\nrf51_bitfields.h	1406;"	d
GPIO_OUTSET_PIN27_High	components\device\nrf51_bitfields.h	1398;"	d
GPIO_OUTSET_PIN27_Low	components\device\nrf51_bitfields.h	1397;"	d
GPIO_OUTSET_PIN27_Msk	components\device\nrf51_bitfields.h	1396;"	d
GPIO_OUTSET_PIN27_Pos	components\device\nrf51_bitfields.h	1395;"	d
GPIO_OUTSET_PIN27_Set	components\device\nrf51_bitfields.h	1399;"	d
GPIO_OUTSET_PIN28_High	components\device\nrf51_bitfields.h	1391;"	d
GPIO_OUTSET_PIN28_Low	components\device\nrf51_bitfields.h	1390;"	d
GPIO_OUTSET_PIN28_Msk	components\device\nrf51_bitfields.h	1389;"	d
GPIO_OUTSET_PIN28_Pos	components\device\nrf51_bitfields.h	1388;"	d
GPIO_OUTSET_PIN28_Set	components\device\nrf51_bitfields.h	1392;"	d
GPIO_OUTSET_PIN29_High	components\device\nrf51_bitfields.h	1384;"	d
GPIO_OUTSET_PIN29_Low	components\device\nrf51_bitfields.h	1383;"	d
GPIO_OUTSET_PIN29_Msk	components\device\nrf51_bitfields.h	1382;"	d
GPIO_OUTSET_PIN29_Pos	components\device\nrf51_bitfields.h	1381;"	d
GPIO_OUTSET_PIN29_Set	components\device\nrf51_bitfields.h	1385;"	d
GPIO_OUTSET_PIN2_High	components\device\nrf51_bitfields.h	1573;"	d
GPIO_OUTSET_PIN2_Low	components\device\nrf51_bitfields.h	1572;"	d
GPIO_OUTSET_PIN2_Msk	components\device\nrf51_bitfields.h	1571;"	d
GPIO_OUTSET_PIN2_Pos	components\device\nrf51_bitfields.h	1570;"	d
GPIO_OUTSET_PIN2_Set	components\device\nrf51_bitfields.h	1574;"	d
GPIO_OUTSET_PIN30_High	components\device\nrf51_bitfields.h	1377;"	d
GPIO_OUTSET_PIN30_Low	components\device\nrf51_bitfields.h	1376;"	d
GPIO_OUTSET_PIN30_Msk	components\device\nrf51_bitfields.h	1375;"	d
GPIO_OUTSET_PIN30_Pos	components\device\nrf51_bitfields.h	1374;"	d
GPIO_OUTSET_PIN30_Set	components\device\nrf51_bitfields.h	1378;"	d
GPIO_OUTSET_PIN31_High	components\device\nrf51_bitfields.h	1370;"	d
GPIO_OUTSET_PIN31_Low	components\device\nrf51_bitfields.h	1369;"	d
GPIO_OUTSET_PIN31_Msk	components\device\nrf51_bitfields.h	1368;"	d
GPIO_OUTSET_PIN31_Pos	components\device\nrf51_bitfields.h	1367;"	d
GPIO_OUTSET_PIN31_Set	components\device\nrf51_bitfields.h	1371;"	d
GPIO_OUTSET_PIN3_High	components\device\nrf51_bitfields.h	1566;"	d
GPIO_OUTSET_PIN3_Low	components\device\nrf51_bitfields.h	1565;"	d
GPIO_OUTSET_PIN3_Msk	components\device\nrf51_bitfields.h	1564;"	d
GPIO_OUTSET_PIN3_Pos	components\device\nrf51_bitfields.h	1563;"	d
GPIO_OUTSET_PIN3_Set	components\device\nrf51_bitfields.h	1567;"	d
GPIO_OUTSET_PIN4_High	components\device\nrf51_bitfields.h	1559;"	d
GPIO_OUTSET_PIN4_Low	components\device\nrf51_bitfields.h	1558;"	d
GPIO_OUTSET_PIN4_Msk	components\device\nrf51_bitfields.h	1557;"	d
GPIO_OUTSET_PIN4_Pos	components\device\nrf51_bitfields.h	1556;"	d
GPIO_OUTSET_PIN4_Set	components\device\nrf51_bitfields.h	1560;"	d
GPIO_OUTSET_PIN5_High	components\device\nrf51_bitfields.h	1552;"	d
GPIO_OUTSET_PIN5_Low	components\device\nrf51_bitfields.h	1551;"	d
GPIO_OUTSET_PIN5_Msk	components\device\nrf51_bitfields.h	1550;"	d
GPIO_OUTSET_PIN5_Pos	components\device\nrf51_bitfields.h	1549;"	d
GPIO_OUTSET_PIN5_Set	components\device\nrf51_bitfields.h	1553;"	d
GPIO_OUTSET_PIN6_High	components\device\nrf51_bitfields.h	1545;"	d
GPIO_OUTSET_PIN6_Low	components\device\nrf51_bitfields.h	1544;"	d
GPIO_OUTSET_PIN6_Msk	components\device\nrf51_bitfields.h	1543;"	d
GPIO_OUTSET_PIN6_Pos	components\device\nrf51_bitfields.h	1542;"	d
GPIO_OUTSET_PIN6_Set	components\device\nrf51_bitfields.h	1546;"	d
GPIO_OUTSET_PIN7_High	components\device\nrf51_bitfields.h	1538;"	d
GPIO_OUTSET_PIN7_Low	components\device\nrf51_bitfields.h	1537;"	d
GPIO_OUTSET_PIN7_Msk	components\device\nrf51_bitfields.h	1536;"	d
GPIO_OUTSET_PIN7_Pos	components\device\nrf51_bitfields.h	1535;"	d
GPIO_OUTSET_PIN7_Set	components\device\nrf51_bitfields.h	1539;"	d
GPIO_OUTSET_PIN8_High	components\device\nrf51_bitfields.h	1531;"	d
GPIO_OUTSET_PIN8_Low	components\device\nrf51_bitfields.h	1530;"	d
GPIO_OUTSET_PIN8_Msk	components\device\nrf51_bitfields.h	1529;"	d
GPIO_OUTSET_PIN8_Pos	components\device\nrf51_bitfields.h	1528;"	d
GPIO_OUTSET_PIN8_Set	components\device\nrf51_bitfields.h	1532;"	d
GPIO_OUTSET_PIN9_High	components\device\nrf51_bitfields.h	1524;"	d
GPIO_OUTSET_PIN9_Low	components\device\nrf51_bitfields.h	1523;"	d
GPIO_OUTSET_PIN9_Msk	components\device\nrf51_bitfields.h	1522;"	d
GPIO_OUTSET_PIN9_Pos	components\device\nrf51_bitfields.h	1521;"	d
GPIO_OUTSET_PIN9_Set	components\device\nrf51_bitfields.h	1525;"	d
GPIO_OUT_PIN0_High	components\device\nrf51_bitfields.h	1361;"	d
GPIO_OUT_PIN0_Low	components\device\nrf51_bitfields.h	1360;"	d
GPIO_OUT_PIN0_Msk	components\device\nrf51_bitfields.h	1359;"	d
GPIO_OUT_PIN0_Pos	components\device\nrf51_bitfields.h	1358;"	d
GPIO_OUT_PIN10_High	components\device\nrf51_bitfields.h	1301;"	d
GPIO_OUT_PIN10_Low	components\device\nrf51_bitfields.h	1300;"	d
GPIO_OUT_PIN10_Msk	components\device\nrf51_bitfields.h	1299;"	d
GPIO_OUT_PIN10_Pos	components\device\nrf51_bitfields.h	1298;"	d
GPIO_OUT_PIN11_High	components\device\nrf51_bitfields.h	1295;"	d
GPIO_OUT_PIN11_Low	components\device\nrf51_bitfields.h	1294;"	d
GPIO_OUT_PIN11_Msk	components\device\nrf51_bitfields.h	1293;"	d
GPIO_OUT_PIN11_Pos	components\device\nrf51_bitfields.h	1292;"	d
GPIO_OUT_PIN12_High	components\device\nrf51_bitfields.h	1289;"	d
GPIO_OUT_PIN12_Low	components\device\nrf51_bitfields.h	1288;"	d
GPIO_OUT_PIN12_Msk	components\device\nrf51_bitfields.h	1287;"	d
GPIO_OUT_PIN12_Pos	components\device\nrf51_bitfields.h	1286;"	d
GPIO_OUT_PIN13_High	components\device\nrf51_bitfields.h	1283;"	d
GPIO_OUT_PIN13_Low	components\device\nrf51_bitfields.h	1282;"	d
GPIO_OUT_PIN13_Msk	components\device\nrf51_bitfields.h	1281;"	d
GPIO_OUT_PIN13_Pos	components\device\nrf51_bitfields.h	1280;"	d
GPIO_OUT_PIN14_High	components\device\nrf51_bitfields.h	1277;"	d
GPIO_OUT_PIN14_Low	components\device\nrf51_bitfields.h	1276;"	d
GPIO_OUT_PIN14_Msk	components\device\nrf51_bitfields.h	1275;"	d
GPIO_OUT_PIN14_Pos	components\device\nrf51_bitfields.h	1274;"	d
GPIO_OUT_PIN15_High	components\device\nrf51_bitfields.h	1271;"	d
GPIO_OUT_PIN15_Low	components\device\nrf51_bitfields.h	1270;"	d
GPIO_OUT_PIN15_Msk	components\device\nrf51_bitfields.h	1269;"	d
GPIO_OUT_PIN15_Pos	components\device\nrf51_bitfields.h	1268;"	d
GPIO_OUT_PIN16_High	components\device\nrf51_bitfields.h	1265;"	d
GPIO_OUT_PIN16_Low	components\device\nrf51_bitfields.h	1264;"	d
GPIO_OUT_PIN16_Msk	components\device\nrf51_bitfields.h	1263;"	d
GPIO_OUT_PIN16_Pos	components\device\nrf51_bitfields.h	1262;"	d
GPIO_OUT_PIN17_High	components\device\nrf51_bitfields.h	1259;"	d
GPIO_OUT_PIN17_Low	components\device\nrf51_bitfields.h	1258;"	d
GPIO_OUT_PIN17_Msk	components\device\nrf51_bitfields.h	1257;"	d
GPIO_OUT_PIN17_Pos	components\device\nrf51_bitfields.h	1256;"	d
GPIO_OUT_PIN18_High	components\device\nrf51_bitfields.h	1253;"	d
GPIO_OUT_PIN18_Low	components\device\nrf51_bitfields.h	1252;"	d
GPIO_OUT_PIN18_Msk	components\device\nrf51_bitfields.h	1251;"	d
GPIO_OUT_PIN18_Pos	components\device\nrf51_bitfields.h	1250;"	d
GPIO_OUT_PIN19_High	components\device\nrf51_bitfields.h	1247;"	d
GPIO_OUT_PIN19_Low	components\device\nrf51_bitfields.h	1246;"	d
GPIO_OUT_PIN19_Msk	components\device\nrf51_bitfields.h	1245;"	d
GPIO_OUT_PIN19_Pos	components\device\nrf51_bitfields.h	1244;"	d
GPIO_OUT_PIN1_High	components\device\nrf51_bitfields.h	1355;"	d
GPIO_OUT_PIN1_Low	components\device\nrf51_bitfields.h	1354;"	d
GPIO_OUT_PIN1_Msk	components\device\nrf51_bitfields.h	1353;"	d
GPIO_OUT_PIN1_Pos	components\device\nrf51_bitfields.h	1352;"	d
GPIO_OUT_PIN20_High	components\device\nrf51_bitfields.h	1241;"	d
GPIO_OUT_PIN20_Low	components\device\nrf51_bitfields.h	1240;"	d
GPIO_OUT_PIN20_Msk	components\device\nrf51_bitfields.h	1239;"	d
GPIO_OUT_PIN20_Pos	components\device\nrf51_bitfields.h	1238;"	d
GPIO_OUT_PIN21_High	components\device\nrf51_bitfields.h	1235;"	d
GPIO_OUT_PIN21_Low	components\device\nrf51_bitfields.h	1234;"	d
GPIO_OUT_PIN21_Msk	components\device\nrf51_bitfields.h	1233;"	d
GPIO_OUT_PIN21_Pos	components\device\nrf51_bitfields.h	1232;"	d
GPIO_OUT_PIN22_High	components\device\nrf51_bitfields.h	1229;"	d
GPIO_OUT_PIN22_Low	components\device\nrf51_bitfields.h	1228;"	d
GPIO_OUT_PIN22_Msk	components\device\nrf51_bitfields.h	1227;"	d
GPIO_OUT_PIN22_Pos	components\device\nrf51_bitfields.h	1226;"	d
GPIO_OUT_PIN23_High	components\device\nrf51_bitfields.h	1223;"	d
GPIO_OUT_PIN23_Low	components\device\nrf51_bitfields.h	1222;"	d
GPIO_OUT_PIN23_Msk	components\device\nrf51_bitfields.h	1221;"	d
GPIO_OUT_PIN23_Pos	components\device\nrf51_bitfields.h	1220;"	d
GPIO_OUT_PIN24_High	components\device\nrf51_bitfields.h	1217;"	d
GPIO_OUT_PIN24_Low	components\device\nrf51_bitfields.h	1216;"	d
GPIO_OUT_PIN24_Msk	components\device\nrf51_bitfields.h	1215;"	d
GPIO_OUT_PIN24_Pos	components\device\nrf51_bitfields.h	1214;"	d
GPIO_OUT_PIN25_High	components\device\nrf51_bitfields.h	1211;"	d
GPIO_OUT_PIN25_Low	components\device\nrf51_bitfields.h	1210;"	d
GPIO_OUT_PIN25_Msk	components\device\nrf51_bitfields.h	1209;"	d
GPIO_OUT_PIN25_Pos	components\device\nrf51_bitfields.h	1208;"	d
GPIO_OUT_PIN26_High	components\device\nrf51_bitfields.h	1205;"	d
GPIO_OUT_PIN26_Low	components\device\nrf51_bitfields.h	1204;"	d
GPIO_OUT_PIN26_Msk	components\device\nrf51_bitfields.h	1203;"	d
GPIO_OUT_PIN26_Pos	components\device\nrf51_bitfields.h	1202;"	d
GPIO_OUT_PIN27_High	components\device\nrf51_bitfields.h	1199;"	d
GPIO_OUT_PIN27_Low	components\device\nrf51_bitfields.h	1198;"	d
GPIO_OUT_PIN27_Msk	components\device\nrf51_bitfields.h	1197;"	d
GPIO_OUT_PIN27_Pos	components\device\nrf51_bitfields.h	1196;"	d
GPIO_OUT_PIN28_High	components\device\nrf51_bitfields.h	1193;"	d
GPIO_OUT_PIN28_Low	components\device\nrf51_bitfields.h	1192;"	d
GPIO_OUT_PIN28_Msk	components\device\nrf51_bitfields.h	1191;"	d
GPIO_OUT_PIN28_Pos	components\device\nrf51_bitfields.h	1190;"	d
GPIO_OUT_PIN29_High	components\device\nrf51_bitfields.h	1187;"	d
GPIO_OUT_PIN29_Low	components\device\nrf51_bitfields.h	1186;"	d
GPIO_OUT_PIN29_Msk	components\device\nrf51_bitfields.h	1185;"	d
GPIO_OUT_PIN29_Pos	components\device\nrf51_bitfields.h	1184;"	d
GPIO_OUT_PIN2_High	components\device\nrf51_bitfields.h	1349;"	d
GPIO_OUT_PIN2_Low	components\device\nrf51_bitfields.h	1348;"	d
GPIO_OUT_PIN2_Msk	components\device\nrf51_bitfields.h	1347;"	d
GPIO_OUT_PIN2_Pos	components\device\nrf51_bitfields.h	1346;"	d
GPIO_OUT_PIN30_High	components\device\nrf51_bitfields.h	1181;"	d
GPIO_OUT_PIN30_Low	components\device\nrf51_bitfields.h	1180;"	d
GPIO_OUT_PIN30_Msk	components\device\nrf51_bitfields.h	1179;"	d
GPIO_OUT_PIN30_Pos	components\device\nrf51_bitfields.h	1178;"	d
GPIO_OUT_PIN31_High	components\device\nrf51_bitfields.h	1175;"	d
GPIO_OUT_PIN31_Low	components\device\nrf51_bitfields.h	1174;"	d
GPIO_OUT_PIN31_Msk	components\device\nrf51_bitfields.h	1173;"	d
GPIO_OUT_PIN31_Pos	components\device\nrf51_bitfields.h	1172;"	d
GPIO_OUT_PIN3_High	components\device\nrf51_bitfields.h	1343;"	d
GPIO_OUT_PIN3_Low	components\device\nrf51_bitfields.h	1342;"	d
GPIO_OUT_PIN3_Msk	components\device\nrf51_bitfields.h	1341;"	d
GPIO_OUT_PIN3_Pos	components\device\nrf51_bitfields.h	1340;"	d
GPIO_OUT_PIN4_High	components\device\nrf51_bitfields.h	1337;"	d
GPIO_OUT_PIN4_Low	components\device\nrf51_bitfields.h	1336;"	d
GPIO_OUT_PIN4_Msk	components\device\nrf51_bitfields.h	1335;"	d
GPIO_OUT_PIN4_Pos	components\device\nrf51_bitfields.h	1334;"	d
GPIO_OUT_PIN5_High	components\device\nrf51_bitfields.h	1331;"	d
GPIO_OUT_PIN5_Low	components\device\nrf51_bitfields.h	1330;"	d
GPIO_OUT_PIN5_Msk	components\device\nrf51_bitfields.h	1329;"	d
GPIO_OUT_PIN5_Pos	components\device\nrf51_bitfields.h	1328;"	d
GPIO_OUT_PIN6_High	components\device\nrf51_bitfields.h	1325;"	d
GPIO_OUT_PIN6_Low	components\device\nrf51_bitfields.h	1324;"	d
GPIO_OUT_PIN6_Msk	components\device\nrf51_bitfields.h	1323;"	d
GPIO_OUT_PIN6_Pos	components\device\nrf51_bitfields.h	1322;"	d
GPIO_OUT_PIN7_High	components\device\nrf51_bitfields.h	1319;"	d
GPIO_OUT_PIN7_Low	components\device\nrf51_bitfields.h	1318;"	d
GPIO_OUT_PIN7_Msk	components\device\nrf51_bitfields.h	1317;"	d
GPIO_OUT_PIN7_Pos	components\device\nrf51_bitfields.h	1316;"	d
GPIO_OUT_PIN8_High	components\device\nrf51_bitfields.h	1313;"	d
GPIO_OUT_PIN8_Low	components\device\nrf51_bitfields.h	1312;"	d
GPIO_OUT_PIN8_Msk	components\device\nrf51_bitfields.h	1311;"	d
GPIO_OUT_PIN8_Pos	components\device\nrf51_bitfields.h	1310;"	d
GPIO_OUT_PIN9_High	components\device\nrf51_bitfields.h	1307;"	d
GPIO_OUT_PIN9_Low	components\device\nrf51_bitfields.h	1306;"	d
GPIO_OUT_PIN9_Msk	components\device\nrf51_bitfields.h	1305;"	d
GPIO_OUT_PIN9_Pos	components\device\nrf51_bitfields.h	1304;"	d
GPIO_PIN_CNF_DIR_Input	components\device\nrf51_bitfields.h	2699;"	d
GPIO_PIN_CNF_DIR_Msk	components\device\nrf51_bitfields.h	2698;"	d
GPIO_PIN_CNF_DIR_Output	components\device\nrf51_bitfields.h	2700;"	d
GPIO_PIN_CNF_DIR_Pos	components\device\nrf51_bitfields.h	2697;"	d
GPIO_PIN_CNF_DRIVE_D0H1	components\device\nrf51_bitfields.h	2679;"	d
GPIO_PIN_CNF_DRIVE_D0S1	components\device\nrf51_bitfields.h	2678;"	d
GPIO_PIN_CNF_DRIVE_H0D1	components\device\nrf51_bitfields.h	2681;"	d
GPIO_PIN_CNF_DRIVE_H0H1	components\device\nrf51_bitfields.h	2677;"	d
GPIO_PIN_CNF_DRIVE_H0S1	components\device\nrf51_bitfields.h	2675;"	d
GPIO_PIN_CNF_DRIVE_Msk	components\device\nrf51_bitfields.h	2673;"	d
GPIO_PIN_CNF_DRIVE_Pos	components\device\nrf51_bitfields.h	2672;"	d
GPIO_PIN_CNF_DRIVE_S0D1	components\device\nrf51_bitfields.h	2680;"	d
GPIO_PIN_CNF_DRIVE_S0H1	components\device\nrf51_bitfields.h	2676;"	d
GPIO_PIN_CNF_DRIVE_S0S1	components\device\nrf51_bitfields.h	2674;"	d
GPIO_PIN_CNF_INPUT_Connect	components\device\nrf51_bitfields.h	2693;"	d
GPIO_PIN_CNF_INPUT_Disconnect	components\device\nrf51_bitfields.h	2694;"	d
GPIO_PIN_CNF_INPUT_Msk	components\device\nrf51_bitfields.h	2692;"	d
GPIO_PIN_CNF_INPUT_Pos	components\device\nrf51_bitfields.h	2691;"	d
GPIO_PIN_CNF_PULL_Disabled	components\device\nrf51_bitfields.h	2686;"	d
GPIO_PIN_CNF_PULL_Msk	components\device\nrf51_bitfields.h	2685;"	d
GPIO_PIN_CNF_PULL_Pos	components\device\nrf51_bitfields.h	2684;"	d
GPIO_PIN_CNF_PULL_Pulldown	components\device\nrf51_bitfields.h	2687;"	d
GPIO_PIN_CNF_PULL_Pullup	components\device\nrf51_bitfields.h	2688;"	d
GPIO_PIN_CNF_SENSE_Disabled	components\device\nrf51_bitfields.h	2667;"	d
GPIO_PIN_CNF_SENSE_High	components\device\nrf51_bitfields.h	2668;"	d
GPIO_PIN_CNF_SENSE_Low	components\device\nrf51_bitfields.h	2669;"	d
GPIO_PIN_CNF_SENSE_Msk	components\device\nrf51_bitfields.h	2666;"	d
GPIO_PIN_CNF_SENSE_Pos	components\device\nrf51_bitfields.h	2665;"	d
LPCOMP_ANADETECT_ANADETECT_Cross	components\device\nrf51_bitfields.h	2981;"	d
LPCOMP_ANADETECT_ANADETECT_Down	components\device\nrf51_bitfields.h	2983;"	d
LPCOMP_ANADETECT_ANADETECT_Msk	components\device\nrf51_bitfields.h	2980;"	d
LPCOMP_ANADETECT_ANADETECT_Pos	components\device\nrf51_bitfields.h	2979;"	d
LPCOMP_ANADETECT_ANADETECT_Up	components\device\nrf51_bitfields.h	2982;"	d
LPCOMP_ENABLE_ENABLE_Disabled	components\device\nrf51_bitfields.h	2933;"	d
LPCOMP_ENABLE_ENABLE_Enabled	components\device\nrf51_bitfields.h	2934;"	d
LPCOMP_ENABLE_ENABLE_Msk	components\device\nrf51_bitfields.h	2932;"	d
LPCOMP_ENABLE_ENABLE_Pos	components\device\nrf51_bitfields.h	2931;"	d
LPCOMP_EXTREFSEL_EXTREFSEL_AnalogReference0	components\device\nrf51_bitfields.h	2972;"	d
LPCOMP_EXTREFSEL_EXTREFSEL_AnalogReference1	components\device\nrf51_bitfields.h	2973;"	d
LPCOMP_EXTREFSEL_EXTREFSEL_Msk	components\device\nrf51_bitfields.h	2971;"	d
LPCOMP_EXTREFSEL_EXTREFSEL_Pos	components\device\nrf51_bitfields.h	2970;"	d
LPCOMP_INTENCLR_CROSS_Clear	components\device\nrf51_bitfields.h	2895;"	d
LPCOMP_INTENCLR_CROSS_Disabled	components\device\nrf51_bitfields.h	2893;"	d
LPCOMP_INTENCLR_CROSS_Enabled	components\device\nrf51_bitfields.h	2894;"	d
LPCOMP_INTENCLR_CROSS_Msk	components\device\nrf51_bitfields.h	2892;"	d
LPCOMP_INTENCLR_CROSS_Pos	components\device\nrf51_bitfields.h	2891;"	d
LPCOMP_INTENCLR_DOWN_Clear	components\device\nrf51_bitfields.h	2909;"	d
LPCOMP_INTENCLR_DOWN_Disabled	components\device\nrf51_bitfields.h	2907;"	d
LPCOMP_INTENCLR_DOWN_Enabled	components\device\nrf51_bitfields.h	2908;"	d
LPCOMP_INTENCLR_DOWN_Msk	components\device\nrf51_bitfields.h	2906;"	d
LPCOMP_INTENCLR_DOWN_Pos	components\device\nrf51_bitfields.h	2905;"	d
LPCOMP_INTENCLR_READY_Clear	components\device\nrf51_bitfields.h	2916;"	d
LPCOMP_INTENCLR_READY_Disabled	components\device\nrf51_bitfields.h	2914;"	d
LPCOMP_INTENCLR_READY_Enabled	components\device\nrf51_bitfields.h	2915;"	d
LPCOMP_INTENCLR_READY_Msk	components\device\nrf51_bitfields.h	2913;"	d
LPCOMP_INTENCLR_READY_Pos	components\device\nrf51_bitfields.h	2912;"	d
LPCOMP_INTENCLR_UP_Clear	components\device\nrf51_bitfields.h	2902;"	d
LPCOMP_INTENCLR_UP_Disabled	components\device\nrf51_bitfields.h	2900;"	d
LPCOMP_INTENCLR_UP_Enabled	components\device\nrf51_bitfields.h	2901;"	d
LPCOMP_INTENCLR_UP_Msk	components\device\nrf51_bitfields.h	2899;"	d
LPCOMP_INTENCLR_UP_Pos	components\device\nrf51_bitfields.h	2898;"	d
LPCOMP_INTENSET_CROSS_Disabled	components\device\nrf51_bitfields.h	2862;"	d
LPCOMP_INTENSET_CROSS_Enabled	components\device\nrf51_bitfields.h	2863;"	d
LPCOMP_INTENSET_CROSS_Msk	components\device\nrf51_bitfields.h	2861;"	d
LPCOMP_INTENSET_CROSS_Pos	components\device\nrf51_bitfields.h	2860;"	d
LPCOMP_INTENSET_CROSS_Set	components\device\nrf51_bitfields.h	2864;"	d
LPCOMP_INTENSET_DOWN_Disabled	components\device\nrf51_bitfields.h	2876;"	d
LPCOMP_INTENSET_DOWN_Enabled	components\device\nrf51_bitfields.h	2877;"	d
LPCOMP_INTENSET_DOWN_Msk	components\device\nrf51_bitfields.h	2875;"	d
LPCOMP_INTENSET_DOWN_Pos	components\device\nrf51_bitfields.h	2874;"	d
LPCOMP_INTENSET_DOWN_Set	components\device\nrf51_bitfields.h	2878;"	d
LPCOMP_INTENSET_READY_Disabled	components\device\nrf51_bitfields.h	2883;"	d
LPCOMP_INTENSET_READY_Enabled	components\device\nrf51_bitfields.h	2884;"	d
LPCOMP_INTENSET_READY_Msk	components\device\nrf51_bitfields.h	2882;"	d
LPCOMP_INTENSET_READY_Pos	components\device\nrf51_bitfields.h	2881;"	d
LPCOMP_INTENSET_READY_Set	components\device\nrf51_bitfields.h	2885;"	d
LPCOMP_INTENSET_UP_Disabled	components\device\nrf51_bitfields.h	2869;"	d
LPCOMP_INTENSET_UP_Enabled	components\device\nrf51_bitfields.h	2870;"	d
LPCOMP_INTENSET_UP_Msk	components\device\nrf51_bitfields.h	2868;"	d
LPCOMP_INTENSET_UP_Pos	components\device\nrf51_bitfields.h	2867;"	d
LPCOMP_INTENSET_UP_Set	components\device\nrf51_bitfields.h	2871;"	d
LPCOMP_POWER_POWER_Disabled	components\device\nrf51_bitfields.h	2991;"	d
LPCOMP_POWER_POWER_Enabled	components\device\nrf51_bitfields.h	2992;"	d
LPCOMP_POWER_POWER_Msk	components\device\nrf51_bitfields.h	2990;"	d
LPCOMP_POWER_POWER_Pos	components\device\nrf51_bitfields.h	2989;"	d
LPCOMP_PSEL_PSEL_AnalogInput0	components\device\nrf51_bitfields.h	2942;"	d
LPCOMP_PSEL_PSEL_AnalogInput1	components\device\nrf51_bitfields.h	2943;"	d
LPCOMP_PSEL_PSEL_AnalogInput2	components\device\nrf51_bitfields.h	2944;"	d
LPCOMP_PSEL_PSEL_AnalogInput3	components\device\nrf51_bitfields.h	2945;"	d
LPCOMP_PSEL_PSEL_AnalogInput4	components\device\nrf51_bitfields.h	2946;"	d
LPCOMP_PSEL_PSEL_AnalogInput5	components\device\nrf51_bitfields.h	2947;"	d
LPCOMP_PSEL_PSEL_AnalogInput6	components\device\nrf51_bitfields.h	2948;"	d
LPCOMP_PSEL_PSEL_AnalogInput7	components\device\nrf51_bitfields.h	2949;"	d
LPCOMP_PSEL_PSEL_Msk	components\device\nrf51_bitfields.h	2941;"	d
LPCOMP_PSEL_PSEL_Pos	components\device\nrf51_bitfields.h	2940;"	d
LPCOMP_REFSEL_REFSEL_ARef	components\device\nrf51_bitfields.h	2964;"	d
LPCOMP_REFSEL_REFSEL_Msk	components\device\nrf51_bitfields.h	2956;"	d
LPCOMP_REFSEL_REFSEL_Pos	components\device\nrf51_bitfields.h	2955;"	d
LPCOMP_REFSEL_REFSEL_SupplyFiveEighthsPrescaling	components\device\nrf51_bitfields.h	2961;"	d
LPCOMP_REFSEL_REFSEL_SupplyFourEighthsPrescaling	components\device\nrf51_bitfields.h	2960;"	d
LPCOMP_REFSEL_REFSEL_SupplyOneEighthPrescaling	components\device\nrf51_bitfields.h	2957;"	d
LPCOMP_REFSEL_REFSEL_SupplySevenEighthsPrescaling	components\device\nrf51_bitfields.h	2963;"	d
LPCOMP_REFSEL_REFSEL_SupplySixEighthsPrescaling	components\device\nrf51_bitfields.h	2962;"	d
LPCOMP_REFSEL_REFSEL_SupplyThreeEighthsPrescaling	components\device\nrf51_bitfields.h	2959;"	d
LPCOMP_REFSEL_REFSEL_SupplyTwoEighthsPrescaling	components\device\nrf51_bitfields.h	2958;"	d
LPCOMP_RESULT_RESULT_Above	components\device\nrf51_bitfields.h	2925;"	d
LPCOMP_RESULT_RESULT_Bellow	components\device\nrf51_bitfields.h	2924;"	d
LPCOMP_RESULT_RESULT_Msk	components\device\nrf51_bitfields.h	2923;"	d
LPCOMP_RESULT_RESULT_Pos	components\device\nrf51_bitfields.h	2922;"	d
LPCOMP_SHORTS_CROSS_STOP_Disabled	components\device\nrf51_bitfields.h	2829;"	d
LPCOMP_SHORTS_CROSS_STOP_Enabled	components\device\nrf51_bitfields.h	2830;"	d
LPCOMP_SHORTS_CROSS_STOP_Msk	components\device\nrf51_bitfields.h	2828;"	d
LPCOMP_SHORTS_CROSS_STOP_Pos	components\device\nrf51_bitfields.h	2827;"	d
LPCOMP_SHORTS_DOWN_STOP_Disabled	components\device\nrf51_bitfields.h	2841;"	d
LPCOMP_SHORTS_DOWN_STOP_Enabled	components\device\nrf51_bitfields.h	2842;"	d
LPCOMP_SHORTS_DOWN_STOP_Msk	components\device\nrf51_bitfields.h	2840;"	d
LPCOMP_SHORTS_DOWN_STOP_Pos	components\device\nrf51_bitfields.h	2839;"	d
LPCOMP_SHORTS_READY_SAMPLE_Disabled	components\device\nrf51_bitfields.h	2853;"	d
LPCOMP_SHORTS_READY_SAMPLE_Enabled	components\device\nrf51_bitfields.h	2854;"	d
LPCOMP_SHORTS_READY_SAMPLE_Msk	components\device\nrf51_bitfields.h	2852;"	d
LPCOMP_SHORTS_READY_SAMPLE_Pos	components\device\nrf51_bitfields.h	2851;"	d
LPCOMP_SHORTS_READY_STOP_Disabled	components\device\nrf51_bitfields.h	2847;"	d
LPCOMP_SHORTS_READY_STOP_Enabled	components\device\nrf51_bitfields.h	2848;"	d
LPCOMP_SHORTS_READY_STOP_Msk	components\device\nrf51_bitfields.h	2846;"	d
LPCOMP_SHORTS_READY_STOP_Pos	components\device\nrf51_bitfields.h	2845;"	d
LPCOMP_SHORTS_UP_STOP_Disabled	components\device\nrf51_bitfields.h	2835;"	d
LPCOMP_SHORTS_UP_STOP_Enabled	components\device\nrf51_bitfields.h	2836;"	d
LPCOMP_SHORTS_UP_STOP_Msk	components\device\nrf51_bitfields.h	2834;"	d
LPCOMP_SHORTS_UP_STOP_Pos	components\device\nrf51_bitfields.h	2833;"	d
MPU_DISABLEINDEBUG_DISABLEINDEBUG_Disabled	components\device\nrf51_bitfields.h	3588;"	d
MPU_DISABLEINDEBUG_DISABLEINDEBUG_Enabled	components\device\nrf51_bitfields.h	3587;"	d
MPU_DISABLEINDEBUG_DISABLEINDEBUG_Msk	components\device\nrf51_bitfields.h	3586;"	d
MPU_DISABLEINDEBUG_DISABLEINDEBUG_Pos	components\device\nrf51_bitfields.h	3585;"	d
MPU_PERR0_ADC_InRegion0	components\device\nrf51_bitfields.h	3089;"	d
MPU_PERR0_ADC_InRegion1	components\device\nrf51_bitfields.h	3088;"	d
MPU_PERR0_ADC_Msk	components\device\nrf51_bitfields.h	3087;"	d
MPU_PERR0_ADC_Pos	components\device\nrf51_bitfields.h	3086;"	d
MPU_PERR0_CCM_AAR_InRegion0	components\device\nrf51_bitfields.h	3041;"	d
MPU_PERR0_CCM_AAR_InRegion1	components\device\nrf51_bitfields.h	3040;"	d
MPU_PERR0_CCM_AAR_Msk	components\device\nrf51_bitfields.h	3039;"	d
MPU_PERR0_CCM_AAR_Pos	components\device\nrf51_bitfields.h	3038;"	d
MPU_PERR0_ECB_InRegion0	components\device\nrf51_bitfields.h	3047;"	d
MPU_PERR0_ECB_InRegion1	components\device\nrf51_bitfields.h	3046;"	d
MPU_PERR0_ECB_Msk	components\device\nrf51_bitfields.h	3045;"	d
MPU_PERR0_ECB_Pos	components\device\nrf51_bitfields.h	3044;"	d
MPU_PERR0_GPIOTE_InRegion0	components\device\nrf51_bitfields.h	3095;"	d
MPU_PERR0_GPIOTE_InRegion1	components\device\nrf51_bitfields.h	3094;"	d
MPU_PERR0_GPIOTE_Msk	components\device\nrf51_bitfields.h	3093;"	d
MPU_PERR0_GPIOTE_Pos	components\device\nrf51_bitfields.h	3092;"	d
MPU_PERR0_LPCOMP_InRegion0	components\device\nrf51_bitfields.h	3017;"	d
MPU_PERR0_LPCOMP_InRegion1	components\device\nrf51_bitfields.h	3016;"	d
MPU_PERR0_LPCOMP_Msk	components\device\nrf51_bitfields.h	3015;"	d
MPU_PERR0_LPCOMP_Pos	components\device\nrf51_bitfields.h	3014;"	d
MPU_PERR0_NVMC_InRegion0	components\device\nrf51_bitfields.h	3011;"	d
MPU_PERR0_NVMC_InRegion1	components\device\nrf51_bitfields.h	3010;"	d
MPU_PERR0_NVMC_Msk	components\device\nrf51_bitfields.h	3009;"	d
MPU_PERR0_NVMC_Pos	components\device\nrf51_bitfields.h	3008;"	d
MPU_PERR0_POWER_CLOCK_InRegion0	components\device\nrf51_bitfields.h	3125;"	d
MPU_PERR0_POWER_CLOCK_InRegion1	components\device\nrf51_bitfields.h	3124;"	d
MPU_PERR0_POWER_CLOCK_Msk	components\device\nrf51_bitfields.h	3123;"	d
MPU_PERR0_POWER_CLOCK_Pos	components\device\nrf51_bitfields.h	3122;"	d
MPU_PERR0_PPI_InRegion0	components\device\nrf51_bitfields.h	3005;"	d
MPU_PERR0_PPI_InRegion1	components\device\nrf51_bitfields.h	3004;"	d
MPU_PERR0_PPI_Msk	components\device\nrf51_bitfields.h	3003;"	d
MPU_PERR0_PPI_Pos	components\device\nrf51_bitfields.h	3002;"	d
MPU_PERR0_QDEC_InRegion0	components\device\nrf51_bitfields.h	3023;"	d
MPU_PERR0_QDEC_InRegion1	components\device\nrf51_bitfields.h	3022;"	d
MPU_PERR0_QDEC_Msk	components\device\nrf51_bitfields.h	3021;"	d
MPU_PERR0_QDEC_Pos	components\device\nrf51_bitfields.h	3020;"	d
MPU_PERR0_RADIO_InRegion0	components\device\nrf51_bitfields.h	3119;"	d
MPU_PERR0_RADIO_InRegion1	components\device\nrf51_bitfields.h	3118;"	d
MPU_PERR0_RADIO_Msk	components\device\nrf51_bitfields.h	3117;"	d
MPU_PERR0_RADIO_Pos	components\device\nrf51_bitfields.h	3116;"	d
MPU_PERR0_RNG_InRegion0	components\device\nrf51_bitfields.h	3053;"	d
MPU_PERR0_RNG_InRegion1	components\device\nrf51_bitfields.h	3052;"	d
MPU_PERR0_RNG_Msk	components\device\nrf51_bitfields.h	3051;"	d
MPU_PERR0_RNG_Pos	components\device\nrf51_bitfields.h	3050;"	d
MPU_PERR0_RTC0_InRegion0	components\device\nrf51_bitfields.h	3065;"	d
MPU_PERR0_RTC0_InRegion1	components\device\nrf51_bitfields.h	3064;"	d
MPU_PERR0_RTC0_Msk	components\device\nrf51_bitfields.h	3063;"	d
MPU_PERR0_RTC0_Pos	components\device\nrf51_bitfields.h	3062;"	d
MPU_PERR0_RTC1_InRegion0	components\device\nrf51_bitfields.h	3029;"	d
MPU_PERR0_RTC1_InRegion1	components\device\nrf51_bitfields.h	3028;"	d
MPU_PERR0_RTC1_Msk	components\device\nrf51_bitfields.h	3027;"	d
MPU_PERR0_RTC1_Pos	components\device\nrf51_bitfields.h	3026;"	d
MPU_PERR0_SPI0_TWI0_InRegion0	components\device\nrf51_bitfields.h	3107;"	d
MPU_PERR0_SPI0_TWI0_InRegion1	components\device\nrf51_bitfields.h	3106;"	d
MPU_PERR0_SPI0_TWI0_Msk	components\device\nrf51_bitfields.h	3105;"	d
MPU_PERR0_SPI0_TWI0_Pos	components\device\nrf51_bitfields.h	3104;"	d
MPU_PERR0_SPI1_TWI1_InRegion0	components\device\nrf51_bitfields.h	3101;"	d
MPU_PERR0_SPI1_TWI1_InRegion1	components\device\nrf51_bitfields.h	3100;"	d
MPU_PERR0_SPI1_TWI1_Msk	components\device\nrf51_bitfields.h	3099;"	d
MPU_PERR0_SPI1_TWI1_Pos	components\device\nrf51_bitfields.h	3098;"	d
MPU_PERR0_TEMP_InRegion0	components\device\nrf51_bitfields.h	3059;"	d
MPU_PERR0_TEMP_InRegion1	components\device\nrf51_bitfields.h	3058;"	d
MPU_PERR0_TEMP_Msk	components\device\nrf51_bitfields.h	3057;"	d
MPU_PERR0_TEMP_Pos	components\device\nrf51_bitfields.h	3056;"	d
MPU_PERR0_TIMER0_InRegion0	components\device\nrf51_bitfields.h	3083;"	d
MPU_PERR0_TIMER0_InRegion1	components\device\nrf51_bitfields.h	3082;"	d
MPU_PERR0_TIMER0_Msk	components\device\nrf51_bitfields.h	3081;"	d
MPU_PERR0_TIMER0_Pos	components\device\nrf51_bitfields.h	3080;"	d
MPU_PERR0_TIMER1_InRegion0	components\device\nrf51_bitfields.h	3077;"	d
MPU_PERR0_TIMER1_InRegion1	components\device\nrf51_bitfields.h	3076;"	d
MPU_PERR0_TIMER1_Msk	components\device\nrf51_bitfields.h	3075;"	d
MPU_PERR0_TIMER1_Pos	components\device\nrf51_bitfields.h	3074;"	d
MPU_PERR0_TIMER2_InRegion0	components\device\nrf51_bitfields.h	3071;"	d
MPU_PERR0_TIMER2_InRegion1	components\device\nrf51_bitfields.h	3070;"	d
MPU_PERR0_TIMER2_Msk	components\device\nrf51_bitfields.h	3069;"	d
MPU_PERR0_TIMER2_Pos	components\device\nrf51_bitfields.h	3068;"	d
MPU_PERR0_UART0_InRegion0	components\device\nrf51_bitfields.h	3113;"	d
MPU_PERR0_UART0_InRegion1	components\device\nrf51_bitfields.h	3112;"	d
MPU_PERR0_UART0_Msk	components\device\nrf51_bitfields.h	3111;"	d
MPU_PERR0_UART0_Pos	components\device\nrf51_bitfields.h	3110;"	d
MPU_PERR0_WDT_InRegion0	components\device\nrf51_bitfields.h	3035;"	d
MPU_PERR0_WDT_InRegion1	components\device\nrf51_bitfields.h	3034;"	d
MPU_PERR0_WDT_Msk	components\device\nrf51_bitfields.h	3033;"	d
MPU_PERR0_WDT_Pos	components\device\nrf51_bitfields.h	3032;"	d
MPU_PROTBLOCKSIZE_PROTBLOCKSIZE_4k	components\device\nrf51_bitfields.h	3596;"	d
MPU_PROTBLOCKSIZE_PROTBLOCKSIZE_Msk	components\device\nrf51_bitfields.h	3595;"	d
MPU_PROTBLOCKSIZE_PROTBLOCKSIZE_Pos	components\device\nrf51_bitfields.h	3594;"	d
MPU_PROTENSET0_PROTREG0_Disabled	components\device\nrf51_bitfields.h	3350;"	d
MPU_PROTENSET0_PROTREG0_Enabled	components\device\nrf51_bitfields.h	3351;"	d
MPU_PROTENSET0_PROTREG0_Msk	components\device\nrf51_bitfields.h	3349;"	d
MPU_PROTENSET0_PROTREG0_Pos	components\device\nrf51_bitfields.h	3348;"	d
MPU_PROTENSET0_PROTREG0_Set	components\device\nrf51_bitfields.h	3352;"	d
MPU_PROTENSET0_PROTREG10_Disabled	components\device\nrf51_bitfields.h	3280;"	d
MPU_PROTENSET0_PROTREG10_Enabled	components\device\nrf51_bitfields.h	3281;"	d
MPU_PROTENSET0_PROTREG10_Msk	components\device\nrf51_bitfields.h	3279;"	d
MPU_PROTENSET0_PROTREG10_Pos	components\device\nrf51_bitfields.h	3278;"	d
MPU_PROTENSET0_PROTREG10_Set	components\device\nrf51_bitfields.h	3282;"	d
MPU_PROTENSET0_PROTREG11_Disabled	components\device\nrf51_bitfields.h	3273;"	d
MPU_PROTENSET0_PROTREG11_Enabled	components\device\nrf51_bitfields.h	3274;"	d
MPU_PROTENSET0_PROTREG11_Msk	components\device\nrf51_bitfields.h	3272;"	d
MPU_PROTENSET0_PROTREG11_Pos	components\device\nrf51_bitfields.h	3271;"	d
MPU_PROTENSET0_PROTREG11_Set	components\device\nrf51_bitfields.h	3275;"	d
MPU_PROTENSET0_PROTREG12_Disabled	components\device\nrf51_bitfields.h	3266;"	d
MPU_PROTENSET0_PROTREG12_Enabled	components\device\nrf51_bitfields.h	3267;"	d
MPU_PROTENSET0_PROTREG12_Msk	components\device\nrf51_bitfields.h	3265;"	d
MPU_PROTENSET0_PROTREG12_Pos	components\device\nrf51_bitfields.h	3264;"	d
MPU_PROTENSET0_PROTREG12_Set	components\device\nrf51_bitfields.h	3268;"	d
MPU_PROTENSET0_PROTREG13_Disabled	components\device\nrf51_bitfields.h	3259;"	d
MPU_PROTENSET0_PROTREG13_Enabled	components\device\nrf51_bitfields.h	3260;"	d
MPU_PROTENSET0_PROTREG13_Msk	components\device\nrf51_bitfields.h	3258;"	d
MPU_PROTENSET0_PROTREG13_Pos	components\device\nrf51_bitfields.h	3257;"	d
MPU_PROTENSET0_PROTREG13_Set	components\device\nrf51_bitfields.h	3261;"	d
MPU_PROTENSET0_PROTREG14_Disabled	components\device\nrf51_bitfields.h	3252;"	d
MPU_PROTENSET0_PROTREG14_Enabled	components\device\nrf51_bitfields.h	3253;"	d
MPU_PROTENSET0_PROTREG14_Msk	components\device\nrf51_bitfields.h	3251;"	d
MPU_PROTENSET0_PROTREG14_Pos	components\device\nrf51_bitfields.h	3250;"	d
MPU_PROTENSET0_PROTREG14_Set	components\device\nrf51_bitfields.h	3254;"	d
MPU_PROTENSET0_PROTREG15_Disabled	components\device\nrf51_bitfields.h	3245;"	d
MPU_PROTENSET0_PROTREG15_Enabled	components\device\nrf51_bitfields.h	3246;"	d
MPU_PROTENSET0_PROTREG15_Msk	components\device\nrf51_bitfields.h	3244;"	d
MPU_PROTENSET0_PROTREG15_Pos	components\device\nrf51_bitfields.h	3243;"	d
MPU_PROTENSET0_PROTREG15_Set	components\device\nrf51_bitfields.h	3247;"	d
MPU_PROTENSET0_PROTREG16_Disabled	components\device\nrf51_bitfields.h	3238;"	d
MPU_PROTENSET0_PROTREG16_Enabled	components\device\nrf51_bitfields.h	3239;"	d
MPU_PROTENSET0_PROTREG16_Msk	components\device\nrf51_bitfields.h	3237;"	d
MPU_PROTENSET0_PROTREG16_Pos	components\device\nrf51_bitfields.h	3236;"	d
MPU_PROTENSET0_PROTREG16_Set	components\device\nrf51_bitfields.h	3240;"	d
MPU_PROTENSET0_PROTREG17_Disabled	components\device\nrf51_bitfields.h	3231;"	d
MPU_PROTENSET0_PROTREG17_Enabled	components\device\nrf51_bitfields.h	3232;"	d
MPU_PROTENSET0_PROTREG17_Msk	components\device\nrf51_bitfields.h	3230;"	d
MPU_PROTENSET0_PROTREG17_Pos	components\device\nrf51_bitfields.h	3229;"	d
MPU_PROTENSET0_PROTREG17_Set	components\device\nrf51_bitfields.h	3233;"	d
MPU_PROTENSET0_PROTREG18_Disabled	components\device\nrf51_bitfields.h	3224;"	d
MPU_PROTENSET0_PROTREG18_Enabled	components\device\nrf51_bitfields.h	3225;"	d
MPU_PROTENSET0_PROTREG18_Msk	components\device\nrf51_bitfields.h	3223;"	d
MPU_PROTENSET0_PROTREG18_Pos	components\device\nrf51_bitfields.h	3222;"	d
MPU_PROTENSET0_PROTREG18_Set	components\device\nrf51_bitfields.h	3226;"	d
MPU_PROTENSET0_PROTREG19_Disabled	components\device\nrf51_bitfields.h	3217;"	d
MPU_PROTENSET0_PROTREG19_Enabled	components\device\nrf51_bitfields.h	3218;"	d
MPU_PROTENSET0_PROTREG19_Msk	components\device\nrf51_bitfields.h	3216;"	d
MPU_PROTENSET0_PROTREG19_Pos	components\device\nrf51_bitfields.h	3215;"	d
MPU_PROTENSET0_PROTREG19_Set	components\device\nrf51_bitfields.h	3219;"	d
MPU_PROTENSET0_PROTREG1_Disabled	components\device\nrf51_bitfields.h	3343;"	d
MPU_PROTENSET0_PROTREG1_Enabled	components\device\nrf51_bitfields.h	3344;"	d
MPU_PROTENSET0_PROTREG1_Msk	components\device\nrf51_bitfields.h	3342;"	d
MPU_PROTENSET0_PROTREG1_Pos	components\device\nrf51_bitfields.h	3341;"	d
MPU_PROTENSET0_PROTREG1_Set	components\device\nrf51_bitfields.h	3345;"	d
MPU_PROTENSET0_PROTREG20_Disabled	components\device\nrf51_bitfields.h	3210;"	d
MPU_PROTENSET0_PROTREG20_Enabled	components\device\nrf51_bitfields.h	3211;"	d
MPU_PROTENSET0_PROTREG20_Msk	components\device\nrf51_bitfields.h	3209;"	d
MPU_PROTENSET0_PROTREG20_Pos	components\device\nrf51_bitfields.h	3208;"	d
MPU_PROTENSET0_PROTREG20_Set	components\device\nrf51_bitfields.h	3212;"	d
MPU_PROTENSET0_PROTREG21_Disabled	components\device\nrf51_bitfields.h	3203;"	d
MPU_PROTENSET0_PROTREG21_Enabled	components\device\nrf51_bitfields.h	3204;"	d
MPU_PROTENSET0_PROTREG21_Msk	components\device\nrf51_bitfields.h	3202;"	d
MPU_PROTENSET0_PROTREG21_Pos	components\device\nrf51_bitfields.h	3201;"	d
MPU_PROTENSET0_PROTREG21_Set	components\device\nrf51_bitfields.h	3205;"	d
MPU_PROTENSET0_PROTREG22_Disabled	components\device\nrf51_bitfields.h	3196;"	d
MPU_PROTENSET0_PROTREG22_Enabled	components\device\nrf51_bitfields.h	3197;"	d
MPU_PROTENSET0_PROTREG22_Msk	components\device\nrf51_bitfields.h	3195;"	d
MPU_PROTENSET0_PROTREG22_Pos	components\device\nrf51_bitfields.h	3194;"	d
MPU_PROTENSET0_PROTREG22_Set	components\device\nrf51_bitfields.h	3198;"	d
MPU_PROTENSET0_PROTREG23_Disabled	components\device\nrf51_bitfields.h	3189;"	d
MPU_PROTENSET0_PROTREG23_Enabled	components\device\nrf51_bitfields.h	3190;"	d
MPU_PROTENSET0_PROTREG23_Msk	components\device\nrf51_bitfields.h	3188;"	d
MPU_PROTENSET0_PROTREG23_Pos	components\device\nrf51_bitfields.h	3187;"	d
MPU_PROTENSET0_PROTREG23_Set	components\device\nrf51_bitfields.h	3191;"	d
MPU_PROTENSET0_PROTREG24_Disabled	components\device\nrf51_bitfields.h	3182;"	d
MPU_PROTENSET0_PROTREG24_Enabled	components\device\nrf51_bitfields.h	3183;"	d
MPU_PROTENSET0_PROTREG24_Msk	components\device\nrf51_bitfields.h	3181;"	d
MPU_PROTENSET0_PROTREG24_Pos	components\device\nrf51_bitfields.h	3180;"	d
MPU_PROTENSET0_PROTREG24_Set	components\device\nrf51_bitfields.h	3184;"	d
MPU_PROTENSET0_PROTREG25_Disabled	components\device\nrf51_bitfields.h	3175;"	d
MPU_PROTENSET0_PROTREG25_Enabled	components\device\nrf51_bitfields.h	3176;"	d
MPU_PROTENSET0_PROTREG25_Msk	components\device\nrf51_bitfields.h	3174;"	d
MPU_PROTENSET0_PROTREG25_Pos	components\device\nrf51_bitfields.h	3173;"	d
MPU_PROTENSET0_PROTREG25_Set	components\device\nrf51_bitfields.h	3177;"	d
MPU_PROTENSET0_PROTREG26_Disabled	components\device\nrf51_bitfields.h	3168;"	d
MPU_PROTENSET0_PROTREG26_Enabled	components\device\nrf51_bitfields.h	3169;"	d
MPU_PROTENSET0_PROTREG26_Msk	components\device\nrf51_bitfields.h	3167;"	d
MPU_PROTENSET0_PROTREG26_Pos	components\device\nrf51_bitfields.h	3166;"	d
MPU_PROTENSET0_PROTREG26_Set	components\device\nrf51_bitfields.h	3170;"	d
MPU_PROTENSET0_PROTREG27_Disabled	components\device\nrf51_bitfields.h	3161;"	d
MPU_PROTENSET0_PROTREG27_Enabled	components\device\nrf51_bitfields.h	3162;"	d
MPU_PROTENSET0_PROTREG27_Msk	components\device\nrf51_bitfields.h	3160;"	d
MPU_PROTENSET0_PROTREG27_Pos	components\device\nrf51_bitfields.h	3159;"	d
MPU_PROTENSET0_PROTREG27_Set	components\device\nrf51_bitfields.h	3163;"	d
MPU_PROTENSET0_PROTREG28_Disabled	components\device\nrf51_bitfields.h	3154;"	d
MPU_PROTENSET0_PROTREG28_Enabled	components\device\nrf51_bitfields.h	3155;"	d
MPU_PROTENSET0_PROTREG28_Msk	components\device\nrf51_bitfields.h	3153;"	d
MPU_PROTENSET0_PROTREG28_Pos	components\device\nrf51_bitfields.h	3152;"	d
MPU_PROTENSET0_PROTREG28_Set	components\device\nrf51_bitfields.h	3156;"	d
MPU_PROTENSET0_PROTREG29_Disabled	components\device\nrf51_bitfields.h	3147;"	d
MPU_PROTENSET0_PROTREG29_Enabled	components\device\nrf51_bitfields.h	3148;"	d
MPU_PROTENSET0_PROTREG29_Msk	components\device\nrf51_bitfields.h	3146;"	d
MPU_PROTENSET0_PROTREG29_Pos	components\device\nrf51_bitfields.h	3145;"	d
MPU_PROTENSET0_PROTREG29_Set	components\device\nrf51_bitfields.h	3149;"	d
MPU_PROTENSET0_PROTREG2_Disabled	components\device\nrf51_bitfields.h	3336;"	d
MPU_PROTENSET0_PROTREG2_Enabled	components\device\nrf51_bitfields.h	3337;"	d
MPU_PROTENSET0_PROTREG2_Msk	components\device\nrf51_bitfields.h	3335;"	d
MPU_PROTENSET0_PROTREG2_Pos	components\device\nrf51_bitfields.h	3334;"	d
MPU_PROTENSET0_PROTREG2_Set	components\device\nrf51_bitfields.h	3338;"	d
MPU_PROTENSET0_PROTREG30_Disabled	components\device\nrf51_bitfields.h	3140;"	d
MPU_PROTENSET0_PROTREG30_Enabled	components\device\nrf51_bitfields.h	3141;"	d
MPU_PROTENSET0_PROTREG30_Msk	components\device\nrf51_bitfields.h	3139;"	d
MPU_PROTENSET0_PROTREG30_Pos	components\device\nrf51_bitfields.h	3138;"	d
MPU_PROTENSET0_PROTREG30_Set	components\device\nrf51_bitfields.h	3142;"	d
MPU_PROTENSET0_PROTREG31_Disabled	components\device\nrf51_bitfields.h	3133;"	d
MPU_PROTENSET0_PROTREG31_Enabled	components\device\nrf51_bitfields.h	3134;"	d
MPU_PROTENSET0_PROTREG31_Msk	components\device\nrf51_bitfields.h	3132;"	d
MPU_PROTENSET0_PROTREG31_Pos	components\device\nrf51_bitfields.h	3131;"	d
MPU_PROTENSET0_PROTREG31_Set	components\device\nrf51_bitfields.h	3135;"	d
MPU_PROTENSET0_PROTREG3_Disabled	components\device\nrf51_bitfields.h	3329;"	d
MPU_PROTENSET0_PROTREG3_Enabled	components\device\nrf51_bitfields.h	3330;"	d
MPU_PROTENSET0_PROTREG3_Msk	components\device\nrf51_bitfields.h	3328;"	d
MPU_PROTENSET0_PROTREG3_Pos	components\device\nrf51_bitfields.h	3327;"	d
MPU_PROTENSET0_PROTREG3_Set	components\device\nrf51_bitfields.h	3331;"	d
MPU_PROTENSET0_PROTREG4_Disabled	components\device\nrf51_bitfields.h	3322;"	d
MPU_PROTENSET0_PROTREG4_Enabled	components\device\nrf51_bitfields.h	3323;"	d
MPU_PROTENSET0_PROTREG4_Msk	components\device\nrf51_bitfields.h	3321;"	d
MPU_PROTENSET0_PROTREG4_Pos	components\device\nrf51_bitfields.h	3320;"	d
MPU_PROTENSET0_PROTREG4_Set	components\device\nrf51_bitfields.h	3324;"	d
MPU_PROTENSET0_PROTREG5_Disabled	components\device\nrf51_bitfields.h	3315;"	d
MPU_PROTENSET0_PROTREG5_Enabled	components\device\nrf51_bitfields.h	3316;"	d
MPU_PROTENSET0_PROTREG5_Msk	components\device\nrf51_bitfields.h	3314;"	d
MPU_PROTENSET0_PROTREG5_Pos	components\device\nrf51_bitfields.h	3313;"	d
MPU_PROTENSET0_PROTREG5_Set	components\device\nrf51_bitfields.h	3317;"	d
MPU_PROTENSET0_PROTREG6_Disabled	components\device\nrf51_bitfields.h	3308;"	d
MPU_PROTENSET0_PROTREG6_Enabled	components\device\nrf51_bitfields.h	3309;"	d
MPU_PROTENSET0_PROTREG6_Msk	components\device\nrf51_bitfields.h	3307;"	d
MPU_PROTENSET0_PROTREG6_Pos	components\device\nrf51_bitfields.h	3306;"	d
MPU_PROTENSET0_PROTREG6_Set	components\device\nrf51_bitfields.h	3310;"	d
MPU_PROTENSET0_PROTREG7_Disabled	components\device\nrf51_bitfields.h	3301;"	d
MPU_PROTENSET0_PROTREG7_Enabled	components\device\nrf51_bitfields.h	3302;"	d
MPU_PROTENSET0_PROTREG7_Msk	components\device\nrf51_bitfields.h	3300;"	d
MPU_PROTENSET0_PROTREG7_Pos	components\device\nrf51_bitfields.h	3299;"	d
MPU_PROTENSET0_PROTREG7_Set	components\device\nrf51_bitfields.h	3303;"	d
MPU_PROTENSET0_PROTREG8_Disabled	components\device\nrf51_bitfields.h	3294;"	d
MPU_PROTENSET0_PROTREG8_Enabled	components\device\nrf51_bitfields.h	3295;"	d
MPU_PROTENSET0_PROTREG8_Msk	components\device\nrf51_bitfields.h	3293;"	d
MPU_PROTENSET0_PROTREG8_Pos	components\device\nrf51_bitfields.h	3292;"	d
MPU_PROTENSET0_PROTREG8_Set	components\device\nrf51_bitfields.h	3296;"	d
MPU_PROTENSET0_PROTREG9_Disabled	components\device\nrf51_bitfields.h	3287;"	d
MPU_PROTENSET0_PROTREG9_Enabled	components\device\nrf51_bitfields.h	3288;"	d
MPU_PROTENSET0_PROTREG9_Msk	components\device\nrf51_bitfields.h	3286;"	d
MPU_PROTENSET0_PROTREG9_Pos	components\device\nrf51_bitfields.h	3285;"	d
MPU_PROTENSET0_PROTREG9_Set	components\device\nrf51_bitfields.h	3289;"	d
MPU_PROTENSET1_PROTREG32_Disabled	components\device\nrf51_bitfields.h	3577;"	d
MPU_PROTENSET1_PROTREG32_Enabled	components\device\nrf51_bitfields.h	3578;"	d
MPU_PROTENSET1_PROTREG32_Msk	components\device\nrf51_bitfields.h	3576;"	d
MPU_PROTENSET1_PROTREG32_Pos	components\device\nrf51_bitfields.h	3575;"	d
MPU_PROTENSET1_PROTREG32_Set	components\device\nrf51_bitfields.h	3579;"	d
MPU_PROTENSET1_PROTREG33_Disabled	components\device\nrf51_bitfields.h	3570;"	d
MPU_PROTENSET1_PROTREG33_Enabled	components\device\nrf51_bitfields.h	3571;"	d
MPU_PROTENSET1_PROTREG33_Msk	components\device\nrf51_bitfields.h	3569;"	d
MPU_PROTENSET1_PROTREG33_Pos	components\device\nrf51_bitfields.h	3568;"	d
MPU_PROTENSET1_PROTREG33_Set	components\device\nrf51_bitfields.h	3572;"	d
MPU_PROTENSET1_PROTREG34_Disabled	components\device\nrf51_bitfields.h	3563;"	d
MPU_PROTENSET1_PROTREG34_Enabled	components\device\nrf51_bitfields.h	3564;"	d
MPU_PROTENSET1_PROTREG34_Msk	components\device\nrf51_bitfields.h	3562;"	d
MPU_PROTENSET1_PROTREG34_Pos	components\device\nrf51_bitfields.h	3561;"	d
MPU_PROTENSET1_PROTREG34_Set	components\device\nrf51_bitfields.h	3565;"	d
MPU_PROTENSET1_PROTREG35_Disabled	components\device\nrf51_bitfields.h	3556;"	d
MPU_PROTENSET1_PROTREG35_Enabled	components\device\nrf51_bitfields.h	3557;"	d
MPU_PROTENSET1_PROTREG35_Msk	components\device\nrf51_bitfields.h	3555;"	d
MPU_PROTENSET1_PROTREG35_Pos	components\device\nrf51_bitfields.h	3554;"	d
MPU_PROTENSET1_PROTREG35_Set	components\device\nrf51_bitfields.h	3558;"	d
MPU_PROTENSET1_PROTREG36_Disabled	components\device\nrf51_bitfields.h	3549;"	d
MPU_PROTENSET1_PROTREG36_Enabled	components\device\nrf51_bitfields.h	3550;"	d
MPU_PROTENSET1_PROTREG36_Msk	components\device\nrf51_bitfields.h	3548;"	d
MPU_PROTENSET1_PROTREG36_Pos	components\device\nrf51_bitfields.h	3547;"	d
MPU_PROTENSET1_PROTREG36_Set	components\device\nrf51_bitfields.h	3551;"	d
MPU_PROTENSET1_PROTREG37_Disabled	components\device\nrf51_bitfields.h	3542;"	d
MPU_PROTENSET1_PROTREG37_Enabled	components\device\nrf51_bitfields.h	3543;"	d
MPU_PROTENSET1_PROTREG37_Msk	components\device\nrf51_bitfields.h	3541;"	d
MPU_PROTENSET1_PROTREG37_Pos	components\device\nrf51_bitfields.h	3540;"	d
MPU_PROTENSET1_PROTREG37_Set	components\device\nrf51_bitfields.h	3544;"	d
MPU_PROTENSET1_PROTREG38_Disabled	components\device\nrf51_bitfields.h	3535;"	d
MPU_PROTENSET1_PROTREG38_Enabled	components\device\nrf51_bitfields.h	3536;"	d
MPU_PROTENSET1_PROTREG38_Msk	components\device\nrf51_bitfields.h	3534;"	d
MPU_PROTENSET1_PROTREG38_Pos	components\device\nrf51_bitfields.h	3533;"	d
MPU_PROTENSET1_PROTREG38_Set	components\device\nrf51_bitfields.h	3537;"	d
MPU_PROTENSET1_PROTREG39_Disabled	components\device\nrf51_bitfields.h	3528;"	d
MPU_PROTENSET1_PROTREG39_Enabled	components\device\nrf51_bitfields.h	3529;"	d
MPU_PROTENSET1_PROTREG39_Msk	components\device\nrf51_bitfields.h	3527;"	d
MPU_PROTENSET1_PROTREG39_Pos	components\device\nrf51_bitfields.h	3526;"	d
MPU_PROTENSET1_PROTREG39_Set	components\device\nrf51_bitfields.h	3530;"	d
MPU_PROTENSET1_PROTREG40_Disabled	components\device\nrf51_bitfields.h	3521;"	d
MPU_PROTENSET1_PROTREG40_Enabled	components\device\nrf51_bitfields.h	3522;"	d
MPU_PROTENSET1_PROTREG40_Msk	components\device\nrf51_bitfields.h	3520;"	d
MPU_PROTENSET1_PROTREG40_Pos	components\device\nrf51_bitfields.h	3519;"	d
MPU_PROTENSET1_PROTREG40_Set	components\device\nrf51_bitfields.h	3523;"	d
MPU_PROTENSET1_PROTREG41_Disabled	components\device\nrf51_bitfields.h	3514;"	d
MPU_PROTENSET1_PROTREG41_Enabled	components\device\nrf51_bitfields.h	3515;"	d
MPU_PROTENSET1_PROTREG41_Msk	components\device\nrf51_bitfields.h	3513;"	d
MPU_PROTENSET1_PROTREG41_Pos	components\device\nrf51_bitfields.h	3512;"	d
MPU_PROTENSET1_PROTREG41_Set	components\device\nrf51_bitfields.h	3516;"	d
MPU_PROTENSET1_PROTREG42_Disabled	components\device\nrf51_bitfields.h	3507;"	d
MPU_PROTENSET1_PROTREG42_Enabled	components\device\nrf51_bitfields.h	3508;"	d
MPU_PROTENSET1_PROTREG42_Msk	components\device\nrf51_bitfields.h	3506;"	d
MPU_PROTENSET1_PROTREG42_Pos	components\device\nrf51_bitfields.h	3505;"	d
MPU_PROTENSET1_PROTREG42_Set	components\device\nrf51_bitfields.h	3509;"	d
MPU_PROTENSET1_PROTREG43_Disabled	components\device\nrf51_bitfields.h	3500;"	d
MPU_PROTENSET1_PROTREG43_Enabled	components\device\nrf51_bitfields.h	3501;"	d
MPU_PROTENSET1_PROTREG43_Msk	components\device\nrf51_bitfields.h	3499;"	d
MPU_PROTENSET1_PROTREG43_Pos	components\device\nrf51_bitfields.h	3498;"	d
MPU_PROTENSET1_PROTREG43_Set	components\device\nrf51_bitfields.h	3502;"	d
MPU_PROTENSET1_PROTREG44_Disabled	components\device\nrf51_bitfields.h	3493;"	d
MPU_PROTENSET1_PROTREG44_Enabled	components\device\nrf51_bitfields.h	3494;"	d
MPU_PROTENSET1_PROTREG44_Msk	components\device\nrf51_bitfields.h	3492;"	d
MPU_PROTENSET1_PROTREG44_Pos	components\device\nrf51_bitfields.h	3491;"	d
MPU_PROTENSET1_PROTREG44_Set	components\device\nrf51_bitfields.h	3495;"	d
MPU_PROTENSET1_PROTREG45_Disabled	components\device\nrf51_bitfields.h	3486;"	d
MPU_PROTENSET1_PROTREG45_Enabled	components\device\nrf51_bitfields.h	3487;"	d
MPU_PROTENSET1_PROTREG45_Msk	components\device\nrf51_bitfields.h	3485;"	d
MPU_PROTENSET1_PROTREG45_Pos	components\device\nrf51_bitfields.h	3484;"	d
MPU_PROTENSET1_PROTREG45_Set	components\device\nrf51_bitfields.h	3488;"	d
MPU_PROTENSET1_PROTREG46_Disabled	components\device\nrf51_bitfields.h	3479;"	d
MPU_PROTENSET1_PROTREG46_Enabled	components\device\nrf51_bitfields.h	3480;"	d
MPU_PROTENSET1_PROTREG46_Msk	components\device\nrf51_bitfields.h	3478;"	d
MPU_PROTENSET1_PROTREG46_Pos	components\device\nrf51_bitfields.h	3477;"	d
MPU_PROTENSET1_PROTREG46_Set	components\device\nrf51_bitfields.h	3481;"	d
MPU_PROTENSET1_PROTREG47_Disabled	components\device\nrf51_bitfields.h	3472;"	d
MPU_PROTENSET1_PROTREG47_Enabled	components\device\nrf51_bitfields.h	3473;"	d
MPU_PROTENSET1_PROTREG47_Msk	components\device\nrf51_bitfields.h	3471;"	d
MPU_PROTENSET1_PROTREG47_Pos	components\device\nrf51_bitfields.h	3470;"	d
MPU_PROTENSET1_PROTREG47_Set	components\device\nrf51_bitfields.h	3474;"	d
MPU_PROTENSET1_PROTREG48_Disabled	components\device\nrf51_bitfields.h	3465;"	d
MPU_PROTENSET1_PROTREG48_Enabled	components\device\nrf51_bitfields.h	3466;"	d
MPU_PROTENSET1_PROTREG48_Msk	components\device\nrf51_bitfields.h	3464;"	d
MPU_PROTENSET1_PROTREG48_Pos	components\device\nrf51_bitfields.h	3463;"	d
MPU_PROTENSET1_PROTREG48_Set	components\device\nrf51_bitfields.h	3467;"	d
MPU_PROTENSET1_PROTREG49_Disabled	components\device\nrf51_bitfields.h	3458;"	d
MPU_PROTENSET1_PROTREG49_Enabled	components\device\nrf51_bitfields.h	3459;"	d
MPU_PROTENSET1_PROTREG49_Msk	components\device\nrf51_bitfields.h	3457;"	d
MPU_PROTENSET1_PROTREG49_Pos	components\device\nrf51_bitfields.h	3456;"	d
MPU_PROTENSET1_PROTREG49_Set	components\device\nrf51_bitfields.h	3460;"	d
MPU_PROTENSET1_PROTREG50_Disabled	components\device\nrf51_bitfields.h	3451;"	d
MPU_PROTENSET1_PROTREG50_Enabled	components\device\nrf51_bitfields.h	3452;"	d
MPU_PROTENSET1_PROTREG50_Msk	components\device\nrf51_bitfields.h	3450;"	d
MPU_PROTENSET1_PROTREG50_Pos	components\device\nrf51_bitfields.h	3449;"	d
MPU_PROTENSET1_PROTREG50_Set	components\device\nrf51_bitfields.h	3453;"	d
MPU_PROTENSET1_PROTREG51_Disabled	components\device\nrf51_bitfields.h	3444;"	d
MPU_PROTENSET1_PROTREG51_Enabled	components\device\nrf51_bitfields.h	3445;"	d
MPU_PROTENSET1_PROTREG51_Msk	components\device\nrf51_bitfields.h	3443;"	d
MPU_PROTENSET1_PROTREG51_Pos	components\device\nrf51_bitfields.h	3442;"	d
MPU_PROTENSET1_PROTREG51_Set	components\device\nrf51_bitfields.h	3446;"	d
MPU_PROTENSET1_PROTREG52_Disabled	components\device\nrf51_bitfields.h	3437;"	d
MPU_PROTENSET1_PROTREG52_Enabled	components\device\nrf51_bitfields.h	3438;"	d
MPU_PROTENSET1_PROTREG52_Msk	components\device\nrf51_bitfields.h	3436;"	d
MPU_PROTENSET1_PROTREG52_Pos	components\device\nrf51_bitfields.h	3435;"	d
MPU_PROTENSET1_PROTREG52_Set	components\device\nrf51_bitfields.h	3439;"	d
MPU_PROTENSET1_PROTREG53_Disabled	components\device\nrf51_bitfields.h	3430;"	d
MPU_PROTENSET1_PROTREG53_Enabled	components\device\nrf51_bitfields.h	3431;"	d
MPU_PROTENSET1_PROTREG53_Msk	components\device\nrf51_bitfields.h	3429;"	d
MPU_PROTENSET1_PROTREG53_Pos	components\device\nrf51_bitfields.h	3428;"	d
MPU_PROTENSET1_PROTREG53_Set	components\device\nrf51_bitfields.h	3432;"	d
MPU_PROTENSET1_PROTREG54_Disabled	components\device\nrf51_bitfields.h	3423;"	d
MPU_PROTENSET1_PROTREG54_Enabled	components\device\nrf51_bitfields.h	3424;"	d
MPU_PROTENSET1_PROTREG54_Msk	components\device\nrf51_bitfields.h	3422;"	d
MPU_PROTENSET1_PROTREG54_Pos	components\device\nrf51_bitfields.h	3421;"	d
MPU_PROTENSET1_PROTREG54_Set	components\device\nrf51_bitfields.h	3425;"	d
MPU_PROTENSET1_PROTREG55_Disabled	components\device\nrf51_bitfields.h	3416;"	d
MPU_PROTENSET1_PROTREG55_Enabled	components\device\nrf51_bitfields.h	3417;"	d
MPU_PROTENSET1_PROTREG55_Msk	components\device\nrf51_bitfields.h	3415;"	d
MPU_PROTENSET1_PROTREG55_Pos	components\device\nrf51_bitfields.h	3414;"	d
MPU_PROTENSET1_PROTREG55_Set	components\device\nrf51_bitfields.h	3418;"	d
MPU_PROTENSET1_PROTREG56_Disabled	components\device\nrf51_bitfields.h	3409;"	d
MPU_PROTENSET1_PROTREG56_Enabled	components\device\nrf51_bitfields.h	3410;"	d
MPU_PROTENSET1_PROTREG56_Msk	components\device\nrf51_bitfields.h	3408;"	d
MPU_PROTENSET1_PROTREG56_Pos	components\device\nrf51_bitfields.h	3407;"	d
MPU_PROTENSET1_PROTREG56_Set	components\device\nrf51_bitfields.h	3411;"	d
MPU_PROTENSET1_PROTREG57_Disabled	components\device\nrf51_bitfields.h	3402;"	d
MPU_PROTENSET1_PROTREG57_Enabled	components\device\nrf51_bitfields.h	3403;"	d
MPU_PROTENSET1_PROTREG57_Msk	components\device\nrf51_bitfields.h	3401;"	d
MPU_PROTENSET1_PROTREG57_Pos	components\device\nrf51_bitfields.h	3400;"	d
MPU_PROTENSET1_PROTREG57_Set	components\device\nrf51_bitfields.h	3404;"	d
MPU_PROTENSET1_PROTREG58_Disabled	components\device\nrf51_bitfields.h	3395;"	d
MPU_PROTENSET1_PROTREG58_Enabled	components\device\nrf51_bitfields.h	3396;"	d
MPU_PROTENSET1_PROTREG58_Msk	components\device\nrf51_bitfields.h	3394;"	d
MPU_PROTENSET1_PROTREG58_Pos	components\device\nrf51_bitfields.h	3393;"	d
MPU_PROTENSET1_PROTREG58_Set	components\device\nrf51_bitfields.h	3397;"	d
MPU_PROTENSET1_PROTREG59_Disabled	components\device\nrf51_bitfields.h	3388;"	d
MPU_PROTENSET1_PROTREG59_Enabled	components\device\nrf51_bitfields.h	3389;"	d
MPU_PROTENSET1_PROTREG59_Msk	components\device\nrf51_bitfields.h	3387;"	d
MPU_PROTENSET1_PROTREG59_Pos	components\device\nrf51_bitfields.h	3386;"	d
MPU_PROTENSET1_PROTREG59_Set	components\device\nrf51_bitfields.h	3390;"	d
MPU_PROTENSET1_PROTREG60_Disabled	components\device\nrf51_bitfields.h	3381;"	d
MPU_PROTENSET1_PROTREG60_Enabled	components\device\nrf51_bitfields.h	3382;"	d
MPU_PROTENSET1_PROTREG60_Msk	components\device\nrf51_bitfields.h	3380;"	d
MPU_PROTENSET1_PROTREG60_Pos	components\device\nrf51_bitfields.h	3379;"	d
MPU_PROTENSET1_PROTREG60_Set	components\device\nrf51_bitfields.h	3383;"	d
MPU_PROTENSET1_PROTREG61_Disabled	components\device\nrf51_bitfields.h	3374;"	d
MPU_PROTENSET1_PROTREG61_Enabled	components\device\nrf51_bitfields.h	3375;"	d
MPU_PROTENSET1_PROTREG61_Msk	components\device\nrf51_bitfields.h	3373;"	d
MPU_PROTENSET1_PROTREG61_Pos	components\device\nrf51_bitfields.h	3372;"	d
MPU_PROTENSET1_PROTREG61_Set	components\device\nrf51_bitfields.h	3376;"	d
MPU_PROTENSET1_PROTREG62_Disabled	components\device\nrf51_bitfields.h	3367;"	d
MPU_PROTENSET1_PROTREG62_Enabled	components\device\nrf51_bitfields.h	3368;"	d
MPU_PROTENSET1_PROTREG62_Msk	components\device\nrf51_bitfields.h	3366;"	d
MPU_PROTENSET1_PROTREG62_Pos	components\device\nrf51_bitfields.h	3365;"	d
MPU_PROTENSET1_PROTREG62_Set	components\device\nrf51_bitfields.h	3369;"	d
MPU_PROTENSET1_PROTREG63_Disabled	components\device\nrf51_bitfields.h	3360;"	d
MPU_PROTENSET1_PROTREG63_Enabled	components\device\nrf51_bitfields.h	3361;"	d
MPU_PROTENSET1_PROTREG63_Msk	components\device\nrf51_bitfields.h	3359;"	d
MPU_PROTENSET1_PROTREG63_Pos	components\device\nrf51_bitfields.h	3358;"	d
MPU_PROTENSET1_PROTREG63_Set	components\device\nrf51_bitfields.h	3362;"	d
NVMC_CONFIG_WEN_Een	components\device\nrf51_bitfields.h	3619;"	d
NVMC_CONFIG_WEN_Msk	components\device\nrf51_bitfields.h	3616;"	d
NVMC_CONFIG_WEN_Pos	components\device\nrf51_bitfields.h	3615;"	d
NVMC_CONFIG_WEN_Ren	components\device\nrf51_bitfields.h	3617;"	d
NVMC_CONFIG_WEN_Wen	components\device\nrf51_bitfields.h	3618;"	d
NVMC_ERASEALL_ERASEALL_Erase	components\device\nrf51_bitfields.h	3628;"	d
NVMC_ERASEALL_ERASEALL_Msk	components\device\nrf51_bitfields.h	3626;"	d
NVMC_ERASEALL_ERASEALL_NoOperation	components\device\nrf51_bitfields.h	3627;"	d
NVMC_ERASEALL_ERASEALL_Pos	components\device\nrf51_bitfields.h	3625;"	d
NVMC_ERASEUICR_ERASEUICR_Erase	components\device\nrf51_bitfields.h	3637;"	d
NVMC_ERASEUICR_ERASEUICR_Msk	components\device\nrf51_bitfields.h	3635;"	d
NVMC_ERASEUICR_ERASEUICR_NoOperation	components\device\nrf51_bitfields.h	3636;"	d
NVMC_ERASEUICR_ERASEUICR_Pos	components\device\nrf51_bitfields.h	3634;"	d
NVMC_READY_READY_Busy	components\device\nrf51_bitfields.h	3608;"	d
NVMC_READY_READY_Msk	components\device\nrf51_bitfields.h	3607;"	d
NVMC_READY_READY_Pos	components\device\nrf51_bitfields.h	3606;"	d
NVMC_READY_READY_Ready	components\device\nrf51_bitfields.h	3609;"	d
POWER_DCDCEN_DCDCEN_Disabled	components\device\nrf51_bitfields.h	3836;"	d
POWER_DCDCEN_DCDCEN_Enabled	components\device\nrf51_bitfields.h	3837;"	d
POWER_DCDCEN_DCDCEN_Msk	components\device\nrf51_bitfields.h	3835;"	d
POWER_DCDCEN_DCDCEN_Pos	components\device\nrf51_bitfields.h	3834;"	d
POWER_DCDCFORCE_FORCEOFF_Force	components\device\nrf51_bitfields.h	3852;"	d
POWER_DCDCFORCE_FORCEOFF_Msk	components\device\nrf51_bitfields.h	3850;"	d
POWER_DCDCFORCE_FORCEOFF_NoForce	components\device\nrf51_bitfields.h	3851;"	d
POWER_DCDCFORCE_FORCEOFF_Pos	components\device\nrf51_bitfields.h	3849;"	d
POWER_DCDCFORCE_FORCEON_Force	components\device\nrf51_bitfields.h	3846;"	d
POWER_DCDCFORCE_FORCEON_Msk	components\device\nrf51_bitfields.h	3844;"	d
POWER_DCDCFORCE_FORCEON_NoForce	components\device\nrf51_bitfields.h	3845;"	d
POWER_DCDCFORCE_FORCEON_Pos	components\device\nrf51_bitfields.h	3843;"	d
POWER_GPREGRET_GPREGRET_Msk	components\device\nrf51_bitfields.h	3765;"	d
POWER_GPREGRET_GPREGRET_Pos	components\device\nrf51_bitfields.h	3764;"	d
POWER_INTENCLR_POFWARN_Clear	components\device\nrf51_bitfields.h	3661;"	d
POWER_INTENCLR_POFWARN_Disabled	components\device\nrf51_bitfields.h	3659;"	d
POWER_INTENCLR_POFWARN_Enabled	components\device\nrf51_bitfields.h	3660;"	d
POWER_INTENCLR_POFWARN_Msk	components\device\nrf51_bitfields.h	3658;"	d
POWER_INTENCLR_POFWARN_Pos	components\device\nrf51_bitfields.h	3657;"	d
POWER_INTENSET_POFWARN_Disabled	components\device\nrf51_bitfields.h	3649;"	d
POWER_INTENSET_POFWARN_Enabled	components\device\nrf51_bitfields.h	3650;"	d
POWER_INTENSET_POFWARN_Msk	components\device\nrf51_bitfields.h	3648;"	d
POWER_INTENSET_POFWARN_Pos	components\device\nrf51_bitfields.h	3647;"	d
POWER_INTENSET_POFWARN_Set	components\device\nrf51_bitfields.h	3651;"	d
POWER_POFCON_POF_Disabled	components\device\nrf51_bitfields.h	3757;"	d
POWER_POFCON_POF_Enabled	components\device\nrf51_bitfields.h	3758;"	d
POWER_POFCON_POF_Msk	components\device\nrf51_bitfields.h	3756;"	d
POWER_POFCON_POF_Pos	components\device\nrf51_bitfields.h	3755;"	d
POWER_POFCON_THRESHOLD_Msk	components\device\nrf51_bitfields.h	3748;"	d
POWER_POFCON_THRESHOLD_Pos	components\device\nrf51_bitfields.h	3747;"	d
POWER_POFCON_THRESHOLD_V21	components\device\nrf51_bitfields.h	3749;"	d
POWER_POFCON_THRESHOLD_V23	components\device\nrf51_bitfields.h	3750;"	d
POWER_POFCON_THRESHOLD_V25	components\device\nrf51_bitfields.h	3751;"	d
POWER_POFCON_THRESHOLD_V27	components\device\nrf51_bitfields.h	3752;"	d
POWER_RAMONB_OFFRAM2_Msk	components\device\nrf51_bitfields.h	3814;"	d
POWER_RAMONB_OFFRAM2_Pos	components\device\nrf51_bitfields.h	3813;"	d
POWER_RAMONB_OFFRAM2_RAM2Off	components\device\nrf51_bitfields.h	3815;"	d
POWER_RAMONB_OFFRAM2_RAM2On	components\device\nrf51_bitfields.h	3816;"	d
POWER_RAMONB_OFFRAM3_Msk	components\device\nrf51_bitfields.h	3808;"	d
POWER_RAMONB_OFFRAM3_Pos	components\device\nrf51_bitfields.h	3807;"	d
POWER_RAMONB_OFFRAM3_RAM3Off	components\device\nrf51_bitfields.h	3809;"	d
POWER_RAMONB_OFFRAM3_RAM3On	components\device\nrf51_bitfields.h	3810;"	d
POWER_RAMONB_ONRAM2_Msk	components\device\nrf51_bitfields.h	3826;"	d
POWER_RAMONB_ONRAM2_Pos	components\device\nrf51_bitfields.h	3825;"	d
POWER_RAMONB_ONRAM2_RAM2Off	components\device\nrf51_bitfields.h	3827;"	d
POWER_RAMONB_ONRAM2_RAM2On	components\device\nrf51_bitfields.h	3828;"	d
POWER_RAMONB_ONRAM3_Msk	components\device\nrf51_bitfields.h	3820;"	d
POWER_RAMONB_ONRAM3_Pos	components\device\nrf51_bitfields.h	3819;"	d
POWER_RAMONB_ONRAM3_RAM3Off	components\device\nrf51_bitfields.h	3821;"	d
POWER_RAMONB_ONRAM3_RAM3On	components\device\nrf51_bitfields.h	3822;"	d
POWER_RAMON_OFFRAM0_Msk	components\device\nrf51_bitfields.h	3778;"	d
POWER_RAMON_OFFRAM0_Pos	components\device\nrf51_bitfields.h	3777;"	d
POWER_RAMON_OFFRAM0_RAM0Off	components\device\nrf51_bitfields.h	3779;"	d
POWER_RAMON_OFFRAM0_RAM0On	components\device\nrf51_bitfields.h	3780;"	d
POWER_RAMON_OFFRAM1_Msk	components\device\nrf51_bitfields.h	3772;"	d
POWER_RAMON_OFFRAM1_Pos	components\device\nrf51_bitfields.h	3771;"	d
POWER_RAMON_OFFRAM1_RAM1Off	components\device\nrf51_bitfields.h	3773;"	d
POWER_RAMON_OFFRAM1_RAM1On	components\device\nrf51_bitfields.h	3774;"	d
POWER_RAMON_ONRAM0_Msk	components\device\nrf51_bitfields.h	3790;"	d
POWER_RAMON_ONRAM0_Pos	components\device\nrf51_bitfields.h	3789;"	d
POWER_RAMON_ONRAM0_RAM0Off	components\device\nrf51_bitfields.h	3791;"	d
POWER_RAMON_ONRAM0_RAM0On	components\device\nrf51_bitfields.h	3792;"	d
POWER_RAMON_ONRAM1_Msk	components\device\nrf51_bitfields.h	3784;"	d
POWER_RAMON_ONRAM1_Pos	components\device\nrf51_bitfields.h	3783;"	d
POWER_RAMON_ONRAM1_RAM1Off	components\device\nrf51_bitfields.h	3785;"	d
POWER_RAMON_ONRAM1_RAM1On	components\device\nrf51_bitfields.h	3786;"	d
POWER_RAMSTATUS_RAMBLOCK0_Msk	components\device\nrf51_bitfields.h	3731;"	d
POWER_RAMSTATUS_RAMBLOCK0_Off	components\device\nrf51_bitfields.h	3732;"	d
POWER_RAMSTATUS_RAMBLOCK0_On	components\device\nrf51_bitfields.h	3733;"	d
POWER_RAMSTATUS_RAMBLOCK0_Pos	components\device\nrf51_bitfields.h	3730;"	d
POWER_RAMSTATUS_RAMBLOCK1_Msk	components\device\nrf51_bitfields.h	3725;"	d
POWER_RAMSTATUS_RAMBLOCK1_Off	components\device\nrf51_bitfields.h	3726;"	d
POWER_RAMSTATUS_RAMBLOCK1_On	components\device\nrf51_bitfields.h	3727;"	d
POWER_RAMSTATUS_RAMBLOCK1_Pos	components\device\nrf51_bitfields.h	3724;"	d
POWER_RAMSTATUS_RAMBLOCK2_Msk	components\device\nrf51_bitfields.h	3719;"	d
POWER_RAMSTATUS_RAMBLOCK2_Off	components\device\nrf51_bitfields.h	3720;"	d
POWER_RAMSTATUS_RAMBLOCK2_On	components\device\nrf51_bitfields.h	3721;"	d
POWER_RAMSTATUS_RAMBLOCK2_Pos	components\device\nrf51_bitfields.h	3718;"	d
POWER_RAMSTATUS_RAMBLOCK3_Msk	components\device\nrf51_bitfields.h	3713;"	d
POWER_RAMSTATUS_RAMBLOCK3_Off	components\device\nrf51_bitfields.h	3714;"	d
POWER_RAMSTATUS_RAMBLOCK3_On	components\device\nrf51_bitfields.h	3715;"	d
POWER_RAMSTATUS_RAMBLOCK3_Pos	components\device\nrf51_bitfields.h	3712;"	d
POWER_RESETREAS_DIF_Detected	components\device\nrf51_bitfields.h	3670;"	d
POWER_RESETREAS_DIF_Msk	components\device\nrf51_bitfields.h	3668;"	d
POWER_RESETREAS_DIF_NotDetected	components\device\nrf51_bitfields.h	3669;"	d
POWER_RESETREAS_DIF_Pos	components\device\nrf51_bitfields.h	3667;"	d
POWER_RESETREAS_DOG_Detected	components\device\nrf51_bitfields.h	3700;"	d
POWER_RESETREAS_DOG_Msk	components\device\nrf51_bitfields.h	3698;"	d
POWER_RESETREAS_DOG_NotDetected	components\device\nrf51_bitfields.h	3699;"	d
POWER_RESETREAS_DOG_Pos	components\device\nrf51_bitfields.h	3697;"	d
POWER_RESETREAS_LOCKUP_Detected	components\device\nrf51_bitfields.h	3688;"	d
POWER_RESETREAS_LOCKUP_Msk	components\device\nrf51_bitfields.h	3686;"	d
POWER_RESETREAS_LOCKUP_NotDetected	components\device\nrf51_bitfields.h	3687;"	d
POWER_RESETREAS_LOCKUP_Pos	components\device\nrf51_bitfields.h	3685;"	d
POWER_RESETREAS_LPCOMP_Detected	components\device\nrf51_bitfields.h	3676;"	d
POWER_RESETREAS_LPCOMP_Msk	components\device\nrf51_bitfields.h	3674;"	d
POWER_RESETREAS_LPCOMP_NotDetected	components\device\nrf51_bitfields.h	3675;"	d
POWER_RESETREAS_LPCOMP_Pos	components\device\nrf51_bitfields.h	3673;"	d
POWER_RESETREAS_OFF_Detected	components\device\nrf51_bitfields.h	3682;"	d
POWER_RESETREAS_OFF_Msk	components\device\nrf51_bitfields.h	3680;"	d
POWER_RESETREAS_OFF_NotDetected	components\device\nrf51_bitfields.h	3681;"	d
POWER_RESETREAS_OFF_Pos	components\device\nrf51_bitfields.h	3679;"	d
POWER_RESETREAS_RESETPIN_Detected	components\device\nrf51_bitfields.h	3706;"	d
POWER_RESETREAS_RESETPIN_Msk	components\device\nrf51_bitfields.h	3704;"	d
POWER_RESETREAS_RESETPIN_NotDetected	components\device\nrf51_bitfields.h	3705;"	d
POWER_RESETREAS_RESETPIN_Pos	components\device\nrf51_bitfields.h	3703;"	d
POWER_RESETREAS_SREQ_Detected	components\device\nrf51_bitfields.h	3694;"	d
POWER_RESETREAS_SREQ_Msk	components\device\nrf51_bitfields.h	3692;"	d
POWER_RESETREAS_SREQ_NotDetected	components\device\nrf51_bitfields.h	3693;"	d
POWER_RESETREAS_SREQ_Pos	components\device\nrf51_bitfields.h	3691;"	d
POWER_RESET_RESET_Disabled	components\device\nrf51_bitfields.h	3800;"	d
POWER_RESET_RESET_Enabled	components\device\nrf51_bitfields.h	3801;"	d
POWER_RESET_RESET_Msk	components\device\nrf51_bitfields.h	3799;"	d
POWER_RESET_RESET_Pos	components\device\nrf51_bitfields.h	3798;"	d
POWER_SYSTEMOFF_SYSTEMOFF_Enter	components\device\nrf51_bitfields.h	3741;"	d
POWER_SYSTEMOFF_SYSTEMOFF_Msk	components\device\nrf51_bitfields.h	3740;"	d
POWER_SYSTEMOFF_SYSTEMOFF_Pos	components\device\nrf51_bitfields.h	3739;"	d
PPI_CHENCLR_CH0_Clear	components\device\nrf51_bitfields.h	4425;"	d
PPI_CHENCLR_CH0_Disabled	components\device\nrf51_bitfields.h	4423;"	d
PPI_CHENCLR_CH0_Enabled	components\device\nrf51_bitfields.h	4424;"	d
PPI_CHENCLR_CH0_Msk	components\device\nrf51_bitfields.h	4422;"	d
PPI_CHENCLR_CH0_Pos	components\device\nrf51_bitfields.h	4421;"	d
PPI_CHENCLR_CH10_Clear	components\device\nrf51_bitfields.h	4355;"	d
PPI_CHENCLR_CH10_Disabled	components\device\nrf51_bitfields.h	4353;"	d
PPI_CHENCLR_CH10_Enabled	components\device\nrf51_bitfields.h	4354;"	d
PPI_CHENCLR_CH10_Msk	components\device\nrf51_bitfields.h	4352;"	d
PPI_CHENCLR_CH10_Pos	components\device\nrf51_bitfields.h	4351;"	d
PPI_CHENCLR_CH11_Clear	components\device\nrf51_bitfields.h	4348;"	d
PPI_CHENCLR_CH11_Disabled	components\device\nrf51_bitfields.h	4346;"	d
PPI_CHENCLR_CH11_Enabled	components\device\nrf51_bitfields.h	4347;"	d
PPI_CHENCLR_CH11_Msk	components\device\nrf51_bitfields.h	4345;"	d
PPI_CHENCLR_CH11_Pos	components\device\nrf51_bitfields.h	4344;"	d
PPI_CHENCLR_CH12_Clear	components\device\nrf51_bitfields.h	4341;"	d
PPI_CHENCLR_CH12_Disabled	components\device\nrf51_bitfields.h	4339;"	d
PPI_CHENCLR_CH12_Enabled	components\device\nrf51_bitfields.h	4340;"	d
PPI_CHENCLR_CH12_Msk	components\device\nrf51_bitfields.h	4338;"	d
PPI_CHENCLR_CH12_Pos	components\device\nrf51_bitfields.h	4337;"	d
PPI_CHENCLR_CH13_Clear	components\device\nrf51_bitfields.h	4334;"	d
PPI_CHENCLR_CH13_Disabled	components\device\nrf51_bitfields.h	4332;"	d
PPI_CHENCLR_CH13_Enabled	components\device\nrf51_bitfields.h	4333;"	d
PPI_CHENCLR_CH13_Msk	components\device\nrf51_bitfields.h	4331;"	d
PPI_CHENCLR_CH13_Pos	components\device\nrf51_bitfields.h	4330;"	d
PPI_CHENCLR_CH14_Clear	components\device\nrf51_bitfields.h	4327;"	d
PPI_CHENCLR_CH14_Disabled	components\device\nrf51_bitfields.h	4325;"	d
PPI_CHENCLR_CH14_Enabled	components\device\nrf51_bitfields.h	4326;"	d
PPI_CHENCLR_CH14_Msk	components\device\nrf51_bitfields.h	4324;"	d
PPI_CHENCLR_CH14_Pos	components\device\nrf51_bitfields.h	4323;"	d
PPI_CHENCLR_CH15_Clear	components\device\nrf51_bitfields.h	4320;"	d
PPI_CHENCLR_CH15_Disabled	components\device\nrf51_bitfields.h	4318;"	d
PPI_CHENCLR_CH15_Enabled	components\device\nrf51_bitfields.h	4319;"	d
PPI_CHENCLR_CH15_Msk	components\device\nrf51_bitfields.h	4317;"	d
PPI_CHENCLR_CH15_Pos	components\device\nrf51_bitfields.h	4316;"	d
PPI_CHENCLR_CH1_Clear	components\device\nrf51_bitfields.h	4418;"	d
PPI_CHENCLR_CH1_Disabled	components\device\nrf51_bitfields.h	4416;"	d
PPI_CHENCLR_CH1_Enabled	components\device\nrf51_bitfields.h	4417;"	d
PPI_CHENCLR_CH1_Msk	components\device\nrf51_bitfields.h	4415;"	d
PPI_CHENCLR_CH1_Pos	components\device\nrf51_bitfields.h	4414;"	d
PPI_CHENCLR_CH20_Clear	components\device\nrf51_bitfields.h	4313;"	d
PPI_CHENCLR_CH20_Disabled	components\device\nrf51_bitfields.h	4311;"	d
PPI_CHENCLR_CH20_Enabled	components\device\nrf51_bitfields.h	4312;"	d
PPI_CHENCLR_CH20_Msk	components\device\nrf51_bitfields.h	4310;"	d
PPI_CHENCLR_CH20_Pos	components\device\nrf51_bitfields.h	4309;"	d
PPI_CHENCLR_CH21_Clear	components\device\nrf51_bitfields.h	4306;"	d
PPI_CHENCLR_CH21_Disabled	components\device\nrf51_bitfields.h	4304;"	d
PPI_CHENCLR_CH21_Enabled	components\device\nrf51_bitfields.h	4305;"	d
PPI_CHENCLR_CH21_Msk	components\device\nrf51_bitfields.h	4303;"	d
PPI_CHENCLR_CH21_Pos	components\device\nrf51_bitfields.h	4302;"	d
PPI_CHENCLR_CH22_Clear	components\device\nrf51_bitfields.h	4299;"	d
PPI_CHENCLR_CH22_Disabled	components\device\nrf51_bitfields.h	4297;"	d
PPI_CHENCLR_CH22_Enabled	components\device\nrf51_bitfields.h	4298;"	d
PPI_CHENCLR_CH22_Msk	components\device\nrf51_bitfields.h	4296;"	d
PPI_CHENCLR_CH22_Pos	components\device\nrf51_bitfields.h	4295;"	d
PPI_CHENCLR_CH23_Clear	components\device\nrf51_bitfields.h	4292;"	d
PPI_CHENCLR_CH23_Disabled	components\device\nrf51_bitfields.h	4290;"	d
PPI_CHENCLR_CH23_Enabled	components\device\nrf51_bitfields.h	4291;"	d
PPI_CHENCLR_CH23_Msk	components\device\nrf51_bitfields.h	4289;"	d
PPI_CHENCLR_CH23_Pos	components\device\nrf51_bitfields.h	4288;"	d
PPI_CHENCLR_CH24_Clear	components\device\nrf51_bitfields.h	4285;"	d
PPI_CHENCLR_CH24_Disabled	components\device\nrf51_bitfields.h	4283;"	d
PPI_CHENCLR_CH24_Enabled	components\device\nrf51_bitfields.h	4284;"	d
PPI_CHENCLR_CH24_Msk	components\device\nrf51_bitfields.h	4282;"	d
PPI_CHENCLR_CH24_Pos	components\device\nrf51_bitfields.h	4281;"	d
PPI_CHENCLR_CH25_Clear	components\device\nrf51_bitfields.h	4278;"	d
PPI_CHENCLR_CH25_Disabled	components\device\nrf51_bitfields.h	4276;"	d
PPI_CHENCLR_CH25_Enabled	components\device\nrf51_bitfields.h	4277;"	d
PPI_CHENCLR_CH25_Msk	components\device\nrf51_bitfields.h	4275;"	d
PPI_CHENCLR_CH25_Pos	components\device\nrf51_bitfields.h	4274;"	d
PPI_CHENCLR_CH26_Clear	components\device\nrf51_bitfields.h	4271;"	d
PPI_CHENCLR_CH26_Disabled	components\device\nrf51_bitfields.h	4269;"	d
PPI_CHENCLR_CH26_Enabled	components\device\nrf51_bitfields.h	4270;"	d
PPI_CHENCLR_CH26_Msk	components\device\nrf51_bitfields.h	4268;"	d
PPI_CHENCLR_CH26_Pos	components\device\nrf51_bitfields.h	4267;"	d
PPI_CHENCLR_CH27_Clear	components\device\nrf51_bitfields.h	4264;"	d
PPI_CHENCLR_CH27_Disabled	components\device\nrf51_bitfields.h	4262;"	d
PPI_CHENCLR_CH27_Enabled	components\device\nrf51_bitfields.h	4263;"	d
PPI_CHENCLR_CH27_Msk	components\device\nrf51_bitfields.h	4261;"	d
PPI_CHENCLR_CH27_Pos	components\device\nrf51_bitfields.h	4260;"	d
PPI_CHENCLR_CH28_Clear	components\device\nrf51_bitfields.h	4257;"	d
PPI_CHENCLR_CH28_Disabled	components\device\nrf51_bitfields.h	4255;"	d
PPI_CHENCLR_CH28_Enabled	components\device\nrf51_bitfields.h	4256;"	d
PPI_CHENCLR_CH28_Msk	components\device\nrf51_bitfields.h	4254;"	d
PPI_CHENCLR_CH28_Pos	components\device\nrf51_bitfields.h	4253;"	d
PPI_CHENCLR_CH29_Clear	components\device\nrf51_bitfields.h	4250;"	d
PPI_CHENCLR_CH29_Disabled	components\device\nrf51_bitfields.h	4248;"	d
PPI_CHENCLR_CH29_Enabled	components\device\nrf51_bitfields.h	4249;"	d
PPI_CHENCLR_CH29_Msk	components\device\nrf51_bitfields.h	4247;"	d
PPI_CHENCLR_CH29_Pos	components\device\nrf51_bitfields.h	4246;"	d
PPI_CHENCLR_CH2_Clear	components\device\nrf51_bitfields.h	4411;"	d
PPI_CHENCLR_CH2_Disabled	components\device\nrf51_bitfields.h	4409;"	d
PPI_CHENCLR_CH2_Enabled	components\device\nrf51_bitfields.h	4410;"	d
PPI_CHENCLR_CH2_Msk	components\device\nrf51_bitfields.h	4408;"	d
PPI_CHENCLR_CH2_Pos	components\device\nrf51_bitfields.h	4407;"	d
PPI_CHENCLR_CH30_Clear	components\device\nrf51_bitfields.h	4243;"	d
PPI_CHENCLR_CH30_Disabled	components\device\nrf51_bitfields.h	4241;"	d
PPI_CHENCLR_CH30_Enabled	components\device\nrf51_bitfields.h	4242;"	d
PPI_CHENCLR_CH30_Msk	components\device\nrf51_bitfields.h	4240;"	d
PPI_CHENCLR_CH30_Pos	components\device\nrf51_bitfields.h	4239;"	d
PPI_CHENCLR_CH31_Clear	components\device\nrf51_bitfields.h	4236;"	d
PPI_CHENCLR_CH31_Disabled	components\device\nrf51_bitfields.h	4234;"	d
PPI_CHENCLR_CH31_Enabled	components\device\nrf51_bitfields.h	4235;"	d
PPI_CHENCLR_CH31_Msk	components\device\nrf51_bitfields.h	4233;"	d
PPI_CHENCLR_CH31_Pos	components\device\nrf51_bitfields.h	4232;"	d
PPI_CHENCLR_CH3_Clear	components\device\nrf51_bitfields.h	4404;"	d
PPI_CHENCLR_CH3_Disabled	components\device\nrf51_bitfields.h	4402;"	d
PPI_CHENCLR_CH3_Enabled	components\device\nrf51_bitfields.h	4403;"	d
PPI_CHENCLR_CH3_Msk	components\device\nrf51_bitfields.h	4401;"	d
PPI_CHENCLR_CH3_Pos	components\device\nrf51_bitfields.h	4400;"	d
PPI_CHENCLR_CH4_Clear	components\device\nrf51_bitfields.h	4397;"	d
PPI_CHENCLR_CH4_Disabled	components\device\nrf51_bitfields.h	4395;"	d
PPI_CHENCLR_CH4_Enabled	components\device\nrf51_bitfields.h	4396;"	d
PPI_CHENCLR_CH4_Msk	components\device\nrf51_bitfields.h	4394;"	d
PPI_CHENCLR_CH4_Pos	components\device\nrf51_bitfields.h	4393;"	d
PPI_CHENCLR_CH5_Clear	components\device\nrf51_bitfields.h	4390;"	d
PPI_CHENCLR_CH5_Disabled	components\device\nrf51_bitfields.h	4388;"	d
PPI_CHENCLR_CH5_Enabled	components\device\nrf51_bitfields.h	4389;"	d
PPI_CHENCLR_CH5_Msk	components\device\nrf51_bitfields.h	4387;"	d
PPI_CHENCLR_CH5_Pos	components\device\nrf51_bitfields.h	4386;"	d
PPI_CHENCLR_CH6_Clear	components\device\nrf51_bitfields.h	4383;"	d
PPI_CHENCLR_CH6_Disabled	components\device\nrf51_bitfields.h	4381;"	d
PPI_CHENCLR_CH6_Enabled	components\device\nrf51_bitfields.h	4382;"	d
PPI_CHENCLR_CH6_Msk	components\device\nrf51_bitfields.h	4380;"	d
PPI_CHENCLR_CH6_Pos	components\device\nrf51_bitfields.h	4379;"	d
PPI_CHENCLR_CH7_Clear	components\device\nrf51_bitfields.h	4376;"	d
PPI_CHENCLR_CH7_Disabled	components\device\nrf51_bitfields.h	4374;"	d
PPI_CHENCLR_CH7_Enabled	components\device\nrf51_bitfields.h	4375;"	d
PPI_CHENCLR_CH7_Msk	components\device\nrf51_bitfields.h	4373;"	d
PPI_CHENCLR_CH7_Pos	components\device\nrf51_bitfields.h	4372;"	d
PPI_CHENCLR_CH8_Clear	components\device\nrf51_bitfields.h	4369;"	d
PPI_CHENCLR_CH8_Disabled	components\device\nrf51_bitfields.h	4367;"	d
PPI_CHENCLR_CH8_Enabled	components\device\nrf51_bitfields.h	4368;"	d
PPI_CHENCLR_CH8_Msk	components\device\nrf51_bitfields.h	4366;"	d
PPI_CHENCLR_CH8_Pos	components\device\nrf51_bitfields.h	4365;"	d
PPI_CHENCLR_CH9_Clear	components\device\nrf51_bitfields.h	4362;"	d
PPI_CHENCLR_CH9_Disabled	components\device\nrf51_bitfields.h	4360;"	d
PPI_CHENCLR_CH9_Enabled	components\device\nrf51_bitfields.h	4361;"	d
PPI_CHENCLR_CH9_Msk	components\device\nrf51_bitfields.h	4359;"	d
PPI_CHENCLR_CH9_Pos	components\device\nrf51_bitfields.h	4358;"	d
PPI_CHENSET_CH0_Disabled	components\device\nrf51_bitfields.h	4224;"	d
PPI_CHENSET_CH0_Enabled	components\device\nrf51_bitfields.h	4225;"	d
PPI_CHENSET_CH0_Msk	components\device\nrf51_bitfields.h	4223;"	d
PPI_CHENSET_CH0_Pos	components\device\nrf51_bitfields.h	4222;"	d
PPI_CHENSET_CH0_Set	components\device\nrf51_bitfields.h	4226;"	d
PPI_CHENSET_CH10_Disabled	components\device\nrf51_bitfields.h	4154;"	d
PPI_CHENSET_CH10_Enabled	components\device\nrf51_bitfields.h	4155;"	d
PPI_CHENSET_CH10_Msk	components\device\nrf51_bitfields.h	4153;"	d
PPI_CHENSET_CH10_Pos	components\device\nrf51_bitfields.h	4152;"	d
PPI_CHENSET_CH10_Set	components\device\nrf51_bitfields.h	4156;"	d
PPI_CHENSET_CH11_Disabled	components\device\nrf51_bitfields.h	4147;"	d
PPI_CHENSET_CH11_Enabled	components\device\nrf51_bitfields.h	4148;"	d
PPI_CHENSET_CH11_Msk	components\device\nrf51_bitfields.h	4146;"	d
PPI_CHENSET_CH11_Pos	components\device\nrf51_bitfields.h	4145;"	d
PPI_CHENSET_CH11_Set	components\device\nrf51_bitfields.h	4149;"	d
PPI_CHENSET_CH12_Disabled	components\device\nrf51_bitfields.h	4140;"	d
PPI_CHENSET_CH12_Enabled	components\device\nrf51_bitfields.h	4141;"	d
PPI_CHENSET_CH12_Msk	components\device\nrf51_bitfields.h	4139;"	d
PPI_CHENSET_CH12_Pos	components\device\nrf51_bitfields.h	4138;"	d
PPI_CHENSET_CH12_Set	components\device\nrf51_bitfields.h	4142;"	d
PPI_CHENSET_CH13_Disabled	components\device\nrf51_bitfields.h	4133;"	d
PPI_CHENSET_CH13_Enabled	components\device\nrf51_bitfields.h	4134;"	d
PPI_CHENSET_CH13_Msk	components\device\nrf51_bitfields.h	4132;"	d
PPI_CHENSET_CH13_Pos	components\device\nrf51_bitfields.h	4131;"	d
PPI_CHENSET_CH13_Set	components\device\nrf51_bitfields.h	4135;"	d
PPI_CHENSET_CH14_Disabled	components\device\nrf51_bitfields.h	4126;"	d
PPI_CHENSET_CH14_Enabled	components\device\nrf51_bitfields.h	4127;"	d
PPI_CHENSET_CH14_Msk	components\device\nrf51_bitfields.h	4125;"	d
PPI_CHENSET_CH14_Pos	components\device\nrf51_bitfields.h	4124;"	d
PPI_CHENSET_CH14_Set	components\device\nrf51_bitfields.h	4128;"	d
PPI_CHENSET_CH15_Disabled	components\device\nrf51_bitfields.h	4119;"	d
PPI_CHENSET_CH15_Enabled	components\device\nrf51_bitfields.h	4120;"	d
PPI_CHENSET_CH15_Msk	components\device\nrf51_bitfields.h	4118;"	d
PPI_CHENSET_CH15_Pos	components\device\nrf51_bitfields.h	4117;"	d
PPI_CHENSET_CH15_Set	components\device\nrf51_bitfields.h	4121;"	d
PPI_CHENSET_CH1_Disabled	components\device\nrf51_bitfields.h	4217;"	d
PPI_CHENSET_CH1_Enabled	components\device\nrf51_bitfields.h	4218;"	d
PPI_CHENSET_CH1_Msk	components\device\nrf51_bitfields.h	4216;"	d
PPI_CHENSET_CH1_Pos	components\device\nrf51_bitfields.h	4215;"	d
PPI_CHENSET_CH1_Set	components\device\nrf51_bitfields.h	4219;"	d
PPI_CHENSET_CH20_Disabled	components\device\nrf51_bitfields.h	4112;"	d
PPI_CHENSET_CH20_Enabled	components\device\nrf51_bitfields.h	4113;"	d
PPI_CHENSET_CH20_Msk	components\device\nrf51_bitfields.h	4111;"	d
PPI_CHENSET_CH20_Pos	components\device\nrf51_bitfields.h	4110;"	d
PPI_CHENSET_CH20_Set	components\device\nrf51_bitfields.h	4114;"	d
PPI_CHENSET_CH21_Disabled	components\device\nrf51_bitfields.h	4105;"	d
PPI_CHENSET_CH21_Enabled	components\device\nrf51_bitfields.h	4106;"	d
PPI_CHENSET_CH21_Msk	components\device\nrf51_bitfields.h	4104;"	d
PPI_CHENSET_CH21_Pos	components\device\nrf51_bitfields.h	4103;"	d
PPI_CHENSET_CH21_Set	components\device\nrf51_bitfields.h	4107;"	d
PPI_CHENSET_CH22_Disabled	components\device\nrf51_bitfields.h	4098;"	d
PPI_CHENSET_CH22_Enabled	components\device\nrf51_bitfields.h	4099;"	d
PPI_CHENSET_CH22_Msk	components\device\nrf51_bitfields.h	4097;"	d
PPI_CHENSET_CH22_Pos	components\device\nrf51_bitfields.h	4096;"	d
PPI_CHENSET_CH22_Set	components\device\nrf51_bitfields.h	4100;"	d
PPI_CHENSET_CH23_Disabled	components\device\nrf51_bitfields.h	4091;"	d
PPI_CHENSET_CH23_Enabled	components\device\nrf51_bitfields.h	4092;"	d
PPI_CHENSET_CH23_Msk	components\device\nrf51_bitfields.h	4090;"	d
PPI_CHENSET_CH23_Pos	components\device\nrf51_bitfields.h	4089;"	d
PPI_CHENSET_CH23_Set	components\device\nrf51_bitfields.h	4093;"	d
PPI_CHENSET_CH24_Disabled	components\device\nrf51_bitfields.h	4084;"	d
PPI_CHENSET_CH24_Enabled	components\device\nrf51_bitfields.h	4085;"	d
PPI_CHENSET_CH24_Msk	components\device\nrf51_bitfields.h	4083;"	d
PPI_CHENSET_CH24_Pos	components\device\nrf51_bitfields.h	4082;"	d
PPI_CHENSET_CH24_Set	components\device\nrf51_bitfields.h	4086;"	d
PPI_CHENSET_CH25_Disabled	components\device\nrf51_bitfields.h	4077;"	d
PPI_CHENSET_CH25_Enabled	components\device\nrf51_bitfields.h	4078;"	d
PPI_CHENSET_CH25_Msk	components\device\nrf51_bitfields.h	4076;"	d
PPI_CHENSET_CH25_Pos	components\device\nrf51_bitfields.h	4075;"	d
PPI_CHENSET_CH25_Set	components\device\nrf51_bitfields.h	4079;"	d
PPI_CHENSET_CH26_Disabled	components\device\nrf51_bitfields.h	4070;"	d
PPI_CHENSET_CH26_Enabled	components\device\nrf51_bitfields.h	4071;"	d
PPI_CHENSET_CH26_Msk	components\device\nrf51_bitfields.h	4069;"	d
PPI_CHENSET_CH26_Pos	components\device\nrf51_bitfields.h	4068;"	d
PPI_CHENSET_CH26_Set	components\device\nrf51_bitfields.h	4072;"	d
PPI_CHENSET_CH27_Disabled	components\device\nrf51_bitfields.h	4063;"	d
PPI_CHENSET_CH27_Enabled	components\device\nrf51_bitfields.h	4064;"	d
PPI_CHENSET_CH27_Msk	components\device\nrf51_bitfields.h	4062;"	d
PPI_CHENSET_CH27_Pos	components\device\nrf51_bitfields.h	4061;"	d
PPI_CHENSET_CH27_Set	components\device\nrf51_bitfields.h	4065;"	d
PPI_CHENSET_CH28_Disabled	components\device\nrf51_bitfields.h	4056;"	d
PPI_CHENSET_CH28_Enabled	components\device\nrf51_bitfields.h	4057;"	d
PPI_CHENSET_CH28_Msk	components\device\nrf51_bitfields.h	4055;"	d
PPI_CHENSET_CH28_Pos	components\device\nrf51_bitfields.h	4054;"	d
PPI_CHENSET_CH28_Set	components\device\nrf51_bitfields.h	4058;"	d
PPI_CHENSET_CH29_Disabled	components\device\nrf51_bitfields.h	4049;"	d
PPI_CHENSET_CH29_Enabled	components\device\nrf51_bitfields.h	4050;"	d
PPI_CHENSET_CH29_Msk	components\device\nrf51_bitfields.h	4048;"	d
PPI_CHENSET_CH29_Pos	components\device\nrf51_bitfields.h	4047;"	d
PPI_CHENSET_CH29_Set	components\device\nrf51_bitfields.h	4051;"	d
PPI_CHENSET_CH2_Disabled	components\device\nrf51_bitfields.h	4210;"	d
PPI_CHENSET_CH2_Enabled	components\device\nrf51_bitfields.h	4211;"	d
PPI_CHENSET_CH2_Msk	components\device\nrf51_bitfields.h	4209;"	d
PPI_CHENSET_CH2_Pos	components\device\nrf51_bitfields.h	4208;"	d
PPI_CHENSET_CH2_Set	components\device\nrf51_bitfields.h	4212;"	d
PPI_CHENSET_CH30_Disabled	components\device\nrf51_bitfields.h	4042;"	d
PPI_CHENSET_CH30_Enabled	components\device\nrf51_bitfields.h	4043;"	d
PPI_CHENSET_CH30_Msk	components\device\nrf51_bitfields.h	4041;"	d
PPI_CHENSET_CH30_Pos	components\device\nrf51_bitfields.h	4040;"	d
PPI_CHENSET_CH30_Set	components\device\nrf51_bitfields.h	4044;"	d
PPI_CHENSET_CH31_Disabled	components\device\nrf51_bitfields.h	4035;"	d
PPI_CHENSET_CH31_Enabled	components\device\nrf51_bitfields.h	4036;"	d
PPI_CHENSET_CH31_Msk	components\device\nrf51_bitfields.h	4034;"	d
PPI_CHENSET_CH31_Pos	components\device\nrf51_bitfields.h	4033;"	d
PPI_CHENSET_CH31_Set	components\device\nrf51_bitfields.h	4037;"	d
PPI_CHENSET_CH3_Disabled	components\device\nrf51_bitfields.h	4203;"	d
PPI_CHENSET_CH3_Enabled	components\device\nrf51_bitfields.h	4204;"	d
PPI_CHENSET_CH3_Msk	components\device\nrf51_bitfields.h	4202;"	d
PPI_CHENSET_CH3_Pos	components\device\nrf51_bitfields.h	4201;"	d
PPI_CHENSET_CH3_Set	components\device\nrf51_bitfields.h	4205;"	d
PPI_CHENSET_CH4_Disabled	components\device\nrf51_bitfields.h	4196;"	d
PPI_CHENSET_CH4_Enabled	components\device\nrf51_bitfields.h	4197;"	d
PPI_CHENSET_CH4_Msk	components\device\nrf51_bitfields.h	4195;"	d
PPI_CHENSET_CH4_Pos	components\device\nrf51_bitfields.h	4194;"	d
PPI_CHENSET_CH4_Set	components\device\nrf51_bitfields.h	4198;"	d
PPI_CHENSET_CH5_Disabled	components\device\nrf51_bitfields.h	4189;"	d
PPI_CHENSET_CH5_Enabled	components\device\nrf51_bitfields.h	4190;"	d
PPI_CHENSET_CH5_Msk	components\device\nrf51_bitfields.h	4188;"	d
PPI_CHENSET_CH5_Pos	components\device\nrf51_bitfields.h	4187;"	d
PPI_CHENSET_CH5_Set	components\device\nrf51_bitfields.h	4191;"	d
PPI_CHENSET_CH6_Disabled	components\device\nrf51_bitfields.h	4182;"	d
PPI_CHENSET_CH6_Enabled	components\device\nrf51_bitfields.h	4183;"	d
PPI_CHENSET_CH6_Msk	components\device\nrf51_bitfields.h	4181;"	d
PPI_CHENSET_CH6_Pos	components\device\nrf51_bitfields.h	4180;"	d
PPI_CHENSET_CH6_Set	components\device\nrf51_bitfields.h	4184;"	d
PPI_CHENSET_CH7_Disabled	components\device\nrf51_bitfields.h	4175;"	d
PPI_CHENSET_CH7_Enabled	components\device\nrf51_bitfields.h	4176;"	d
PPI_CHENSET_CH7_Msk	components\device\nrf51_bitfields.h	4174;"	d
PPI_CHENSET_CH7_Pos	components\device\nrf51_bitfields.h	4173;"	d
PPI_CHENSET_CH7_Set	components\device\nrf51_bitfields.h	4177;"	d
PPI_CHENSET_CH8_Disabled	components\device\nrf51_bitfields.h	4168;"	d
PPI_CHENSET_CH8_Enabled	components\device\nrf51_bitfields.h	4169;"	d
PPI_CHENSET_CH8_Msk	components\device\nrf51_bitfields.h	4167;"	d
PPI_CHENSET_CH8_Pos	components\device\nrf51_bitfields.h	4166;"	d
PPI_CHENSET_CH8_Set	components\device\nrf51_bitfields.h	4170;"	d
PPI_CHENSET_CH9_Disabled	components\device\nrf51_bitfields.h	4161;"	d
PPI_CHENSET_CH9_Enabled	components\device\nrf51_bitfields.h	4162;"	d
PPI_CHENSET_CH9_Msk	components\device\nrf51_bitfields.h	4160;"	d
PPI_CHENSET_CH9_Pos	components\device\nrf51_bitfields.h	4159;"	d
PPI_CHENSET_CH9_Set	components\device\nrf51_bitfields.h	4163;"	d
PPI_CHEN_CH0_Disabled	components\device\nrf51_bitfields.h	4026;"	d
PPI_CHEN_CH0_Enabled	components\device\nrf51_bitfields.h	4027;"	d
PPI_CHEN_CH0_Msk	components\device\nrf51_bitfields.h	4025;"	d
PPI_CHEN_CH0_Pos	components\device\nrf51_bitfields.h	4024;"	d
PPI_CHEN_CH10_Disabled	components\device\nrf51_bitfields.h	3966;"	d
PPI_CHEN_CH10_Enabled	components\device\nrf51_bitfields.h	3967;"	d
PPI_CHEN_CH10_Msk	components\device\nrf51_bitfields.h	3965;"	d
PPI_CHEN_CH10_Pos	components\device\nrf51_bitfields.h	3964;"	d
PPI_CHEN_CH11_Disabled	components\device\nrf51_bitfields.h	3960;"	d
PPI_CHEN_CH11_Enabled	components\device\nrf51_bitfields.h	3961;"	d
PPI_CHEN_CH11_Msk	components\device\nrf51_bitfields.h	3959;"	d
PPI_CHEN_CH11_Pos	components\device\nrf51_bitfields.h	3958;"	d
PPI_CHEN_CH12_Disabled	components\device\nrf51_bitfields.h	3954;"	d
PPI_CHEN_CH12_Enabled	components\device\nrf51_bitfields.h	3955;"	d
PPI_CHEN_CH12_Msk	components\device\nrf51_bitfields.h	3953;"	d
PPI_CHEN_CH12_Pos	components\device\nrf51_bitfields.h	3952;"	d
PPI_CHEN_CH13_Disabled	components\device\nrf51_bitfields.h	3948;"	d
PPI_CHEN_CH13_Enabled	components\device\nrf51_bitfields.h	3949;"	d
PPI_CHEN_CH13_Msk	components\device\nrf51_bitfields.h	3947;"	d
PPI_CHEN_CH13_Pos	components\device\nrf51_bitfields.h	3946;"	d
PPI_CHEN_CH14_Disabled	components\device\nrf51_bitfields.h	3942;"	d
PPI_CHEN_CH14_Enabled	components\device\nrf51_bitfields.h	3943;"	d
PPI_CHEN_CH14_Msk	components\device\nrf51_bitfields.h	3941;"	d
PPI_CHEN_CH14_Pos	components\device\nrf51_bitfields.h	3940;"	d
PPI_CHEN_CH15_Disabled	components\device\nrf51_bitfields.h	3936;"	d
PPI_CHEN_CH15_Enabled	components\device\nrf51_bitfields.h	3937;"	d
PPI_CHEN_CH15_Msk	components\device\nrf51_bitfields.h	3935;"	d
PPI_CHEN_CH15_Pos	components\device\nrf51_bitfields.h	3934;"	d
PPI_CHEN_CH1_Disabled	components\device\nrf51_bitfields.h	4020;"	d
PPI_CHEN_CH1_Enabled	components\device\nrf51_bitfields.h	4021;"	d
PPI_CHEN_CH1_Msk	components\device\nrf51_bitfields.h	4019;"	d
PPI_CHEN_CH1_Pos	components\device\nrf51_bitfields.h	4018;"	d
PPI_CHEN_CH20_Disabled	components\device\nrf51_bitfields.h	3930;"	d
PPI_CHEN_CH20_Enabled	components\device\nrf51_bitfields.h	3931;"	d
PPI_CHEN_CH20_Msk	components\device\nrf51_bitfields.h	3929;"	d
PPI_CHEN_CH20_Pos	components\device\nrf51_bitfields.h	3928;"	d
PPI_CHEN_CH21_Disabled	components\device\nrf51_bitfields.h	3924;"	d
PPI_CHEN_CH21_Enabled	components\device\nrf51_bitfields.h	3925;"	d
PPI_CHEN_CH21_Msk	components\device\nrf51_bitfields.h	3923;"	d
PPI_CHEN_CH21_Pos	components\device\nrf51_bitfields.h	3922;"	d
PPI_CHEN_CH22_Disabled	components\device\nrf51_bitfields.h	3918;"	d
PPI_CHEN_CH22_Enabled	components\device\nrf51_bitfields.h	3919;"	d
PPI_CHEN_CH22_Msk	components\device\nrf51_bitfields.h	3917;"	d
PPI_CHEN_CH22_Pos	components\device\nrf51_bitfields.h	3916;"	d
PPI_CHEN_CH23_Disabled	components\device\nrf51_bitfields.h	3912;"	d
PPI_CHEN_CH23_Enabled	components\device\nrf51_bitfields.h	3913;"	d
PPI_CHEN_CH23_Msk	components\device\nrf51_bitfields.h	3911;"	d
PPI_CHEN_CH23_Pos	components\device\nrf51_bitfields.h	3910;"	d
PPI_CHEN_CH24_Disabled	components\device\nrf51_bitfields.h	3906;"	d
PPI_CHEN_CH24_Enabled	components\device\nrf51_bitfields.h	3907;"	d
PPI_CHEN_CH24_Msk	components\device\nrf51_bitfields.h	3905;"	d
PPI_CHEN_CH24_Pos	components\device\nrf51_bitfields.h	3904;"	d
PPI_CHEN_CH25_Disabled	components\device\nrf51_bitfields.h	3900;"	d
PPI_CHEN_CH25_Enabled	components\device\nrf51_bitfields.h	3901;"	d
PPI_CHEN_CH25_Msk	components\device\nrf51_bitfields.h	3899;"	d
PPI_CHEN_CH25_Pos	components\device\nrf51_bitfields.h	3898;"	d
PPI_CHEN_CH26_Disabled	components\device\nrf51_bitfields.h	3894;"	d
PPI_CHEN_CH26_Enabled	components\device\nrf51_bitfields.h	3895;"	d
PPI_CHEN_CH26_Msk	components\device\nrf51_bitfields.h	3893;"	d
PPI_CHEN_CH26_Pos	components\device\nrf51_bitfields.h	3892;"	d
PPI_CHEN_CH27_Disabled	components\device\nrf51_bitfields.h	3888;"	d
PPI_CHEN_CH27_Enabled	components\device\nrf51_bitfields.h	3889;"	d
PPI_CHEN_CH27_Msk	components\device\nrf51_bitfields.h	3887;"	d
PPI_CHEN_CH27_Pos	components\device\nrf51_bitfields.h	3886;"	d
PPI_CHEN_CH28_Disabled	components\device\nrf51_bitfields.h	3882;"	d
PPI_CHEN_CH28_Enabled	components\device\nrf51_bitfields.h	3883;"	d
PPI_CHEN_CH28_Msk	components\device\nrf51_bitfields.h	3881;"	d
PPI_CHEN_CH28_Pos	components\device\nrf51_bitfields.h	3880;"	d
PPI_CHEN_CH29_Disabled	components\device\nrf51_bitfields.h	3876;"	d
PPI_CHEN_CH29_Enabled	components\device\nrf51_bitfields.h	3877;"	d
PPI_CHEN_CH29_Msk	components\device\nrf51_bitfields.h	3875;"	d
PPI_CHEN_CH29_Pos	components\device\nrf51_bitfields.h	3874;"	d
PPI_CHEN_CH2_Disabled	components\device\nrf51_bitfields.h	4014;"	d
PPI_CHEN_CH2_Enabled	components\device\nrf51_bitfields.h	4015;"	d
PPI_CHEN_CH2_Msk	components\device\nrf51_bitfields.h	4013;"	d
PPI_CHEN_CH2_Pos	components\device\nrf51_bitfields.h	4012;"	d
PPI_CHEN_CH30_Disabled	components\device\nrf51_bitfields.h	3870;"	d
PPI_CHEN_CH30_Enabled	components\device\nrf51_bitfields.h	3871;"	d
PPI_CHEN_CH30_Msk	components\device\nrf51_bitfields.h	3869;"	d
PPI_CHEN_CH30_Pos	components\device\nrf51_bitfields.h	3868;"	d
PPI_CHEN_CH31_Disabled	components\device\nrf51_bitfields.h	3864;"	d
PPI_CHEN_CH31_Enabled	components\device\nrf51_bitfields.h	3865;"	d
PPI_CHEN_CH31_Msk	components\device\nrf51_bitfields.h	3863;"	d
PPI_CHEN_CH31_Pos	components\device\nrf51_bitfields.h	3862;"	d
PPI_CHEN_CH3_Disabled	components\device\nrf51_bitfields.h	4008;"	d
PPI_CHEN_CH3_Enabled	components\device\nrf51_bitfields.h	4009;"	d
PPI_CHEN_CH3_Msk	components\device\nrf51_bitfields.h	4007;"	d
PPI_CHEN_CH3_Pos	components\device\nrf51_bitfields.h	4006;"	d
PPI_CHEN_CH4_Disabled	components\device\nrf51_bitfields.h	4002;"	d
PPI_CHEN_CH4_Enabled	components\device\nrf51_bitfields.h	4003;"	d
PPI_CHEN_CH4_Msk	components\device\nrf51_bitfields.h	4001;"	d
PPI_CHEN_CH4_Pos	components\device\nrf51_bitfields.h	4000;"	d
PPI_CHEN_CH5_Disabled	components\device\nrf51_bitfields.h	3996;"	d
PPI_CHEN_CH5_Enabled	components\device\nrf51_bitfields.h	3997;"	d
PPI_CHEN_CH5_Msk	components\device\nrf51_bitfields.h	3995;"	d
PPI_CHEN_CH5_Pos	components\device\nrf51_bitfields.h	3994;"	d
PPI_CHEN_CH6_Disabled	components\device\nrf51_bitfields.h	3990;"	d
PPI_CHEN_CH6_Enabled	components\device\nrf51_bitfields.h	3991;"	d
PPI_CHEN_CH6_Msk	components\device\nrf51_bitfields.h	3989;"	d
PPI_CHEN_CH6_Pos	components\device\nrf51_bitfields.h	3988;"	d
PPI_CHEN_CH7_Disabled	components\device\nrf51_bitfields.h	3984;"	d
PPI_CHEN_CH7_Enabled	components\device\nrf51_bitfields.h	3985;"	d
PPI_CHEN_CH7_Msk	components\device\nrf51_bitfields.h	3983;"	d
PPI_CHEN_CH7_Pos	components\device\nrf51_bitfields.h	3982;"	d
PPI_CHEN_CH8_Disabled	components\device\nrf51_bitfields.h	3978;"	d
PPI_CHEN_CH8_Enabled	components\device\nrf51_bitfields.h	3979;"	d
PPI_CHEN_CH8_Msk	components\device\nrf51_bitfields.h	3977;"	d
PPI_CHEN_CH8_Pos	components\device\nrf51_bitfields.h	3976;"	d
PPI_CHEN_CH9_Disabled	components\device\nrf51_bitfields.h	3972;"	d
PPI_CHEN_CH9_Enabled	components\device\nrf51_bitfields.h	3973;"	d
PPI_CHEN_CH9_Msk	components\device\nrf51_bitfields.h	3971;"	d
PPI_CHEN_CH9_Pos	components\device\nrf51_bitfields.h	3970;"	d
PPI_CHG_CH0_Excluded	components\device\nrf51_bitfields.h	4595;"	d
PPI_CHG_CH0_Included	components\device\nrf51_bitfields.h	4596;"	d
PPI_CHG_CH0_Msk	components\device\nrf51_bitfields.h	4594;"	d
PPI_CHG_CH0_Pos	components\device\nrf51_bitfields.h	4593;"	d
PPI_CHG_CH10_Excluded	components\device\nrf51_bitfields.h	4535;"	d
PPI_CHG_CH10_Included	components\device\nrf51_bitfields.h	4536;"	d
PPI_CHG_CH10_Msk	components\device\nrf51_bitfields.h	4534;"	d
PPI_CHG_CH10_Pos	components\device\nrf51_bitfields.h	4533;"	d
PPI_CHG_CH11_Excluded	components\device\nrf51_bitfields.h	4529;"	d
PPI_CHG_CH11_Included	components\device\nrf51_bitfields.h	4530;"	d
PPI_CHG_CH11_Msk	components\device\nrf51_bitfields.h	4528;"	d
PPI_CHG_CH11_Pos	components\device\nrf51_bitfields.h	4527;"	d
PPI_CHG_CH12_Excluded	components\device\nrf51_bitfields.h	4523;"	d
PPI_CHG_CH12_Included	components\device\nrf51_bitfields.h	4524;"	d
PPI_CHG_CH12_Msk	components\device\nrf51_bitfields.h	4522;"	d
PPI_CHG_CH12_Pos	components\device\nrf51_bitfields.h	4521;"	d
PPI_CHG_CH13_Excluded	components\device\nrf51_bitfields.h	4517;"	d
PPI_CHG_CH13_Included	components\device\nrf51_bitfields.h	4518;"	d
PPI_CHG_CH13_Msk	components\device\nrf51_bitfields.h	4516;"	d
PPI_CHG_CH13_Pos	components\device\nrf51_bitfields.h	4515;"	d
PPI_CHG_CH14_Excluded	components\device\nrf51_bitfields.h	4511;"	d
PPI_CHG_CH14_Included	components\device\nrf51_bitfields.h	4512;"	d
PPI_CHG_CH14_Msk	components\device\nrf51_bitfields.h	4510;"	d
PPI_CHG_CH14_Pos	components\device\nrf51_bitfields.h	4509;"	d
PPI_CHG_CH15_Excluded	components\device\nrf51_bitfields.h	4505;"	d
PPI_CHG_CH15_Included	components\device\nrf51_bitfields.h	4506;"	d
PPI_CHG_CH15_Msk	components\device\nrf51_bitfields.h	4504;"	d
PPI_CHG_CH15_Pos	components\device\nrf51_bitfields.h	4503;"	d
PPI_CHG_CH1_Excluded	components\device\nrf51_bitfields.h	4589;"	d
PPI_CHG_CH1_Included	components\device\nrf51_bitfields.h	4590;"	d
PPI_CHG_CH1_Msk	components\device\nrf51_bitfields.h	4588;"	d
PPI_CHG_CH1_Pos	components\device\nrf51_bitfields.h	4587;"	d
PPI_CHG_CH20_Excluded	components\device\nrf51_bitfields.h	4499;"	d
PPI_CHG_CH20_Included	components\device\nrf51_bitfields.h	4500;"	d
PPI_CHG_CH20_Msk	components\device\nrf51_bitfields.h	4498;"	d
PPI_CHG_CH20_Pos	components\device\nrf51_bitfields.h	4497;"	d
PPI_CHG_CH21_Excluded	components\device\nrf51_bitfields.h	4493;"	d
PPI_CHG_CH21_Included	components\device\nrf51_bitfields.h	4494;"	d
PPI_CHG_CH21_Msk	components\device\nrf51_bitfields.h	4492;"	d
PPI_CHG_CH21_Pos	components\device\nrf51_bitfields.h	4491;"	d
PPI_CHG_CH22_Excluded	components\device\nrf51_bitfields.h	4487;"	d
PPI_CHG_CH22_Included	components\device\nrf51_bitfields.h	4488;"	d
PPI_CHG_CH22_Msk	components\device\nrf51_bitfields.h	4486;"	d
PPI_CHG_CH22_Pos	components\device\nrf51_bitfields.h	4485;"	d
PPI_CHG_CH23_Excluded	components\device\nrf51_bitfields.h	4481;"	d
PPI_CHG_CH23_Included	components\device\nrf51_bitfields.h	4482;"	d
PPI_CHG_CH23_Msk	components\device\nrf51_bitfields.h	4480;"	d
PPI_CHG_CH23_Pos	components\device\nrf51_bitfields.h	4479;"	d
PPI_CHG_CH24_Excluded	components\device\nrf51_bitfields.h	4475;"	d
PPI_CHG_CH24_Included	components\device\nrf51_bitfields.h	4476;"	d
PPI_CHG_CH24_Msk	components\device\nrf51_bitfields.h	4474;"	d
PPI_CHG_CH24_Pos	components\device\nrf51_bitfields.h	4473;"	d
PPI_CHG_CH25_Excluded	components\device\nrf51_bitfields.h	4469;"	d
PPI_CHG_CH25_Included	components\device\nrf51_bitfields.h	4470;"	d
PPI_CHG_CH25_Msk	components\device\nrf51_bitfields.h	4468;"	d
PPI_CHG_CH25_Pos	components\device\nrf51_bitfields.h	4467;"	d
PPI_CHG_CH26_Excluded	components\device\nrf51_bitfields.h	4463;"	d
PPI_CHG_CH26_Included	components\device\nrf51_bitfields.h	4464;"	d
PPI_CHG_CH26_Msk	components\device\nrf51_bitfields.h	4462;"	d
PPI_CHG_CH26_Pos	components\device\nrf51_bitfields.h	4461;"	d
PPI_CHG_CH27_Excluded	components\device\nrf51_bitfields.h	4457;"	d
PPI_CHG_CH27_Included	components\device\nrf51_bitfields.h	4458;"	d
PPI_CHG_CH27_Msk	components\device\nrf51_bitfields.h	4456;"	d
PPI_CHG_CH27_Pos	components\device\nrf51_bitfields.h	4455;"	d
PPI_CHG_CH28_Excluded	components\device\nrf51_bitfields.h	4451;"	d
PPI_CHG_CH28_Included	components\device\nrf51_bitfields.h	4452;"	d
PPI_CHG_CH28_Msk	components\device\nrf51_bitfields.h	4450;"	d
PPI_CHG_CH28_Pos	components\device\nrf51_bitfields.h	4449;"	d
PPI_CHG_CH29_Excluded	components\device\nrf51_bitfields.h	4445;"	d
PPI_CHG_CH29_Included	components\device\nrf51_bitfields.h	4446;"	d
PPI_CHG_CH29_Msk	components\device\nrf51_bitfields.h	4444;"	d
PPI_CHG_CH29_Pos	components\device\nrf51_bitfields.h	4443;"	d
PPI_CHG_CH2_Excluded	components\device\nrf51_bitfields.h	4583;"	d
PPI_CHG_CH2_Included	components\device\nrf51_bitfields.h	4584;"	d
PPI_CHG_CH2_Msk	components\device\nrf51_bitfields.h	4582;"	d
PPI_CHG_CH2_Pos	components\device\nrf51_bitfields.h	4581;"	d
PPI_CHG_CH30_Excluded	components\device\nrf51_bitfields.h	4439;"	d
PPI_CHG_CH30_Included	components\device\nrf51_bitfields.h	4440;"	d
PPI_CHG_CH30_Msk	components\device\nrf51_bitfields.h	4438;"	d
PPI_CHG_CH30_Pos	components\device\nrf51_bitfields.h	4437;"	d
PPI_CHG_CH31_Excluded	components\device\nrf51_bitfields.h	4433;"	d
PPI_CHG_CH31_Included	components\device\nrf51_bitfields.h	4434;"	d
PPI_CHG_CH31_Msk	components\device\nrf51_bitfields.h	4432;"	d
PPI_CHG_CH31_Pos	components\device\nrf51_bitfields.h	4431;"	d
PPI_CHG_CH3_Excluded	components\device\nrf51_bitfields.h	4577;"	d
PPI_CHG_CH3_Included	components\device\nrf51_bitfields.h	4578;"	d
PPI_CHG_CH3_Msk	components\device\nrf51_bitfields.h	4576;"	d
PPI_CHG_CH3_Pos	components\device\nrf51_bitfields.h	4575;"	d
PPI_CHG_CH4_Excluded	components\device\nrf51_bitfields.h	4571;"	d
PPI_CHG_CH4_Included	components\device\nrf51_bitfields.h	4572;"	d
PPI_CHG_CH4_Msk	components\device\nrf51_bitfields.h	4570;"	d
PPI_CHG_CH4_Pos	components\device\nrf51_bitfields.h	4569;"	d
PPI_CHG_CH5_Excluded	components\device\nrf51_bitfields.h	4565;"	d
PPI_CHG_CH5_Included	components\device\nrf51_bitfields.h	4566;"	d
PPI_CHG_CH5_Msk	components\device\nrf51_bitfields.h	4564;"	d
PPI_CHG_CH5_Pos	components\device\nrf51_bitfields.h	4563;"	d
PPI_CHG_CH6_Excluded	components\device\nrf51_bitfields.h	4559;"	d
PPI_CHG_CH6_Included	components\device\nrf51_bitfields.h	4560;"	d
PPI_CHG_CH6_Msk	components\device\nrf51_bitfields.h	4558;"	d
PPI_CHG_CH6_Pos	components\device\nrf51_bitfields.h	4557;"	d
PPI_CHG_CH7_Excluded	components\device\nrf51_bitfields.h	4553;"	d
PPI_CHG_CH7_Included	components\device\nrf51_bitfields.h	4554;"	d
PPI_CHG_CH7_Msk	components\device\nrf51_bitfields.h	4552;"	d
PPI_CHG_CH7_Pos	components\device\nrf51_bitfields.h	4551;"	d
PPI_CHG_CH8_Excluded	components\device\nrf51_bitfields.h	4547;"	d
PPI_CHG_CH8_Included	components\device\nrf51_bitfields.h	4548;"	d
PPI_CHG_CH8_Msk	components\device\nrf51_bitfields.h	4546;"	d
PPI_CHG_CH8_Pos	components\device\nrf51_bitfields.h	4545;"	d
PPI_CHG_CH9_Excluded	components\device\nrf51_bitfields.h	4541;"	d
PPI_CHG_CH9_Included	components\device\nrf51_bitfields.h	4542;"	d
PPI_CHG_CH9_Msk	components\device\nrf51_bitfields.h	4540;"	d
PPI_CHG_CH9_Pos	components\device\nrf51_bitfields.h	4539;"	d
PU_PATCHADDR_PATCHADDR_Msk	components\device\nrf51_bitfields.h	4607;"	d
PU_PATCHADDR_PATCHADDR_Pos	components\device\nrf51_bitfields.h	4606;"	d
PU_PATCHENCLR_PATCH0_Clear	components\device\nrf51_bitfields.h	4776;"	d
PU_PATCHENCLR_PATCH0_Disabled	components\device\nrf51_bitfields.h	4774;"	d
PU_PATCHENCLR_PATCH0_Enabled	components\device\nrf51_bitfields.h	4775;"	d
PU_PATCHENCLR_PATCH0_Msk	components\device\nrf51_bitfields.h	4773;"	d
PU_PATCHENCLR_PATCH0_Pos	components\device\nrf51_bitfields.h	4772;"	d
PU_PATCHENCLR_PATCH1_Clear	components\device\nrf51_bitfields.h	4769;"	d
PU_PATCHENCLR_PATCH1_Disabled	components\device\nrf51_bitfields.h	4767;"	d
PU_PATCHENCLR_PATCH1_Enabled	components\device\nrf51_bitfields.h	4768;"	d
PU_PATCHENCLR_PATCH1_Msk	components\device\nrf51_bitfields.h	4766;"	d
PU_PATCHENCLR_PATCH1_Pos	components\device\nrf51_bitfields.h	4765;"	d
PU_PATCHENCLR_PATCH2_Clear	components\device\nrf51_bitfields.h	4762;"	d
PU_PATCHENCLR_PATCH2_Disabled	components\device\nrf51_bitfields.h	4760;"	d
PU_PATCHENCLR_PATCH2_Enabled	components\device\nrf51_bitfields.h	4761;"	d
PU_PATCHENCLR_PATCH2_Msk	components\device\nrf51_bitfields.h	4759;"	d
PU_PATCHENCLR_PATCH2_Pos	components\device\nrf51_bitfields.h	4758;"	d
PU_PATCHENCLR_PATCH3_Clear	components\device\nrf51_bitfields.h	4755;"	d
PU_PATCHENCLR_PATCH3_Disabled	components\device\nrf51_bitfields.h	4753;"	d
PU_PATCHENCLR_PATCH3_Enabled	components\device\nrf51_bitfields.h	4754;"	d
PU_PATCHENCLR_PATCH3_Msk	components\device\nrf51_bitfields.h	4752;"	d
PU_PATCHENCLR_PATCH3_Pos	components\device\nrf51_bitfields.h	4751;"	d
PU_PATCHENCLR_PATCH4_Clear	components\device\nrf51_bitfields.h	4748;"	d
PU_PATCHENCLR_PATCH4_Disabled	components\device\nrf51_bitfields.h	4746;"	d
PU_PATCHENCLR_PATCH4_Enabled	components\device\nrf51_bitfields.h	4747;"	d
PU_PATCHENCLR_PATCH4_Msk	components\device\nrf51_bitfields.h	4745;"	d
PU_PATCHENCLR_PATCH4_Pos	components\device\nrf51_bitfields.h	4744;"	d
PU_PATCHENCLR_PATCH5_Clear	components\device\nrf51_bitfields.h	4741;"	d
PU_PATCHENCLR_PATCH5_Disabled	components\device\nrf51_bitfields.h	4739;"	d
PU_PATCHENCLR_PATCH5_Enabled	components\device\nrf51_bitfields.h	4740;"	d
PU_PATCHENCLR_PATCH5_Msk	components\device\nrf51_bitfields.h	4738;"	d
PU_PATCHENCLR_PATCH5_Pos	components\device\nrf51_bitfields.h	4737;"	d
PU_PATCHENCLR_PATCH6_Clear	components\device\nrf51_bitfields.h	4734;"	d
PU_PATCHENCLR_PATCH6_Disabled	components\device\nrf51_bitfields.h	4732;"	d
PU_PATCHENCLR_PATCH6_Enabled	components\device\nrf51_bitfields.h	4733;"	d
PU_PATCHENCLR_PATCH6_Msk	components\device\nrf51_bitfields.h	4731;"	d
PU_PATCHENCLR_PATCH6_Pos	components\device\nrf51_bitfields.h	4730;"	d
PU_PATCHENCLR_PATCH7_Clear	components\device\nrf51_bitfields.h	4727;"	d
PU_PATCHENCLR_PATCH7_Disabled	components\device\nrf51_bitfields.h	4725;"	d
PU_PATCHENCLR_PATCH7_Enabled	components\device\nrf51_bitfields.h	4726;"	d
PU_PATCHENCLR_PATCH7_Msk	components\device\nrf51_bitfields.h	4724;"	d
PU_PATCHENCLR_PATCH7_Pos	components\device\nrf51_bitfields.h	4723;"	d
PU_PATCHENSET_PATCH0_Disabled	components\device\nrf51_bitfields.h	4715;"	d
PU_PATCHENSET_PATCH0_Enabled	components\device\nrf51_bitfields.h	4716;"	d
PU_PATCHENSET_PATCH0_Msk	components\device\nrf51_bitfields.h	4714;"	d
PU_PATCHENSET_PATCH0_Pos	components\device\nrf51_bitfields.h	4713;"	d
PU_PATCHENSET_PATCH0_Set	components\device\nrf51_bitfields.h	4717;"	d
PU_PATCHENSET_PATCH1_Disabled	components\device\nrf51_bitfields.h	4708;"	d
PU_PATCHENSET_PATCH1_Enabled	components\device\nrf51_bitfields.h	4709;"	d
PU_PATCHENSET_PATCH1_Msk	components\device\nrf51_bitfields.h	4707;"	d
PU_PATCHENSET_PATCH1_Pos	components\device\nrf51_bitfields.h	4706;"	d
PU_PATCHENSET_PATCH1_Set	components\device\nrf51_bitfields.h	4710;"	d
PU_PATCHENSET_PATCH2_Disabled	components\device\nrf51_bitfields.h	4701;"	d
PU_PATCHENSET_PATCH2_Enabled	components\device\nrf51_bitfields.h	4702;"	d
PU_PATCHENSET_PATCH2_Msk	components\device\nrf51_bitfields.h	4700;"	d
PU_PATCHENSET_PATCH2_Pos	components\device\nrf51_bitfields.h	4699;"	d
PU_PATCHENSET_PATCH2_Set	components\device\nrf51_bitfields.h	4703;"	d
PU_PATCHENSET_PATCH3_Disabled	components\device\nrf51_bitfields.h	4694;"	d
PU_PATCHENSET_PATCH3_Enabled	components\device\nrf51_bitfields.h	4695;"	d
PU_PATCHENSET_PATCH3_Msk	components\device\nrf51_bitfields.h	4693;"	d
PU_PATCHENSET_PATCH3_Pos	components\device\nrf51_bitfields.h	4692;"	d
PU_PATCHENSET_PATCH3_Set	components\device\nrf51_bitfields.h	4696;"	d
PU_PATCHENSET_PATCH4_Disabled	components\device\nrf51_bitfields.h	4687;"	d
PU_PATCHENSET_PATCH4_Enabled	components\device\nrf51_bitfields.h	4688;"	d
PU_PATCHENSET_PATCH4_Msk	components\device\nrf51_bitfields.h	4686;"	d
PU_PATCHENSET_PATCH4_Pos	components\device\nrf51_bitfields.h	4685;"	d
PU_PATCHENSET_PATCH4_Set	components\device\nrf51_bitfields.h	4689;"	d
PU_PATCHENSET_PATCH5_Disabled	components\device\nrf51_bitfields.h	4680;"	d
PU_PATCHENSET_PATCH5_Enabled	components\device\nrf51_bitfields.h	4681;"	d
PU_PATCHENSET_PATCH5_Msk	components\device\nrf51_bitfields.h	4679;"	d
PU_PATCHENSET_PATCH5_Pos	components\device\nrf51_bitfields.h	4678;"	d
PU_PATCHENSET_PATCH5_Set	components\device\nrf51_bitfields.h	4682;"	d
PU_PATCHENSET_PATCH6_Disabled	components\device\nrf51_bitfields.h	4673;"	d
PU_PATCHENSET_PATCH6_Enabled	components\device\nrf51_bitfields.h	4674;"	d
PU_PATCHENSET_PATCH6_Msk	components\device\nrf51_bitfields.h	4672;"	d
PU_PATCHENSET_PATCH6_Pos	components\device\nrf51_bitfields.h	4671;"	d
PU_PATCHENSET_PATCH6_Set	components\device\nrf51_bitfields.h	4675;"	d
PU_PATCHENSET_PATCH7_Disabled	components\device\nrf51_bitfields.h	4666;"	d
PU_PATCHENSET_PATCH7_Enabled	components\device\nrf51_bitfields.h	4667;"	d
PU_PATCHENSET_PATCH7_Msk	components\device\nrf51_bitfields.h	4665;"	d
PU_PATCHENSET_PATCH7_Pos	components\device\nrf51_bitfields.h	4664;"	d
PU_PATCHENSET_PATCH7_Set	components\device\nrf51_bitfields.h	4668;"	d
PU_PATCHEN_PATCH0_Disabled	components\device\nrf51_bitfields.h	4657;"	d
PU_PATCHEN_PATCH0_Enabled	components\device\nrf51_bitfields.h	4658;"	d
PU_PATCHEN_PATCH0_Msk	components\device\nrf51_bitfields.h	4656;"	d
PU_PATCHEN_PATCH0_Pos	components\device\nrf51_bitfields.h	4655;"	d
PU_PATCHEN_PATCH1_Disabled	components\device\nrf51_bitfields.h	4651;"	d
PU_PATCHEN_PATCH1_Enabled	components\device\nrf51_bitfields.h	4652;"	d
PU_PATCHEN_PATCH1_Msk	components\device\nrf51_bitfields.h	4650;"	d
PU_PATCHEN_PATCH1_Pos	components\device\nrf51_bitfields.h	4649;"	d
PU_PATCHEN_PATCH2_Disabled	components\device\nrf51_bitfields.h	4645;"	d
PU_PATCHEN_PATCH2_Enabled	components\device\nrf51_bitfields.h	4646;"	d
PU_PATCHEN_PATCH2_Msk	components\device\nrf51_bitfields.h	4644;"	d
PU_PATCHEN_PATCH2_Pos	components\device\nrf51_bitfields.h	4643;"	d
PU_PATCHEN_PATCH3_Disabled	components\device\nrf51_bitfields.h	4639;"	d
PU_PATCHEN_PATCH3_Enabled	components\device\nrf51_bitfields.h	4640;"	d
PU_PATCHEN_PATCH3_Msk	components\device\nrf51_bitfields.h	4638;"	d
PU_PATCHEN_PATCH3_Pos	components\device\nrf51_bitfields.h	4637;"	d
PU_PATCHEN_PATCH4_Disabled	components\device\nrf51_bitfields.h	4633;"	d
PU_PATCHEN_PATCH4_Enabled	components\device\nrf51_bitfields.h	4634;"	d
PU_PATCHEN_PATCH4_Msk	components\device\nrf51_bitfields.h	4632;"	d
PU_PATCHEN_PATCH4_Pos	components\device\nrf51_bitfields.h	4631;"	d
PU_PATCHEN_PATCH5_Disabled	components\device\nrf51_bitfields.h	4627;"	d
PU_PATCHEN_PATCH5_Enabled	components\device\nrf51_bitfields.h	4628;"	d
PU_PATCHEN_PATCH5_Msk	components\device\nrf51_bitfields.h	4626;"	d
PU_PATCHEN_PATCH5_Pos	components\device\nrf51_bitfields.h	4625;"	d
PU_PATCHEN_PATCH6_Disabled	components\device\nrf51_bitfields.h	4621;"	d
PU_PATCHEN_PATCH6_Enabled	components\device\nrf51_bitfields.h	4622;"	d
PU_PATCHEN_PATCH6_Msk	components\device\nrf51_bitfields.h	4620;"	d
PU_PATCHEN_PATCH6_Pos	components\device\nrf51_bitfields.h	4619;"	d
PU_PATCHEN_PATCH7_Disabled	components\device\nrf51_bitfields.h	4615;"	d
PU_PATCHEN_PATCH7_Enabled	components\device\nrf51_bitfields.h	4616;"	d
PU_PATCHEN_PATCH7_Msk	components\device\nrf51_bitfields.h	4614;"	d
PU_PATCHEN_PATCH7_Pos	components\device\nrf51_bitfields.h	4613;"	d
QDEC_ACCDBLREAD_ACCDBLREAD_Msk	components\device\nrf51_bitfields.h	4928;"	d
QDEC_ACCDBLREAD_ACCDBLREAD_Pos	components\device\nrf51_bitfields.h	4927;"	d
QDEC_ACCDBL_ACCDBL_Msk	components\device\nrf51_bitfields.h	4921;"	d
QDEC_ACCDBL_ACCDBL_Pos	components\device\nrf51_bitfields.h	4920;"	d
QDEC_DBFEN_DBFEN_Disabled	components\device\nrf51_bitfields.h	4906;"	d
QDEC_DBFEN_DBFEN_Enabled	components\device\nrf51_bitfields.h	4907;"	d
QDEC_DBFEN_DBFEN_Msk	components\device\nrf51_bitfields.h	4905;"	d
QDEC_DBFEN_DBFEN_Pos	components\device\nrf51_bitfields.h	4904;"	d
QDEC_ENABLE_ENABLE_Disabled	components\device\nrf51_bitfields.h	4851;"	d
QDEC_ENABLE_ENABLE_Enabled	components\device\nrf51_bitfields.h	4852;"	d
QDEC_ENABLE_ENABLE_Msk	components\device\nrf51_bitfields.h	4850;"	d
QDEC_ENABLE_ENABLE_Pos	components\device\nrf51_bitfields.h	4849;"	d
QDEC_INTENCLR_ACCOF_Clear	components\device\nrf51_bitfields.h	4829;"	d
QDEC_INTENCLR_ACCOF_Disabled	components\device\nrf51_bitfields.h	4827;"	d
QDEC_INTENCLR_ACCOF_Enabled	components\device\nrf51_bitfields.h	4828;"	d
QDEC_INTENCLR_ACCOF_Msk	components\device\nrf51_bitfields.h	4826;"	d
QDEC_INTENCLR_ACCOF_Pos	components\device\nrf51_bitfields.h	4825;"	d
QDEC_INTENCLR_REPORTRDY_Clear	components\device\nrf51_bitfields.h	4836;"	d
QDEC_INTENCLR_REPORTRDY_Disabled	components\device\nrf51_bitfields.h	4834;"	d
QDEC_INTENCLR_REPORTRDY_Enabled	components\device\nrf51_bitfields.h	4835;"	d
QDEC_INTENCLR_REPORTRDY_Msk	components\device\nrf51_bitfields.h	4833;"	d
QDEC_INTENCLR_REPORTRDY_Pos	components\device\nrf51_bitfields.h	4832;"	d
QDEC_INTENCLR_SAMPLERDY_Clear	components\device\nrf51_bitfields.h	4843;"	d
QDEC_INTENCLR_SAMPLERDY_Disabled	components\device\nrf51_bitfields.h	4841;"	d
QDEC_INTENCLR_SAMPLERDY_Enabled	components\device\nrf51_bitfields.h	4842;"	d
QDEC_INTENCLR_SAMPLERDY_Msk	components\device\nrf51_bitfields.h	4840;"	d
QDEC_INTENCLR_SAMPLERDY_Pos	components\device\nrf51_bitfields.h	4839;"	d
QDEC_INTENSET_ACCOF_Disabled	components\device\nrf51_bitfields.h	4803;"	d
QDEC_INTENSET_ACCOF_Enabled	components\device\nrf51_bitfields.h	4804;"	d
QDEC_INTENSET_ACCOF_Msk	components\device\nrf51_bitfields.h	4802;"	d
QDEC_INTENSET_ACCOF_Pos	components\device\nrf51_bitfields.h	4801;"	d
QDEC_INTENSET_ACCOF_Set	components\device\nrf51_bitfields.h	4805;"	d
QDEC_INTENSET_REPORTRDY_Disabled	components\device\nrf51_bitfields.h	4810;"	d
QDEC_INTENSET_REPORTRDY_Enabled	components\device\nrf51_bitfields.h	4811;"	d
QDEC_INTENSET_REPORTRDY_Msk	components\device\nrf51_bitfields.h	4809;"	d
QDEC_INTENSET_REPORTRDY_Pos	components\device\nrf51_bitfields.h	4808;"	d
QDEC_INTENSET_REPORTRDY_Set	components\device\nrf51_bitfields.h	4812;"	d
QDEC_INTENSET_SAMPLERDY_Disabled	components\device\nrf51_bitfields.h	4817;"	d
QDEC_INTENSET_SAMPLERDY_Enabled	components\device\nrf51_bitfields.h	4818;"	d
QDEC_INTENSET_SAMPLERDY_Msk	components\device\nrf51_bitfields.h	4816;"	d
QDEC_INTENSET_SAMPLERDY_Pos	components\device\nrf51_bitfields.h	4815;"	d
QDEC_INTENSET_SAMPLERDY_Set	components\device\nrf51_bitfields.h	4819;"	d
QDEC_LEDPOL_LEDPOL_ActiveHigh	components\device\nrf51_bitfields.h	4861;"	d
QDEC_LEDPOL_LEDPOL_ActiveLow	components\device\nrf51_bitfields.h	4860;"	d
QDEC_LEDPOL_LEDPOL_Msk	components\device\nrf51_bitfields.h	4859;"	d
QDEC_LEDPOL_LEDPOL_Pos	components\device\nrf51_bitfields.h	4858;"	d
QDEC_LEDPRE_LEDPRE_Msk	components\device\nrf51_bitfields.h	4914;"	d
QDEC_LEDPRE_LEDPRE_Pos	components\device\nrf51_bitfields.h	4913;"	d
QDEC_POWER_POWER_Disabled	components\device\nrf51_bitfields.h	4936;"	d
QDEC_POWER_POWER_Enabled	components\device\nrf51_bitfields.h	4937;"	d
QDEC_POWER_POWER_Msk	components\device\nrf51_bitfields.h	4935;"	d
QDEC_POWER_POWER_Pos	components\device\nrf51_bitfields.h	4934;"	d
QDEC_REPORTPER_REPORTPER_10Smpl	components\device\nrf51_bitfields.h	4891;"	d
QDEC_REPORTPER_REPORTPER_120Smpl	components\device\nrf51_bitfields.h	4894;"	d
QDEC_REPORTPER_REPORTPER_160Smpl	components\device\nrf51_bitfields.h	4895;"	d
QDEC_REPORTPER_REPORTPER_200Smpl	components\device\nrf51_bitfields.h	4896;"	d
QDEC_REPORTPER_REPORTPER_240Smpl	components\device\nrf51_bitfields.h	4897;"	d
QDEC_REPORTPER_REPORTPER_280Smpl	components\device\nrf51_bitfields.h	4898;"	d
QDEC_REPORTPER_REPORTPER_40Smpl	components\device\nrf51_bitfields.h	4892;"	d
QDEC_REPORTPER_REPORTPER_80Smpl	components\device\nrf51_bitfields.h	4893;"	d
QDEC_REPORTPER_REPORTPER_Msk	components\device\nrf51_bitfields.h	4890;"	d
QDEC_REPORTPER_REPORTPER_Pos	components\device\nrf51_bitfields.h	4889;"	d
QDEC_SAMPLEPER_SAMPLEPER_1024us	components\device\nrf51_bitfields.h	4872;"	d
QDEC_SAMPLEPER_SAMPLEPER_128us	components\device\nrf51_bitfields.h	4869;"	d
QDEC_SAMPLEPER_SAMPLEPER_16384us	components\device\nrf51_bitfields.h	4876;"	d
QDEC_SAMPLEPER_SAMPLEPER_2048us	components\device\nrf51_bitfields.h	4873;"	d
QDEC_SAMPLEPER_SAMPLEPER_256us	components\device\nrf51_bitfields.h	4870;"	d
QDEC_SAMPLEPER_SAMPLEPER_4096us	components\device\nrf51_bitfields.h	4874;"	d
QDEC_SAMPLEPER_SAMPLEPER_512us	components\device\nrf51_bitfields.h	4871;"	d
QDEC_SAMPLEPER_SAMPLEPER_8192us	components\device\nrf51_bitfields.h	4875;"	d
QDEC_SAMPLEPER_SAMPLEPER_Msk	components\device\nrf51_bitfields.h	4868;"	d
QDEC_SAMPLEPER_SAMPLEPER_Pos	components\device\nrf51_bitfields.h	4867;"	d
QDEC_SAMPLE_SAMPLE_Msk	components\device\nrf51_bitfields.h	4883;"	d
QDEC_SAMPLE_SAMPLE_Pos	components\device\nrf51_bitfields.h	4882;"	d
QDEC_SHORTS_REPORTRDY_READCLRACC_Disabled	components\device\nrf51_bitfields.h	4794;"	d
QDEC_SHORTS_REPORTRDY_READCLRACC_Enabled	components\device\nrf51_bitfields.h	4795;"	d
QDEC_SHORTS_REPORTRDY_READCLRACC_Msk	components\device\nrf51_bitfields.h	4793;"	d
QDEC_SHORTS_REPORTRDY_READCLRACC_Pos	components\device\nrf51_bitfields.h	4792;"	d
QDEC_SHORTS_SAMPLERDY_STOP_Disabled	components\device\nrf51_bitfields.h	4788;"	d
QDEC_SHORTS_SAMPLERDY_STOP_Enabled	components\device\nrf51_bitfields.h	4789;"	d
QDEC_SHORTS_SAMPLERDY_STOP_Msk	components\device\nrf51_bitfields.h	4787;"	d
QDEC_SHORTS_SAMPLERDY_STOP_Pos	components\device\nrf51_bitfields.h	4786;"	d
RADIO_CD_CD_Msk	components\device\nrf51_bitfields.h	5140;"	d
RADIO_CD_CD_Pos	components\device\nrf51_bitfields.h	5139;"	d
RADIO_CRCCNF_LEN_Disabled	components\device\nrf51_bitfields.h	5346;"	d
RADIO_CRCCNF_LEN_Msk	components\device\nrf51_bitfields.h	5345;"	d
RADIO_CRCCNF_LEN_One	components\device\nrf51_bitfields.h	5347;"	d
RADIO_CRCCNF_LEN_Pos	components\device\nrf51_bitfields.h	5344;"	d
RADIO_CRCCNF_LEN_Three	components\device\nrf51_bitfields.h	5349;"	d
RADIO_CRCCNF_LEN_Two	components\device\nrf51_bitfields.h	5348;"	d
RADIO_CRCCNF_SKIPADDR_Include	components\device\nrf51_bitfields.h	5340;"	d
RADIO_CRCCNF_SKIPADDR_Msk	components\device\nrf51_bitfields.h	5339;"	d
RADIO_CRCCNF_SKIPADDR_Pos	components\device\nrf51_bitfields.h	5338;"	d
RADIO_CRCCNF_SKIPADDR_Skip	components\device\nrf51_bitfields.h	5341;"	d
RADIO_CRCINIT_CRCINIT_Msk	components\device\nrf51_bitfields.h	5363;"	d
RADIO_CRCINIT_CRCINIT_Pos	components\device\nrf51_bitfields.h	5362;"	d
RADIO_CRCPOLY_CRCPOLY_Msk	components\device\nrf51_bitfields.h	5356;"	d
RADIO_CRCPOLY_CRCPOLY_Pos	components\device\nrf51_bitfields.h	5355;"	d
RADIO_CRCSTATUS_CRCSTATUS_CRCError	components\device\nrf51_bitfields.h	5132;"	d
RADIO_CRCSTATUS_CRCSTATUS_CRCOk	components\device\nrf51_bitfields.h	5133;"	d
RADIO_CRCSTATUS_CRCSTATUS_Msk	components\device\nrf51_bitfields.h	5131;"	d
RADIO_CRCSTATUS_CRCSTATUS_Pos	components\device\nrf51_bitfields.h	5130;"	d
RADIO_DACNF_ENA0_Disabled	components\device\nrf51_bitfields.h	5504;"	d
RADIO_DACNF_ENA0_Enabled	components\device\nrf51_bitfields.h	5505;"	d
RADIO_DACNF_ENA0_Msk	components\device\nrf51_bitfields.h	5503;"	d
RADIO_DACNF_ENA0_Pos	components\device\nrf51_bitfields.h	5502;"	d
RADIO_DACNF_ENA1_Disabled	components\device\nrf51_bitfields.h	5498;"	d
RADIO_DACNF_ENA1_Enabled	components\device\nrf51_bitfields.h	5499;"	d
RADIO_DACNF_ENA1_Msk	components\device\nrf51_bitfields.h	5497;"	d
RADIO_DACNF_ENA1_Pos	components\device\nrf51_bitfields.h	5496;"	d
RADIO_DACNF_ENA2_Disabled	components\device\nrf51_bitfields.h	5492;"	d
RADIO_DACNF_ENA2_Enabled	components\device\nrf51_bitfields.h	5493;"	d
RADIO_DACNF_ENA2_Msk	components\device\nrf51_bitfields.h	5491;"	d
RADIO_DACNF_ENA2_Pos	components\device\nrf51_bitfields.h	5490;"	d
RADIO_DACNF_ENA3_Disabled	components\device\nrf51_bitfields.h	5486;"	d
RADIO_DACNF_ENA3_Enabled	components\device\nrf51_bitfields.h	5487;"	d
RADIO_DACNF_ENA3_Msk	components\device\nrf51_bitfields.h	5485;"	d
RADIO_DACNF_ENA3_Pos	components\device\nrf51_bitfields.h	5484;"	d
RADIO_DACNF_ENA4_Disabled	components\device\nrf51_bitfields.h	5480;"	d
RADIO_DACNF_ENA4_Enabled	components\device\nrf51_bitfields.h	5481;"	d
RADIO_DACNF_ENA4_Msk	components\device\nrf51_bitfields.h	5479;"	d
RADIO_DACNF_ENA4_Pos	components\device\nrf51_bitfields.h	5478;"	d
RADIO_DACNF_ENA5_Disabled	components\device\nrf51_bitfields.h	5474;"	d
RADIO_DACNF_ENA5_Enabled	components\device\nrf51_bitfields.h	5475;"	d
RADIO_DACNF_ENA5_Msk	components\device\nrf51_bitfields.h	5473;"	d
RADIO_DACNF_ENA5_Pos	components\device\nrf51_bitfields.h	5472;"	d
RADIO_DACNF_ENA6_Disabled	components\device\nrf51_bitfields.h	5468;"	d
RADIO_DACNF_ENA6_Enabled	components\device\nrf51_bitfields.h	5469;"	d
RADIO_DACNF_ENA6_Msk	components\device\nrf51_bitfields.h	5467;"	d
RADIO_DACNF_ENA6_Pos	components\device\nrf51_bitfields.h	5466;"	d
RADIO_DACNF_ENA7_Disabled	components\device\nrf51_bitfields.h	5462;"	d
RADIO_DACNF_ENA7_Enabled	components\device\nrf51_bitfields.h	5463;"	d
RADIO_DACNF_ENA7_Msk	components\device\nrf51_bitfields.h	5461;"	d
RADIO_DACNF_ENA7_Pos	components\device\nrf51_bitfields.h	5460;"	d
RADIO_DACNF_TXADD0_Msk	components\device\nrf51_bitfields.h	5457;"	d
RADIO_DACNF_TXADD0_Pos	components\device\nrf51_bitfields.h	5456;"	d
RADIO_DACNF_TXADD1_Msk	components\device\nrf51_bitfields.h	5453;"	d
RADIO_DACNF_TXADD1_Pos	components\device\nrf51_bitfields.h	5452;"	d
RADIO_DACNF_TXADD2_Msk	components\device\nrf51_bitfields.h	5449;"	d
RADIO_DACNF_TXADD2_Pos	components\device\nrf51_bitfields.h	5448;"	d
RADIO_DACNF_TXADD3_Msk	components\device\nrf51_bitfields.h	5445;"	d
RADIO_DACNF_TXADD3_Pos	components\device\nrf51_bitfields.h	5444;"	d
RADIO_DACNF_TXADD4_Msk	components\device\nrf51_bitfields.h	5441;"	d
RADIO_DACNF_TXADD4_Pos	components\device\nrf51_bitfields.h	5440;"	d
RADIO_DACNF_TXADD5_Msk	components\device\nrf51_bitfields.h	5437;"	d
RADIO_DACNF_TXADD5_Pos	components\device\nrf51_bitfields.h	5436;"	d
RADIO_DACNF_TXADD6_Msk	components\device\nrf51_bitfields.h	5433;"	d
RADIO_DACNF_TXADD6_Pos	components\device\nrf51_bitfields.h	5432;"	d
RADIO_DACNF_TXADD7_Msk	components\device\nrf51_bitfields.h	5429;"	d
RADIO_DACNF_TXADD7_Pos	components\device\nrf51_bitfields.h	5428;"	d
RADIO_DAI_DAI_Msk	components\device\nrf51_bitfields.h	5161;"	d
RADIO_DAI_DAI_Pos	components\device\nrf51_bitfields.h	5160;"	d
RADIO_DAP_DAP_Msk	components\device\nrf51_bitfields.h	5422;"	d
RADIO_DAP_DAP_Pos	components\device\nrf51_bitfields.h	5421;"	d
RADIO_DATAWHITEIV_DATAWHITEIV_Msk	components\device\nrf51_bitfields.h	5415;"	d
RADIO_DATAWHITEIV_DATAWHITEIV_Pos	components\device\nrf51_bitfields.h	5414;"	d
RADIO_FREQUENCY_FREQUENCY_Msk	components\device\nrf51_bitfields.h	5168;"	d
RADIO_FREQUENCY_FREQUENCY_Pos	components\device\nrf51_bitfields.h	5167;"	d
RADIO_INTENCLR_ADDRESS_Clear	components\device\nrf51_bitfields.h	5117;"	d
RADIO_INTENCLR_ADDRESS_Disabled	components\device\nrf51_bitfields.h	5115;"	d
RADIO_INTENCLR_ADDRESS_Enabled	components\device\nrf51_bitfields.h	5116;"	d
RADIO_INTENCLR_ADDRESS_Msk	components\device\nrf51_bitfields.h	5114;"	d
RADIO_INTENCLR_ADDRESS_Pos	components\device\nrf51_bitfields.h	5113;"	d
RADIO_INTENCLR_BCMATCH_Clear	components\device\nrf51_bitfields.h	5068;"	d
RADIO_INTENCLR_BCMATCH_Disabled	components\device\nrf51_bitfields.h	5066;"	d
RADIO_INTENCLR_BCMATCH_Enabled	components\device\nrf51_bitfields.h	5067;"	d
RADIO_INTENCLR_BCMATCH_Msk	components\device\nrf51_bitfields.h	5065;"	d
RADIO_INTENCLR_BCMATCH_Pos	components\device\nrf51_bitfields.h	5064;"	d
RADIO_INTENCLR_DEVMATCH_Clear	components\device\nrf51_bitfields.h	5089;"	d
RADIO_INTENCLR_DEVMATCH_Disabled	components\device\nrf51_bitfields.h	5087;"	d
RADIO_INTENCLR_DEVMATCH_Enabled	components\device\nrf51_bitfields.h	5088;"	d
RADIO_INTENCLR_DEVMATCH_Msk	components\device\nrf51_bitfields.h	5086;"	d
RADIO_INTENCLR_DEVMATCH_Pos	components\device\nrf51_bitfields.h	5085;"	d
RADIO_INTENCLR_DEVMISS_Clear	components\device\nrf51_bitfields.h	5082;"	d
RADIO_INTENCLR_DEVMISS_Disabled	components\device\nrf51_bitfields.h	5080;"	d
RADIO_INTENCLR_DEVMISS_Enabled	components\device\nrf51_bitfields.h	5081;"	d
RADIO_INTENCLR_DEVMISS_Msk	components\device\nrf51_bitfields.h	5079;"	d
RADIO_INTENCLR_DEVMISS_Pos	components\device\nrf51_bitfields.h	5078;"	d
RADIO_INTENCLR_DISABLED_Clear	components\device\nrf51_bitfields.h	5096;"	d
RADIO_INTENCLR_DISABLED_Disabled	components\device\nrf51_bitfields.h	5094;"	d
RADIO_INTENCLR_DISABLED_Enabled	components\device\nrf51_bitfields.h	5095;"	d
RADIO_INTENCLR_DISABLED_Msk	components\device\nrf51_bitfields.h	5093;"	d
RADIO_INTENCLR_DISABLED_Pos	components\device\nrf51_bitfields.h	5092;"	d
RADIO_INTENCLR_END_Clear	components\device\nrf51_bitfields.h	5103;"	d
RADIO_INTENCLR_END_Disabled	components\device\nrf51_bitfields.h	5101;"	d
RADIO_INTENCLR_END_Enabled	components\device\nrf51_bitfields.h	5102;"	d
RADIO_INTENCLR_END_Msk	components\device\nrf51_bitfields.h	5100;"	d
RADIO_INTENCLR_END_Pos	components\device\nrf51_bitfields.h	5099;"	d
RADIO_INTENCLR_PAYLOAD_Clear	components\device\nrf51_bitfields.h	5110;"	d
RADIO_INTENCLR_PAYLOAD_Disabled	components\device\nrf51_bitfields.h	5108;"	d
RADIO_INTENCLR_PAYLOAD_Enabled	components\device\nrf51_bitfields.h	5109;"	d
RADIO_INTENCLR_PAYLOAD_Msk	components\device\nrf51_bitfields.h	5107;"	d
RADIO_INTENCLR_PAYLOAD_Pos	components\device\nrf51_bitfields.h	5106;"	d
RADIO_INTENCLR_READY_Clear	components\device\nrf51_bitfields.h	5124;"	d
RADIO_INTENCLR_READY_Disabled	components\device\nrf51_bitfields.h	5122;"	d
RADIO_INTENCLR_READY_Enabled	components\device\nrf51_bitfields.h	5123;"	d
RADIO_INTENCLR_READY_Msk	components\device\nrf51_bitfields.h	5121;"	d
RADIO_INTENCLR_READY_Pos	components\device\nrf51_bitfields.h	5120;"	d
RADIO_INTENCLR_RSSIEND_Clear	components\device\nrf51_bitfields.h	5075;"	d
RADIO_INTENCLR_RSSIEND_Disabled	components\device\nrf51_bitfields.h	5073;"	d
RADIO_INTENCLR_RSSIEND_Enabled	components\device\nrf51_bitfields.h	5074;"	d
RADIO_INTENCLR_RSSIEND_Msk	components\device\nrf51_bitfields.h	5072;"	d
RADIO_INTENCLR_RSSIEND_Pos	components\device\nrf51_bitfields.h	5071;"	d
RADIO_INTENSET_ADDRESS_Disabled	components\device\nrf51_bitfields.h	5049;"	d
RADIO_INTENSET_ADDRESS_Enabled	components\device\nrf51_bitfields.h	5050;"	d
RADIO_INTENSET_ADDRESS_Msk	components\device\nrf51_bitfields.h	5048;"	d
RADIO_INTENSET_ADDRESS_Pos	components\device\nrf51_bitfields.h	5047;"	d
RADIO_INTENSET_ADDRESS_Set	components\device\nrf51_bitfields.h	5051;"	d
RADIO_INTENSET_BCMATCH_Disabled	components\device\nrf51_bitfields.h	5000;"	d
RADIO_INTENSET_BCMATCH_Enabled	components\device\nrf51_bitfields.h	5001;"	d
RADIO_INTENSET_BCMATCH_Msk	components\device\nrf51_bitfields.h	4999;"	d
RADIO_INTENSET_BCMATCH_Pos	components\device\nrf51_bitfields.h	4998;"	d
RADIO_INTENSET_BCMATCH_Set	components\device\nrf51_bitfields.h	5002;"	d
RADIO_INTENSET_DEVMATCH_Disabled	components\device\nrf51_bitfields.h	5021;"	d
RADIO_INTENSET_DEVMATCH_Enabled	components\device\nrf51_bitfields.h	5022;"	d
RADIO_INTENSET_DEVMATCH_Msk	components\device\nrf51_bitfields.h	5020;"	d
RADIO_INTENSET_DEVMATCH_Pos	components\device\nrf51_bitfields.h	5019;"	d
RADIO_INTENSET_DEVMATCH_Set	components\device\nrf51_bitfields.h	5023;"	d
RADIO_INTENSET_DEVMISS_Disabled	components\device\nrf51_bitfields.h	5014;"	d
RADIO_INTENSET_DEVMISS_Enabled	components\device\nrf51_bitfields.h	5015;"	d
RADIO_INTENSET_DEVMISS_Msk	components\device\nrf51_bitfields.h	5013;"	d
RADIO_INTENSET_DEVMISS_Pos	components\device\nrf51_bitfields.h	5012;"	d
RADIO_INTENSET_DEVMISS_Set	components\device\nrf51_bitfields.h	5016;"	d
RADIO_INTENSET_DISABLED_Disabled	components\device\nrf51_bitfields.h	5028;"	d
RADIO_INTENSET_DISABLED_Enabled	components\device\nrf51_bitfields.h	5029;"	d
RADIO_INTENSET_DISABLED_Msk	components\device\nrf51_bitfields.h	5027;"	d
RADIO_INTENSET_DISABLED_Pos	components\device\nrf51_bitfields.h	5026;"	d
RADIO_INTENSET_DISABLED_Set	components\device\nrf51_bitfields.h	5030;"	d
RADIO_INTENSET_END_Disabled	components\device\nrf51_bitfields.h	5035;"	d
RADIO_INTENSET_END_Enabled	components\device\nrf51_bitfields.h	5036;"	d
RADIO_INTENSET_END_Msk	components\device\nrf51_bitfields.h	5034;"	d
RADIO_INTENSET_END_Pos	components\device\nrf51_bitfields.h	5033;"	d
RADIO_INTENSET_END_Set	components\device\nrf51_bitfields.h	5037;"	d
RADIO_INTENSET_PAYLOAD_Disabled	components\device\nrf51_bitfields.h	5042;"	d
RADIO_INTENSET_PAYLOAD_Enabled	components\device\nrf51_bitfields.h	5043;"	d
RADIO_INTENSET_PAYLOAD_Msk	components\device\nrf51_bitfields.h	5041;"	d
RADIO_INTENSET_PAYLOAD_Pos	components\device\nrf51_bitfields.h	5040;"	d
RADIO_INTENSET_PAYLOAD_Set	components\device\nrf51_bitfields.h	5044;"	d
RADIO_INTENSET_READY_Disabled	components\device\nrf51_bitfields.h	5056;"	d
RADIO_INTENSET_READY_Enabled	components\device\nrf51_bitfields.h	5057;"	d
RADIO_INTENSET_READY_Msk	components\device\nrf51_bitfields.h	5055;"	d
RADIO_INTENSET_READY_Pos	components\device\nrf51_bitfields.h	5054;"	d
RADIO_INTENSET_READY_Set	components\device\nrf51_bitfields.h	5058;"	d
RADIO_INTENSET_RSSIEND_Disabled	components\device\nrf51_bitfields.h	5007;"	d
RADIO_INTENSET_RSSIEND_Enabled	components\device\nrf51_bitfields.h	5008;"	d
RADIO_INTENSET_RSSIEND_Msk	components\device\nrf51_bitfields.h	5006;"	d
RADIO_INTENSET_RSSIEND_Pos	components\device\nrf51_bitfields.h	5005;"	d
RADIO_INTENSET_RSSIEND_Set	components\device\nrf51_bitfields.h	5009;"	d
RADIO_MODE_MODE_Ble_1Mbit	components\device\nrf51_bitfields.h	5194;"	d
RADIO_MODE_MODE_Msk	components\device\nrf51_bitfields.h	5190;"	d
RADIO_MODE_MODE_Nrf_1Mbit	components\device\nrf51_bitfields.h	5191;"	d
RADIO_MODE_MODE_Nrf_250Kbit	components\device\nrf51_bitfields.h	5193;"	d
RADIO_MODE_MODE_Nrf_2Mbit	components\device\nrf51_bitfields.h	5192;"	d
RADIO_MODE_MODE_Pos	components\device\nrf51_bitfields.h	5189;"	d
RADIO_OVERRIDE0_OVERRIDE0_Msk	components\device\nrf51_bitfields.h	5512;"	d
RADIO_OVERRIDE0_OVERRIDE0_Pos	components\device\nrf51_bitfields.h	5511;"	d
RADIO_OVERRIDE1_OVERRIDE1_Msk	components\device\nrf51_bitfields.h	5519;"	d
RADIO_OVERRIDE1_OVERRIDE1_Pos	components\device\nrf51_bitfields.h	5518;"	d
RADIO_OVERRIDE2_OVERRIDE2_Msk	components\device\nrf51_bitfields.h	5526;"	d
RADIO_OVERRIDE2_OVERRIDE2_Pos	components\device\nrf51_bitfields.h	5525;"	d
RADIO_OVERRIDE3_OVERRIDE3_Msk	components\device\nrf51_bitfields.h	5533;"	d
RADIO_OVERRIDE3_OVERRIDE3_Pos	components\device\nrf51_bitfields.h	5532;"	d
RADIO_OVERRIDE4_ENABLE_Disabled	components\device\nrf51_bitfields.h	5541;"	d
RADIO_OVERRIDE4_ENABLE_Enabled	components\device\nrf51_bitfields.h	5542;"	d
RADIO_OVERRIDE4_ENABLE_Msk	components\device\nrf51_bitfields.h	5540;"	d
RADIO_OVERRIDE4_ENABLE_Pos	components\device\nrf51_bitfields.h	5539;"	d
RADIO_OVERRIDE4_OVERRIDE4_Msk	components\device\nrf51_bitfields.h	5546;"	d
RADIO_OVERRIDE4_OVERRIDE4_Pos	components\device\nrf51_bitfields.h	5545;"	d
RADIO_PCNF0_LFLEN_Msk	components\device\nrf51_bitfields.h	5209;"	d
RADIO_PCNF0_LFLEN_Pos	components\device\nrf51_bitfields.h	5208;"	d
RADIO_PCNF0_S0LEN_Msk	components\device\nrf51_bitfields.h	5205;"	d
RADIO_PCNF0_S0LEN_Pos	components\device\nrf51_bitfields.h	5204;"	d
RADIO_PCNF0_S1LEN_Msk	components\device\nrf51_bitfields.h	5201;"	d
RADIO_PCNF0_S1LEN_Pos	components\device\nrf51_bitfields.h	5200;"	d
RADIO_PCNF1_BALEN_Msk	components\device\nrf51_bitfields.h	5228;"	d
RADIO_PCNF1_BALEN_Pos	components\device\nrf51_bitfields.h	5227;"	d
RADIO_PCNF1_ENDIAN_Big	components\device\nrf51_bitfields.h	5224;"	d
RADIO_PCNF1_ENDIAN_Little	components\device\nrf51_bitfields.h	5223;"	d
RADIO_PCNF1_ENDIAN_Msk	components\device\nrf51_bitfields.h	5222;"	d
RADIO_PCNF1_ENDIAN_Pos	components\device\nrf51_bitfields.h	5221;"	d
RADIO_PCNF1_MAXLEN_Msk	components\device\nrf51_bitfields.h	5236;"	d
RADIO_PCNF1_MAXLEN_Pos	components\device\nrf51_bitfields.h	5235;"	d
RADIO_PCNF1_STATLEN_Msk	components\device\nrf51_bitfields.h	5232;"	d
RADIO_PCNF1_STATLEN_Pos	components\device\nrf51_bitfields.h	5231;"	d
RADIO_PCNF1_WHITEEN_Disabled	components\device\nrf51_bitfields.h	5217;"	d
RADIO_PCNF1_WHITEEN_Enabled	components\device\nrf51_bitfields.h	5218;"	d
RADIO_PCNF1_WHITEEN_Msk	components\device\nrf51_bitfields.h	5216;"	d
RADIO_PCNF1_WHITEEN_Pos	components\device\nrf51_bitfields.h	5215;"	d
RADIO_POWER_POWER_Disabled	components\device\nrf51_bitfields.h	5554;"	d
RADIO_POWER_POWER_Enabled	components\device\nrf51_bitfields.h	5555;"	d
RADIO_POWER_POWER_Msk	components\device\nrf51_bitfields.h	5553;"	d
RADIO_POWER_POWER_Pos	components\device\nrf51_bitfields.h	5552;"	d
RADIO_PREFIX0_AP0_Msk	components\device\nrf51_bitfields.h	5255;"	d
RADIO_PREFIX0_AP0_Pos	components\device\nrf51_bitfields.h	5254;"	d
RADIO_PREFIX0_AP1_Msk	components\device\nrf51_bitfields.h	5251;"	d
RADIO_PREFIX0_AP1_Pos	components\device\nrf51_bitfields.h	5250;"	d
RADIO_PREFIX0_AP2_Msk	components\device\nrf51_bitfields.h	5247;"	d
RADIO_PREFIX0_AP2_Pos	components\device\nrf51_bitfields.h	5246;"	d
RADIO_PREFIX0_AP3_Msk	components\device\nrf51_bitfields.h	5243;"	d
RADIO_PREFIX0_AP3_Pos	components\device\nrf51_bitfields.h	5242;"	d
RADIO_PREFIX1_AP4_Msk	components\device\nrf51_bitfields.h	5274;"	d
RADIO_PREFIX1_AP4_Pos	components\device\nrf51_bitfields.h	5273;"	d
RADIO_PREFIX1_AP5_Msk	components\device\nrf51_bitfields.h	5270;"	d
RADIO_PREFIX1_AP5_Pos	components\device\nrf51_bitfields.h	5269;"	d
RADIO_PREFIX1_AP6_Msk	components\device\nrf51_bitfields.h	5266;"	d
RADIO_PREFIX1_AP6_Pos	components\device\nrf51_bitfields.h	5265;"	d
RADIO_PREFIX1_AP7_Msk	components\device\nrf51_bitfields.h	5262;"	d
RADIO_PREFIX1_AP7_Pos	components\device\nrf51_bitfields.h	5261;"	d
RADIO_RSSISAMPLE_RSSISAMPLE_Msk	components\device\nrf51_bitfields.h	5392;"	d
RADIO_RSSISAMPLE_RSSISAMPLE_Pos	components\device\nrf51_bitfields.h	5391;"	d
RADIO_RXADDRESSES_ADDR0_Disabled	components\device\nrf51_bitfields.h	5331;"	d
RADIO_RXADDRESSES_ADDR0_Enabled	components\device\nrf51_bitfields.h	5332;"	d
RADIO_RXADDRESSES_ADDR0_Msk	components\device\nrf51_bitfields.h	5330;"	d
RADIO_RXADDRESSES_ADDR0_Pos	components\device\nrf51_bitfields.h	5329;"	d
RADIO_RXADDRESSES_ADDR1_Disabled	components\device\nrf51_bitfields.h	5325;"	d
RADIO_RXADDRESSES_ADDR1_Enabled	components\device\nrf51_bitfields.h	5326;"	d
RADIO_RXADDRESSES_ADDR1_Msk	components\device\nrf51_bitfields.h	5324;"	d
RADIO_RXADDRESSES_ADDR1_Pos	components\device\nrf51_bitfields.h	5323;"	d
RADIO_RXADDRESSES_ADDR2_Disabled	components\device\nrf51_bitfields.h	5319;"	d
RADIO_RXADDRESSES_ADDR2_Enabled	components\device\nrf51_bitfields.h	5320;"	d
RADIO_RXADDRESSES_ADDR2_Msk	components\device\nrf51_bitfields.h	5318;"	d
RADIO_RXADDRESSES_ADDR2_Pos	components\device\nrf51_bitfields.h	5317;"	d
RADIO_RXADDRESSES_ADDR3_Disabled	components\device\nrf51_bitfields.h	5313;"	d
RADIO_RXADDRESSES_ADDR3_Enabled	components\device\nrf51_bitfields.h	5314;"	d
RADIO_RXADDRESSES_ADDR3_Msk	components\device\nrf51_bitfields.h	5312;"	d
RADIO_RXADDRESSES_ADDR3_Pos	components\device\nrf51_bitfields.h	5311;"	d
RADIO_RXADDRESSES_ADDR4_Disabled	components\device\nrf51_bitfields.h	5307;"	d
RADIO_RXADDRESSES_ADDR4_Enabled	components\device\nrf51_bitfields.h	5308;"	d
RADIO_RXADDRESSES_ADDR4_Msk	components\device\nrf51_bitfields.h	5306;"	d
RADIO_RXADDRESSES_ADDR4_Pos	components\device\nrf51_bitfields.h	5305;"	d
RADIO_RXADDRESSES_ADDR5_Disabled	components\device\nrf51_bitfields.h	5301;"	d
RADIO_RXADDRESSES_ADDR5_Enabled	components\device\nrf51_bitfields.h	5302;"	d
RADIO_RXADDRESSES_ADDR5_Msk	components\device\nrf51_bitfields.h	5300;"	d
RADIO_RXADDRESSES_ADDR5_Pos	components\device\nrf51_bitfields.h	5299;"	d
RADIO_RXADDRESSES_ADDR6_Disabled	components\device\nrf51_bitfields.h	5295;"	d
RADIO_RXADDRESSES_ADDR6_Enabled	components\device\nrf51_bitfields.h	5296;"	d
RADIO_RXADDRESSES_ADDR6_Msk	components\device\nrf51_bitfields.h	5294;"	d
RADIO_RXADDRESSES_ADDR6_Pos	components\device\nrf51_bitfields.h	5293;"	d
RADIO_RXADDRESSES_ADDR7_Disabled	components\device\nrf51_bitfields.h	5289;"	d
RADIO_RXADDRESSES_ADDR7_Enabled	components\device\nrf51_bitfields.h	5290;"	d
RADIO_RXADDRESSES_ADDR7_Msk	components\device\nrf51_bitfields.h	5288;"	d
RADIO_RXADDRESSES_ADDR7_Pos	components\device\nrf51_bitfields.h	5287;"	d
RADIO_RXCRC_RXCRC_Msk	components\device\nrf51_bitfields.h	5154;"	d
RADIO_RXCRC_RXCRC_Pos	components\device\nrf51_bitfields.h	5153;"	d
RADIO_RXMATCH_RXMATCH_Msk	components\device\nrf51_bitfields.h	5147;"	d
RADIO_RXMATCH_RXMATCH_Pos	components\device\nrf51_bitfields.h	5146;"	d
RADIO_SHORTS_ADDRESS_BCSTART_Disabled	components\device\nrf51_bitfields.h	4955;"	d
RADIO_SHORTS_ADDRESS_BCSTART_Enabled	components\device\nrf51_bitfields.h	4956;"	d
RADIO_SHORTS_ADDRESS_BCSTART_Msk	components\device\nrf51_bitfields.h	4954;"	d
RADIO_SHORTS_ADDRESS_BCSTART_Pos	components\device\nrf51_bitfields.h	4953;"	d
RADIO_SHORTS_ADDRESS_RSSISTART_Disabled	components\device\nrf51_bitfields.h	4967;"	d
RADIO_SHORTS_ADDRESS_RSSISTART_Enabled	components\device\nrf51_bitfields.h	4968;"	d
RADIO_SHORTS_ADDRESS_RSSISTART_Msk	components\device\nrf51_bitfields.h	4966;"	d
RADIO_SHORTS_ADDRESS_RSSISTART_Pos	components\device\nrf51_bitfields.h	4965;"	d
RADIO_SHORTS_DISABLED_RSSISTOP_Disabled	components\device\nrf51_bitfields.h	4949;"	d
RADIO_SHORTS_DISABLED_RSSISTOP_Enabled	components\device\nrf51_bitfields.h	4950;"	d
RADIO_SHORTS_DISABLED_RSSISTOP_Msk	components\device\nrf51_bitfields.h	4948;"	d
RADIO_SHORTS_DISABLED_RSSISTOP_Pos	components\device\nrf51_bitfields.h	4947;"	d
RADIO_SHORTS_DISABLED_RXEN_Disabled	components\device\nrf51_bitfields.h	4973;"	d
RADIO_SHORTS_DISABLED_RXEN_Enabled	components\device\nrf51_bitfields.h	4974;"	d
RADIO_SHORTS_DISABLED_RXEN_Msk	components\device\nrf51_bitfields.h	4972;"	d
RADIO_SHORTS_DISABLED_RXEN_Pos	components\device\nrf51_bitfields.h	4971;"	d
RADIO_SHORTS_DISABLED_TXEN_Disabled	components\device\nrf51_bitfields.h	4979;"	d
RADIO_SHORTS_DISABLED_TXEN_Enabled	components\device\nrf51_bitfields.h	4980;"	d
RADIO_SHORTS_DISABLED_TXEN_Msk	components\device\nrf51_bitfields.h	4978;"	d
RADIO_SHORTS_DISABLED_TXEN_Pos	components\device\nrf51_bitfields.h	4977;"	d
RADIO_SHORTS_END_DISABLE_Disabled	components\device\nrf51_bitfields.h	4985;"	d
RADIO_SHORTS_END_DISABLE_Enabled	components\device\nrf51_bitfields.h	4986;"	d
RADIO_SHORTS_END_DISABLE_Msk	components\device\nrf51_bitfields.h	4984;"	d
RADIO_SHORTS_END_DISABLE_Pos	components\device\nrf51_bitfields.h	4983;"	d
RADIO_SHORTS_END_START_Disabled	components\device\nrf51_bitfields.h	4961;"	d
RADIO_SHORTS_END_START_Enabled	components\device\nrf51_bitfields.h	4962;"	d
RADIO_SHORTS_END_START_Msk	components\device\nrf51_bitfields.h	4960;"	d
RADIO_SHORTS_END_START_Pos	components\device\nrf51_bitfields.h	4959;"	d
RADIO_SHORTS_READY_START_Disabled	components\device\nrf51_bitfields.h	4991;"	d
RADIO_SHORTS_READY_START_Enabled	components\device\nrf51_bitfields.h	4992;"	d
RADIO_SHORTS_READY_START_Msk	components\device\nrf51_bitfields.h	4990;"	d
RADIO_SHORTS_READY_START_Pos	components\device\nrf51_bitfields.h	4989;"	d
RADIO_STATE_STATE_Disabled	components\device\nrf51_bitfields.h	5400;"	d
RADIO_STATE_STATE_Msk	components\device\nrf51_bitfields.h	5399;"	d
RADIO_STATE_STATE_Pos	components\device\nrf51_bitfields.h	5398;"	d
RADIO_STATE_STATE_Rx	components\device\nrf51_bitfields.h	5403;"	d
RADIO_STATE_STATE_RxDisable	components\device\nrf51_bitfields.h	5404;"	d
RADIO_STATE_STATE_RxIdle	components\device\nrf51_bitfields.h	5402;"	d
RADIO_STATE_STATE_RxRu	components\device\nrf51_bitfields.h	5401;"	d
RADIO_STATE_STATE_Tx	components\device\nrf51_bitfields.h	5407;"	d
RADIO_STATE_STATE_TxDisable	components\device\nrf51_bitfields.h	5408;"	d
RADIO_STATE_STATE_TxIdle	components\device\nrf51_bitfields.h	5406;"	d
RADIO_STATE_STATE_TxRu	components\device\nrf51_bitfields.h	5405;"	d
RADIO_TEST_CONSTCARRIER_Disabled	components\device\nrf51_bitfields.h	5377;"	d
RADIO_TEST_CONSTCARRIER_Enabled	components\device\nrf51_bitfields.h	5378;"	d
RADIO_TEST_CONSTCARRIER_Msk	components\device\nrf51_bitfields.h	5376;"	d
RADIO_TEST_CONSTCARRIER_Pos	components\device\nrf51_bitfields.h	5375;"	d
RADIO_TEST_PLLLOCK_Disabled	components\device\nrf51_bitfields.h	5371;"	d
RADIO_TEST_PLLLOCK_Enabled	components\device\nrf51_bitfields.h	5372;"	d
RADIO_TEST_PLLLOCK_Msk	components\device\nrf51_bitfields.h	5370;"	d
RADIO_TEST_PLLLOCK_Pos	components\device\nrf51_bitfields.h	5369;"	d
RADIO_TIFS_TIFS_Msk	components\device\nrf51_bitfields.h	5385;"	d
RADIO_TIFS_TIFS_Pos	components\device\nrf51_bitfields.h	5384;"	d
RADIO_TXADDRESS_TXADDRESS_Msk	components\device\nrf51_bitfields.h	5281;"	d
RADIO_TXADDRESS_TXADDRESS_Pos	components\device\nrf51_bitfields.h	5280;"	d
RADIO_TXPOWER_TXPOWER_0dBm	components\device\nrf51_bitfields.h	5176;"	d
RADIO_TXPOWER_TXPOWER_Msk	components\device\nrf51_bitfields.h	5175;"	d
RADIO_TXPOWER_TXPOWER_Neg12dBm	components\device\nrf51_bitfields.h	5181;"	d
RADIO_TXPOWER_TXPOWER_Neg16dBm	components\device\nrf51_bitfields.h	5180;"	d
RADIO_TXPOWER_TXPOWER_Neg20dBm	components\device\nrf51_bitfields.h	5179;"	d
RADIO_TXPOWER_TXPOWER_Neg30dBm	components\device\nrf51_bitfields.h	5178;"	d
RADIO_TXPOWER_TXPOWER_Neg4dBm	components\device\nrf51_bitfields.h	5183;"	d
RADIO_TXPOWER_TXPOWER_Neg8dBm	components\device\nrf51_bitfields.h	5182;"	d
RADIO_TXPOWER_TXPOWER_Pos	components\device\nrf51_bitfields.h	5174;"	d
RADIO_TXPOWER_TXPOWER_Pos4dBm	components\device\nrf51_bitfields.h	5177;"	d
RNG_CONFIG_DERCEN_Disabled	components\device\nrf51_bitfields.h	5596;"	d
RNG_CONFIG_DERCEN_Enabled	components\device\nrf51_bitfields.h	5597;"	d
RNG_CONFIG_DERCEN_Msk	components\device\nrf51_bitfields.h	5595;"	d
RNG_CONFIG_DERCEN_Pos	components\device\nrf51_bitfields.h	5594;"	d
RNG_INTENCLR_VALRDY_Clear	components\device\nrf51_bitfields.h	5588;"	d
RNG_INTENCLR_VALRDY_Disabled	components\device\nrf51_bitfields.h	5586;"	d
RNG_INTENCLR_VALRDY_Enabled	components\device\nrf51_bitfields.h	5587;"	d
RNG_INTENCLR_VALRDY_Msk	components\device\nrf51_bitfields.h	5585;"	d
RNG_INTENCLR_VALRDY_Pos	components\device\nrf51_bitfields.h	5584;"	d
RNG_INTENSET_VALRDY_Disabled	components\device\nrf51_bitfields.h	5576;"	d
RNG_INTENSET_VALRDY_Enabled	components\device\nrf51_bitfields.h	5577;"	d
RNG_INTENSET_VALRDY_Msk	components\device\nrf51_bitfields.h	5575;"	d
RNG_INTENSET_VALRDY_Pos	components\device\nrf51_bitfields.h	5574;"	d
RNG_INTENSET_VALRDY_Set	components\device\nrf51_bitfields.h	5578;"	d
RNG_POWER_POWER_Disabled	components\device\nrf51_bitfields.h	5612;"	d
RNG_POWER_POWER_Enabled	components\device\nrf51_bitfields.h	5613;"	d
RNG_POWER_POWER_Msk	components\device\nrf51_bitfields.h	5611;"	d
RNG_POWER_POWER_Pos	components\device\nrf51_bitfields.h	5610;"	d
RNG_SHORTS_VALRDY_STOP_Disabled	components\device\nrf51_bitfields.h	5567;"	d
RNG_SHORTS_VALRDY_STOP_Enabled	components\device\nrf51_bitfields.h	5568;"	d
RNG_SHORTS_VALRDY_STOP_Msk	components\device\nrf51_bitfields.h	5566;"	d
RNG_SHORTS_VALRDY_STOP_Pos	components\device\nrf51_bitfields.h	5565;"	d
RNG_VALUE_VALUE_Msk	components\device\nrf51_bitfields.h	5604;"	d
RNG_VALUE_VALUE_Pos	components\device\nrf51_bitfields.h	5603;"	d
RTC_CC_COMPARE_Msk	components\device\nrf51_bitfields.h	5857;"	d
RTC_CC_COMPARE_Pos	components\device\nrf51_bitfields.h	5856;"	d
RTC_COUNTER_COUNTER_Msk	components\device\nrf51_bitfields.h	5843;"	d
RTC_COUNTER_COUNTER_Pos	components\device\nrf51_bitfields.h	5842;"	d
RTC_EVTENCLR_COMPARE0_Clear	components\device\nrf51_bitfields.h	5822;"	d
RTC_EVTENCLR_COMPARE0_Disabled	components\device\nrf51_bitfields.h	5820;"	d
RTC_EVTENCLR_COMPARE0_Enabled	components\device\nrf51_bitfields.h	5821;"	d
RTC_EVTENCLR_COMPARE0_Msk	components\device\nrf51_bitfields.h	5819;"	d
RTC_EVTENCLR_COMPARE0_Pos	components\device\nrf51_bitfields.h	5818;"	d
RTC_EVTENCLR_COMPARE1_Clear	components\device\nrf51_bitfields.h	5815;"	d
RTC_EVTENCLR_COMPARE1_Disabled	components\device\nrf51_bitfields.h	5813;"	d
RTC_EVTENCLR_COMPARE1_Enabled	components\device\nrf51_bitfields.h	5814;"	d
RTC_EVTENCLR_COMPARE1_Msk	components\device\nrf51_bitfields.h	5812;"	d
RTC_EVTENCLR_COMPARE1_Pos	components\device\nrf51_bitfields.h	5811;"	d
RTC_EVTENCLR_COMPARE2_Clear	components\device\nrf51_bitfields.h	5808;"	d
RTC_EVTENCLR_COMPARE2_Disabled	components\device\nrf51_bitfields.h	5806;"	d
RTC_EVTENCLR_COMPARE2_Enabled	components\device\nrf51_bitfields.h	5807;"	d
RTC_EVTENCLR_COMPARE2_Msk	components\device\nrf51_bitfields.h	5805;"	d
RTC_EVTENCLR_COMPARE2_Pos	components\device\nrf51_bitfields.h	5804;"	d
RTC_EVTENCLR_COMPARE3_Clear	components\device\nrf51_bitfields.h	5801;"	d
RTC_EVTENCLR_COMPARE3_Disabled	components\device\nrf51_bitfields.h	5799;"	d
RTC_EVTENCLR_COMPARE3_Enabled	components\device\nrf51_bitfields.h	5800;"	d
RTC_EVTENCLR_COMPARE3_Msk	components\device\nrf51_bitfields.h	5798;"	d
RTC_EVTENCLR_COMPARE3_Pos	components\device\nrf51_bitfields.h	5797;"	d
RTC_EVTENCLR_OVRFLW_Clear	components\device\nrf51_bitfields.h	5829;"	d
RTC_EVTENCLR_OVRFLW_Disabled	components\device\nrf51_bitfields.h	5827;"	d
RTC_EVTENCLR_OVRFLW_Enabled	components\device\nrf51_bitfields.h	5828;"	d
RTC_EVTENCLR_OVRFLW_Msk	components\device\nrf51_bitfields.h	5826;"	d
RTC_EVTENCLR_OVRFLW_Pos	components\device\nrf51_bitfields.h	5825;"	d
RTC_EVTENCLR_TICK_Clear	components\device\nrf51_bitfields.h	5836;"	d
RTC_EVTENCLR_TICK_Disabled	components\device\nrf51_bitfields.h	5834;"	d
RTC_EVTENCLR_TICK_Enabled	components\device\nrf51_bitfields.h	5835;"	d
RTC_EVTENCLR_TICK_Msk	components\device\nrf51_bitfields.h	5833;"	d
RTC_EVTENCLR_TICK_Pos	components\device\nrf51_bitfields.h	5832;"	d
RTC_EVTENSET_COMPARE0_Disabled	components\device\nrf51_bitfields.h	5775;"	d
RTC_EVTENSET_COMPARE0_Enabled	components\device\nrf51_bitfields.h	5776;"	d
RTC_EVTENSET_COMPARE0_Msk	components\device\nrf51_bitfields.h	5774;"	d
RTC_EVTENSET_COMPARE0_Pos	components\device\nrf51_bitfields.h	5773;"	d
RTC_EVTENSET_COMPARE0_Set	components\device\nrf51_bitfields.h	5777;"	d
RTC_EVTENSET_COMPARE1_Disabled	components\device\nrf51_bitfields.h	5768;"	d
RTC_EVTENSET_COMPARE1_Enabled	components\device\nrf51_bitfields.h	5769;"	d
RTC_EVTENSET_COMPARE1_Msk	components\device\nrf51_bitfields.h	5767;"	d
RTC_EVTENSET_COMPARE1_Pos	components\device\nrf51_bitfields.h	5766;"	d
RTC_EVTENSET_COMPARE1_Set	components\device\nrf51_bitfields.h	5770;"	d
RTC_EVTENSET_COMPARE2_Disabled	components\device\nrf51_bitfields.h	5761;"	d
RTC_EVTENSET_COMPARE2_Enabled	components\device\nrf51_bitfields.h	5762;"	d
RTC_EVTENSET_COMPARE2_Msk	components\device\nrf51_bitfields.h	5760;"	d
RTC_EVTENSET_COMPARE2_Pos	components\device\nrf51_bitfields.h	5759;"	d
RTC_EVTENSET_COMPARE2_Set	components\device\nrf51_bitfields.h	5763;"	d
RTC_EVTENSET_COMPARE3_Disabled	components\device\nrf51_bitfields.h	5754;"	d
RTC_EVTENSET_COMPARE3_Enabled	components\device\nrf51_bitfields.h	5755;"	d
RTC_EVTENSET_COMPARE3_Msk	components\device\nrf51_bitfields.h	5753;"	d
RTC_EVTENSET_COMPARE3_Pos	components\device\nrf51_bitfields.h	5752;"	d
RTC_EVTENSET_COMPARE3_Set	components\device\nrf51_bitfields.h	5756;"	d
RTC_EVTENSET_OVRFLW_Disabled	components\device\nrf51_bitfields.h	5782;"	d
RTC_EVTENSET_OVRFLW_Enabled	components\device\nrf51_bitfields.h	5783;"	d
RTC_EVTENSET_OVRFLW_Msk	components\device\nrf51_bitfields.h	5781;"	d
RTC_EVTENSET_OVRFLW_Pos	components\device\nrf51_bitfields.h	5780;"	d
RTC_EVTENSET_OVRFLW_Set	components\device\nrf51_bitfields.h	5784;"	d
RTC_EVTENSET_TICK_Disabled	components\device\nrf51_bitfields.h	5789;"	d
RTC_EVTENSET_TICK_Enabled	components\device\nrf51_bitfields.h	5790;"	d
RTC_EVTENSET_TICK_Msk	components\device\nrf51_bitfields.h	5788;"	d
RTC_EVTENSET_TICK_Pos	components\device\nrf51_bitfields.h	5787;"	d
RTC_EVTENSET_TICK_Set	components\device\nrf51_bitfields.h	5791;"	d
RTC_EVTEN_COMPARE0_Disabled	components\device\nrf51_bitfields.h	5733;"	d
RTC_EVTEN_COMPARE0_Enabled	components\device\nrf51_bitfields.h	5734;"	d
RTC_EVTEN_COMPARE0_Msk	components\device\nrf51_bitfields.h	5732;"	d
RTC_EVTEN_COMPARE0_Pos	components\device\nrf51_bitfields.h	5731;"	d
RTC_EVTEN_COMPARE1_Disabled	components\device\nrf51_bitfields.h	5727;"	d
RTC_EVTEN_COMPARE1_Enabled	components\device\nrf51_bitfields.h	5728;"	d
RTC_EVTEN_COMPARE1_Msk	components\device\nrf51_bitfields.h	5726;"	d
RTC_EVTEN_COMPARE1_Pos	components\device\nrf51_bitfields.h	5725;"	d
RTC_EVTEN_COMPARE2_Disabled	components\device\nrf51_bitfields.h	5721;"	d
RTC_EVTEN_COMPARE2_Enabled	components\device\nrf51_bitfields.h	5722;"	d
RTC_EVTEN_COMPARE2_Msk	components\device\nrf51_bitfields.h	5720;"	d
RTC_EVTEN_COMPARE2_Pos	components\device\nrf51_bitfields.h	5719;"	d
RTC_EVTEN_COMPARE3_Disabled	components\device\nrf51_bitfields.h	5715;"	d
RTC_EVTEN_COMPARE3_Enabled	components\device\nrf51_bitfields.h	5716;"	d
RTC_EVTEN_COMPARE3_Msk	components\device\nrf51_bitfields.h	5714;"	d
RTC_EVTEN_COMPARE3_Pos	components\device\nrf51_bitfields.h	5713;"	d
RTC_EVTEN_OVRFLW_Disabled	components\device\nrf51_bitfields.h	5739;"	d
RTC_EVTEN_OVRFLW_Enabled	components\device\nrf51_bitfields.h	5740;"	d
RTC_EVTEN_OVRFLW_Msk	components\device\nrf51_bitfields.h	5738;"	d
RTC_EVTEN_OVRFLW_Pos	components\device\nrf51_bitfields.h	5737;"	d
RTC_EVTEN_TICK_Disabled	components\device\nrf51_bitfields.h	5745;"	d
RTC_EVTEN_TICK_Enabled	components\device\nrf51_bitfields.h	5746;"	d
RTC_EVTEN_TICK_Msk	components\device\nrf51_bitfields.h	5744;"	d
RTC_EVTEN_TICK_Pos	components\device\nrf51_bitfields.h	5743;"	d
RTC_INTENCLR_COMPARE0_Clear	components\device\nrf51_bitfields.h	5693;"	d
RTC_INTENCLR_COMPARE0_Disabled	components\device\nrf51_bitfields.h	5691;"	d
RTC_INTENCLR_COMPARE0_Enabled	components\device\nrf51_bitfields.h	5692;"	d
RTC_INTENCLR_COMPARE0_Msk	components\device\nrf51_bitfields.h	5690;"	d
RTC_INTENCLR_COMPARE0_Pos	components\device\nrf51_bitfields.h	5689;"	d
RTC_INTENCLR_COMPARE1_Clear	components\device\nrf51_bitfields.h	5686;"	d
RTC_INTENCLR_COMPARE1_Disabled	components\device\nrf51_bitfields.h	5684;"	d
RTC_INTENCLR_COMPARE1_Enabled	components\device\nrf51_bitfields.h	5685;"	d
RTC_INTENCLR_COMPARE1_Msk	components\device\nrf51_bitfields.h	5683;"	d
RTC_INTENCLR_COMPARE1_Pos	components\device\nrf51_bitfields.h	5682;"	d
RTC_INTENCLR_COMPARE2_Clear	components\device\nrf51_bitfields.h	5679;"	d
RTC_INTENCLR_COMPARE2_Disabled	components\device\nrf51_bitfields.h	5677;"	d
RTC_INTENCLR_COMPARE2_Enabled	components\device\nrf51_bitfields.h	5678;"	d
RTC_INTENCLR_COMPARE2_Msk	components\device\nrf51_bitfields.h	5676;"	d
RTC_INTENCLR_COMPARE2_Pos	components\device\nrf51_bitfields.h	5675;"	d
RTC_INTENCLR_COMPARE3_Clear	components\device\nrf51_bitfields.h	5672;"	d
RTC_INTENCLR_COMPARE3_Disabled	components\device\nrf51_bitfields.h	5670;"	d
RTC_INTENCLR_COMPARE3_Enabled	components\device\nrf51_bitfields.h	5671;"	d
RTC_INTENCLR_COMPARE3_Msk	components\device\nrf51_bitfields.h	5669;"	d
RTC_INTENCLR_COMPARE3_Pos	components\device\nrf51_bitfields.h	5668;"	d
RTC_INTENCLR_OVRFLW_Clear	components\device\nrf51_bitfields.h	5700;"	d
RTC_INTENCLR_OVRFLW_Disabled	components\device\nrf51_bitfields.h	5698;"	d
RTC_INTENCLR_OVRFLW_Enabled	components\device\nrf51_bitfields.h	5699;"	d
RTC_INTENCLR_OVRFLW_Msk	components\device\nrf51_bitfields.h	5697;"	d
RTC_INTENCLR_OVRFLW_Pos	components\device\nrf51_bitfields.h	5696;"	d
RTC_INTENCLR_TICK_Clear	components\device\nrf51_bitfields.h	5707;"	d
RTC_INTENCLR_TICK_Disabled	components\device\nrf51_bitfields.h	5705;"	d
RTC_INTENCLR_TICK_Enabled	components\device\nrf51_bitfields.h	5706;"	d
RTC_INTENCLR_TICK_Msk	components\device\nrf51_bitfields.h	5704;"	d
RTC_INTENCLR_TICK_Pos	components\device\nrf51_bitfields.h	5703;"	d
RTC_INTENSET_COMPARE0_Disabled	components\device\nrf51_bitfields.h	5646;"	d
RTC_INTENSET_COMPARE0_Enabled	components\device\nrf51_bitfields.h	5647;"	d
RTC_INTENSET_COMPARE0_Msk	components\device\nrf51_bitfields.h	5645;"	d
RTC_INTENSET_COMPARE0_Pos	components\device\nrf51_bitfields.h	5644;"	d
RTC_INTENSET_COMPARE0_Set	components\device\nrf51_bitfields.h	5648;"	d
RTC_INTENSET_COMPARE1_Disabled	components\device\nrf51_bitfields.h	5639;"	d
RTC_INTENSET_COMPARE1_Enabled	components\device\nrf51_bitfields.h	5640;"	d
RTC_INTENSET_COMPARE1_Msk	components\device\nrf51_bitfields.h	5638;"	d
RTC_INTENSET_COMPARE1_Pos	components\device\nrf51_bitfields.h	5637;"	d
RTC_INTENSET_COMPARE1_Set	components\device\nrf51_bitfields.h	5641;"	d
RTC_INTENSET_COMPARE2_Disabled	components\device\nrf51_bitfields.h	5632;"	d
RTC_INTENSET_COMPARE2_Enabled	components\device\nrf51_bitfields.h	5633;"	d
RTC_INTENSET_COMPARE2_Msk	components\device\nrf51_bitfields.h	5631;"	d
RTC_INTENSET_COMPARE2_Pos	components\device\nrf51_bitfields.h	5630;"	d
RTC_INTENSET_COMPARE2_Set	components\device\nrf51_bitfields.h	5634;"	d
RTC_INTENSET_COMPARE3_Disabled	components\device\nrf51_bitfields.h	5625;"	d
RTC_INTENSET_COMPARE3_Enabled	components\device\nrf51_bitfields.h	5626;"	d
RTC_INTENSET_COMPARE3_Msk	components\device\nrf51_bitfields.h	5624;"	d
RTC_INTENSET_COMPARE3_Pos	components\device\nrf51_bitfields.h	5623;"	d
RTC_INTENSET_COMPARE3_Set	components\device\nrf51_bitfields.h	5627;"	d
RTC_INTENSET_OVRFLW_Disabled	components\device\nrf51_bitfields.h	5653;"	d
RTC_INTENSET_OVRFLW_Enabled	components\device\nrf51_bitfields.h	5654;"	d
RTC_INTENSET_OVRFLW_Msk	components\device\nrf51_bitfields.h	5652;"	d
RTC_INTENSET_OVRFLW_Pos	components\device\nrf51_bitfields.h	5651;"	d
RTC_INTENSET_OVRFLW_Set	components\device\nrf51_bitfields.h	5655;"	d
RTC_INTENSET_TICK_Disabled	components\device\nrf51_bitfields.h	5660;"	d
RTC_INTENSET_TICK_Enabled	components\device\nrf51_bitfields.h	5661;"	d
RTC_INTENSET_TICK_Msk	components\device\nrf51_bitfields.h	5659;"	d
RTC_INTENSET_TICK_Pos	components\device\nrf51_bitfields.h	5658;"	d
RTC_INTENSET_TICK_Set	components\device\nrf51_bitfields.h	5662;"	d
RTC_POWER_POWER_Disabled	components\device\nrf51_bitfields.h	5865;"	d
RTC_POWER_POWER_Enabled	components\device\nrf51_bitfields.h	5866;"	d
RTC_POWER_POWER_Msk	components\device\nrf51_bitfields.h	5864;"	d
RTC_POWER_POWER_Pos	components\device\nrf51_bitfields.h	5863;"	d
RTC_PRESCALER_PRESCALER_Msk	components\device\nrf51_bitfields.h	5850;"	d
RTC_PRESCALER_PRESCALER_Pos	components\device\nrf51_bitfields.h	5849;"	d
SPIM_CONFIG_CPHA_Leading	components\device\nrf51_bitfields.h	6125;"	d
SPIM_CONFIG_CPHA_Msk	components\device\nrf51_bitfields.h	6124;"	d
SPIM_CONFIG_CPHA_Pos	components\device\nrf51_bitfields.h	6123;"	d
SPIM_CONFIG_CPHA_Trailing	components\device\nrf51_bitfields.h	6126;"	d
SPIM_CONFIG_CPOL_ActiveHigh	components\device\nrf51_bitfields.h	6119;"	d
SPIM_CONFIG_CPOL_ActiveLow	components\device\nrf51_bitfields.h	6120;"	d
SPIM_CONFIG_CPOL_Msk	components\device\nrf51_bitfields.h	6118;"	d
SPIM_CONFIG_CPOL_Pos	components\device\nrf51_bitfields.h	6117;"	d
SPIM_CONFIG_ORDER_LsbFirst	components\device\nrf51_bitfields.h	6132;"	d
SPIM_CONFIG_ORDER_MsbFirst	components\device\nrf51_bitfields.h	6131;"	d
SPIM_CONFIG_ORDER_Msk	components\device\nrf51_bitfields.h	6130;"	d
SPIM_CONFIG_ORDER_Pos	components\device\nrf51_bitfields.h	6129;"	d
SPIM_ENABLE_ENABLE_Disabled	components\device\nrf51_bitfields.h	6054;"	d
SPIM_ENABLE_ENABLE_Enabled	components\device\nrf51_bitfields.h	6055;"	d
SPIM_ENABLE_ENABLE_Msk	components\device\nrf51_bitfields.h	6053;"	d
SPIM_ENABLE_ENABLE_Pos	components\device\nrf51_bitfields.h	6052;"	d
SPIM_FREQUENCY_FREQUENCY_K125	components\device\nrf51_bitfields.h	6063;"	d
SPIM_FREQUENCY_FREQUENCY_K250	components\device\nrf51_bitfields.h	6064;"	d
SPIM_FREQUENCY_FREQUENCY_K500	components\device\nrf51_bitfields.h	6065;"	d
SPIM_FREQUENCY_FREQUENCY_M1	components\device\nrf51_bitfields.h	6066;"	d
SPIM_FREQUENCY_FREQUENCY_M2	components\device\nrf51_bitfields.h	6067;"	d
SPIM_FREQUENCY_FREQUENCY_M4	components\device\nrf51_bitfields.h	6068;"	d
SPIM_FREQUENCY_FREQUENCY_M8	components\device\nrf51_bitfields.h	6069;"	d
SPIM_FREQUENCY_FREQUENCY_Msk	components\device\nrf51_bitfields.h	6062;"	d
SPIM_FREQUENCY_FREQUENCY_Pos	components\device\nrf51_bitfields.h	6061;"	d
SPIM_INTENCLR_ENDRX_Clear	components\device\nrf51_bitfields.h	6039;"	d
SPIM_INTENCLR_ENDRX_Disabled	components\device\nrf51_bitfields.h	6037;"	d
SPIM_INTENCLR_ENDRX_Enabled	components\device\nrf51_bitfields.h	6038;"	d
SPIM_INTENCLR_ENDRX_Msk	components\device\nrf51_bitfields.h	6036;"	d
SPIM_INTENCLR_ENDRX_Pos	components\device\nrf51_bitfields.h	6035;"	d
SPIM_INTENCLR_ENDTX_Clear	components\device\nrf51_bitfields.h	6025;"	d
SPIM_INTENCLR_ENDTX_Disabled	components\device\nrf51_bitfields.h	6023;"	d
SPIM_INTENCLR_ENDTX_Enabled	components\device\nrf51_bitfields.h	6024;"	d
SPIM_INTENCLR_ENDTX_Msk	components\device\nrf51_bitfields.h	6022;"	d
SPIM_INTENCLR_ENDTX_Pos	components\device\nrf51_bitfields.h	6021;"	d
SPIM_INTENCLR_END_Clear	components\device\nrf51_bitfields.h	6032;"	d
SPIM_INTENCLR_END_Disabled	components\device\nrf51_bitfields.h	6030;"	d
SPIM_INTENCLR_END_Enabled	components\device\nrf51_bitfields.h	6031;"	d
SPIM_INTENCLR_END_Msk	components\device\nrf51_bitfields.h	6029;"	d
SPIM_INTENCLR_END_Pos	components\device\nrf51_bitfields.h	6028;"	d
SPIM_INTENCLR_STARTED_Clear	components\device\nrf51_bitfields.h	6018;"	d
SPIM_INTENCLR_STARTED_Disabled	components\device\nrf51_bitfields.h	6016;"	d
SPIM_INTENCLR_STARTED_Enabled	components\device\nrf51_bitfields.h	6017;"	d
SPIM_INTENCLR_STARTED_Msk	components\device\nrf51_bitfields.h	6015;"	d
SPIM_INTENCLR_STARTED_Pos	components\device\nrf51_bitfields.h	6014;"	d
SPIM_INTENCLR_STOPPED_Clear	components\device\nrf51_bitfields.h	6046;"	d
SPIM_INTENCLR_STOPPED_Disabled	components\device\nrf51_bitfields.h	6044;"	d
SPIM_INTENCLR_STOPPED_Enabled	components\device\nrf51_bitfields.h	6045;"	d
SPIM_INTENCLR_STOPPED_Msk	components\device\nrf51_bitfields.h	6043;"	d
SPIM_INTENCLR_STOPPED_Pos	components\device\nrf51_bitfields.h	6042;"	d
SPIM_INTENSET_ENDRX_Disabled	components\device\nrf51_bitfields.h	5999;"	d
SPIM_INTENSET_ENDRX_Enabled	components\device\nrf51_bitfields.h	6000;"	d
SPIM_INTENSET_ENDRX_Msk	components\device\nrf51_bitfields.h	5998;"	d
SPIM_INTENSET_ENDRX_Pos	components\device\nrf51_bitfields.h	5997;"	d
SPIM_INTENSET_ENDRX_Set	components\device\nrf51_bitfields.h	6001;"	d
SPIM_INTENSET_ENDTX_Disabled	components\device\nrf51_bitfields.h	5985;"	d
SPIM_INTENSET_ENDTX_Enabled	components\device\nrf51_bitfields.h	5986;"	d
SPIM_INTENSET_ENDTX_Msk	components\device\nrf51_bitfields.h	5984;"	d
SPIM_INTENSET_ENDTX_Pos	components\device\nrf51_bitfields.h	5983;"	d
SPIM_INTENSET_ENDTX_Set	components\device\nrf51_bitfields.h	5987;"	d
SPIM_INTENSET_END_Disabled	components\device\nrf51_bitfields.h	5992;"	d
SPIM_INTENSET_END_Enabled	components\device\nrf51_bitfields.h	5993;"	d
SPIM_INTENSET_END_Msk	components\device\nrf51_bitfields.h	5991;"	d
SPIM_INTENSET_END_Pos	components\device\nrf51_bitfields.h	5990;"	d
SPIM_INTENSET_END_Set	components\device\nrf51_bitfields.h	5994;"	d
SPIM_INTENSET_STARTED_Disabled	components\device\nrf51_bitfields.h	5978;"	d
SPIM_INTENSET_STARTED_Enabled	components\device\nrf51_bitfields.h	5979;"	d
SPIM_INTENSET_STARTED_Msk	components\device\nrf51_bitfields.h	5977;"	d
SPIM_INTENSET_STARTED_Pos	components\device\nrf51_bitfields.h	5976;"	d
SPIM_INTENSET_STARTED_Set	components\device\nrf51_bitfields.h	5980;"	d
SPIM_INTENSET_STOPPED_Disabled	components\device\nrf51_bitfields.h	6006;"	d
SPIM_INTENSET_STOPPED_Enabled	components\device\nrf51_bitfields.h	6007;"	d
SPIM_INTENSET_STOPPED_Msk	components\device\nrf51_bitfields.h	6005;"	d
SPIM_INTENSET_STOPPED_Pos	components\device\nrf51_bitfields.h	6004;"	d
SPIM_INTENSET_STOPPED_Set	components\device\nrf51_bitfields.h	6008;"	d
SPIM_ORC_ORC_Msk	components\device\nrf51_bitfields.h	6139;"	d
SPIM_ORC_ORC_Pos	components\device\nrf51_bitfields.h	6138;"	d
SPIM_POWER_POWER_Disabled	components\device\nrf51_bitfields.h	6147;"	d
SPIM_POWER_POWER_Enabled	components\device\nrf51_bitfields.h	6148;"	d
SPIM_POWER_POWER_Msk	components\device\nrf51_bitfields.h	6146;"	d
SPIM_POWER_POWER_Pos	components\device\nrf51_bitfields.h	6145;"	d
SPIM_RXD_AMOUNT_AMOUNT_Msk	components\device\nrf51_bitfields.h	6090;"	d
SPIM_RXD_AMOUNT_AMOUNT_Pos	components\device\nrf51_bitfields.h	6089;"	d
SPIM_RXD_MAXCNT_MAXCNT_Msk	components\device\nrf51_bitfields.h	6083;"	d
SPIM_RXD_MAXCNT_MAXCNT_Pos	components\device\nrf51_bitfields.h	6082;"	d
SPIM_RXD_PTR_PTR_Msk	components\device\nrf51_bitfields.h	6076;"	d
SPIM_RXD_PTR_PTR_Pos	components\device\nrf51_bitfields.h	6075;"	d
SPIM_SHORTS_END_START_Disabled	components\device\nrf51_bitfields.h	5969;"	d
SPIM_SHORTS_END_START_Enabled	components\device\nrf51_bitfields.h	5970;"	d
SPIM_SHORTS_END_START_Msk	components\device\nrf51_bitfields.h	5968;"	d
SPIM_SHORTS_END_START_Pos	components\device\nrf51_bitfields.h	5967;"	d
SPIM_TXD_AMOUNT_AMOUNT_Msk	components\device\nrf51_bitfields.h	6111;"	d
SPIM_TXD_AMOUNT_AMOUNT_Pos	components\device\nrf51_bitfields.h	6110;"	d
SPIM_TXD_MAXCNT_MAXCNT_Msk	components\device\nrf51_bitfields.h	6104;"	d
SPIM_TXD_MAXCNT_MAXCNT_Pos	components\device\nrf51_bitfields.h	6103;"	d
SPIM_TXD_PTR_PTR_Msk	components\device\nrf51_bitfields.h	6097;"	d
SPIM_TXD_PTR_PTR_Pos	components\device\nrf51_bitfields.h	6096;"	d
SPIS_AMOUNTRX_AMOUNTRX_Msk	components\device\nrf51_bitfields.h	6246;"	d
SPIS_AMOUNTRX_AMOUNTRX_Pos	components\device\nrf51_bitfields.h	6245;"	d
SPIS_AMOUNTTX_AMOUNTTX_Msk	components\device\nrf51_bitfields.h	6260;"	d
SPIS_AMOUNTTX_AMOUNTTX_Pos	components\device\nrf51_bitfields.h	6259;"	d
SPIS_CONFIG_CPHA_Leading	components\device\nrf51_bitfields.h	6274;"	d
SPIS_CONFIG_CPHA_Msk	components\device\nrf51_bitfields.h	6273;"	d
SPIS_CONFIG_CPHA_Pos	components\device\nrf51_bitfields.h	6272;"	d
SPIS_CONFIG_CPHA_Trailing	components\device\nrf51_bitfields.h	6275;"	d
SPIS_CONFIG_CPOL_ActiveHigh	components\device\nrf51_bitfields.h	6268;"	d
SPIS_CONFIG_CPOL_ActiveLow	components\device\nrf51_bitfields.h	6269;"	d
SPIS_CONFIG_CPOL_Msk	components\device\nrf51_bitfields.h	6267;"	d
SPIS_CONFIG_CPOL_Pos	components\device\nrf51_bitfields.h	6266;"	d
SPIS_CONFIG_ORDER_LsbFirst	components\device\nrf51_bitfields.h	6281;"	d
SPIS_CONFIG_ORDER_MsbFirst	components\device\nrf51_bitfields.h	6280;"	d
SPIS_CONFIG_ORDER_Msk	components\device\nrf51_bitfields.h	6279;"	d
SPIS_CONFIG_ORDER_Pos	components\device\nrf51_bitfields.h	6278;"	d
SPIS_DEF_DEF_Msk	components\device\nrf51_bitfields.h	6288;"	d
SPIS_DEF_DEF_Pos	components\device\nrf51_bitfields.h	6287;"	d
SPIS_ENABLE_ENABLE_Disabled	components\device\nrf51_bitfields.h	6231;"	d
SPIS_ENABLE_ENABLE_Enabled	components\device\nrf51_bitfields.h	6232;"	d
SPIS_ENABLE_ENABLE_Msk	components\device\nrf51_bitfields.h	6230;"	d
SPIS_ENABLE_ENABLE_Pos	components\device\nrf51_bitfields.h	6229;"	d
SPIS_INTENCLR_ACQUIRED_Clear	components\device\nrf51_bitfields.h	6188;"	d
SPIS_INTENCLR_ACQUIRED_Disabled	components\device\nrf51_bitfields.h	6186;"	d
SPIS_INTENCLR_ACQUIRED_Enabled	components\device\nrf51_bitfields.h	6187;"	d
SPIS_INTENCLR_ACQUIRED_Msk	components\device\nrf51_bitfields.h	6185;"	d
SPIS_INTENCLR_ACQUIRED_Pos	components\device\nrf51_bitfields.h	6184;"	d
SPIS_INTENCLR_END_Clear	components\device\nrf51_bitfields.h	6195;"	d
SPIS_INTENCLR_END_Disabled	components\device\nrf51_bitfields.h	6193;"	d
SPIS_INTENCLR_END_Enabled	components\device\nrf51_bitfields.h	6194;"	d
SPIS_INTENCLR_END_Msk	components\device\nrf51_bitfields.h	6192;"	d
SPIS_INTENCLR_END_Pos	components\device\nrf51_bitfields.h	6191;"	d
SPIS_INTENSET_ACQUIRED_Disabled	components\device\nrf51_bitfields.h	6169;"	d
SPIS_INTENSET_ACQUIRED_Enabled	components\device\nrf51_bitfields.h	6170;"	d
SPIS_INTENSET_ACQUIRED_Msk	components\device\nrf51_bitfields.h	6168;"	d
SPIS_INTENSET_ACQUIRED_Pos	components\device\nrf51_bitfields.h	6167;"	d
SPIS_INTENSET_ACQUIRED_Set	components\device\nrf51_bitfields.h	6171;"	d
SPIS_INTENSET_END_Disabled	components\device\nrf51_bitfields.h	6176;"	d
SPIS_INTENSET_END_Enabled	components\device\nrf51_bitfields.h	6177;"	d
SPIS_INTENSET_END_Msk	components\device\nrf51_bitfields.h	6175;"	d
SPIS_INTENSET_END_Pos	components\device\nrf51_bitfields.h	6174;"	d
SPIS_INTENSET_END_Set	components\device\nrf51_bitfields.h	6178;"	d
SPIS_MAXRX_MAXRX_Msk	components\device\nrf51_bitfields.h	6239;"	d
SPIS_MAXRX_MAXRX_Pos	components\device\nrf51_bitfields.h	6238;"	d
SPIS_MAXTX_MAXTX_Msk	components\device\nrf51_bitfields.h	6253;"	d
SPIS_MAXTX_MAXTX_Pos	components\device\nrf51_bitfields.h	6252;"	d
SPIS_ORC_ORC_Msk	components\device\nrf51_bitfields.h	6295;"	d
SPIS_ORC_ORC_Pos	components\device\nrf51_bitfields.h	6294;"	d
SPIS_POWER_POWER_Disabled	components\device\nrf51_bitfields.h	6303;"	d
SPIS_POWER_POWER_Enabled	components\device\nrf51_bitfields.h	6304;"	d
SPIS_POWER_POWER_Msk	components\device\nrf51_bitfields.h	6302;"	d
SPIS_POWER_POWER_Pos	components\device\nrf51_bitfields.h	6301;"	d
SPIS_SEMSTAT_SEMSTAT_CPU	components\device\nrf51_bitfields.h	6204;"	d
SPIS_SEMSTAT_SEMSTAT_CPUPending	components\device\nrf51_bitfields.h	6206;"	d
SPIS_SEMSTAT_SEMSTAT_Free	components\device\nrf51_bitfields.h	6203;"	d
SPIS_SEMSTAT_SEMSTAT_Msk	components\device\nrf51_bitfields.h	6202;"	d
SPIS_SEMSTAT_SEMSTAT_Pos	components\device\nrf51_bitfields.h	6201;"	d
SPIS_SEMSTAT_SEMSTAT_SPIS	components\device\nrf51_bitfields.h	6205;"	d
SPIS_SHORTS_END_ACQUIRE_Disabled	components\device\nrf51_bitfields.h	6160;"	d
SPIS_SHORTS_END_ACQUIRE_Enabled	components\device\nrf51_bitfields.h	6161;"	d
SPIS_SHORTS_END_ACQUIRE_Msk	components\device\nrf51_bitfields.h	6159;"	d
SPIS_SHORTS_END_ACQUIRE_Pos	components\device\nrf51_bitfields.h	6158;"	d
SPIS_STATUS_OVERFLOW_Clear	components\device\nrf51_bitfields.h	6216;"	d
SPIS_STATUS_OVERFLOW_Msk	components\device\nrf51_bitfields.h	6213;"	d
SPIS_STATUS_OVERFLOW_NotPresent	components\device\nrf51_bitfields.h	6214;"	d
SPIS_STATUS_OVERFLOW_Pos	components\device\nrf51_bitfields.h	6212;"	d
SPIS_STATUS_OVERFLOW_Present	components\device\nrf51_bitfields.h	6215;"	d
SPIS_STATUS_OVERREAD_Clear	components\device\nrf51_bitfields.h	6223;"	d
SPIS_STATUS_OVERREAD_Msk	components\device\nrf51_bitfields.h	6220;"	d
SPIS_STATUS_OVERREAD_NotPresent	components\device\nrf51_bitfields.h	6221;"	d
SPIS_STATUS_OVERREAD_Pos	components\device\nrf51_bitfields.h	6219;"	d
SPIS_STATUS_OVERREAD_Present	components\device\nrf51_bitfields.h	6222;"	d
SPI_CONFIG_CPHA_Leading	components\device\nrf51_bitfields.h	5941;"	d
SPI_CONFIG_CPHA_Msk	components\device\nrf51_bitfields.h	5940;"	d
SPI_CONFIG_CPHA_Pos	components\device\nrf51_bitfields.h	5939;"	d
SPI_CONFIG_CPHA_Trailing	components\device\nrf51_bitfields.h	5942;"	d
SPI_CONFIG_CPOL_ActiveHigh	components\device\nrf51_bitfields.h	5935;"	d
SPI_CONFIG_CPOL_ActiveLow	components\device\nrf51_bitfields.h	5936;"	d
SPI_CONFIG_CPOL_Msk	components\device\nrf51_bitfields.h	5934;"	d
SPI_CONFIG_CPOL_Pos	components\device\nrf51_bitfields.h	5933;"	d
SPI_CONFIG_ORDER_LsbFirst	components\device\nrf51_bitfields.h	5948;"	d
SPI_CONFIG_ORDER_MsbFirst	components\device\nrf51_bitfields.h	5947;"	d
SPI_CONFIG_ORDER_Msk	components\device\nrf51_bitfields.h	5946;"	d
SPI_CONFIG_ORDER_Pos	components\device\nrf51_bitfields.h	5945;"	d
SPI_ENABLE_ENABLE_Disabled	components\device\nrf51_bitfields.h	5898;"	d
SPI_ENABLE_ENABLE_Enabled	components\device\nrf51_bitfields.h	5899;"	d
SPI_ENABLE_ENABLE_Msk	components\device\nrf51_bitfields.h	5897;"	d
SPI_ENABLE_ENABLE_Pos	components\device\nrf51_bitfields.h	5896;"	d
SPI_FREQUENCY_FREQUENCY_K125	components\device\nrf51_bitfields.h	5921;"	d
SPI_FREQUENCY_FREQUENCY_K250	components\device\nrf51_bitfields.h	5922;"	d
SPI_FREQUENCY_FREQUENCY_K500	components\device\nrf51_bitfields.h	5923;"	d
SPI_FREQUENCY_FREQUENCY_M1	components\device\nrf51_bitfields.h	5924;"	d
SPI_FREQUENCY_FREQUENCY_M2	components\device\nrf51_bitfields.h	5925;"	d
SPI_FREQUENCY_FREQUENCY_M4	components\device\nrf51_bitfields.h	5926;"	d
SPI_FREQUENCY_FREQUENCY_M8	components\device\nrf51_bitfields.h	5927;"	d
SPI_FREQUENCY_FREQUENCY_Msk	components\device\nrf51_bitfields.h	5920;"	d
SPI_FREQUENCY_FREQUENCY_Pos	components\device\nrf51_bitfields.h	5919;"	d
SPI_INTENCLR_READY_Clear	components\device\nrf51_bitfields.h	5890;"	d
SPI_INTENCLR_READY_Disabled	components\device\nrf51_bitfields.h	5888;"	d
SPI_INTENCLR_READY_Enabled	components\device\nrf51_bitfields.h	5889;"	d
SPI_INTENCLR_READY_Msk	components\device\nrf51_bitfields.h	5887;"	d
SPI_INTENCLR_READY_Pos	components\device\nrf51_bitfields.h	5886;"	d
SPI_INTENSET_READY_Disabled	components\device\nrf51_bitfields.h	5878;"	d
SPI_INTENSET_READY_Enabled	components\device\nrf51_bitfields.h	5879;"	d
SPI_INTENSET_READY_Msk	components\device\nrf51_bitfields.h	5877;"	d
SPI_INTENSET_READY_Pos	components\device\nrf51_bitfields.h	5876;"	d
SPI_INTENSET_READY_Set	components\device\nrf51_bitfields.h	5880;"	d
SPI_POWER_POWER_Disabled	components\device\nrf51_bitfields.h	5956;"	d
SPI_POWER_POWER_Enabled	components\device\nrf51_bitfields.h	5957;"	d
SPI_POWER_POWER_Msk	components\device\nrf51_bitfields.h	5955;"	d
SPI_POWER_POWER_Pos	components\device\nrf51_bitfields.h	5954;"	d
SPI_RXD_RXD_Msk	components\device\nrf51_bitfields.h	5906;"	d
SPI_RXD_RXD_Pos	components\device\nrf51_bitfields.h	5905;"	d
SPI_TXD_TXD_Msk	components\device\nrf51_bitfields.h	5913;"	d
SPI_TXD_TXD_Pos	components\device\nrf51_bitfields.h	5912;"	d
TEMP_INTENCLR_DATARDY_Clear	components\device\nrf51_bitfields.h	6328;"	d
TEMP_INTENCLR_DATARDY_Disabled	components\device\nrf51_bitfields.h	6326;"	d
TEMP_INTENCLR_DATARDY_Enabled	components\device\nrf51_bitfields.h	6327;"	d
TEMP_INTENCLR_DATARDY_Msk	components\device\nrf51_bitfields.h	6325;"	d
TEMP_INTENCLR_DATARDY_Pos	components\device\nrf51_bitfields.h	6324;"	d
TEMP_INTENSET_DATARDY_Disabled	components\device\nrf51_bitfields.h	6316;"	d
TEMP_INTENSET_DATARDY_Enabled	components\device\nrf51_bitfields.h	6317;"	d
TEMP_INTENSET_DATARDY_Msk	components\device\nrf51_bitfields.h	6315;"	d
TEMP_INTENSET_DATARDY_Pos	components\device\nrf51_bitfields.h	6314;"	d
TEMP_INTENSET_DATARDY_Set	components\device\nrf51_bitfields.h	6318;"	d
TEMP_POWER_POWER_Disabled	components\device\nrf51_bitfields.h	6336;"	d
TEMP_POWER_POWER_Enabled	components\device\nrf51_bitfields.h	6337;"	d
TEMP_POWER_POWER_Msk	components\device\nrf51_bitfields.h	6335;"	d
TEMP_POWER_POWER_Pos	components\device\nrf51_bitfields.h	6334;"	d
TIMER_BITMODE_BITMODE_08Bit	components\device\nrf51_bitfields.h	6472;"	d
TIMER_BITMODE_BITMODE_16Bit	components\device\nrf51_bitfields.h	6471;"	d
TIMER_BITMODE_BITMODE_24Bit	components\device\nrf51_bitfields.h	6473;"	d
TIMER_BITMODE_BITMODE_32Bit	components\device\nrf51_bitfields.h	6474;"	d
TIMER_BITMODE_BITMODE_Msk	components\device\nrf51_bitfields.h	6470;"	d
TIMER_BITMODE_BITMODE_Pos	components\device\nrf51_bitfields.h	6469;"	d
TIMER_INTENCLR_COMPARE0_Clear	components\device\nrf51_bitfields.h	6454;"	d
TIMER_INTENCLR_COMPARE0_Disabled	components\device\nrf51_bitfields.h	6452;"	d
TIMER_INTENCLR_COMPARE0_Enabled	components\device\nrf51_bitfields.h	6453;"	d
TIMER_INTENCLR_COMPARE0_Msk	components\device\nrf51_bitfields.h	6451;"	d
TIMER_INTENCLR_COMPARE0_Pos	components\device\nrf51_bitfields.h	6450;"	d
TIMER_INTENCLR_COMPARE1_Clear	components\device\nrf51_bitfields.h	6447;"	d
TIMER_INTENCLR_COMPARE1_Disabled	components\device\nrf51_bitfields.h	6445;"	d
TIMER_INTENCLR_COMPARE1_Enabled	components\device\nrf51_bitfields.h	6446;"	d
TIMER_INTENCLR_COMPARE1_Msk	components\device\nrf51_bitfields.h	6444;"	d
TIMER_INTENCLR_COMPARE1_Pos	components\device\nrf51_bitfields.h	6443;"	d
TIMER_INTENCLR_COMPARE2_Clear	components\device\nrf51_bitfields.h	6440;"	d
TIMER_INTENCLR_COMPARE2_Disabled	components\device\nrf51_bitfields.h	6438;"	d
TIMER_INTENCLR_COMPARE2_Enabled	components\device\nrf51_bitfields.h	6439;"	d
TIMER_INTENCLR_COMPARE2_Msk	components\device\nrf51_bitfields.h	6437;"	d
TIMER_INTENCLR_COMPARE2_Pos	components\device\nrf51_bitfields.h	6436;"	d
TIMER_INTENCLR_COMPARE3_Clear	components\device\nrf51_bitfields.h	6433;"	d
TIMER_INTENCLR_COMPARE3_Disabled	components\device\nrf51_bitfields.h	6431;"	d
TIMER_INTENCLR_COMPARE3_Enabled	components\device\nrf51_bitfields.h	6432;"	d
TIMER_INTENCLR_COMPARE3_Msk	components\device\nrf51_bitfields.h	6430;"	d
TIMER_INTENCLR_COMPARE3_Pos	components\device\nrf51_bitfields.h	6429;"	d
TIMER_INTENSET_COMPARE0_Disabled	components\device\nrf51_bitfields.h	6421;"	d
TIMER_INTENSET_COMPARE0_Enabled	components\device\nrf51_bitfields.h	6422;"	d
TIMER_INTENSET_COMPARE0_Msk	components\device\nrf51_bitfields.h	6420;"	d
TIMER_INTENSET_COMPARE0_Pos	components\device\nrf51_bitfields.h	6419;"	d
TIMER_INTENSET_COMPARE0_Set	components\device\nrf51_bitfields.h	6423;"	d
TIMER_INTENSET_COMPARE1_Disabled	components\device\nrf51_bitfields.h	6414;"	d
TIMER_INTENSET_COMPARE1_Enabled	components\device\nrf51_bitfields.h	6415;"	d
TIMER_INTENSET_COMPARE1_Msk	components\device\nrf51_bitfields.h	6413;"	d
TIMER_INTENSET_COMPARE1_Pos	components\device\nrf51_bitfields.h	6412;"	d
TIMER_INTENSET_COMPARE1_Set	components\device\nrf51_bitfields.h	6416;"	d
TIMER_INTENSET_COMPARE2_Disabled	components\device\nrf51_bitfields.h	6407;"	d
TIMER_INTENSET_COMPARE2_Enabled	components\device\nrf51_bitfields.h	6408;"	d
TIMER_INTENSET_COMPARE2_Msk	components\device\nrf51_bitfields.h	6406;"	d
TIMER_INTENSET_COMPARE2_Pos	components\device\nrf51_bitfields.h	6405;"	d
TIMER_INTENSET_COMPARE2_Set	components\device\nrf51_bitfields.h	6409;"	d
TIMER_INTENSET_COMPARE3_Disabled	components\device\nrf51_bitfields.h	6400;"	d
TIMER_INTENSET_COMPARE3_Enabled	components\device\nrf51_bitfields.h	6401;"	d
TIMER_INTENSET_COMPARE3_Msk	components\device\nrf51_bitfields.h	6399;"	d
TIMER_INTENSET_COMPARE3_Pos	components\device\nrf51_bitfields.h	6398;"	d
TIMER_INTENSET_COMPARE3_Set	components\device\nrf51_bitfields.h	6402;"	d
TIMER_MODE_MODE_Counter	components\device\nrf51_bitfields.h	6463;"	d
TIMER_MODE_MODE_Msk	components\device\nrf51_bitfields.h	6461;"	d
TIMER_MODE_MODE_Pos	components\device\nrf51_bitfields.h	6460;"	d
TIMER_MODE_MODE_Timer	components\device\nrf51_bitfields.h	6462;"	d
TIMER_POWER_POWER_Disabled	components\device\nrf51_bitfields.h	6489;"	d
TIMER_POWER_POWER_Enabled	components\device\nrf51_bitfields.h	6490;"	d
TIMER_POWER_POWER_Msk	components\device\nrf51_bitfields.h	6488;"	d
TIMER_POWER_POWER_Pos	components\device\nrf51_bitfields.h	6487;"	d
TIMER_PRESCALER_PRESCALER_Msk	components\device\nrf51_bitfields.h	6481;"	d
TIMER_PRESCALER_PRESCALER_Pos	components\device\nrf51_bitfields.h	6480;"	d
TIMER_SHORTS_COMPARE0_CLEAR_Disabled	components\device\nrf51_bitfields.h	6391;"	d
TIMER_SHORTS_COMPARE0_CLEAR_Enabled	components\device\nrf51_bitfields.h	6392;"	d
TIMER_SHORTS_COMPARE0_CLEAR_Msk	components\device\nrf51_bitfields.h	6390;"	d
TIMER_SHORTS_COMPARE0_CLEAR_Pos	components\device\nrf51_bitfields.h	6389;"	d
TIMER_SHORTS_COMPARE0_STOP_Disabled	components\device\nrf51_bitfields.h	6367;"	d
TIMER_SHORTS_COMPARE0_STOP_Enabled	components\device\nrf51_bitfields.h	6368;"	d
TIMER_SHORTS_COMPARE0_STOP_Msk	components\device\nrf51_bitfields.h	6366;"	d
TIMER_SHORTS_COMPARE0_STOP_Pos	components\device\nrf51_bitfields.h	6365;"	d
TIMER_SHORTS_COMPARE1_CLEAR_Disabled	components\device\nrf51_bitfields.h	6385;"	d
TIMER_SHORTS_COMPARE1_CLEAR_Enabled	components\device\nrf51_bitfields.h	6386;"	d
TIMER_SHORTS_COMPARE1_CLEAR_Msk	components\device\nrf51_bitfields.h	6384;"	d
TIMER_SHORTS_COMPARE1_CLEAR_Pos	components\device\nrf51_bitfields.h	6383;"	d
TIMER_SHORTS_COMPARE1_STOP_Disabled	components\device\nrf51_bitfields.h	6361;"	d
TIMER_SHORTS_COMPARE1_STOP_Enabled	components\device\nrf51_bitfields.h	6362;"	d
TIMER_SHORTS_COMPARE1_STOP_Msk	components\device\nrf51_bitfields.h	6360;"	d
TIMER_SHORTS_COMPARE1_STOP_Pos	components\device\nrf51_bitfields.h	6359;"	d
TIMER_SHORTS_COMPARE2_CLEAR_Disabled	components\device\nrf51_bitfields.h	6379;"	d
TIMER_SHORTS_COMPARE2_CLEAR_Enabled	components\device\nrf51_bitfields.h	6380;"	d
TIMER_SHORTS_COMPARE2_CLEAR_Msk	components\device\nrf51_bitfields.h	6378;"	d
TIMER_SHORTS_COMPARE2_CLEAR_Pos	components\device\nrf51_bitfields.h	6377;"	d
TIMER_SHORTS_COMPARE2_STOP_Disabled	components\device\nrf51_bitfields.h	6355;"	d
TIMER_SHORTS_COMPARE2_STOP_Enabled	components\device\nrf51_bitfields.h	6356;"	d
TIMER_SHORTS_COMPARE2_STOP_Msk	components\device\nrf51_bitfields.h	6354;"	d
TIMER_SHORTS_COMPARE2_STOP_Pos	components\device\nrf51_bitfields.h	6353;"	d
TIMER_SHORTS_COMPARE3_CLEAR_Disabled	components\device\nrf51_bitfields.h	6373;"	d
TIMER_SHORTS_COMPARE3_CLEAR_Enabled	components\device\nrf51_bitfields.h	6374;"	d
TIMER_SHORTS_COMPARE3_CLEAR_Msk	components\device\nrf51_bitfields.h	6372;"	d
TIMER_SHORTS_COMPARE3_CLEAR_Pos	components\device\nrf51_bitfields.h	6371;"	d
TIMER_SHORTS_COMPARE3_STOP_Disabled	components\device\nrf51_bitfields.h	6349;"	d
TIMER_SHORTS_COMPARE3_STOP_Enabled	components\device\nrf51_bitfields.h	6350;"	d
TIMER_SHORTS_COMPARE3_STOP_Msk	components\device\nrf51_bitfields.h	6348;"	d
TIMER_SHORTS_COMPARE3_STOP_Pos	components\device\nrf51_bitfields.h	6347;"	d
TWI_ADDRESS_ADDRESS_Msk	components\device\nrf51_bitfields.h	6663;"	d
TWI_ADDRESS_ADDRESS_Pos	components\device\nrf51_bitfields.h	6662;"	d
TWI_ENABLE_ENABLE_Disabled	components\device\nrf51_bitfields.h	6631;"	d
TWI_ENABLE_ENABLE_Enabled	components\device\nrf51_bitfields.h	6632;"	d
TWI_ENABLE_ENABLE_Msk	components\device\nrf51_bitfields.h	6630;"	d
TWI_ENABLE_ENABLE_Pos	components\device\nrf51_bitfields.h	6629;"	d
TWI_ERRORSRC_ANACK_Clear	components\device\nrf51_bitfields.h	6616;"	d
TWI_ERRORSRC_ANACK_Msk	components\device\nrf51_bitfields.h	6613;"	d
TWI_ERRORSRC_ANACK_NotPresent	components\device\nrf51_bitfields.h	6614;"	d
TWI_ERRORSRC_ANACK_Pos	components\device\nrf51_bitfields.h	6612;"	d
TWI_ERRORSRC_ANACK_Present	components\device\nrf51_bitfields.h	6615;"	d
TWI_ERRORSRC_DNACK_Clear	components\device\nrf51_bitfields.h	6609;"	d
TWI_ERRORSRC_DNACK_Msk	components\device\nrf51_bitfields.h	6606;"	d
TWI_ERRORSRC_DNACK_NotPresent	components\device\nrf51_bitfields.h	6607;"	d
TWI_ERRORSRC_DNACK_Pos	components\device\nrf51_bitfields.h	6605;"	d
TWI_ERRORSRC_DNACK_Present	components\device\nrf51_bitfields.h	6608;"	d
TWI_ERRORSRC_OVERRUN_Clear	components\device\nrf51_bitfields.h	6623;"	d
TWI_ERRORSRC_OVERRUN_Msk	components\device\nrf51_bitfields.h	6620;"	d
TWI_ERRORSRC_OVERRUN_NotPresent	components\device\nrf51_bitfields.h	6621;"	d
TWI_ERRORSRC_OVERRUN_Pos	components\device\nrf51_bitfields.h	6619;"	d
TWI_ERRORSRC_OVERRUN_Present	components\device\nrf51_bitfields.h	6622;"	d
TWI_FREQUENCY_FREQUENCY_K100	components\device\nrf51_bitfields.h	6654;"	d
TWI_FREQUENCY_FREQUENCY_K250	components\device\nrf51_bitfields.h	6655;"	d
TWI_FREQUENCY_FREQUENCY_K400	components\device\nrf51_bitfields.h	6656;"	d
TWI_FREQUENCY_FREQUENCY_Msk	components\device\nrf51_bitfields.h	6653;"	d
TWI_FREQUENCY_FREQUENCY_Pos	components\device\nrf51_bitfields.h	6652;"	d
TWI_INTENCLR_BB_Clear	components\device\nrf51_bitfields.h	6571;"	d
TWI_INTENCLR_BB_Disabled	components\device\nrf51_bitfields.h	6569;"	d
TWI_INTENCLR_BB_Enabled	components\device\nrf51_bitfields.h	6570;"	d
TWI_INTENCLR_BB_Msk	components\device\nrf51_bitfields.h	6568;"	d
TWI_INTENCLR_BB_Pos	components\device\nrf51_bitfields.h	6567;"	d
TWI_INTENCLR_ERROR_Clear	components\device\nrf51_bitfields.h	6578;"	d
TWI_INTENCLR_ERROR_Disabled	components\device\nrf51_bitfields.h	6576;"	d
TWI_INTENCLR_ERROR_Enabled	components\device\nrf51_bitfields.h	6577;"	d
TWI_INTENCLR_ERROR_Msk	components\device\nrf51_bitfields.h	6575;"	d
TWI_INTENCLR_ERROR_Pos	components\device\nrf51_bitfields.h	6574;"	d
TWI_INTENCLR_RXDREADY_Clear	components\device\nrf51_bitfields.h	6592;"	d
TWI_INTENCLR_RXDREADY_Disabled	components\device\nrf51_bitfields.h	6590;"	d
TWI_INTENCLR_RXDREADY_Enabled	components\device\nrf51_bitfields.h	6591;"	d
TWI_INTENCLR_RXDREADY_Msk	components\device\nrf51_bitfields.h	6589;"	d
TWI_INTENCLR_RXDREADY_Pos	components\device\nrf51_bitfields.h	6588;"	d
TWI_INTENCLR_STOPPED_Clear	components\device\nrf51_bitfields.h	6599;"	d
TWI_INTENCLR_STOPPED_Disabled	components\device\nrf51_bitfields.h	6597;"	d
TWI_INTENCLR_STOPPED_Enabled	components\device\nrf51_bitfields.h	6598;"	d
TWI_INTENCLR_STOPPED_Msk	components\device\nrf51_bitfields.h	6596;"	d
TWI_INTENCLR_STOPPED_Pos	components\device\nrf51_bitfields.h	6595;"	d
TWI_INTENCLR_SUSPENDED_Clear	components\device\nrf51_bitfields.h	6564;"	d
TWI_INTENCLR_SUSPENDED_Disabled	components\device\nrf51_bitfields.h	6562;"	d
TWI_INTENCLR_SUSPENDED_Enabled	components\device\nrf51_bitfields.h	6563;"	d
TWI_INTENCLR_SUSPENDED_Msk	components\device\nrf51_bitfields.h	6561;"	d
TWI_INTENCLR_SUSPENDED_Pos	components\device\nrf51_bitfields.h	6560;"	d
TWI_INTENCLR_TXDSENT_Clear	components\device\nrf51_bitfields.h	6585;"	d
TWI_INTENCLR_TXDSENT_Disabled	components\device\nrf51_bitfields.h	6583;"	d
TWI_INTENCLR_TXDSENT_Enabled	components\device\nrf51_bitfields.h	6584;"	d
TWI_INTENCLR_TXDSENT_Msk	components\device\nrf51_bitfields.h	6582;"	d
TWI_INTENCLR_TXDSENT_Pos	components\device\nrf51_bitfields.h	6581;"	d
TWI_INTENSET_BB_Disabled	components\device\nrf51_bitfields.h	6524;"	d
TWI_INTENSET_BB_Enabled	components\device\nrf51_bitfields.h	6525;"	d
TWI_INTENSET_BB_Msk	components\device\nrf51_bitfields.h	6523;"	d
TWI_INTENSET_BB_Pos	components\device\nrf51_bitfields.h	6522;"	d
TWI_INTENSET_BB_Set	components\device\nrf51_bitfields.h	6526;"	d
TWI_INTENSET_ERROR_Disabled	components\device\nrf51_bitfields.h	6531;"	d
TWI_INTENSET_ERROR_Enabled	components\device\nrf51_bitfields.h	6532;"	d
TWI_INTENSET_ERROR_Msk	components\device\nrf51_bitfields.h	6530;"	d
TWI_INTENSET_ERROR_Pos	components\device\nrf51_bitfields.h	6529;"	d
TWI_INTENSET_ERROR_Set	components\device\nrf51_bitfields.h	6533;"	d
TWI_INTENSET_RXDREADY_Disabled	components\device\nrf51_bitfields.h	6545;"	d
TWI_INTENSET_RXDREADY_Enabled	components\device\nrf51_bitfields.h	6546;"	d
TWI_INTENSET_RXDREADY_Msk	components\device\nrf51_bitfields.h	6544;"	d
TWI_INTENSET_RXDREADY_Pos	components\device\nrf51_bitfields.h	6543;"	d
TWI_INTENSET_RXDREADY_Set	components\device\nrf51_bitfields.h	6547;"	d
TWI_INTENSET_STOPPED_Disabled	components\device\nrf51_bitfields.h	6552;"	d
TWI_INTENSET_STOPPED_Enabled	components\device\nrf51_bitfields.h	6553;"	d
TWI_INTENSET_STOPPED_Msk	components\device\nrf51_bitfields.h	6551;"	d
TWI_INTENSET_STOPPED_Pos	components\device\nrf51_bitfields.h	6550;"	d
TWI_INTENSET_STOPPED_Set	components\device\nrf51_bitfields.h	6554;"	d
TWI_INTENSET_SUSPENDED_Disabled	components\device\nrf51_bitfields.h	6517;"	d
TWI_INTENSET_SUSPENDED_Enabled	components\device\nrf51_bitfields.h	6518;"	d
TWI_INTENSET_SUSPENDED_Msk	components\device\nrf51_bitfields.h	6516;"	d
TWI_INTENSET_SUSPENDED_Pos	components\device\nrf51_bitfields.h	6515;"	d
TWI_INTENSET_SUSPENDED_Set	components\device\nrf51_bitfields.h	6519;"	d
TWI_INTENSET_TXDSENT_Disabled	components\device\nrf51_bitfields.h	6538;"	d
TWI_INTENSET_TXDSENT_Enabled	components\device\nrf51_bitfields.h	6539;"	d
TWI_INTENSET_TXDSENT_Msk	components\device\nrf51_bitfields.h	6537;"	d
TWI_INTENSET_TXDSENT_Pos	components\device\nrf51_bitfields.h	6536;"	d
TWI_INTENSET_TXDSENT_Set	components\device\nrf51_bitfields.h	6540;"	d
TWI_POWER_POWER_Disabled	components\device\nrf51_bitfields.h	6671;"	d
TWI_POWER_POWER_Enabled	components\device\nrf51_bitfields.h	6672;"	d
TWI_POWER_POWER_Msk	components\device\nrf51_bitfields.h	6670;"	d
TWI_POWER_POWER_Pos	components\device\nrf51_bitfields.h	6669;"	d
TWI_RXD_RXD_Msk	components\device\nrf51_bitfields.h	6639;"	d
TWI_RXD_RXD_Pos	components\device\nrf51_bitfields.h	6638;"	d
TWI_SHORTS_BB_STOP_Disabled	components\device\nrf51_bitfields.h	6502;"	d
TWI_SHORTS_BB_STOP_Enabled	components\device\nrf51_bitfields.h	6503;"	d
TWI_SHORTS_BB_STOP_Msk	components\device\nrf51_bitfields.h	6501;"	d
TWI_SHORTS_BB_STOP_Pos	components\device\nrf51_bitfields.h	6500;"	d
TWI_SHORTS_BB_SUSPEND_Disabled	components\device\nrf51_bitfields.h	6508;"	d
TWI_SHORTS_BB_SUSPEND_Enabled	components\device\nrf51_bitfields.h	6509;"	d
TWI_SHORTS_BB_SUSPEND_Msk	components\device\nrf51_bitfields.h	6507;"	d
TWI_SHORTS_BB_SUSPEND_Pos	components\device\nrf51_bitfields.h	6506;"	d
TWI_TXD_TXD_Msk	components\device\nrf51_bitfields.h	6646;"	d
TWI_TXD_TXD_Pos	components\device\nrf51_bitfields.h	6645;"	d
UART_BAUDRATE_BAUDRATE_Baud115200	components\device\nrf51_bitfields.h	6853;"	d
UART_BAUDRATE_BAUDRATE_Baud1200	components\device\nrf51_bitfields.h	6843;"	d
UART_BAUDRATE_BAUDRATE_Baud14400	components\device\nrf51_bitfields.h	6847;"	d
UART_BAUDRATE_BAUDRATE_Baud19200	components\device\nrf51_bitfields.h	6848;"	d
UART_BAUDRATE_BAUDRATE_Baud1M	components\device\nrf51_bitfields.h	6858;"	d
UART_BAUDRATE_BAUDRATE_Baud230400	components\device\nrf51_bitfields.h	6854;"	d
UART_BAUDRATE_BAUDRATE_Baud2400	components\device\nrf51_bitfields.h	6844;"	d
UART_BAUDRATE_BAUDRATE_Baud250000	components\device\nrf51_bitfields.h	6855;"	d
UART_BAUDRATE_BAUDRATE_Baud28800	components\device\nrf51_bitfields.h	6849;"	d
UART_BAUDRATE_BAUDRATE_Baud38400	components\device\nrf51_bitfields.h	6850;"	d
UART_BAUDRATE_BAUDRATE_Baud460800	components\device\nrf51_bitfields.h	6856;"	d
UART_BAUDRATE_BAUDRATE_Baud4800	components\device\nrf51_bitfields.h	6845;"	d
UART_BAUDRATE_BAUDRATE_Baud57600	components\device\nrf51_bitfields.h	6851;"	d
UART_BAUDRATE_BAUDRATE_Baud76800	components\device\nrf51_bitfields.h	6852;"	d
UART_BAUDRATE_BAUDRATE_Baud921600	components\device\nrf51_bitfields.h	6857;"	d
UART_BAUDRATE_BAUDRATE_Baud9600	components\device\nrf51_bitfields.h	6846;"	d
UART_BAUDRATE_BAUDRATE_Msk	components\device\nrf51_bitfields.h	6842;"	d
UART_BAUDRATE_BAUDRATE_Pos	components\device\nrf51_bitfields.h	6841;"	d
UART_CONFIG_HWFC_Disabled	components\device\nrf51_bitfields.h	6872;"	d
UART_CONFIG_HWFC_Enabled	components\device\nrf51_bitfields.h	6873;"	d
UART_CONFIG_HWFC_Msk	components\device\nrf51_bitfields.h	6871;"	d
UART_CONFIG_HWFC_Pos	components\device\nrf51_bitfields.h	6870;"	d
UART_CONFIG_PARITY_Excluded	components\device\nrf51_bitfields.h	6866;"	d
UART_CONFIG_PARITY_Included	components\device\nrf51_bitfields.h	6867;"	d
UART_CONFIG_PARITY_Msk	components\device\nrf51_bitfields.h	6865;"	d
UART_CONFIG_PARITY_Pos	components\device\nrf51_bitfields.h	6864;"	d
UART_ENABLE_ENABLE_Disabled	components\device\nrf51_bitfields.h	6820;"	d
UART_ENABLE_ENABLE_Enabled	components\device\nrf51_bitfields.h	6821;"	d
UART_ENABLE_ENABLE_Msk	components\device\nrf51_bitfields.h	6819;"	d
UART_ENABLE_ENABLE_Pos	components\device\nrf51_bitfields.h	6818;"	d
UART_ERRORSRC_BREAK_Clear	components\device\nrf51_bitfields.h	6791;"	d
UART_ERRORSRC_BREAK_Msk	components\device\nrf51_bitfields.h	6788;"	d
UART_ERRORSRC_BREAK_NotPresent	components\device\nrf51_bitfields.h	6789;"	d
UART_ERRORSRC_BREAK_Pos	components\device\nrf51_bitfields.h	6787;"	d
UART_ERRORSRC_BREAK_Present	components\device\nrf51_bitfields.h	6790;"	d
UART_ERRORSRC_FRAMING_Clear	components\device\nrf51_bitfields.h	6798;"	d
UART_ERRORSRC_FRAMING_Msk	components\device\nrf51_bitfields.h	6795;"	d
UART_ERRORSRC_FRAMING_NotPresent	components\device\nrf51_bitfields.h	6796;"	d
UART_ERRORSRC_FRAMING_Pos	components\device\nrf51_bitfields.h	6794;"	d
UART_ERRORSRC_FRAMING_Present	components\device\nrf51_bitfields.h	6797;"	d
UART_ERRORSRC_OVERRUN_Clear	components\device\nrf51_bitfields.h	6812;"	d
UART_ERRORSRC_OVERRUN_Msk	components\device\nrf51_bitfields.h	6809;"	d
UART_ERRORSRC_OVERRUN_NotPresent	components\device\nrf51_bitfields.h	6810;"	d
UART_ERRORSRC_OVERRUN_Pos	components\device\nrf51_bitfields.h	6808;"	d
UART_ERRORSRC_OVERRUN_Present	components\device\nrf51_bitfields.h	6811;"	d
UART_ERRORSRC_PARITY_Clear	components\device\nrf51_bitfields.h	6805;"	d
UART_ERRORSRC_PARITY_Msk	components\device\nrf51_bitfields.h	6802;"	d
UART_ERRORSRC_PARITY_NotPresent	components\device\nrf51_bitfields.h	6803;"	d
UART_ERRORSRC_PARITY_Pos	components\device\nrf51_bitfields.h	6801;"	d
UART_ERRORSRC_PARITY_Present	components\device\nrf51_bitfields.h	6804;"	d
UART_INTENCLR_CTS_Clear	components\device\nrf51_bitfields.h	6781;"	d
UART_INTENCLR_CTS_Disabled	components\device\nrf51_bitfields.h	6779;"	d
UART_INTENCLR_CTS_Enabled	components\device\nrf51_bitfields.h	6780;"	d
UART_INTENCLR_CTS_Msk	components\device\nrf51_bitfields.h	6778;"	d
UART_INTENCLR_CTS_Pos	components\device\nrf51_bitfields.h	6777;"	d
UART_INTENCLR_ERROR_Clear	components\device\nrf51_bitfields.h	6753;"	d
UART_INTENCLR_ERROR_Disabled	components\device\nrf51_bitfields.h	6751;"	d
UART_INTENCLR_ERROR_Enabled	components\device\nrf51_bitfields.h	6752;"	d
UART_INTENCLR_ERROR_Msk	components\device\nrf51_bitfields.h	6750;"	d
UART_INTENCLR_ERROR_Pos	components\device\nrf51_bitfields.h	6749;"	d
UART_INTENCLR_NCTS_Clear	components\device\nrf51_bitfields.h	6774;"	d
UART_INTENCLR_NCTS_Disabled	components\device\nrf51_bitfields.h	6772;"	d
UART_INTENCLR_NCTS_Enabled	components\device\nrf51_bitfields.h	6773;"	d
UART_INTENCLR_NCTS_Msk	components\device\nrf51_bitfields.h	6771;"	d
UART_INTENCLR_NCTS_Pos	components\device\nrf51_bitfields.h	6770;"	d
UART_INTENCLR_RXDRDY_Clear	components\device\nrf51_bitfields.h	6767;"	d
UART_INTENCLR_RXDRDY_Disabled	components\device\nrf51_bitfields.h	6765;"	d
UART_INTENCLR_RXDRDY_Enabled	components\device\nrf51_bitfields.h	6766;"	d
UART_INTENCLR_RXDRDY_Msk	components\device\nrf51_bitfields.h	6764;"	d
UART_INTENCLR_RXDRDY_Pos	components\device\nrf51_bitfields.h	6763;"	d
UART_INTENCLR_RXTO_Clear	components\device\nrf51_bitfields.h	6746;"	d
UART_INTENCLR_RXTO_Disabled	components\device\nrf51_bitfields.h	6744;"	d
UART_INTENCLR_RXTO_Enabled	components\device\nrf51_bitfields.h	6745;"	d
UART_INTENCLR_RXTO_Msk	components\device\nrf51_bitfields.h	6743;"	d
UART_INTENCLR_RXTO_Pos	components\device\nrf51_bitfields.h	6742;"	d
UART_INTENCLR_TXDRDY_Clear	components\device\nrf51_bitfields.h	6760;"	d
UART_INTENCLR_TXDRDY_Disabled	components\device\nrf51_bitfields.h	6758;"	d
UART_INTENCLR_TXDRDY_Enabled	components\device\nrf51_bitfields.h	6759;"	d
UART_INTENCLR_TXDRDY_Msk	components\device\nrf51_bitfields.h	6757;"	d
UART_INTENCLR_TXDRDY_Pos	components\device\nrf51_bitfields.h	6756;"	d
UART_INTENSET_CTS_Disabled	components\device\nrf51_bitfields.h	6734;"	d
UART_INTENSET_CTS_Enabled	components\device\nrf51_bitfields.h	6735;"	d
UART_INTENSET_CTS_Msk	components\device\nrf51_bitfields.h	6733;"	d
UART_INTENSET_CTS_Pos	components\device\nrf51_bitfields.h	6732;"	d
UART_INTENSET_CTS_Set	components\device\nrf51_bitfields.h	6736;"	d
UART_INTENSET_ERROR_Disabled	components\device\nrf51_bitfields.h	6706;"	d
UART_INTENSET_ERROR_Enabled	components\device\nrf51_bitfields.h	6707;"	d
UART_INTENSET_ERROR_Msk	components\device\nrf51_bitfields.h	6705;"	d
UART_INTENSET_ERROR_Pos	components\device\nrf51_bitfields.h	6704;"	d
UART_INTENSET_ERROR_Set	components\device\nrf51_bitfields.h	6708;"	d
UART_INTENSET_NCTS_Disabled	components\device\nrf51_bitfields.h	6727;"	d
UART_INTENSET_NCTS_Enabled	components\device\nrf51_bitfields.h	6728;"	d
UART_INTENSET_NCTS_Msk	components\device\nrf51_bitfields.h	6726;"	d
UART_INTENSET_NCTS_Pos	components\device\nrf51_bitfields.h	6725;"	d
UART_INTENSET_NCTS_Set	components\device\nrf51_bitfields.h	6729;"	d
UART_INTENSET_RXDRDY_Disabled	components\device\nrf51_bitfields.h	6720;"	d
UART_INTENSET_RXDRDY_Enabled	components\device\nrf51_bitfields.h	6721;"	d
UART_INTENSET_RXDRDY_Msk	components\device\nrf51_bitfields.h	6719;"	d
UART_INTENSET_RXDRDY_Pos	components\device\nrf51_bitfields.h	6718;"	d
UART_INTENSET_RXDRDY_Set	components\device\nrf51_bitfields.h	6722;"	d
UART_INTENSET_RXTO_Disabled	components\device\nrf51_bitfields.h	6699;"	d
UART_INTENSET_RXTO_Enabled	components\device\nrf51_bitfields.h	6700;"	d
UART_INTENSET_RXTO_Msk	components\device\nrf51_bitfields.h	6698;"	d
UART_INTENSET_RXTO_Pos	components\device\nrf51_bitfields.h	6697;"	d
UART_INTENSET_RXTO_Set	components\device\nrf51_bitfields.h	6701;"	d
UART_INTENSET_TXDRDY_Disabled	components\device\nrf51_bitfields.h	6713;"	d
UART_INTENSET_TXDRDY_Enabled	components\device\nrf51_bitfields.h	6714;"	d
UART_INTENSET_TXDRDY_Msk	components\device\nrf51_bitfields.h	6712;"	d
UART_INTENSET_TXDRDY_Pos	components\device\nrf51_bitfields.h	6711;"	d
UART_INTENSET_TXDRDY_Set	components\device\nrf51_bitfields.h	6715;"	d
UART_POWER_POWER_Disabled	components\device\nrf51_bitfields.h	6881;"	d
UART_POWER_POWER_Enabled	components\device\nrf51_bitfields.h	6882;"	d
UART_POWER_POWER_Msk	components\device\nrf51_bitfields.h	6880;"	d
UART_POWER_POWER_Pos	components\device\nrf51_bitfields.h	6879;"	d
UART_RXD_RXD_Msk	components\device\nrf51_bitfields.h	6828;"	d
UART_RXD_RXD_Pos	components\device\nrf51_bitfields.h	6827;"	d
UART_SHORTS_CTS_STARTRX_Disabled	components\device\nrf51_bitfields.h	6690;"	d
UART_SHORTS_CTS_STARTRX_Enabled	components\device\nrf51_bitfields.h	6691;"	d
UART_SHORTS_CTS_STARTRX_Msk	components\device\nrf51_bitfields.h	6689;"	d
UART_SHORTS_CTS_STARTRX_Pos	components\device\nrf51_bitfields.h	6688;"	d
UART_SHORTS_NCTS_STOPRX_Disabled	components\device\nrf51_bitfields.h	6684;"	d
UART_SHORTS_NCTS_STOPRX_Enabled	components\device\nrf51_bitfields.h	6685;"	d
UART_SHORTS_NCTS_STOPRX_Msk	components\device\nrf51_bitfields.h	6683;"	d
UART_SHORTS_NCTS_STOPRX_Pos	components\device\nrf51_bitfields.h	6682;"	d
UART_TXD_TXD_Msk	components\device\nrf51_bitfields.h	6835;"	d
UART_TXD_TXD_Pos	components\device\nrf51_bitfields.h	6834;"	d
UICR_FWID_FWID_Msk	components\device\nrf51_bitfields.h	6917;"	d
UICR_FWID_FWID_Pos	components\device\nrf51_bitfields.h	6916;"	d
UICR_RBPCONF_PALL_Disabled	components\device\nrf51_bitfields.h	6895;"	d
UICR_RBPCONF_PALL_Enabled	components\device\nrf51_bitfields.h	6894;"	d
UICR_RBPCONF_PALL_Msk	components\device\nrf51_bitfields.h	6893;"	d
UICR_RBPCONF_PALL_Pos	components\device\nrf51_bitfields.h	6892;"	d
UICR_RBPCONF_PR0_Disabled	components\device\nrf51_bitfields.h	6901;"	d
UICR_RBPCONF_PR0_Enabled	components\device\nrf51_bitfields.h	6900;"	d
UICR_RBPCONF_PR0_Msk	components\device\nrf51_bitfields.h	6899;"	d
UICR_RBPCONF_PR0_Pos	components\device\nrf51_bitfields.h	6898;"	d
UICR_XTALFREQ_XTALFREQ_16MHz	components\device\nrf51_bitfields.h	6910;"	d
UICR_XTALFREQ_XTALFREQ_32MHz	components\device\nrf51_bitfields.h	6909;"	d
UICR_XTALFREQ_XTALFREQ_Msk	components\device\nrf51_bitfields.h	6908;"	d
UICR_XTALFREQ_XTALFREQ_Pos	components\device\nrf51_bitfields.h	6907;"	d
WDT_CONFIG_HALT_Msk	components\device\nrf51_bitfields.h	7059;"	d
WDT_CONFIG_HALT_Pause	components\device\nrf51_bitfields.h	7060;"	d
WDT_CONFIG_HALT_Pos	components\device\nrf51_bitfields.h	7058;"	d
WDT_CONFIG_HALT_Run	components\device\nrf51_bitfields.h	7061;"	d
WDT_CONFIG_SLEEP_Msk	components\device\nrf51_bitfields.h	7065;"	d
WDT_CONFIG_SLEEP_Pause	components\device\nrf51_bitfields.h	7066;"	d
WDT_CONFIG_SLEEP_Pos	components\device\nrf51_bitfields.h	7064;"	d
WDT_CONFIG_SLEEP_Run	components\device\nrf51_bitfields.h	7067;"	d
WDT_INTENCLR_TIMEOUT_Clear	components\device\nrf51_bitfields.h	6941;"	d
WDT_INTENCLR_TIMEOUT_Disabled	components\device\nrf51_bitfields.h	6939;"	d
WDT_INTENCLR_TIMEOUT_Enabled	components\device\nrf51_bitfields.h	6940;"	d
WDT_INTENCLR_TIMEOUT_Msk	components\device\nrf51_bitfields.h	6938;"	d
WDT_INTENCLR_TIMEOUT_Pos	components\device\nrf51_bitfields.h	6937;"	d
WDT_INTENSET_TIMEOUT_Disabled	components\device\nrf51_bitfields.h	6929;"	d
WDT_INTENSET_TIMEOUT_Enabled	components\device\nrf51_bitfields.h	6930;"	d
WDT_INTENSET_TIMEOUT_Msk	components\device\nrf51_bitfields.h	6928;"	d
WDT_INTENSET_TIMEOUT_Pos	components\device\nrf51_bitfields.h	6927;"	d
WDT_INTENSET_TIMEOUT_Set	components\device\nrf51_bitfields.h	6931;"	d
WDT_POWER_POWER_Disabled	components\device\nrf51_bitfields.h	7083;"	d
WDT_POWER_POWER_Enabled	components\device\nrf51_bitfields.h	7084;"	d
WDT_POWER_POWER_Msk	components\device\nrf51_bitfields.h	7082;"	d
WDT_POWER_POWER_Pos	components\device\nrf51_bitfields.h	7081;"	d
WDT_REQSTATUS_RR0_DisabledOrRequested	components\device\nrf51_bitfields.h	7000;"	d
WDT_REQSTATUS_RR0_EnabledAndUnrequested	components\device\nrf51_bitfields.h	7001;"	d
WDT_REQSTATUS_RR0_Msk	components\device\nrf51_bitfields.h	6999;"	d
WDT_REQSTATUS_RR0_Pos	components\device\nrf51_bitfields.h	6998;"	d
WDT_REQSTATUS_RR1_DisabledOrRequested	components\device\nrf51_bitfields.h	6994;"	d
WDT_REQSTATUS_RR1_EnabledAndUnrequested	components\device\nrf51_bitfields.h	6995;"	d
WDT_REQSTATUS_RR1_Msk	components\device\nrf51_bitfields.h	6993;"	d
WDT_REQSTATUS_RR1_Pos	components\device\nrf51_bitfields.h	6992;"	d
WDT_REQSTATUS_RR2_DisabledOrRequested	components\device\nrf51_bitfields.h	6988;"	d
WDT_REQSTATUS_RR2_EnabledAndUnrequested	components\device\nrf51_bitfields.h	6989;"	d
WDT_REQSTATUS_RR2_Msk	components\device\nrf51_bitfields.h	6987;"	d
WDT_REQSTATUS_RR2_Pos	components\device\nrf51_bitfields.h	6986;"	d
WDT_REQSTATUS_RR3_DisabledOrRequested	components\device\nrf51_bitfields.h	6982;"	d
WDT_REQSTATUS_RR3_EnabledAndUnrequested	components\device\nrf51_bitfields.h	6983;"	d
WDT_REQSTATUS_RR3_Msk	components\device\nrf51_bitfields.h	6981;"	d
WDT_REQSTATUS_RR3_Pos	components\device\nrf51_bitfields.h	6980;"	d
WDT_REQSTATUS_RR4_DisabledOrRequested	components\device\nrf51_bitfields.h	6976;"	d
WDT_REQSTATUS_RR4_EnabledAndUnrequested	components\device\nrf51_bitfields.h	6977;"	d
WDT_REQSTATUS_RR4_Msk	components\device\nrf51_bitfields.h	6975;"	d
WDT_REQSTATUS_RR4_Pos	components\device\nrf51_bitfields.h	6974;"	d
WDT_REQSTATUS_RR5_DisabledOrRequested	components\device\nrf51_bitfields.h	6970;"	d
WDT_REQSTATUS_RR5_EnabledAndUnrequested	components\device\nrf51_bitfields.h	6971;"	d
WDT_REQSTATUS_RR5_Msk	components\device\nrf51_bitfields.h	6969;"	d
WDT_REQSTATUS_RR5_Pos	components\device\nrf51_bitfields.h	6968;"	d
WDT_REQSTATUS_RR6_DisabledOrRequested	components\device\nrf51_bitfields.h	6964;"	d
WDT_REQSTATUS_RR6_EnabledAndUnrequested	components\device\nrf51_bitfields.h	6965;"	d
WDT_REQSTATUS_RR6_Msk	components\device\nrf51_bitfields.h	6963;"	d
WDT_REQSTATUS_RR6_Pos	components\device\nrf51_bitfields.h	6962;"	d
WDT_REQSTATUS_RR7_DisabledOrRequested	components\device\nrf51_bitfields.h	6958;"	d
WDT_REQSTATUS_RR7_EnabledAndUnrequested	components\device\nrf51_bitfields.h	6959;"	d
WDT_REQSTATUS_RR7_Msk	components\device\nrf51_bitfields.h	6957;"	d
WDT_REQSTATUS_RR7_Pos	components\device\nrf51_bitfields.h	6956;"	d
WDT_RREN_RR0_Disabled	components\device\nrf51_bitfields.h	7051;"	d
WDT_RREN_RR0_Enabled	components\device\nrf51_bitfields.h	7052;"	d
WDT_RREN_RR0_Msk	components\device\nrf51_bitfields.h	7050;"	d
WDT_RREN_RR0_Pos	components\device\nrf51_bitfields.h	7049;"	d
WDT_RREN_RR1_Disabled	components\device\nrf51_bitfields.h	7045;"	d
WDT_RREN_RR1_Enabled	components\device\nrf51_bitfields.h	7046;"	d
WDT_RREN_RR1_Msk	components\device\nrf51_bitfields.h	7044;"	d
WDT_RREN_RR1_Pos	components\device\nrf51_bitfields.h	7043;"	d
WDT_RREN_RR2_Disabled	components\device\nrf51_bitfields.h	7039;"	d
WDT_RREN_RR2_Enabled	components\device\nrf51_bitfields.h	7040;"	d
WDT_RREN_RR2_Msk	components\device\nrf51_bitfields.h	7038;"	d
WDT_RREN_RR2_Pos	components\device\nrf51_bitfields.h	7037;"	d
WDT_RREN_RR3_Disabled	components\device\nrf51_bitfields.h	7033;"	d
WDT_RREN_RR3_Enabled	components\device\nrf51_bitfields.h	7034;"	d
WDT_RREN_RR3_Msk	components\device\nrf51_bitfields.h	7032;"	d
WDT_RREN_RR3_Pos	components\device\nrf51_bitfields.h	7031;"	d
WDT_RREN_RR4_Disabled	components\device\nrf51_bitfields.h	7027;"	d
WDT_RREN_RR4_Enabled	components\device\nrf51_bitfields.h	7028;"	d
WDT_RREN_RR4_Msk	components\device\nrf51_bitfields.h	7026;"	d
WDT_RREN_RR4_Pos	components\device\nrf51_bitfields.h	7025;"	d
WDT_RREN_RR5_Disabled	components\device\nrf51_bitfields.h	7021;"	d
WDT_RREN_RR5_Enabled	components\device\nrf51_bitfields.h	7022;"	d
WDT_RREN_RR5_Msk	components\device\nrf51_bitfields.h	7020;"	d
WDT_RREN_RR5_Pos	components\device\nrf51_bitfields.h	7019;"	d
WDT_RREN_RR6_Disabled	components\device\nrf51_bitfields.h	7015;"	d
WDT_RREN_RR6_Enabled	components\device\nrf51_bitfields.h	7016;"	d
WDT_RREN_RR6_Msk	components\device\nrf51_bitfields.h	7014;"	d
WDT_RREN_RR6_Pos	components\device\nrf51_bitfields.h	7013;"	d
WDT_RREN_RR7_Disabled	components\device\nrf51_bitfields.h	7009;"	d
WDT_RREN_RR7_Enabled	components\device\nrf51_bitfields.h	7010;"	d
WDT_RREN_RR7_Msk	components\device\nrf51_bitfields.h	7008;"	d
WDT_RREN_RR7_Pos	components\device\nrf51_bitfields.h	7007;"	d
WDT_RR_RR_Msk	components\device\nrf51_bitfields.h	7074;"	d
WDT_RR_RR_Pos	components\device\nrf51_bitfields.h	7073;"	d
WDT_RR_RR_Reload	components\device\nrf51_bitfields.h	7075;"	d
WDT_RUNSTATUS_RUNSTATUS_Msk	components\device\nrf51_bitfields.h	6948;"	d
WDT_RUNSTATUS_RUNSTATUS_NotRunning	components\device\nrf51_bitfields.h	6949;"	d
WDT_RUNSTATUS_RUNSTATUS_Pos	components\device\nrf51_bitfields.h	6947;"	d
WDT_RUNSTATUS_RUNSTATUS_Running	components\device\nrf51_bitfields.h	6950;"	d
__NRF51_BITS_H	components\device\nrf51_bitfields.h	31;"	d
CH0_EEP	components\device\nrf51_deprecated.h	138;"	d
CH0_TEP	components\device\nrf51_deprecated.h	139;"	d
CH10_EEP	components\device\nrf51_deprecated.h	158;"	d
CH10_TEP	components\device\nrf51_deprecated.h	159;"	d
CH11_EEP	components\device\nrf51_deprecated.h	160;"	d
CH11_TEP	components\device\nrf51_deprecated.h	161;"	d
CH12_EEP	components\device\nrf51_deprecated.h	162;"	d
CH12_TEP	components\device\nrf51_deprecated.h	163;"	d
CH13_EEP	components\device\nrf51_deprecated.h	164;"	d
CH13_TEP	components\device\nrf51_deprecated.h	165;"	d
CH14_EEP	components\device\nrf51_deprecated.h	166;"	d
CH14_TEP	components\device\nrf51_deprecated.h	167;"	d
CH15_EEP	components\device\nrf51_deprecated.h	168;"	d
CH15_TEP	components\device\nrf51_deprecated.h	169;"	d
CH1_EEP	components\device\nrf51_deprecated.h	140;"	d
CH1_TEP	components\device\nrf51_deprecated.h	141;"	d
CH2_EEP	components\device\nrf51_deprecated.h	142;"	d
CH2_TEP	components\device\nrf51_deprecated.h	143;"	d
CH3_EEP	components\device\nrf51_deprecated.h	144;"	d
CH3_TEP	components\device\nrf51_deprecated.h	145;"	d
CH4_EEP	components\device\nrf51_deprecated.h	146;"	d
CH4_TEP	components\device\nrf51_deprecated.h	147;"	d
CH5_EEP	components\device\nrf51_deprecated.h	148;"	d
CH5_TEP	components\device\nrf51_deprecated.h	149;"	d
CH6_EEP	components\device\nrf51_deprecated.h	150;"	d
CH6_TEP	components\device\nrf51_deprecated.h	151;"	d
CH7_EEP	components\device\nrf51_deprecated.h	152;"	d
CH7_TEP	components\device\nrf51_deprecated.h	153;"	d
CH8_EEP	components\device\nrf51_deprecated.h	154;"	d
CH8_TEP	components\device\nrf51_deprecated.h	155;"	d
CH9_EEP	components\device\nrf51_deprecated.h	156;"	d
CH9_TEP	components\device\nrf51_deprecated.h	157;"	d
CHG0	components\device\nrf51_deprecated.h	171;"	d
CHG1	components\device\nrf51_deprecated.h	172;"	d
CHG2	components\device\nrf51_deprecated.h	173;"	d
CHG3	components\device\nrf51_deprecated.h	174;"	d
DEVICEADDR0	components\device\nrf51_deprecated.h	123;"	d
DEVICEADDR1	components\device\nrf51_deprecated.h	124;"	d
DEVICEID0	components\device\nrf51_deprecated.h	110;"	d
DEVICEID1	components\device\nrf51_deprecated.h	111;"	d
ER0	components\device\nrf51_deprecated.h	113;"	d
ER1	components\device\nrf51_deprecated.h	114;"	d
ER2	components\device\nrf51_deprecated.h	115;"	d
ER3	components\device\nrf51_deprecated.h	116;"	d
ERASEPCR0	components\device\nrf51_deprecated.h	43;"	d
ERASEPCR1	components\device\nrf51_deprecated.h	45;"	d
IR0	components\device\nrf51_deprecated.h	118;"	d
IR1	components\device\nrf51_deprecated.h	119;"	d
IR2	components\device\nrf51_deprecated.h	120;"	d
IR3	components\device\nrf51_deprecated.h	121;"	d
LPCOMP_COMP_IRQHandler	components\device\nrf51_deprecated.h	49;"	d
MPU_PERR0_LPCOMP_COMP_InRegion0	components\device\nrf51_deprecated.h	57;"	d
MPU_PERR0_LPCOMP_COMP_InRegion1	components\device\nrf51_deprecated.h	56;"	d
MPU_PERR0_LPCOMP_COMP_Msk	components\device\nrf51_deprecated.h	55;"	d
MPU_PERR0_LPCOMP_COMP_Pos	components\device\nrf51_deprecated.h	54;"	d
NRF51_DEPRECATED_H	components\device\nrf51_deprecated.h	32;"	d
POWER_RAMON_OFFRAM2_Msk	components\device\nrf51_deprecated.h	68;"	d
POWER_RAMON_OFFRAM2_Pos	components\device\nrf51_deprecated.h	67;"	d
POWER_RAMON_OFFRAM2_RAM2Off	components\device\nrf51_deprecated.h	69;"	d
POWER_RAMON_OFFRAM2_RAM2On	components\device\nrf51_deprecated.h	70;"	d
POWER_RAMON_OFFRAM3_Msk	components\device\nrf51_deprecated.h	63;"	d
POWER_RAMON_OFFRAM3_Pos	components\device\nrf51_deprecated.h	62;"	d
POWER_RAMON_OFFRAM3_RAM3Off	components\device\nrf51_deprecated.h	64;"	d
POWER_RAMON_OFFRAM3_RAM3On	components\device\nrf51_deprecated.h	65;"	d
POWER_RAMON_ONRAM2_Msk	components\device\nrf51_deprecated.h	78;"	d
POWER_RAMON_ONRAM2_Pos	components\device\nrf51_deprecated.h	77;"	d
POWER_RAMON_ONRAM2_RAM2Off	components\device\nrf51_deprecated.h	79;"	d
POWER_RAMON_ONRAM2_RAM2On	components\device\nrf51_deprecated.h	80;"	d
POWER_RAMON_ONRAM3_Msk	components\device\nrf51_deprecated.h	73;"	d
POWER_RAMON_ONRAM3_Pos	components\device\nrf51_deprecated.h	72;"	d
POWER_RAMON_ONRAM3_RAM3Off	components\device\nrf51_deprecated.h	74;"	d
POWER_RAMON_ONRAM3_RAM3On	components\device\nrf51_deprecated.h	75;"	d
PPI_CHG0_CH0_Excluded	components\device\nrf51_deprecated.h	238;"	d
PPI_CHG0_CH0_Included	components\device\nrf51_deprecated.h	239;"	d
PPI_CHG0_CH0_Msk	components\device\nrf51_deprecated.h	237;"	d
PPI_CHG0_CH0_Pos	components\device\nrf51_deprecated.h	236;"	d
PPI_CHG0_CH10_Excluded	components\device\nrf51_deprecated.h	198;"	d
PPI_CHG0_CH10_Included	components\device\nrf51_deprecated.h	199;"	d
PPI_CHG0_CH10_Msk	components\device\nrf51_deprecated.h	197;"	d
PPI_CHG0_CH10_Pos	components\device\nrf51_deprecated.h	196;"	d
PPI_CHG0_CH11_Excluded	components\device\nrf51_deprecated.h	194;"	d
PPI_CHG0_CH11_Included	components\device\nrf51_deprecated.h	195;"	d
PPI_CHG0_CH11_Msk	components\device\nrf51_deprecated.h	193;"	d
PPI_CHG0_CH11_Pos	components\device\nrf51_deprecated.h	192;"	d
PPI_CHG0_CH12_Excluded	components\device\nrf51_deprecated.h	190;"	d
PPI_CHG0_CH12_Included	components\device\nrf51_deprecated.h	191;"	d
PPI_CHG0_CH12_Msk	components\device\nrf51_deprecated.h	189;"	d
PPI_CHG0_CH12_Pos	components\device\nrf51_deprecated.h	188;"	d
PPI_CHG0_CH13_Excluded	components\device\nrf51_deprecated.h	186;"	d
PPI_CHG0_CH13_Included	components\device\nrf51_deprecated.h	187;"	d
PPI_CHG0_CH13_Msk	components\device\nrf51_deprecated.h	185;"	d
PPI_CHG0_CH13_Pos	components\device\nrf51_deprecated.h	184;"	d
PPI_CHG0_CH14_Excluded	components\device\nrf51_deprecated.h	182;"	d
PPI_CHG0_CH14_Included	components\device\nrf51_deprecated.h	183;"	d
PPI_CHG0_CH14_Msk	components\device\nrf51_deprecated.h	181;"	d
PPI_CHG0_CH14_Pos	components\device\nrf51_deprecated.h	180;"	d
PPI_CHG0_CH15_Excluded	components\device\nrf51_deprecated.h	178;"	d
PPI_CHG0_CH15_Included	components\device\nrf51_deprecated.h	179;"	d
PPI_CHG0_CH15_Msk	components\device\nrf51_deprecated.h	177;"	d
PPI_CHG0_CH15_Pos	components\device\nrf51_deprecated.h	176;"	d
PPI_CHG0_CH1_Excluded	components\device\nrf51_deprecated.h	234;"	d
PPI_CHG0_CH1_Included	components\device\nrf51_deprecated.h	235;"	d
PPI_CHG0_CH1_Msk	components\device\nrf51_deprecated.h	233;"	d
PPI_CHG0_CH1_Pos	components\device\nrf51_deprecated.h	232;"	d
PPI_CHG0_CH2_Excluded	components\device\nrf51_deprecated.h	230;"	d
PPI_CHG0_CH2_Included	components\device\nrf51_deprecated.h	231;"	d
PPI_CHG0_CH2_Msk	components\device\nrf51_deprecated.h	229;"	d
PPI_CHG0_CH2_Pos	components\device\nrf51_deprecated.h	228;"	d
PPI_CHG0_CH3_Excluded	components\device\nrf51_deprecated.h	226;"	d
PPI_CHG0_CH3_Included	components\device\nrf51_deprecated.h	227;"	d
PPI_CHG0_CH3_Msk	components\device\nrf51_deprecated.h	225;"	d
PPI_CHG0_CH3_Pos	components\device\nrf51_deprecated.h	224;"	d
PPI_CHG0_CH4_Excluded	components\device\nrf51_deprecated.h	222;"	d
PPI_CHG0_CH4_Included	components\device\nrf51_deprecated.h	223;"	d
PPI_CHG0_CH4_Msk	components\device\nrf51_deprecated.h	221;"	d
PPI_CHG0_CH4_Pos	components\device\nrf51_deprecated.h	220;"	d
PPI_CHG0_CH5_Excluded	components\device\nrf51_deprecated.h	218;"	d
PPI_CHG0_CH5_Included	components\device\nrf51_deprecated.h	219;"	d
PPI_CHG0_CH5_Msk	components\device\nrf51_deprecated.h	217;"	d
PPI_CHG0_CH5_Pos	components\device\nrf51_deprecated.h	216;"	d
PPI_CHG0_CH6_Excluded	components\device\nrf51_deprecated.h	214;"	d
PPI_CHG0_CH6_Included	components\device\nrf51_deprecated.h	215;"	d
PPI_CHG0_CH6_Msk	components\device\nrf51_deprecated.h	213;"	d
PPI_CHG0_CH6_Pos	components\device\nrf51_deprecated.h	212;"	d
PPI_CHG0_CH7_Excluded	components\device\nrf51_deprecated.h	210;"	d
PPI_CHG0_CH7_Included	components\device\nrf51_deprecated.h	211;"	d
PPI_CHG0_CH7_Msk	components\device\nrf51_deprecated.h	209;"	d
PPI_CHG0_CH7_Pos	components\device\nrf51_deprecated.h	208;"	d
PPI_CHG0_CH8_Excluded	components\device\nrf51_deprecated.h	206;"	d
PPI_CHG0_CH8_Included	components\device\nrf51_deprecated.h	207;"	d
PPI_CHG0_CH8_Msk	components\device\nrf51_deprecated.h	205;"	d
PPI_CHG0_CH8_Pos	components\device\nrf51_deprecated.h	204;"	d
PPI_CHG0_CH9_Excluded	components\device\nrf51_deprecated.h	202;"	d
PPI_CHG0_CH9_Included	components\device\nrf51_deprecated.h	203;"	d
PPI_CHG0_CH9_Msk	components\device\nrf51_deprecated.h	201;"	d
PPI_CHG0_CH9_Pos	components\device\nrf51_deprecated.h	200;"	d
PPI_CHG1_CH0_Excluded	components\device\nrf51_deprecated.h	302;"	d
PPI_CHG1_CH0_Included	components\device\nrf51_deprecated.h	303;"	d
PPI_CHG1_CH0_Msk	components\device\nrf51_deprecated.h	301;"	d
PPI_CHG1_CH0_Pos	components\device\nrf51_deprecated.h	300;"	d
PPI_CHG1_CH10_Excluded	components\device\nrf51_deprecated.h	262;"	d
PPI_CHG1_CH10_Included	components\device\nrf51_deprecated.h	263;"	d
PPI_CHG1_CH10_Msk	components\device\nrf51_deprecated.h	261;"	d
PPI_CHG1_CH10_Pos	components\device\nrf51_deprecated.h	260;"	d
PPI_CHG1_CH11_Excluded	components\device\nrf51_deprecated.h	258;"	d
PPI_CHG1_CH11_Included	components\device\nrf51_deprecated.h	259;"	d
PPI_CHG1_CH11_Msk	components\device\nrf51_deprecated.h	257;"	d
PPI_CHG1_CH11_Pos	components\device\nrf51_deprecated.h	256;"	d
PPI_CHG1_CH12_Excluded	components\device\nrf51_deprecated.h	254;"	d
PPI_CHG1_CH12_Included	components\device\nrf51_deprecated.h	255;"	d
PPI_CHG1_CH12_Msk	components\device\nrf51_deprecated.h	253;"	d
PPI_CHG1_CH12_Pos	components\device\nrf51_deprecated.h	252;"	d
PPI_CHG1_CH13_Excluded	components\device\nrf51_deprecated.h	250;"	d
PPI_CHG1_CH13_Included	components\device\nrf51_deprecated.h	251;"	d
PPI_CHG1_CH13_Msk	components\device\nrf51_deprecated.h	249;"	d
PPI_CHG1_CH13_Pos	components\device\nrf51_deprecated.h	248;"	d
PPI_CHG1_CH14_Excluded	components\device\nrf51_deprecated.h	246;"	d
PPI_CHG1_CH14_Included	components\device\nrf51_deprecated.h	247;"	d
PPI_CHG1_CH14_Msk	components\device\nrf51_deprecated.h	245;"	d
PPI_CHG1_CH14_Pos	components\device\nrf51_deprecated.h	244;"	d
PPI_CHG1_CH15_Excluded	components\device\nrf51_deprecated.h	242;"	d
PPI_CHG1_CH15_Included	components\device\nrf51_deprecated.h	243;"	d
PPI_CHG1_CH15_Msk	components\device\nrf51_deprecated.h	241;"	d
PPI_CHG1_CH15_Pos	components\device\nrf51_deprecated.h	240;"	d
PPI_CHG1_CH1_Excluded	components\device\nrf51_deprecated.h	298;"	d
PPI_CHG1_CH1_Included	components\device\nrf51_deprecated.h	299;"	d
PPI_CHG1_CH1_Msk	components\device\nrf51_deprecated.h	297;"	d
PPI_CHG1_CH1_Pos	components\device\nrf51_deprecated.h	296;"	d
PPI_CHG1_CH2_Excluded	components\device\nrf51_deprecated.h	294;"	d
PPI_CHG1_CH2_Included	components\device\nrf51_deprecated.h	295;"	d
PPI_CHG1_CH2_Msk	components\device\nrf51_deprecated.h	293;"	d
PPI_CHG1_CH2_Pos	components\device\nrf51_deprecated.h	292;"	d
PPI_CHG1_CH3_Excluded	components\device\nrf51_deprecated.h	290;"	d
PPI_CHG1_CH3_Included	components\device\nrf51_deprecated.h	291;"	d
PPI_CHG1_CH3_Msk	components\device\nrf51_deprecated.h	289;"	d
PPI_CHG1_CH3_Pos	components\device\nrf51_deprecated.h	288;"	d
PPI_CHG1_CH4_Excluded	components\device\nrf51_deprecated.h	286;"	d
PPI_CHG1_CH4_Included	components\device\nrf51_deprecated.h	287;"	d
PPI_CHG1_CH4_Msk	components\device\nrf51_deprecated.h	285;"	d
PPI_CHG1_CH4_Pos	components\device\nrf51_deprecated.h	284;"	d
PPI_CHG1_CH5_Excluded	components\device\nrf51_deprecated.h	282;"	d
PPI_CHG1_CH5_Included	components\device\nrf51_deprecated.h	283;"	d
PPI_CHG1_CH5_Msk	components\device\nrf51_deprecated.h	281;"	d
PPI_CHG1_CH5_Pos	components\device\nrf51_deprecated.h	280;"	d
PPI_CHG1_CH6_Excluded	components\device\nrf51_deprecated.h	278;"	d
PPI_CHG1_CH6_Included	components\device\nrf51_deprecated.h	279;"	d
PPI_CHG1_CH6_Msk	components\device\nrf51_deprecated.h	277;"	d
PPI_CHG1_CH6_Pos	components\device\nrf51_deprecated.h	276;"	d
PPI_CHG1_CH7_Excluded	components\device\nrf51_deprecated.h	274;"	d
PPI_CHG1_CH7_Included	components\device\nrf51_deprecated.h	275;"	d
PPI_CHG1_CH7_Msk	components\device\nrf51_deprecated.h	273;"	d
PPI_CHG1_CH7_Pos	components\device\nrf51_deprecated.h	272;"	d
PPI_CHG1_CH8_Excluded	components\device\nrf51_deprecated.h	270;"	d
PPI_CHG1_CH8_Included	components\device\nrf51_deprecated.h	271;"	d
PPI_CHG1_CH8_Msk	components\device\nrf51_deprecated.h	269;"	d
PPI_CHG1_CH8_Pos	components\device\nrf51_deprecated.h	268;"	d
PPI_CHG1_CH9_Excluded	components\device\nrf51_deprecated.h	266;"	d
PPI_CHG1_CH9_Included	components\device\nrf51_deprecated.h	267;"	d
PPI_CHG1_CH9_Msk	components\device\nrf51_deprecated.h	265;"	d
PPI_CHG1_CH9_Pos	components\device\nrf51_deprecated.h	264;"	d
PPI_CHG2_CH0_Excluded	components\device\nrf51_deprecated.h	366;"	d
PPI_CHG2_CH0_Included	components\device\nrf51_deprecated.h	367;"	d
PPI_CHG2_CH0_Msk	components\device\nrf51_deprecated.h	365;"	d
PPI_CHG2_CH0_Pos	components\device\nrf51_deprecated.h	364;"	d
PPI_CHG2_CH10_Excluded	components\device\nrf51_deprecated.h	326;"	d
PPI_CHG2_CH10_Included	components\device\nrf51_deprecated.h	327;"	d
PPI_CHG2_CH10_Msk	components\device\nrf51_deprecated.h	325;"	d
PPI_CHG2_CH10_Pos	components\device\nrf51_deprecated.h	324;"	d
PPI_CHG2_CH11_Excluded	components\device\nrf51_deprecated.h	322;"	d
PPI_CHG2_CH11_Included	components\device\nrf51_deprecated.h	323;"	d
PPI_CHG2_CH11_Msk	components\device\nrf51_deprecated.h	321;"	d
PPI_CHG2_CH11_Pos	components\device\nrf51_deprecated.h	320;"	d
PPI_CHG2_CH12_Excluded	components\device\nrf51_deprecated.h	318;"	d
PPI_CHG2_CH12_Included	components\device\nrf51_deprecated.h	319;"	d
PPI_CHG2_CH12_Msk	components\device\nrf51_deprecated.h	317;"	d
PPI_CHG2_CH12_Pos	components\device\nrf51_deprecated.h	316;"	d
PPI_CHG2_CH13_Excluded	components\device\nrf51_deprecated.h	314;"	d
PPI_CHG2_CH13_Included	components\device\nrf51_deprecated.h	315;"	d
PPI_CHG2_CH13_Msk	components\device\nrf51_deprecated.h	313;"	d
PPI_CHG2_CH13_Pos	components\device\nrf51_deprecated.h	312;"	d
PPI_CHG2_CH14_Excluded	components\device\nrf51_deprecated.h	310;"	d
PPI_CHG2_CH14_Included	components\device\nrf51_deprecated.h	311;"	d
PPI_CHG2_CH14_Msk	components\device\nrf51_deprecated.h	309;"	d
PPI_CHG2_CH14_Pos	components\device\nrf51_deprecated.h	308;"	d
PPI_CHG2_CH15_Excluded	components\device\nrf51_deprecated.h	306;"	d
PPI_CHG2_CH15_Included	components\device\nrf51_deprecated.h	307;"	d
PPI_CHG2_CH15_Msk	components\device\nrf51_deprecated.h	305;"	d
PPI_CHG2_CH15_Pos	components\device\nrf51_deprecated.h	304;"	d
PPI_CHG2_CH1_Excluded	components\device\nrf51_deprecated.h	362;"	d
PPI_CHG2_CH1_Included	components\device\nrf51_deprecated.h	363;"	d
PPI_CHG2_CH1_Msk	components\device\nrf51_deprecated.h	361;"	d
PPI_CHG2_CH1_Pos	components\device\nrf51_deprecated.h	360;"	d
PPI_CHG2_CH2_Excluded	components\device\nrf51_deprecated.h	358;"	d
PPI_CHG2_CH2_Included	components\device\nrf51_deprecated.h	359;"	d
PPI_CHG2_CH2_Msk	components\device\nrf51_deprecated.h	357;"	d
PPI_CHG2_CH2_Pos	components\device\nrf51_deprecated.h	356;"	d
PPI_CHG2_CH3_Excluded	components\device\nrf51_deprecated.h	354;"	d
PPI_CHG2_CH3_Included	components\device\nrf51_deprecated.h	355;"	d
PPI_CHG2_CH3_Msk	components\device\nrf51_deprecated.h	353;"	d
PPI_CHG2_CH3_Pos	components\device\nrf51_deprecated.h	352;"	d
PPI_CHG2_CH4_Excluded	components\device\nrf51_deprecated.h	350;"	d
PPI_CHG2_CH4_Included	components\device\nrf51_deprecated.h	351;"	d
PPI_CHG2_CH4_Msk	components\device\nrf51_deprecated.h	349;"	d
PPI_CHG2_CH4_Pos	components\device\nrf51_deprecated.h	348;"	d
PPI_CHG2_CH5_Excluded	components\device\nrf51_deprecated.h	346;"	d
PPI_CHG2_CH5_Included	components\device\nrf51_deprecated.h	347;"	d
PPI_CHG2_CH5_Msk	components\device\nrf51_deprecated.h	345;"	d
PPI_CHG2_CH5_Pos	components\device\nrf51_deprecated.h	344;"	d
PPI_CHG2_CH6_Excluded	components\device\nrf51_deprecated.h	342;"	d
PPI_CHG2_CH6_Included	components\device\nrf51_deprecated.h	343;"	d
PPI_CHG2_CH6_Msk	components\device\nrf51_deprecated.h	341;"	d
PPI_CHG2_CH6_Pos	components\device\nrf51_deprecated.h	340;"	d
PPI_CHG2_CH7_Excluded	components\device\nrf51_deprecated.h	338;"	d
PPI_CHG2_CH7_Included	components\device\nrf51_deprecated.h	339;"	d
PPI_CHG2_CH7_Msk	components\device\nrf51_deprecated.h	337;"	d
PPI_CHG2_CH7_Pos	components\device\nrf51_deprecated.h	336;"	d
PPI_CHG2_CH8_Excluded	components\device\nrf51_deprecated.h	334;"	d
PPI_CHG2_CH8_Included	components\device\nrf51_deprecated.h	335;"	d
PPI_CHG2_CH8_Msk	components\device\nrf51_deprecated.h	333;"	d
PPI_CHG2_CH8_Pos	components\device\nrf51_deprecated.h	332;"	d
PPI_CHG2_CH9_Excluded	components\device\nrf51_deprecated.h	330;"	d
PPI_CHG2_CH9_Included	components\device\nrf51_deprecated.h	331;"	d
PPI_CHG2_CH9_Msk	components\device\nrf51_deprecated.h	329;"	d
PPI_CHG2_CH9_Pos	components\device\nrf51_deprecated.h	328;"	d
PPI_CHG3_CH0_Excluded	components\device\nrf51_deprecated.h	430;"	d
PPI_CHG3_CH0_Included	components\device\nrf51_deprecated.h	431;"	d
PPI_CHG3_CH0_Msk	components\device\nrf51_deprecated.h	429;"	d
PPI_CHG3_CH0_Pos	components\device\nrf51_deprecated.h	428;"	d
PPI_CHG3_CH10_Excluded	components\device\nrf51_deprecated.h	390;"	d
PPI_CHG3_CH10_Included	components\device\nrf51_deprecated.h	391;"	d
PPI_CHG3_CH10_Msk	components\device\nrf51_deprecated.h	389;"	d
PPI_CHG3_CH10_Pos	components\device\nrf51_deprecated.h	388;"	d
PPI_CHG3_CH11_Excluded	components\device\nrf51_deprecated.h	386;"	d
PPI_CHG3_CH11_Included	components\device\nrf51_deprecated.h	387;"	d
PPI_CHG3_CH11_Msk	components\device\nrf51_deprecated.h	385;"	d
PPI_CHG3_CH11_Pos	components\device\nrf51_deprecated.h	384;"	d
PPI_CHG3_CH12_Excluded	components\device\nrf51_deprecated.h	382;"	d
PPI_CHG3_CH12_Included	components\device\nrf51_deprecated.h	383;"	d
PPI_CHG3_CH12_Msk	components\device\nrf51_deprecated.h	381;"	d
PPI_CHG3_CH12_Pos	components\device\nrf51_deprecated.h	380;"	d
PPI_CHG3_CH13_Excluded	components\device\nrf51_deprecated.h	378;"	d
PPI_CHG3_CH13_Included	components\device\nrf51_deprecated.h	379;"	d
PPI_CHG3_CH13_Msk	components\device\nrf51_deprecated.h	377;"	d
PPI_CHG3_CH13_Pos	components\device\nrf51_deprecated.h	376;"	d
PPI_CHG3_CH14_Excluded	components\device\nrf51_deprecated.h	374;"	d
PPI_CHG3_CH14_Included	components\device\nrf51_deprecated.h	375;"	d
PPI_CHG3_CH14_Msk	components\device\nrf51_deprecated.h	373;"	d
PPI_CHG3_CH14_Pos	components\device\nrf51_deprecated.h	372;"	d
PPI_CHG3_CH15_Excluded	components\device\nrf51_deprecated.h	370;"	d
PPI_CHG3_CH15_Included	components\device\nrf51_deprecated.h	371;"	d
PPI_CHG3_CH15_Msk	components\device\nrf51_deprecated.h	369;"	d
PPI_CHG3_CH15_Pos	components\device\nrf51_deprecated.h	368;"	d
PPI_CHG3_CH1_Excluded	components\device\nrf51_deprecated.h	426;"	d
PPI_CHG3_CH1_Included	components\device\nrf51_deprecated.h	427;"	d
PPI_CHG3_CH1_Msk	components\device\nrf51_deprecated.h	425;"	d
PPI_CHG3_CH1_Pos	components\device\nrf51_deprecated.h	424;"	d
PPI_CHG3_CH2_Excluded	components\device\nrf51_deprecated.h	422;"	d
PPI_CHG3_CH2_Included	components\device\nrf51_deprecated.h	423;"	d
PPI_CHG3_CH2_Msk	components\device\nrf51_deprecated.h	421;"	d
PPI_CHG3_CH2_Pos	components\device\nrf51_deprecated.h	420;"	d
PPI_CHG3_CH3_Excluded	components\device\nrf51_deprecated.h	418;"	d
PPI_CHG3_CH3_Included	components\device\nrf51_deprecated.h	419;"	d
PPI_CHG3_CH3_Msk	components\device\nrf51_deprecated.h	417;"	d
PPI_CHG3_CH3_Pos	components\device\nrf51_deprecated.h	416;"	d
PPI_CHG3_CH4_Excluded	components\device\nrf51_deprecated.h	414;"	d
PPI_CHG3_CH4_Included	components\device\nrf51_deprecated.h	415;"	d
PPI_CHG3_CH4_Msk	components\device\nrf51_deprecated.h	413;"	d
PPI_CHG3_CH4_Pos	components\device\nrf51_deprecated.h	412;"	d
PPI_CHG3_CH5_Excluded	components\device\nrf51_deprecated.h	410;"	d
PPI_CHG3_CH5_Included	components\device\nrf51_deprecated.h	411;"	d
PPI_CHG3_CH5_Msk	components\device\nrf51_deprecated.h	409;"	d
PPI_CHG3_CH5_Pos	components\device\nrf51_deprecated.h	408;"	d
PPI_CHG3_CH6_Excluded	components\device\nrf51_deprecated.h	406;"	d
PPI_CHG3_CH6_Included	components\device\nrf51_deprecated.h	407;"	d
PPI_CHG3_CH6_Msk	components\device\nrf51_deprecated.h	405;"	d
PPI_CHG3_CH6_Pos	components\device\nrf51_deprecated.h	404;"	d
PPI_CHG3_CH7_Excluded	components\device\nrf51_deprecated.h	402;"	d
PPI_CHG3_CH7_Included	components\device\nrf51_deprecated.h	403;"	d
PPI_CHG3_CH7_Msk	components\device\nrf51_deprecated.h	401;"	d
PPI_CHG3_CH7_Pos	components\device\nrf51_deprecated.h	400;"	d
PPI_CHG3_CH8_Excluded	components\device\nrf51_deprecated.h	398;"	d
PPI_CHG3_CH8_Included	components\device\nrf51_deprecated.h	399;"	d
PPI_CHG3_CH8_Msk	components\device\nrf51_deprecated.h	397;"	d
PPI_CHG3_CH8_Pos	components\device\nrf51_deprecated.h	396;"	d
PPI_CHG3_CH9_Excluded	components\device\nrf51_deprecated.h	394;"	d
PPI_CHG3_CH9_Included	components\device\nrf51_deprecated.h	395;"	d
PPI_CHG3_CH9_Msk	components\device\nrf51_deprecated.h	393;"	d
PPI_CHG3_CH9_Pos	components\device\nrf51_deprecated.h	392;"	d
RADIO_CRCCNF_SKIP_ADDR_Include	components\device\nrf51_deprecated.h	89;"	d
RADIO_CRCCNF_SKIP_ADDR_Msk	components\device\nrf51_deprecated.h	88;"	d
RADIO_CRCCNF_SKIP_ADDR_Pos	components\device\nrf51_deprecated.h	87;"	d
RADIO_CRCCNF_SKIP_ADDR_Skip	components\device\nrf51_deprecated.h	90;"	d
RADIO_TEST_CONST_CARRIER_Disabled	components\device\nrf51_deprecated.h	99;"	d
RADIO_TEST_CONST_CARRIER_Enabled	components\device\nrf51_deprecated.h	100;"	d
RADIO_TEST_CONST_CARRIER_Msk	components\device\nrf51_deprecated.h	98;"	d
RADIO_TEST_CONST_CARRIER_Pos	components\device\nrf51_deprecated.h	97;"	d
RADIO_TEST_PLL_LOCK_Disabled	components\device\nrf51_deprecated.h	94;"	d
RADIO_TEST_PLL_LOCK_Enabled	components\device\nrf51_deprecated.h	95;"	d
RADIO_TEST_PLL_LOCK_Msk	components\device\nrf51_deprecated.h	93;"	d
RADIO_TEST_PLL_LOCK_Pos	components\device\nrf51_deprecated.h	92;"	d
RADIO_TXPOWER_TXPOWER_Neg40dBm	components\device\nrf51_deprecated.h	85;"	d
SIZERAMBLOCK0	components\device\nrf51_deprecated.h	105;"	d
SIZERAMBLOCK1	components\device\nrf51_deprecated.h	106;"	d
SIZERAMBLOCK2	components\device\nrf51_deprecated.h	107;"	d
SIZERAMBLOCK3	components\device\nrf51_deprecated.h	108;"	d
TASKS_CHG0DIS	components\device\nrf51_deprecated.h	130;"	d
TASKS_CHG0EN	components\device\nrf51_deprecated.h	129;"	d
TASKS_CHG1DIS	components\device\nrf51_deprecated.h	132;"	d
TASKS_CHG1EN	components\device\nrf51_deprecated.h	131;"	d
TASKS_CHG2DIS	components\device\nrf51_deprecated.h	134;"	d
TASKS_CHG2EN	components\device\nrf51_deprecated.h	133;"	d
TASKS_CHG3DIS	components\device\nrf51_deprecated.h	136;"	d
TASKS_CHG3EN	components\device\nrf51_deprecated.h	135;"	d
ADNS2080_PRODUCT_ID	components\drivers_ext\adns2080\adns2080.c	21;"	d	file:
ADNS2080_RESET_NUMBER	components\drivers_ext\adns2080\adns2080.c	22;"	d	file:
REG_BURST_READ_FIRST	components\drivers_ext\adns2080\adns2080.c	50;"	d	file:
REG_BURST_READ_LAST	components\drivers_ext\adns2080\adns2080.c	51;"	d	file:
REG_DELTA_X	components\drivers_ext\adns2080\adns2080.c	28;"	d	file:
REG_DELTA_XY_HIGH	components\drivers_ext\adns2080\adns2080.c	37;"	d	file:
REG_DELTA_Y	components\drivers_ext\adns2080\adns2080.c	29;"	d	file:
REG_LED_CTRL	components\drivers_ext\adns2080\adns2080.c	48;"	d	file:
REG_MOTION_BURST	components\drivers_ext\adns2080\adns2080.c	53;"	d	file:
REG_MOTION_CTRL	components\drivers_ext\adns2080\adns2080.c	49;"	d	file:
REG_MOTION_CTRL_MOT_A	components\drivers_ext\adns2080\adns2080.c	57;"	d	file:
REG_MOTION_CTRL_MOT_S	components\drivers_ext\adns2080\adns2080.c	58;"	d	file:
REG_MOTION_ST	components\drivers_ext\adns2080\adns2080.c	27;"	d	file:
REG_MOUSE_CTRL	components\drivers_ext\adns2080\adns2080.c	38;"	d	file:
REG_MOUSE_CTRL_BIT_REPORTING	components\drivers_ext\adns2080\adns2080.c	60;"	d	file:
REG_MOUSE_CTRL_POWERDOWN	components\drivers_ext\adns2080\adns2080.c	56;"	d	file:
REG_MOUSE_CTRL_RES_EN	components\drivers_ext\adns2080\adns2080.c	59;"	d	file:
REG_NOT_REV_ID	components\drivers_ext\adns2080\adns2080.c	47;"	d	file:
REG_PERFORMANCE	components\drivers_ext\adns2080\adns2080.c	45;"	d	file:
REG_PIX_ACCUM	components\drivers_ext\adns2080\adns2080.c	34;"	d	file:
REG_PIX_GRAB	components\drivers_ext\adns2080\adns2080.c	36;"	d	file:
REG_PIX_MAX	components\drivers_ext\adns2080\adns2080.c	33;"	d	file:
REG_PIX_MIN	components\drivers_ext\adns2080\adns2080.c	35;"	d	file:
REG_PROD_ID	components\drivers_ext\adns2080\adns2080.c	25;"	d	file:
REG_RESET	components\drivers_ext\adns2080\adns2080.c	46;"	d	file:
REG_REST1_DOWNSHIFT	components\drivers_ext\adns2080\adns2080.c	41;"	d	file:
REG_REST1_PERIOD	components\drivers_ext\adns2080\adns2080.c	40;"	d	file:
REG_REST2_DOWNSHIFT	components\drivers_ext\adns2080\adns2080.c	43;"	d	file:
REG_REST2_PERIOD	components\drivers_ext\adns2080\adns2080.c	42;"	d	file:
REG_REST3_PERIOD	components\drivers_ext\adns2080\adns2080.c	44;"	d	file:
REG_REST_MODE_CONFIG	components\drivers_ext\adns2080\adns2080.c	52;"	d	file:
REG_REV_ID	components\drivers_ext\adns2080\adns2080.c	26;"	d	file:
REG_RUN_DOWNSHIFT	components\drivers_ext\adns2080\adns2080.c	39;"	d	file:
REG_SHUT_HI	components\drivers_ext\adns2080\adns2080.c	31;"	d	file:
REG_SHUT_LO	components\drivers_ext\adns2080\adns2080.c	32;"	d	file:
REG_SQUAL	components\drivers_ext\adns2080\adns2080.c	30;"	d	file:
adns2080_downshift_times_set	components\drivers_ext\adns2080\adns2080.c	/^void adns2080_downshift_times_set(uint8_t run_to_rest1_mode_time, uint8_t rest1_to_rest2_mode_time, uint8_t rest2_to_rest3_mode_time)$/;"	f
adns2080_force_mode_read	components\drivers_ext\adns2080\adns2080.c	/^adns2080_mode_t adns2080_force_mode_read(void)$/;"	f
adns2080_force_mode_set	components\drivers_ext\adns2080\adns2080.c	/^void adns2080_force_mode_set(adns2080_mode_t mode)$/;"	f
adns2080_init	components\drivers_ext\adns2080\adns2080.c	/^adns2080_status_t adns2080_init(void)$/;"	f
adns2080_is_motion_detected	components\drivers_ext\adns2080\adns2080.c	/^bool adns2080_is_motion_detected(void)$/;"	f
adns2080_motion_bits_read	components\drivers_ext\adns2080\adns2080.c	/^adns2080_motion_bits_t adns2080_motion_bits_read(void)$/;"	f
adns2080_motion_bits_set	components\drivers_ext\adns2080\adns2080.c	/^adns2080_status_t adns2080_motion_bits_set(adns2080_motion_bits_t motion_bits)$/;"	f
adns2080_motion_interrupt_set	components\drivers_ext\adns2080\adns2080.c	/^adns2080_status_t adns2080_motion_interrupt_set(motion_output_polarity_t polarity, motion_output_sensitivity_t sensitivity)$/;"	f
adns2080_movement_read	components\drivers_ext\adns2080\adns2080.c	/^void adns2080_movement_read(int16_t * deltaX, int16_t * deltaY)$/;"	f
adns2080_powerdown	components\drivers_ext\adns2080\adns2080.c	/^void adns2080_powerdown(void)$/;"	f
adns2080_product_id_read	components\drivers_ext\adns2080\adns2080.c	/^uint8_t adns2080_product_id_read(void)$/;"	f
adns2080_reset	components\drivers_ext\adns2080\adns2080.c	/^void adns2080_reset(void)$/;"	f
adns2080_resolution_set	components\drivers_ext\adns2080\adns2080.c	/^adns2080_status_t adns2080_resolution_set(adns2080_resolution_t resolution)$/;"	f
adns2080_rest_periods_set	components\drivers_ext\adns2080\adns2080.c	/^void adns2080_rest_periods_set(uint8_t rest1_period, uint8_t rest2_period, uint8_t rest3_period)$/;"	f
adns2080_revision_id_read	components\drivers_ext\adns2080\adns2080.c	/^uint8_t adns2080_revision_id_read(void)$/;"	f
adns2080_wakeup	components\drivers_ext\adns2080\adns2080.c	/^void adns2080_wakeup(void)$/;"	f
ADNS2080_CHIP_NOT_DETECTED	components\drivers_ext\adns2080\adns2080.h	/^  ADNS2080_CHIP_NOT_DETECTED, \/*!< Product\/Revision ID was not what was expected *\/$/;"	e	enum:__anon227
ADNS2080_H	components\drivers_ext\adns2080\adns2080.h	14;"	d
ADNS2080_INVALID_PARAMETER	components\drivers_ext\adns2080\adns2080.h	/^  ADNS2080_INVALID_PARAMETER \/*!< Given parameters were not valid *\/$/;"	e	enum:__anon227
ADNS2080_MODE_IDLE	components\drivers_ext\adns2080\adns2080.h	/^  ADNS2080_MODE_IDLE = 6 \/*!< Idle operation mode *\/$/;"	e	enum:__anon231
ADNS2080_MODE_NORMAL	components\drivers_ext\adns2080\adns2080.h	/^  ADNS2080_MODE_NORMAL = 0, \/*!< Normal operation mode *\/$/;"	e	enum:__anon231
ADNS2080_MODE_REST1	components\drivers_ext\adns2080\adns2080.h	/^  ADNS2080_MODE_REST1 = 1, \/*!< Rest1 operation mode *\/$/;"	e	enum:__anon231
ADNS2080_MODE_REST2	components\drivers_ext\adns2080\adns2080.h	/^  ADNS2080_MODE_REST2 = 2, \/*!< Rest2 operation mode *\/$/;"	e	enum:__anon231
ADNS2080_MODE_REST3	components\drivers_ext\adns2080\adns2080.h	/^  ADNS2080_MODE_REST3 = 3, \/*!< Rest3 operation mode *\/$/;"	e	enum:__anon231
ADNS2080_MODE_RUN1	components\drivers_ext\adns2080\adns2080.h	/^  ADNS2080_MODE_RUN1 = 4, \/*!< Run1 operation mode *\/$/;"	e	enum:__anon231
ADNS2080_MODE_RUN2	components\drivers_ext\adns2080\adns2080.h	/^  ADNS2080_MODE_RUN2 = 5, \/*!< Run2 operation mode *\/$/;"	e	enum:__anon231
ADNS2080_MOTION_BITS_12	components\drivers_ext\adns2080\adns2080.h	/^  ADNS2080_MOTION_BITS_12 = 1  \/*!< Motion reporting uses 12 bits *\/$/;"	e	enum:__anon232
ADNS2080_MOTION_BITS_8	components\drivers_ext\adns2080\adns2080.h	/^  ADNS2080_MOTION_BITS_8 = 0,  \/*!< Motion reporting uses 8 bits *\/$/;"	e	enum:__anon232
ADNS2080_MOTION_OUTPUT_POLARITY_HIGH	components\drivers_ext\adns2080\adns2080.h	/^  ADNS2080_MOTION_OUTPUT_POLARITY_HIGH = 1  \/*!< Motion output polarity active high *\/$/;"	e	enum:__anon228
ADNS2080_MOTION_OUTPUT_POLARITY_LOW	components\drivers_ext\adns2080\adns2080.h	/^  ADNS2080_MOTION_OUTPUT_POLARITY_LOW = 0,  \/*!< Motion output polarity active low *\/$/;"	e	enum:__anon228
ADNS2080_MOTION_OUTPUT_SENSITIVITY_EDGE	components\drivers_ext\adns2080\adns2080.h	/^  ADNS2080_MOTION_OUTPUT_SENSITIVITY_EDGE = 1  \/*!< Motion output pin will be driven low\/high (depending on the polarity setting) for 380 ns when motion is detected during rest modes *\/$/;"	e	enum:__anon229
ADNS2080_MOTION_OUTPUT_SENSITIVITY_LEVEL	components\drivers_ext\adns2080\adns2080.h	/^  ADNS2080_MOTION_OUTPUT_SENSITIVITY_LEVEL = 0,  \/*!< Motion output pin will be driven low\/high (depending on the polarity setting) as long as there is motion data in DELTA registers *\/$/;"	e	enum:__anon229
ADNS2080_OK	components\drivers_ext\adns2080\adns2080.h	/^  ADNS2080_OK, \/*!< Operation was succesful *\/$/;"	e	enum:__anon227
ADNS2080_RESOLUTION_1000DPI	components\drivers_ext\adns2080\adns2080.h	/^  ADNS2080_RESOLUTION_1000DPI = 0, \/*!< 1000 dpi resolution *\/$/;"	e	enum:__anon230
ADNS2080_RESOLUTION_1250DPI	components\drivers_ext\adns2080\adns2080.h	/^  ADNS2080_RESOLUTION_1250DPI = 3, \/*!< 1250 dpi resolution *\/$/;"	e	enum:__anon230
ADNS2080_RESOLUTION_1500DPI	components\drivers_ext\adns2080\adns2080.h	/^  ADNS2080_RESOLUTION_1500DPI = 4, \/*!< 1500 dpi resolution *\/$/;"	e	enum:__anon230
ADNS2080_RESOLUTION_1750DPI	components\drivers_ext\adns2080\adns2080.h	/^  ADNS2080_RESOLUTION_1750DPI = 5, \/*!< 1750 dpi resolution *\/$/;"	e	enum:__anon230
ADNS2080_RESOLUTION_2000DPI	components\drivers_ext\adns2080\adns2080.h	/^  ADNS2080_RESOLUTION_2000DPI = 6 \/*!< 2000 dpi resolution *\/$/;"	e	enum:__anon230
ADNS2080_RESOLUTION_250DPI	components\drivers_ext\adns2080\adns2080.h	/^  ADNS2080_RESOLUTION_250DPI = 1, \/*!< 250 dpi resolution *\/$/;"	e	enum:__anon230
ADNS2080_RESOLUTION_500DPI	components\drivers_ext\adns2080\adns2080.h	/^  ADNS2080_RESOLUTION_500DPI = 2, \/*!< 500 dpi resolution *\/$/;"	e	enum:__anon230
ADNS2080_SERIAL_COMM_FAILURE	components\drivers_ext\adns2080\adns2080.h	/^  ADNS2080_SERIAL_COMM_FAILURE, \/*!< Serial communication failed *\/$/;"	e	enum:__anon227
adns2080_mode_t	components\drivers_ext\adns2080\adns2080.h	/^} adns2080_mode_t;$/;"	t	typeref:enum:__anon231
adns2080_motion_bits_t	components\drivers_ext\adns2080\adns2080.h	/^} adns2080_motion_bits_t;$/;"	t	typeref:enum:__anon232
adns2080_resolution_t	components\drivers_ext\adns2080\adns2080.h	/^} adns2080_resolution_t;$/;"	t	typeref:enum:__anon230
adns2080_status_t	components\drivers_ext\adns2080\adns2080.h	/^} adns2080_status_t;$/;"	t	typeref:enum:__anon227
motion_output_polarity_t	components\drivers_ext\adns2080\adns2080.h	/^} motion_output_polarity_t;$/;"	t	typeref:enum:__anon228
motion_output_sensitivity_t	components\drivers_ext\adns2080\adns2080.h	/^} motion_output_sensitivity_t;$/;"	t	typeref:enum:__anon229
CHERRY8x16_NUM_OF_COLUMNS	components\drivers_ext\cherry8x16\cherry8x16.c	20;"	d	file:
CHERRY8x16_NUM_OF_ROWS	components\drivers_ext\cherry8x16\cherry8x16.c	21;"	d	file:
MODIFER_RIGHT_CONTROL_HID	components\drivers_ext\cherry8x16\cherry8x16.c	234;"	d	file:
MODIFIER_HID_END	components\drivers_ext\cherry8x16\cherry8x16.c	24;"	d	file:
MODIFIER_HID_START	components\drivers_ext\cherry8x16\cherry8x16.c	23;"	d	file:
MODIFIER_LEFT_CONTROL_HID	components\drivers_ext\cherry8x16\cherry8x16.c	233;"	d	file:
cherry8x16_have_keys_changed	components\drivers_ext\cherry8x16\cherry8x16.c	/^static bool cherry8x16_have_keys_changed(const uint8_t * state_now,$/;"	f	file:
cherry8x16_init	components\drivers_ext\cherry8x16\cherry8x16.c	/^cherry8x16_status_t cherry8x16_init(const uint8_t volatile * row_port,$/;"	f
cherry8x16_keymatrix_read	components\drivers_ext\cherry8x16\cherry8x16.c	/^static bool cherry8x16_keymatrix_read(uint8_t * pressed_keys, uint8_t * number_of_pressed_keys)$/;"	f	file:
cherry8x16_keypacket_addkey	components\drivers_ext\cherry8x16\cherry8x16.c	/^static void cherry8x16_keypacket_addkey(uint8_t key)$/;"	f	file:
cherry8x16_keypacket_create	components\drivers_ext\cherry8x16\cherry8x16.c	/^static void cherry8x16_keypacket_create(uint8_t * key_packet, uint8_t key_packet_size)$/;"	f	file:
cherry8x16_new_packet	components\drivers_ext\cherry8x16\cherry8x16.c	/^bool cherry8x16_new_packet(const uint8_t ** p_key_packet, uint8_t * p_key_packet_size)$/;"	f
cherry8x16_remap_fn_keys	components\drivers_ext\cherry8x16\cherry8x16.c	/^static void cherry8x16_remap_fn_keys(uint8_t * keys, uint8_t number_of_keys)$/;"	f	file:
cherry8x16_row_read	components\drivers_ext\cherry8x16\cherry8x16.c	/^static uint8_t cherry8x16_row_read(void)$/;"	f	file:
default_matrix_lookup	components\drivers_ext\cherry8x16\cherry8x16.c	/^static const uint8_t default_matrix_lookup[CHERRY8x16_NUM_OF_COLUMNS * CHERRY8x16_NUM_OF_ROWS] =$/;"	v	file:
m_column_port	components\drivers_ext\cherry8x16\cherry8x16.c	/^static uint16_t volatile      * m_column_port; \/\/!< Pointer to location where column IO can be written$/;"	v	file:
m_currently_pressed_keys	components\drivers_ext\cherry8x16\cherry8x16.c	/^static uint8_t m_currently_pressed_keys[CHERRY8x16_MAX_NUM_OF_PRESSED_KEYS]; \/\/!< Array holding currently pressed keys. Filled up from index 0. Values are$/;"	v	file:
m_key_packet	components\drivers_ext\cherry8x16\cherry8x16.c	/^static uint8_t m_key_packet[KEY_PACKET_SIZE]; \/\/!< Stores last created key packet. One byte is used for modifier keys, one for OEMs. Key values are USB HID keycodes.$/;"	v	file:
m_num_of_currently_pressed_keys	components\drivers_ext\cherry8x16\cherry8x16.c	/^static uint8_t m_num_of_currently_pressed_keys;                              \/\/!< Number of keys in m_currently_pressed_keys$/;"	v	file:
m_number_of_transmitted_keys	components\drivers_ext\cherry8x16\cherry8x16.c	/^static uint8_t m_number_of_transmitted_keys;                                 \/\/!< Number of keys in m_transmitted_keys$/;"	v	file:
m_row_port	components\drivers_ext\cherry8x16\cherry8x16.c	/^static const uint8_t volatile * m_row_port;    \/\/!< Pointer to location where row IO can be read$/;"	v	file:
m_transmitted_keys	components\drivers_ext\cherry8x16\cherry8x16.c	/^static uint8_t m_transmitted_keys[CHERRY8x16_MAX_NUM_OF_PRESSED_KEYS];       \/\/!< Array holding the keys that have already been transmitted.$/;"	v	file:
matrix_lookup	components\drivers_ext\cherry8x16\cherry8x16.c	/^static const uint8_t          * matrix_lookup; \/\/!< Pointer to the key lookup matrix in use$/;"	v	file:
CHERRY8x16_DEFAULT_KEY_LOOKUP_MATRIX	components\drivers_ext\cherry8x16\cherry8x16.h	32;"	d
CHERRY8x16_H	components\drivers_ext\cherry8x16\cherry8x16.h	14;"	d
CHERRY8x16_INVALID_PARAMETER	components\drivers_ext\cherry8x16\cherry8x16.h	/^  CHERRY8x16_INVALID_PARAMETER \/*!< Given parameters were not valid *\/$/;"	e	enum:__anon233
CHERRY8x16_MAX_NUM_OF_PRESSED_KEYS	components\drivers_ext\cherry8x16\cherry8x16.h	31;"	d
CHERRY8x16_NOT_DETECTED	components\drivers_ext\cherry8x16\cherry8x16.h	/^  CHERRY8x16_NOT_DETECTED, \/*!< Product\/Revision ID was not what was expected *\/$/;"	e	enum:__anon233
CHERRY8x16_OK	components\drivers_ext\cherry8x16\cherry8x16.h	/^  CHERRY8x16_OK, \/*!< Operation was succesful. *\/$/;"	e	enum:__anon233
KEY_PACKET_KEY_INDEX	components\drivers_ext\cherry8x16\cherry8x16.h	36;"	d
KEY_PACKET_MAX_KEYS	components\drivers_ext\cherry8x16\cherry8x16.h	37;"	d
KEY_PACKET_MODIFIER_KEY_INDEX	components\drivers_ext\cherry8x16\cherry8x16.h	34;"	d
KEY_PACKET_NO_KEY	components\drivers_ext\cherry8x16\cherry8x16.h	39;"	d
KEY_PACKET_RESERVED_INDEX	components\drivers_ext\cherry8x16\cherry8x16.h	35;"	d
KEY_PACKET_SIZE	components\drivers_ext\cherry8x16\cherry8x16.h	38;"	d
cherry8x16_status_t	components\drivers_ext\cherry8x16\cherry8x16.h	/^} cherry8x16_status_t;$/;"	t	typeref:enum:__anon233
DS1624_CONVERSION_DONE	components\drivers_ext\ds1624\ds1624.c	22;"	d	file:
DS1624_ONESHOT_MODE	components\drivers_ext\ds1624\ds1624.c	21;"	d	file:
DS1634_BASE_ADDRESS	components\drivers_ext\ds1624\ds1624.c	19;"	d	file:
command_access_config	components\drivers_ext\ds1624\ds1624.c	/^const uint8_t command_access_config      = 0xAC; \/\/!< Reads or writes configuration data to configuration register $/;"	v
command_access_memory	components\drivers_ext\ds1624\ds1624.c	/^const uint8_t command_access_memory      = 0x17; \/\/!< Reads or writes to 256-byte EEPROM memory$/;"	v
command_read_temp	components\drivers_ext\ds1624\ds1624.c	/^const uint8_t command_read_temp          = 0xAA; \/\/!< Reads last converted temperature value from temperature register$/;"	v
command_start_convert_temp	components\drivers_ext\ds1624\ds1624.c	/^const uint8_t command_start_convert_temp = 0xEE; \/\/!< Initiates temperature conversion.$/;"	v
command_stop_convert_temp	components\drivers_ext\ds1624\ds1624.c	/^const uint8_t command_stop_convert_temp  = 0x22; \/\/!< Halts temperature conversion.$/;"	v
ds1624_config_read	components\drivers_ext\ds1624\ds1624.c	/^static uint8_t ds1624_config_read(void)$/;"	f	file:
ds1624_init	components\drivers_ext\ds1624\ds1624.c	/^bool ds1624_init(uint8_t device_address)$/;"	f
ds1624_is_temp_conversion_done	components\drivers_ext\ds1624\ds1624.c	/^bool ds1624_is_temp_conversion_done(void)$/;"	f
ds1624_start_temp_conversion	components\drivers_ext\ds1624\ds1624.c	/^bool ds1624_start_temp_conversion(void)$/;"	f
ds1624_temp_read	components\drivers_ext\ds1624\ds1624.c	/^bool ds1624_temp_read(int8_t * temperature_in_celcius, int8_t * temperature_fraction)$/;"	f
m_device_address	components\drivers_ext\ds1624\ds1624.c	/^static uint8_t m_device_address; \/\/!< Device address in bits [7:1]$/;"	v	file:
DS1624_H	components\drivers_ext\ds1624\ds1624.h	14;"	d
ADDRESS_SIGNAL_PATH_RESET	components\drivers_ext\mpu6050\mpu6050.c	22;"	d	file:
ADDRESS_WHO_AM_I	components\drivers_ext\mpu6050\mpu6050.c	21;"	d	file:
expected_who_am_i	components\drivers_ext\mpu6050\mpu6050.c	/^static const uint8_t expected_who_am_i = 0x68U; \/\/ !< Expected value to get from WHO_AM_I register.$/;"	v	file:
m_device_address	components\drivers_ext\mpu6050\mpu6050.c	/^static uint8_t       m_device_address;          \/\/ !< Device address in bits [7:1]$/;"	v	file:
mpu6050_init	components\drivers_ext\mpu6050\mpu6050.c	/^bool mpu6050_init(uint8_t device_address)$/;"	f
mpu6050_register_read	components\drivers_ext\mpu6050\mpu6050.c	/^bool mpu6050_register_read(uint8_t register_address, uint8_t * destination, uint8_t number_of_bytes)$/;"	f
mpu6050_register_write	components\drivers_ext\mpu6050\mpu6050.c	/^bool mpu6050_register_write(uint8_t register_address, uint8_t value)$/;"	f
mpu6050_verify_product_id	components\drivers_ext\mpu6050\mpu6050.c	/^bool mpu6050_verify_product_id(void)$/;"	f
MPU6050_H	components\drivers_ext\mpu6050\mpu6050.h	14;"	d
BUF_LEN	components\drivers_ext\nrf6350\nrf6350.c	31;"	d	file:
DDRAM_ADR	components\drivers_ext\nrf6350\nrf6350.c	19;"	d	file:
DDRAM_WR	components\drivers_ext\nrf6350\nrf6350.c	20;"	d	file:
FUNC_SET	components\drivers_ext\nrf6350\nrf6350.c	21;"	d	file:
JS_ADDR	components\drivers_ext\nrf6350\nrf6350.c	23;"	d	file:
LCD_ADDR	components\drivers_ext\nrf6350\nrf6350.c	22;"	d	file:
X	components\drivers_ext\nrf6350\nrf6350.c	25;"	d	file:
Y	components\drivers_ext\nrf6350\nrf6350.c	26;"	d	file:
data_buffer	components\drivers_ext\nrf6350\nrf6350.c	/^static uint8_t data_buffer[BUF_LEN]; \/\/!<  LCD data buffer$/;"	v	file:
empty_str	components\drivers_ext\nrf6350\nrf6350.c	/^static uint8_t empty_str[18] = {DDRAM_WR, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '}; \/\/!<  Blank line$/;"	v	file:
nrf6350_js_get_status	components\drivers_ext\nrf6350\nrf6350.c	/^bool nrf6350_js_get_status(uint8_t * js_state)$/;"	f
nrf6350_js_get_value	components\drivers_ext\nrf6350\nrf6350.c	/^bool  nrf6350_js_get_value(int8_t * val)$/;"	f
nrf6350_lcd_clear	components\drivers_ext\nrf6350\nrf6350.c	/^bool nrf6350_lcd_clear(void)$/;"	f
nrf6350_lcd_init	components\drivers_ext\nrf6350\nrf6350.c	/^bool nrf6350_lcd_init(void)$/;"	f
nrf6350_lcd_off	components\drivers_ext\nrf6350\nrf6350.c	/^bool nrf6350_lcd_off(void)$/;"	f
nrf6350_lcd_on	components\drivers_ext\nrf6350\nrf6350.c	/^bool nrf6350_lcd_on(void)$/;"	f
nrf6350_lcd_set_contrast	components\drivers_ext\nrf6350\nrf6350.c	/^bool nrf6350_lcd_set_contrast(uint8_t contrast)$/;"	f
nrf6350_lcd_set_instruction	components\drivers_ext\nrf6350\nrf6350.c	/^static bool nrf6350_lcd_set_instruction(uint8_t instr)$/;"	f	file:
nrf6350_lcd_wake_up	components\drivers_ext\nrf6350\nrf6350.c	/^bool nrf6350_lcd_wake_up(void)$/;"	f
nrf6350_lcd_write_string	components\drivers_ext\nrf6350\nrf6350.c	/^bool nrf6350_lcd_write_string(const char *p_text, uint8_t size, uint8_t line, uint8_t pos)$/;"	f
nrf6350_lcd_write_without_recovery	components\drivers_ext\nrf6350\nrf6350.c	/^static bool nrf6350_lcd_write_without_recovery(uint8_t * data,$/;"	f	file:
JS_BUTTON_DOWN	components\drivers_ext\nrf6350\nrf6350.h	24;"	d
JS_BUTTON_LEFT	components\drivers_ext\nrf6350\nrf6350.h	22;"	d
JS_BUTTON_NONE	components\drivers_ext\nrf6350\nrf6350.h	21;"	d
JS_BUTTON_PUSH	components\drivers_ext\nrf6350\nrf6350.h	23;"	d
JS_BUTTON_RIGHT	components\drivers_ext\nrf6350\nrf6350.h	26;"	d
JS_BUTTON_UP	components\drivers_ext\nrf6350\nrf6350.h	25;"	d
LCD_CONTRAST_HIGH	components\drivers_ext\nrf6350\nrf6350.h	31;"	d
LCD_CONTRAST_LOW	components\drivers_ext\nrf6350\nrf6350.h	29;"	d
LCD_CONTRAST_MEDIUM	components\drivers_ext\nrf6350\nrf6350.h	30;"	d
LCD_LLEN	components\drivers_ext\nrf6350\nrf6350.h	19;"	d
LCD_LOWER_LINE	components\drivers_ext\nrf6350\nrf6350.h	28;"	d
LCD_UPPER_LINE	components\drivers_ext\nrf6350\nrf6350.h	27;"	d
NRF6350_H_	components\drivers_ext\nrf6350\nrf6350.h	14;"	d
PRODUCT_ID_BYTES	components\drivers_ext\synaptics_touchpad\synaptics_touchpad.c	21;"	d	file:
expected_product_id	components\drivers_ext\synaptics_touchpad\synaptics_touchpad.c	/^static const uint8_t expected_product_id[PRODUCT_ID_BYTES] = {'T', 'M', '1', '9', '4', '4', '-', '0', '0', '2'};  \/\/!< Product ID expected to get from product ID query$/;"	v	file:
m_device_address	components\drivers_ext\synaptics_touchpad\synaptics_touchpad.c	/^static uint8_t       m_device_address; \/\/ !< Device address in bits [7:1]$/;"	v	file:
touchpad_init	components\drivers_ext\synaptics_touchpad\synaptics_touchpad.c	/^bool touchpad_init(uint8_t device_address)$/;"	f
touchpad_interrupt_status_read	components\drivers_ext\synaptics_touchpad\synaptics_touchpad.c	/^bool touchpad_interrupt_status_read(uint8_t *interrupt_status)$/;"	f
touchpad_product_id_read	components\drivers_ext\synaptics_touchpad\synaptics_touchpad.c	/^bool touchpad_product_id_read(uint8_t * product_id, uint8_t product_id_bytes)$/;"	f
touchpad_product_id_verify	components\drivers_ext\synaptics_touchpad\synaptics_touchpad.c	/^bool touchpad_product_id_verify(void)$/;"	f
touchpad_read_register	components\drivers_ext\synaptics_touchpad\synaptics_touchpad.c	/^bool touchpad_read_register(uint8_t register_address, uint8_t *value)$/;"	f
touchpad_reset	components\drivers_ext\synaptics_touchpad\synaptics_touchpad.c	/^bool touchpad_reset(void)$/;"	f
touchpad_set_sleep_mode	components\drivers_ext\synaptics_touchpad\synaptics_touchpad.c	/^bool touchpad_set_sleep_mode(TouchpadSleepMode_t mode)$/;"	f
touchpad_write_register	components\drivers_ext\synaptics_touchpad\synaptics_touchpad.c	/^bool touchpad_write_register(uint8_t register_address, const uint8_t value)$/;"	f
SYNAPTICS_TOUCHPAD_H	components\drivers_ext\synaptics_touchpad\synaptics_touchpad.h	14;"	d
SleepmodeNormal	components\drivers_ext\synaptics_touchpad\synaptics_touchpad.h	/^  SleepmodeNormal        = 0x00,  \/\/!< Normal operation$/;"	e	enum:__anon234
SleepmodeSensorSleep	components\drivers_ext\synaptics_touchpad\synaptics_touchpad.h	/^  SleepmodeSensorSleep   = 0x01  \/\/!< Low power operation$/;"	e	enum:__anon234
TOUCHPAD_BUTTON_STATUS	components\drivers_ext\synaptics_touchpad\synaptics_touchpad.h	35;"	d
TOUCHPAD_COMMAND	components\drivers_ext\synaptics_touchpad\synaptics_touchpad.h	40;"	d
TOUCHPAD_CONTROL	components\drivers_ext\synaptics_touchpad\synaptics_touchpad.h	39;"	d
TOUCHPAD_FINGER0_REL	components\drivers_ext\synaptics_touchpad\synaptics_touchpad.h	36;"	d
TOUCHPAD_GESTURE_FLAGS	components\drivers_ext\synaptics_touchpad\synaptics_touchpad.h	37;"	d
TOUCHPAD_INT_STATUS	components\drivers_ext\synaptics_touchpad\synaptics_touchpad.h	34;"	d
TOUCHPAD_PAGESELECT	components\drivers_ext\synaptics_touchpad\synaptics_touchpad.h	43;"	d
TOUCHPAD_PRODUCT_ID	components\drivers_ext\synaptics_touchpad\synaptics_touchpad.h	44;"	d
TOUCHPAD_RESET	components\drivers_ext\synaptics_touchpad\synaptics_touchpad.h	42;"	d
TOUCHPAD_SCROLL	components\drivers_ext\synaptics_touchpad\synaptics_touchpad.h	38;"	d
TouchpadSleepMode_t	components\drivers_ext\synaptics_touchpad\synaptics_touchpad.h	/^} TouchpadSleepMode_t;$/;"	t	typeref:enum:__anon234
ble_flash_block_write	components\drivers_nrf\ble_flash\ble_flash.c	/^uint32_t ble_flash_block_write(uint32_t * p_address, uint32_t * p_in_array, uint16_t word_count)$/;"	f
ble_flash_crc16_compute	components\drivers_nrf\ble_flash\ble_flash.c	/^uint16_t ble_flash_crc16_compute(uint8_t * p_data, uint16_t size, uint16_t * p_crc)$/;"	f
ble_flash_on_radio_active_evt	components\drivers_nrf\ble_flash\ble_flash.c	/^void ble_flash_on_radio_active_evt(bool radio_active)$/;"	f
ble_flash_page_addr	components\drivers_nrf\ble_flash\ble_flash.c	/^uint32_t ble_flash_page_addr(uint8_t page_num, uint32_t ** pp_page_addr)$/;"	f
ble_flash_page_erase	components\drivers_nrf\ble_flash\ble_flash.c	/^uint32_t ble_flash_page_erase(uint8_t page_num)$/;"	f
ble_flash_page_read	components\drivers_nrf\ble_flash\ble_flash.c	/^uint32_t ble_flash_page_read(uint8_t page_num, uint32_t * p_out_array, uint8_t * p_word_count)$/;"	f
ble_flash_page_write	components\drivers_nrf\ble_flash\ble_flash.c	/^uint32_t ble_flash_page_write(uint8_t page_num, uint32_t * p_in_array, uint8_t word_count)$/;"	f
ble_flash_word_write	components\drivers_nrf\ble_flash\ble_flash.c	/^uint32_t ble_flash_word_write(uint32_t * p_address, uint32_t value)$/;"	f
flash_page_erase	components\drivers_nrf\ble_flash\ble_flash.c	/^static void flash_page_erase(uint32_t * p_page)$/;"	f	file:
flash_word_unprotected_write	components\drivers_nrf\ble_flash\ble_flash.c	/^static void flash_word_unprotected_write(uint32_t * p_address, uint32_t value)$/;"	f	file:
flash_word_write	components\drivers_nrf\ble_flash\ble_flash.c	/^static void flash_word_write(uint32_t * p_address, uint32_t value)$/;"	f	file:
m_radio_active	components\drivers_nrf\ble_flash\ble_flash.c	/^static volatile bool m_radio_active = false;  \/**< TRUE if radio is active (or about to become active), FALSE otherwise. *\/$/;"	v	file:
BLE_FLASH_EMPTY_MASK	components\drivers_nrf\ble_flash\ble_flash.h	39;"	d
BLE_FLASH_H__	components\drivers_nrf\ble_flash\ble_flash.h	31;"	d
BLE_FLASH_MAGIC_NUMBER	components\drivers_nrf\ble_flash\ble_flash.h	38;"	d
BLE_FLASH_PAGE_END	components\drivers_nrf\ble_flash\ble_flash.h	48;"	d
BLE_FLASH_PAGE_SIZE	components\drivers_nrf\ble_flash\ble_flash.h	37;"	d
CLOCK_CRITICAL_REGION_ENTER	components\drivers_nrf\clock\nrf_drv_clock.c	53;"	d	file:
CLOCK_CRITICAL_REGION_ENTER	components\drivers_nrf\clock\nrf_drv_clock.c	72;"	d	file:
CLOCK_CRITICAL_REGION_EXIT	components\drivers_nrf\clock\nrf_drv_clock.c	61;"	d	file:
CLOCK_CRITICAL_REGION_EXIT	components\drivers_nrf\clock\nrf_drv_clock.c	76;"	d	file:
INT_MAX	components\drivers_nrf\clock\nrf_drv_clock.c	30;"	d	file:
NRF_CLOCK_LF_SRC_RC	components\drivers_nrf\clock\nrf_drv_clock.c	25;"	d	file:
NRF_CLOCK_LF_SRC_RC	components\drivers_nrf\clock\nrf_drv_clock.c	456;"	d	file:
NRF_CLOCK_LF_SRC_Synth	components\drivers_nrf\clock\nrf_drv_clock.c	27;"	d	file:
NRF_CLOCK_LF_SRC_Synth	components\drivers_nrf\clock\nrf_drv_clock.c	458;"	d	file:
NRF_CLOCK_LF_SRC_Xtal	components\drivers_nrf\clock\nrf_drv_clock.c	26;"	d	file:
NRF_CLOCK_LF_SRC_Xtal	components\drivers_nrf\clock\nrf_drv_clock.c	457;"	d	file:
POWER_CLOCK_IRQHandler	components\drivers_nrf\clock\nrf_drv_clock.c	/^void POWER_CLOCK_IRQHandler(void)$/;"	f
calibration_in_progress	components\drivers_nrf\clock\nrf_drv_clock.c	/^    volatile bool  calibration_in_progress; \/*< Indicate the state of calibration *\/$/;"	m	struct:__anon235	file:
hfclk_control	components\drivers_nrf\clock\nrf_drv_clock.c	/^static bool hfclk_control(bool interrupt_enable)$/;"	f	file:
hfclk_requests	components\drivers_nrf\clock\nrf_drv_clock.c	/^    uint32_t       hfclk_requests;          \/*< High frequency clock state. *\/$/;"	m	struct:__anon235	file:
hfclk_start	components\drivers_nrf\clock\nrf_drv_clock.c	/^static void hfclk_start(void)$/;"	f	file:
hfclk_stop	components\drivers_nrf\clock\nrf_drv_clock.c	/^static void hfclk_stop(void)$/;"	f	file:
lfclk_control	components\drivers_nrf\clock\nrf_drv_clock.c	/^static void lfclk_control(void)$/;"	f	file:
lfclk_requests	components\drivers_nrf\clock\nrf_drv_clock.c	/^    uint32_t       lfclk_requests;          \/*< Low frequency clock state. *\/$/;"	m	struct:__anon235	file:
lfclk_start	components\drivers_nrf\clock\nrf_drv_clock.c	/^static void lfclk_start(void)$/;"	f	file:
lfclk_stop	components\drivers_nrf\clock\nrf_drv_clock.c	/^static void lfclk_stop(void)$/;"	f	file:
m_clock_cb	components\drivers_nrf\clock\nrf_drv_clock.c	/^static nrf_drv_clock_cb_t m_clock_cb;$/;"	v	file:
m_default_config	components\drivers_nrf\clock\nrf_drv_clock.c	/^static const nrf_drv_clock_config_t m_default_config = NRF_DRV_CLOCK_DEAFULT_CONFIG;$/;"	v	file:
m_in_critical_region	components\drivers_nrf\clock\nrf_drv_clock.c	/^static uint32_t m_in_critical_region = 0;$/;"	v	file:
module_initialized	components\drivers_nrf\clock\nrf_drv_clock.c	/^    bool           module_initialized;      \/*< Indicate the state of module *\/$/;"	m	struct:__anon235	file:
nrf_drv_clock_calibration_force	components\drivers_nrf\clock\nrf_drv_clock.c	/^ret_code_t nrf_drv_clock_calibration_force(void)$/;"	f
nrf_drv_clock_cb_t	components\drivers_nrf\clock\nrf_drv_clock.c	/^}nrf_drv_clock_cb_t;$/;"	t	typeref:struct:__anon235	file:
nrf_drv_clock_hfclk_is_running	components\drivers_nrf\clock\nrf_drv_clock.c	/^bool nrf_drv_clock_hfclk_is_running(void)$/;"	f
nrf_drv_clock_hfclk_release	components\drivers_nrf\clock\nrf_drv_clock.c	/^void nrf_drv_clock_hfclk_release(void)$/;"	f
nrf_drv_clock_hfclk_request	components\drivers_nrf\clock\nrf_drv_clock.c	/^void nrf_drv_clock_hfclk_request(void)$/;"	f
nrf_drv_clock_init	components\drivers_nrf\clock\nrf_drv_clock.c	/^ret_code_t nrf_drv_clock_init(nrf_drv_clock_config_t const * p_config)$/;"	f
nrf_drv_clock_is_calibrating	components\drivers_nrf\clock\nrf_drv_clock.c	/^ret_code_t nrf_drv_clock_is_calibrating(bool * p_is_calibrating)$/;"	f
nrf_drv_clock_lfclk_is_running	components\drivers_nrf\clock\nrf_drv_clock.c	/^bool nrf_drv_clock_lfclk_is_running(void)$/;"	f
nrf_drv_clock_lfclk_release	components\drivers_nrf\clock\nrf_drv_clock.c	/^void nrf_drv_clock_lfclk_release(void)$/;"	f
nrf_drv_clock_lfclk_request	components\drivers_nrf\clock\nrf_drv_clock.c	/^void nrf_drv_clock_lfclk_request(void)$/;"	f
nrf_drv_clock_uninit	components\drivers_nrf\clock\nrf_drv_clock.c	/^void nrf_drv_clock_uninit(void)$/;"	f
NRF_DRV_CLOCK_DEAFULT_CONFIG	components\drivers_nrf\clock\nrf_drv_clock.h	65;"	d
NRF_DRV_CLOCK_H__	components\drivers_nrf\clock\nrf_drv_clock.h	14;"	d
RC_1000MS_CALIBRATION_INTERVAL	components\drivers_nrf\clock\nrf_drv_clock.h	/^    RC_1000MS_CALIBRATION_INTERVAL  = 4,  \/*< Calibration every 1000 ms. *\/$/;"	e	enum:__anon236
RC_16000MS_CALIBRATION_INTERVAL	components\drivers_nrf\clock\nrf_drv_clock.h	/^    RC_16000MS_CALIBRATION_INTERVAL = 64  \/*< Calibration every 16000 ms. *\/$/;"	e	enum:__anon236
RC_2000MS_CALIBRATION_INTERVAL	components\drivers_nrf\clock\nrf_drv_clock.h	/^    RC_2000MS_CALIBRATION_INTERVAL  = 8,  \/*< Calibration every 2000 ms. *\/$/;"	e	enum:__anon236
RC_250MS_CALIBRATION_INTERVAL	components\drivers_nrf\clock\nrf_drv_clock.h	/^    RC_250MS_CALIBRATION_INTERVAL   = 1,  \/*< Calibration every 250 ms. *\/$/;"	e	enum:__anon236
RC_4000MS_CALIBRATION_INTERVAL	components\drivers_nrf\clock\nrf_drv_clock.h	/^    RC_4000MS_CALIBRATION_INTERVAL  = 16, \/*< Calibration every 4000 ms. *\/$/;"	e	enum:__anon236
RC_500MS_CALIBRATION_INTERVAL	components\drivers_nrf\clock\nrf_drv_clock.h	/^    RC_500MS_CALIBRATION_INTERVAL   = 2,  \/*< Calibration every 500 ms. *\/$/;"	e	enum:__anon236
RC_8000MS_CALIBRATION_INTERVAL	components\drivers_nrf\clock\nrf_drv_clock.h	/^    RC_8000MS_CALIBRATION_INTERVAL  = 32, \/*< Calibration every 8000 ms. *\/$/;"	e	enum:__anon236
cal_interval	components\drivers_nrf\clock\nrf_drv_clock.h	/^    nrf_drv_clock_lf_cal_interval_t    cal_interval;       \/**< Calibration interval. *\/$/;"	m	struct:__anon237
interrupt_priority	components\drivers_nrf\clock\nrf_drv_clock.h	/^    uint8_t                            interrupt_priority; \/**< Clock interrupt priority. *\/$/;"	m	struct:__anon237
nrf_drv_clock_config_t	components\drivers_nrf\clock\nrf_drv_clock.h	/^} nrf_drv_clock_config_t;$/;"	t	typeref:struct:__anon237
nrf_drv_clock_lf_cal_interval_t	components\drivers_nrf\clock\nrf_drv_clock.h	/^} nrf_drv_clock_lf_cal_interval_t;$/;"	t	typeref:enum:__anon236
nrf_drv_clock_ppi_event_addr	components\drivers_nrf\clock\nrf_drv_clock.h	/^__STATIC_INLINE uint32_t nrf_drv_clock_ppi_event_addr(nrf_clock_events_t event)$/;"	f
nrf_drv_clock_ppi_task_addr	components\drivers_nrf\clock\nrf_drv_clock.h	/^__STATIC_INLINE uint32_t nrf_drv_clock_ppi_task_addr(nrf_clock_tasks_t task)$/;"	f
nrf_drv_common_irq_enable	components\drivers_nrf\common\nrf_drv_common.c	/^void nrf_drv_common_irq_enable(IRQn_Type IRQn, uint8_t priority)$/;"	f
NRF_DRV_COMMON_H__	components\drivers_nrf\common\nrf_drv_common.h	14;"	d
NRF_DRV_PWR_CTRL_OFF	components\drivers_nrf\common\nrf_drv_common.h	/^    NRF_DRV_PWR_CTRL_OFF   \/**< Power off request. *\/$/;"	e	enum:__anon239
NRF_DRV_PWR_CTRL_ON	components\drivers_nrf\common\nrf_drv_common.h	/^    NRF_DRV_PWR_CTRL_ON,   \/**< Power on request. *\/$/;"	e	enum:__anon239
NRF_DRV_STATE_INITIALIZED	components\drivers_nrf\common\nrf_drv_common.h	/^	NRF_DRV_STATE_INITIALIZED, \/**< Initialized but powered off. *\/$/;"	e	enum:__anon238
NRF_DRV_STATE_POWERED_ON	components\drivers_nrf\common\nrf_drv_common.h	/^	NRF_DRV_STATE_POWERED_ON$/;"	e	enum:__anon238
NRF_DRV_STATE_UNINITIALIZED	components\drivers_nrf\common\nrf_drv_common.h	/^	NRF_DRV_STATE_UNINITIALIZED, \/**< Uninitialized. *\/$/;"	e	enum:__anon238
nrf_drv_common_irq_disable	components\drivers_nrf\common\nrf_drv_common.h	/^__STATIC_INLINE void nrf_drv_common_irq_disable(IRQn_Type IRQn)$/;"	f
nrf_drv_pwr_ctrl_t	components\drivers_nrf\common\nrf_drv_common.h	/^} nrf_drv_pwr_ctrl_t;$/;"	t	typeref:enum:__anon239
nrf_drv_state_t	components\drivers_nrf\common\nrf_drv_common.h	/^} nrf_drv_state_t;$/;"	t	typeref:enum:__anon238
NRF_DRV_VALIDATION__	components\drivers_nrf\common\nrf_drv_validation.h	14;"	d
CLOCK_CONFIG_IRQ_PRIORITY	components\drivers_nrf\config\nrf_drv_config.h	31;"	d
CLOCK_CONFIG_LF_RC_CAL_INTERVAL	components\drivers_nrf\config\nrf_drv_config.h	30;"	d
CLOCK_CONFIG_LF_SRC	components\drivers_nrf\config\nrf_drv_config.h	29;"	d
CLOCK_CONFIG_XTAL_FREQ	components\drivers_nrf\config\nrf_drv_config.h	28;"	d
LPCOMP_CONFIG_DETECTION	components\drivers_nrf\config\nrf_drv_config.h	125;"	d
LPCOMP_CONFIG_INPUT	components\drivers_nrf\config\nrf_drv_config.h	127;"	d
LPCOMP_CONFIG_IRQ_PRIORITY	components\drivers_nrf\config\nrf_drv_config.h	126;"	d
LPCOMP_CONFIG_REFERENCE	components\drivers_nrf\config\nrf_drv_config.h	124;"	d
LPCOMP_ENABLED	components\drivers_nrf\config\nrf_drv_config.h	121;"	d
NRF_DRV_CONFIG_H	components\drivers_nrf\config\nrf_drv_config.h	14;"	d
NRF_MAXIMUM_LATENCY_US	components\drivers_nrf\config\nrf_drv_config.h	92;"	d
QDEC_CONFIG_DBFEN	components\drivers_nrf\config\nrf_drv_config.h	116;"	d
QDEC_CONFIG_IRQ_PRIORITY	components\drivers_nrf\config\nrf_drv_config.h	115;"	d
QDEC_CONFIG_LEDPOL	components\drivers_nrf\config\nrf_drv_config.h	114;"	d
QDEC_CONFIG_LEDPRE	components\drivers_nrf\config\nrf_drv_config.h	113;"	d
QDEC_CONFIG_PIO_A	components\drivers_nrf\config\nrf_drv_config.h	110;"	d
QDEC_CONFIG_PIO_B	components\drivers_nrf\config\nrf_drv_config.h	111;"	d
QDEC_CONFIG_PIO_LED	components\drivers_nrf\config\nrf_drv_config.h	112;"	d
QDEC_CONFIG_REPORTPER	components\drivers_nrf\config\nrf_drv_config.h	108;"	d
QDEC_CONFIG_SAMPLEPER	components\drivers_nrf\config\nrf_drv_config.h	109;"	d
QDEC_CONFIG_SAMPLE_INTEN	components\drivers_nrf\config\nrf_drv_config.h	117;"	d
QDEC_ENABLED	components\drivers_nrf\config\nrf_drv_config.h	105;"	d
RNG_CONFIG_ERROR_CORRECTION	components\drivers_nrf\config\nrf_drv_config.h	98;"	d
RNG_CONFIG_IRQ_PRIORITY	components\drivers_nrf\config\nrf_drv_config.h	100;"	d
RNG_CONFIG_POOL_SIZE	components\drivers_nrf\config\nrf_drv_config.h	99;"	d
RNG_ENABLED	components\drivers_nrf\config\nrf_drv_config.h	95;"	d
RTC0_CONFIG_FREQUENCY	components\drivers_nrf\config\nrf_drv_config.h	73;"	d
RTC0_CONFIG_IRQ_PRIORITY	components\drivers_nrf\config\nrf_drv_config.h	74;"	d
RTC0_CONFIG_RELIABLE	components\drivers_nrf\config\nrf_drv_config.h	75;"	d
RTC0_ENABLED	components\drivers_nrf\config\nrf_drv_config.h	70;"	d
RTC0_INSTANCE_INDEX	components\drivers_nrf\config\nrf_drv_config.h	77;"	d
RTC1_CONFIG_FREQUENCY	components\drivers_nrf\config\nrf_drv_config.h	83;"	d
RTC1_CONFIG_IRQ_PRIORITY	components\drivers_nrf\config\nrf_drv_config.h	84;"	d
RTC1_CONFIG_RELIABLE	components\drivers_nrf\config\nrf_drv_config.h	85;"	d
RTC1_ENABLED	components\drivers_nrf\config\nrf_drv_config.h	80;"	d
RTC1_INSTANCE_INDEX	components\drivers_nrf\config\nrf_drv_config.h	87;"	d
RTC_COUNT	components\drivers_nrf\config\nrf_drv_config.h	90;"	d
TIMER0_CONFIG_BIT_WIDTH	components\drivers_nrf\config\nrf_drv_config.h	39;"	d
TIMER0_CONFIG_FREQUENCY	components\drivers_nrf\config\nrf_drv_config.h	37;"	d
TIMER0_CONFIG_IRQ_PRIORITY	components\drivers_nrf\config\nrf_drv_config.h	40;"	d
TIMER0_CONFIG_MODE	components\drivers_nrf\config\nrf_drv_config.h	38;"	d
TIMER0_ENABLED	components\drivers_nrf\config\nrf_drv_config.h	34;"	d
TIMER0_INSTANCE_INDEX	components\drivers_nrf\config\nrf_drv_config.h	42;"	d
TIMER1_CONFIG_BIT_WIDTH	components\drivers_nrf\config\nrf_drv_config.h	50;"	d
TIMER1_CONFIG_FREQUENCY	components\drivers_nrf\config\nrf_drv_config.h	48;"	d
TIMER1_CONFIG_IRQ_PRIORITY	components\drivers_nrf\config\nrf_drv_config.h	51;"	d
TIMER1_CONFIG_MODE	components\drivers_nrf\config\nrf_drv_config.h	49;"	d
TIMER1_ENABLED	components\drivers_nrf\config\nrf_drv_config.h	45;"	d
TIMER1_INSTANCE_INDEX	components\drivers_nrf\config\nrf_drv_config.h	53;"	d
TIMER2_CONFIG_BIT_WIDTH	components\drivers_nrf\config\nrf_drv_config.h	61;"	d
TIMER2_CONFIG_FREQUENCY	components\drivers_nrf\config\nrf_drv_config.h	59;"	d
TIMER2_CONFIG_IRQ_PRIORITY	components\drivers_nrf\config\nrf_drv_config.h	62;"	d
TIMER2_CONFIG_MODE	components\drivers_nrf\config\nrf_drv_config.h	60;"	d
TIMER2_ENABLED	components\drivers_nrf\config\nrf_drv_config.h	56;"	d
TIMER2_INSTANCE_INDEX	components\drivers_nrf\config\nrf_drv_config.h	64;"	d
TIMER_COUNT	components\drivers_nrf\config\nrf_drv_config.h	67;"	d
WDT_CONFIG_BEHAVIOUR	components\drivers_nrf\config\nrf_drv_config.h	134;"	d
WDT_CONFIG_IRQ_PRIORITY	components\drivers_nrf\config\nrf_drv_config.h	136;"	d
WDT_CONFIG_RELOAD_VALUE	components\drivers_nrf\config\nrf_drv_config.h	135;"	d
WDT_ENABLED	components\drivers_nrf\config\nrf_drv_config.h	131;"	d
nrf_adc_configure	components\drivers_nrf\hal\nrf_adc.c	/^void nrf_adc_configure(nrf_adc_config_t * config)$/;"	f
nrf_adc_convert_single	components\drivers_nrf\hal\nrf_adc.c	/^int32_t nrf_adc_convert_single(nrf_adc_config_input_t input)$/;"	f
NRF_ADC_CONFIG_DEFAULT	components\drivers_nrf\hal\nrf_adc.h	118;"	d
NRF_ADC_CONFIG_INPUT_0	components\drivers_nrf\hal\nrf_adc.h	/^    NRF_ADC_CONFIG_INPUT_0        = ADC_CONFIG_PSEL_AnalogInput0, \/**< Input 0. *\/$/;"	e	enum:__anon243
NRF_ADC_CONFIG_INPUT_1	components\drivers_nrf\hal\nrf_adc.h	/^    NRF_ADC_CONFIG_INPUT_1        = ADC_CONFIG_PSEL_AnalogInput1, \/**< Input 1. *\/$/;"	e	enum:__anon243
NRF_ADC_CONFIG_INPUT_2	components\drivers_nrf\hal\nrf_adc.h	/^    NRF_ADC_CONFIG_INPUT_2        = ADC_CONFIG_PSEL_AnalogInput2, \/**< Input 2. *\/$/;"	e	enum:__anon243
NRF_ADC_CONFIG_INPUT_3	components\drivers_nrf\hal\nrf_adc.h	/^    NRF_ADC_CONFIG_INPUT_3        = ADC_CONFIG_PSEL_AnalogInput3, \/**< Input 3. *\/$/;"	e	enum:__anon243
NRF_ADC_CONFIG_INPUT_4	components\drivers_nrf\hal\nrf_adc.h	/^    NRF_ADC_CONFIG_INPUT_4        = ADC_CONFIG_PSEL_AnalogInput4, \/**< Input 4. *\/$/;"	e	enum:__anon243
NRF_ADC_CONFIG_INPUT_5	components\drivers_nrf\hal\nrf_adc.h	/^    NRF_ADC_CONFIG_INPUT_5        = ADC_CONFIG_PSEL_AnalogInput5, \/**< Input 5. *\/$/;"	e	enum:__anon243
NRF_ADC_CONFIG_INPUT_6	components\drivers_nrf\hal\nrf_adc.h	/^    NRF_ADC_CONFIG_INPUT_6        = ADC_CONFIG_PSEL_AnalogInput6, \/**< Input 6. *\/$/;"	e	enum:__anon243
NRF_ADC_CONFIG_INPUT_7	components\drivers_nrf\hal\nrf_adc.h	/^    NRF_ADC_CONFIG_INPUT_7        = ADC_CONFIG_PSEL_AnalogInput7, \/**< Input 7. *\/$/;"	e	enum:__anon243
NRF_ADC_CONFIG_INPUT_DISABLED	components\drivers_nrf\hal\nrf_adc.h	/^    NRF_ADC_CONFIG_INPUT_DISABLED = ADC_CONFIG_PSEL_Disabled,     \/**< No input selected. *\/$/;"	e	enum:__anon243
NRF_ADC_CONFIG_REF_EXT_REF0	components\drivers_nrf\hal\nrf_adc.h	/^    NRF_ADC_CONFIG_REF_EXT_REF0         = ADC_CONFIG_REFSEL_External |$/;"	e	enum:__anon242
NRF_ADC_CONFIG_REF_EXT_REF1	components\drivers_nrf\hal\nrf_adc.h	/^        NRF_ADC_CONFIG_REF_EXT_REF1 = ADC_CONFIG_REFSEL_External |$/;"	e	enum:__anon242
NRF_ADC_CONFIG_REF_SUPPLY_ONE_HALF	components\drivers_nrf\hal\nrf_adc.h	/^    NRF_ADC_CONFIG_REF_SUPPLY_ONE_HALF  = ADC_CONFIG_REFSEL_SupplyOneHalfPrescaling,  \/**< 1\/2 of power supply. *\/$/;"	e	enum:__anon242
NRF_ADC_CONFIG_REF_SUPPLY_ONE_THIRD	components\drivers_nrf\hal\nrf_adc.h	/^    NRF_ADC_CONFIG_REF_SUPPLY_ONE_THIRD = ADC_CONFIG_REFSEL_SupplyOneThirdPrescaling, \/**< 1\/3 of power supply. *\/$/;"	e	enum:__anon242
NRF_ADC_CONFIG_REF_VBG	components\drivers_nrf\hal\nrf_adc.h	/^    NRF_ADC_CONFIG_REF_VBG              = ADC_CONFIG_REFSEL_VBG,                      \/**< 1.2 V reference. *\/$/;"	e	enum:__anon242
NRF_ADC_CONFIG_RES_10BIT	components\drivers_nrf\hal\nrf_adc.h	/^    NRF_ADC_CONFIG_RES_10BIT = ADC_CONFIG_RES_10bit, \/**< 10 bit resolution. *\/$/;"	e	enum:__anon240
NRF_ADC_CONFIG_RES_8BIT	components\drivers_nrf\hal\nrf_adc.h	/^    NRF_ADC_CONFIG_RES_8BIT  = ADC_CONFIG_RES_8bit,  \/**< 8 bit resolution. *\/$/;"	e	enum:__anon240
NRF_ADC_CONFIG_RES_9BIT	components\drivers_nrf\hal\nrf_adc.h	/^    NRF_ADC_CONFIG_RES_9BIT  = ADC_CONFIG_RES_9bit,  \/**< 9 bit resolution. *\/$/;"	e	enum:__anon240
NRF_ADC_CONFIG_SCALING_INPUT_FULL_SCALE	components\drivers_nrf\hal\nrf_adc.h	/^    NRF_ADC_CONFIG_SCALING_INPUT_FULL_SCALE  = ADC_CONFIG_INPSEL_AnalogInputNoPrescaling,        \/**< Full scale input. *\/$/;"	e	enum:__anon241
NRF_ADC_CONFIG_SCALING_INPUT_ONE_THIRD	components\drivers_nrf\hal\nrf_adc.h	/^    NRF_ADC_CONFIG_SCALING_INPUT_ONE_THIRD   = ADC_CONFIG_INPSEL_AnalogInputOneThirdPrescaling,  \/**< 1\/3 scale input. *\/$/;"	e	enum:__anon241
NRF_ADC_CONFIG_SCALING_INPUT_TWO_THIRDS	components\drivers_nrf\hal\nrf_adc.h	/^    NRF_ADC_CONFIG_SCALING_INPUT_TWO_THIRDS  = ADC_CONFIG_INPSEL_AnalogInputTwoThirdsPrescaling, \/**< 2\/3 scale input. *\/$/;"	e	enum:__anon241
NRF_ADC_CONFIG_SCALING_SUPPLY_ONE_THIRD	components\drivers_nrf\hal\nrf_adc.h	/^    NRF_ADC_CONFIG_SCALING_SUPPLY_ONE_THIRD  = ADC_CONFIG_INPSEL_SupplyOneThirdPrescaling        \/**< 1\/3 of supply. *\/$/;"	e	enum:__anon241
NRF_ADC_CONFIG_SCALING_SUPPLY_TWO_THIRDS	components\drivers_nrf\hal\nrf_adc.h	/^    NRF_ADC_CONFIG_SCALING_SUPPLY_TWO_THIRDS = ADC_CONFIG_INPSEL_SupplyTwoThirdsPrescaling,      \/**< 2\/3 of supply. *\/$/;"	e	enum:__anon241
NRF_ADC_EVENT_END	components\drivers_nrf\hal\nrf_adc.h	/^    NRF_ADC_EVENT_END = offsetof(NRF_ADC_Type, EVENTS_END) \/**< End of conversion event. *\/$/;"	e	enum:__anon245
NRF_ADC_H_	components\drivers_nrf\hal\nrf_adc.h	19;"	d
NRF_ADC_TASK_START	components\drivers_nrf\hal\nrf_adc.h	/^    NRF_ADC_TASK_START = offsetof(NRF_ADC_Type, TASKS_START), \/**< ADC start sampling task. *\/$/;"	e	enum:__anon244
NRF_ADC_TASK_STOP	components\drivers_nrf\hal\nrf_adc.h	/^    NRF_ADC_TASK_STOP  = offsetof(NRF_ADC_Type, TASKS_STOP)   \/**< ADC stop sampling task. *\/$/;"	e	enum:__anon244
nrf_adc_config_input_t	components\drivers_nrf\hal\nrf_adc.h	/^} nrf_adc_config_input_t;$/;"	t	typeref:enum:__anon243
nrf_adc_config_reference_t	components\drivers_nrf\hal\nrf_adc.h	/^} nrf_adc_config_reference_t;$/;"	t	typeref:enum:__anon242
nrf_adc_config_resolution_t	components\drivers_nrf\hal\nrf_adc.h	/^} nrf_adc_config_resolution_t;$/;"	t	typeref:enum:__anon240
nrf_adc_config_scaling_t	components\drivers_nrf\hal\nrf_adc.h	/^} nrf_adc_config_scaling_t;$/;"	t	typeref:enum:__anon241
nrf_adc_config_t	components\drivers_nrf\hal\nrf_adc.h	/^} nrf_adc_config_t;$/;"	t	typeref:struct:__anon246
nrf_adc_conversion_event_clean	components\drivers_nrf\hal\nrf_adc.h	/^__STATIC_INLINE void nrf_adc_conversion_event_clean(void)$/;"	f
nrf_adc_conversion_finished	components\drivers_nrf\hal\nrf_adc.h	/^__STATIC_INLINE bool nrf_adc_conversion_finished(void)$/;"	f
nrf_adc_event_address_get	components\drivers_nrf\hal\nrf_adc.h	/^__STATIC_INLINE uint32_t * nrf_adc_event_address_get(nrf_adc_event_t adc_event)$/;"	f
nrf_adc_event_t	components\drivers_nrf\hal\nrf_adc.h	/^} nrf_adc_event_t;$/;"	t	typeref:enum:__anon245
nrf_adc_input_select	components\drivers_nrf\hal\nrf_adc.h	/^__STATIC_INLINE void nrf_adc_input_select(nrf_adc_config_input_t input)$/;"	f
nrf_adc_int_disable	components\drivers_nrf\hal\nrf_adc.h	/^__STATIC_INLINE void nrf_adc_int_disable(uint32_t interrupts)$/;"	f
nrf_adc_int_enable	components\drivers_nrf\hal\nrf_adc.h	/^__STATIC_INLINE void nrf_adc_int_enable(uint32_t interrupts)$/;"	f
nrf_adc_int_get	components\drivers_nrf\hal\nrf_adc.h	/^__STATIC_INLINE uint32_t nrf_adc_int_get(uint32_t mask)$/;"	f
nrf_adc_is_busy	components\drivers_nrf\hal\nrf_adc.h	/^__STATIC_INLINE bool nrf_adc_is_busy(void)$/;"	f
nrf_adc_result_get	components\drivers_nrf\hal\nrf_adc.h	/^__STATIC_INLINE int32_t nrf_adc_result_get(void)$/;"	f
nrf_adc_start	components\drivers_nrf\hal\nrf_adc.h	/^__STATIC_INLINE void nrf_adc_start(void)$/;"	f
nrf_adc_stop	components\drivers_nrf\hal\nrf_adc.h	/^__STATIC_INLINE void nrf_adc_stop(void)$/;"	f
nrf_adc_task_address_get	components\drivers_nrf\hal\nrf_adc.h	/^__STATIC_INLINE uint32_t * nrf_adc_task_address_get(nrf_adc_task_t adc_task)$/;"	f
nrf_adc_task_t	components\drivers_nrf\hal\nrf_adc.h	/^} nrf_adc_task_t;$/;"	t	typeref:enum:__anon244
reference	components\drivers_nrf\hal\nrf_adc.h	/^    nrf_adc_config_reference_t  reference;  \/**< ADC reference. *\/$/;"	m	struct:__anon246
resolution	components\drivers_nrf\hal\nrf_adc.h	/^    nrf_adc_config_resolution_t resolution; \/**< ADC resolution. *\/$/;"	m	struct:__anon246
scaling	components\drivers_nrf\hal\nrf_adc.h	/^    nrf_adc_config_scaling_t    scaling;    \/**< ADC scaling factor. *\/$/;"	m	struct:__anon246
NRF_CLOCK_EVENTS_CTTO	components\drivers_nrf\hal\nrf_clock.h	/^    NRF_CLOCK_EVENTS_CTTO         = offsetof(NRF_CLOCK_Type, EVENTS_CTTO)          \/**< Calibration timer time-out.*\/$/;"	e	enum:__anon253
NRF_CLOCK_EVENTS_DONE	components\drivers_nrf\hal\nrf_clock.h	/^    NRF_CLOCK_EVENTS_DONE         = offsetof(NRF_CLOCK_Type, EVENTS_DONE),         \/**< Calibration of LFCLK RC oscillator completed.*\/$/;"	e	enum:__anon253
NRF_CLOCK_EVENTS_HFCLKSTARTED	components\drivers_nrf\hal\nrf_clock.h	/^    NRF_CLOCK_EVENTS_HFCLKSTARTED = offsetof(NRF_CLOCK_Type, EVENTS_HFCLKSTARTED), \/**< HFCLK oscillator started.*\/$/;"	e	enum:__anon253
NRF_CLOCK_EVENTS_LFCLKSTARTED	components\drivers_nrf\hal\nrf_clock.h	/^    NRF_CLOCK_EVENTS_LFCLKSTARTED = offsetof(NRF_CLOCK_Type, EVENTS_LFCLKSTARTED), \/**< LFCLK oscillator started.*\/$/;"	e	enum:__anon253
NRF_CLOCK_EVENT_CLEAR	components\drivers_nrf\hal\nrf_clock.h	30;"	d
NRF_CLOCK_HF_SRC_RC	components\drivers_nrf\hal\nrf_clock.h	/^    NRF_CLOCK_HF_SRC_RC   = CLOCK_HFCLKSTAT_SRC_RC,  \/**< Internal 16 MHz RC oscillator. *\/$/;"	e	enum:__anon248
NRF_CLOCK_HF_SRC_Xtal	components\drivers_nrf\hal\nrf_clock.h	/^    NRF_CLOCK_HF_SRC_Xtal = CLOCK_HFCLKSTAT_SRC_Xtal \/**< External 16 MHz\/32 MHz crystal oscillator. *\/$/;"	e	enum:__anon248
NRF_CLOCK_H__	components\drivers_nrf\hal\nrf_clock.h	14;"	d
NRF_CLOCK_INT_CTTO_MASK	components\drivers_nrf\hal\nrf_clock.h	/^    NRF_CLOCK_INT_CTTO_MASK       = CLOCK_INTENSET_CTTO_Msk          \/**< Interrupt on CTTO event. *\/$/;"	e	enum:__anon251
NRF_CLOCK_INT_DONE_MASK	components\drivers_nrf\hal\nrf_clock.h	/^    NRF_CLOCK_INT_DONE_MASK       = CLOCK_INTENSET_DONE_Msk,         \/**< Interrupt on DONE event. *\/$/;"	e	enum:__anon251
NRF_CLOCK_INT_HF_STARTED_MASK	components\drivers_nrf\hal\nrf_clock.h	/^    NRF_CLOCK_INT_HF_STARTED_MASK = CLOCK_INTENSET_HFCLKSTARTED_Msk, \/**< Interrupt on HFCLKSTARTED event. *\/$/;"	e	enum:__anon251
NRF_CLOCK_INT_LF_STARTED_MASK	components\drivers_nrf\hal\nrf_clock.h	/^    NRF_CLOCK_INT_LF_STARTED_MASK = CLOCK_INTENSET_LFCLKSTARTED_Msk, \/**< Interrupt on LFCLKSTARTED event. *\/$/;"	e	enum:__anon251
NRF_CLOCK_LF_SRC_RC	components\drivers_nrf\hal\nrf_clock.h	/^    NRF_CLOCK_LF_SRC_RC    = CLOCK_LFCLKSRC_SRC_RC,   \/**< Internal 32 kHz RC oscillator. *\/$/;"	e	enum:__anon247
NRF_CLOCK_LF_SRC_Synth	components\drivers_nrf\hal\nrf_clock.h	/^    NRF_CLOCK_LF_SRC_Synth = CLOCK_LFCLKSRC_SRC_Synth \/**< Internal 32 kHz synthesizer from HFCLK system clock. *\/$/;"	e	enum:__anon247
NRF_CLOCK_LF_SRC_Xtal	components\drivers_nrf\hal\nrf_clock.h	/^    NRF_CLOCK_LF_SRC_Xtal  = CLOCK_LFCLKSRC_SRC_Xtal, \/**< External 32 kHz crystal. *\/$/;"	e	enum:__anon247
NRF_CLOCK_START_TASK_NOT_TRIGGERED	components\drivers_nrf\hal\nrf_clock.h	/^    NRF_CLOCK_START_TASK_NOT_TRIGGERED = CLOCK_LFCLKRUN_STATUS_NotTriggered, \/**< Task LFCLKSTART\/HFCLKSTART has not been triggered. *\/$/;"	e	enum:__anon249
NRF_CLOCK_START_TASK_TRIGGERED	components\drivers_nrf\hal\nrf_clock.h	/^    NRF_CLOCK_START_TASK_TRIGGERED     = CLOCK_LFCLKRUN_STATUS_Triggered     \/**< Task LFCLKSTART\/HFCLKSTART has been triggered. *\/$/;"	e	enum:__anon249
NRF_CLOCK_TASKS_CAL	components\drivers_nrf\hal\nrf_clock.h	/^    NRF_CLOCK_TASKS_CAL        = offsetof(NRF_CLOCK_Type, TASKS_CAL),        \/**< Start calibration of LFCLK RC oscillator.*\/$/;"	e	enum:__anon252
NRF_CLOCK_TASKS_CTSTART	components\drivers_nrf\hal\nrf_clock.h	/^    NRF_CLOCK_TASKS_CTSTART    = offsetof(NRF_CLOCK_Type, TASKS_CTSTART),    \/**< Start calibration timer.*\/$/;"	e	enum:__anon252
NRF_CLOCK_TASKS_CTSTOP	components\drivers_nrf\hal\nrf_clock.h	/^    NRF_CLOCK_TASKS_CTSTOP     = offsetof(NRF_CLOCK_Type, TASKS_CTSTOP)      \/**< Stop calibration timer.*\/$/;"	e	enum:__anon252
NRF_CLOCK_TASKS_HFCLKSTART	components\drivers_nrf\hal\nrf_clock.h	/^    NRF_CLOCK_TASKS_HFCLKSTART = offsetof(NRF_CLOCK_Type, TASKS_HFCLKSTART), \/**< Start HFCLK clock source.*\/$/;"	e	enum:__anon252
NRF_CLOCK_TASKS_HFCLKSTOP	components\drivers_nrf\hal\nrf_clock.h	/^    NRF_CLOCK_TASKS_HFCLKSTOP  = offsetof(NRF_CLOCK_Type, TASKS_HFCLKSTOP),  \/**< Stop HFCLK clock source.*\/$/;"	e	enum:__anon252
NRF_CLOCK_TASKS_LFCLKSTART	components\drivers_nrf\hal\nrf_clock.h	/^    NRF_CLOCK_TASKS_LFCLKSTART = offsetof(NRF_CLOCK_Type, TASKS_LFCLKSTART), \/**< Start LFCLK clock source.*\/$/;"	e	enum:__anon252
NRF_CLOCK_TASKS_LFCLKSTOP	components\drivers_nrf\hal\nrf_clock.h	/^    NRF_CLOCK_TASKS_LFCLKSTOP  = offsetof(NRF_CLOCK_Type, TASKS_LFCLKSTOP),  \/**< Stop LFCLK clock source.*\/$/;"	e	enum:__anon252
NRF_CLOCK_TASK_SET	components\drivers_nrf\hal\nrf_clock.h	29;"	d
NRF_CLOCK_XTALFREQ_16MHz	components\drivers_nrf\hal\nrf_clock.h	/^    NRF_CLOCK_XTALFREQ_16MHz = CLOCK_XTALFREQ_XTALFREQ_16MHz, \/**< 16 MHz crystal. *\/$/;"	e	enum:__anon250
NRF_CLOCK_XTALFREQ_32MHz	components\drivers_nrf\hal\nrf_clock.h	/^    NRF_CLOCK_XTALFREQ_32MHz = CLOCK_XTALFREQ_XTALFREQ_32MHz  \/**< 32 MHz crystal. *\/$/;"	e	enum:__anon250
nrf_clock_cal_timer_timeout_set	components\drivers_nrf\hal\nrf_clock.h	/^__STATIC_INLINE void nrf_clock_cal_timer_timeout_set(uint32_t interval)$/;"	f
nrf_clock_event_address_get	components\drivers_nrf\hal\nrf_clock.h	/^__STATIC_INLINE uint32_t nrf_clock_event_address_get(nrf_clock_events_t event)$/;"	f
nrf_clock_event_check	components\drivers_nrf\hal\nrf_clock.h	/^__STATIC_INLINE bool nrf_clock_event_check(nrf_clock_events_t event)$/;"	f
nrf_clock_event_clear	components\drivers_nrf\hal\nrf_clock.h	/^__STATIC_INLINE void nrf_clock_event_clear(nrf_clock_events_t event)$/;"	f
nrf_clock_events_t	components\drivers_nrf\hal\nrf_clock.h	/^} nrf_clock_events_t;                                                               \/*lint -restore *\/$/;"	t	typeref:enum:__anon253
nrf_clock_hf_is_running	components\drivers_nrf\hal\nrf_clock.h	/^__STATIC_INLINE bool nrf_clock_hf_is_running(void)$/;"	f
nrf_clock_hf_src_get	components\drivers_nrf\hal\nrf_clock.h	/^__STATIC_INLINE nrf_clock_hf_src_t nrf_clock_hf_src_get(void)$/;"	f
nrf_clock_hf_src_t	components\drivers_nrf\hal\nrf_clock.h	/^} nrf_clock_hf_src_t;$/;"	t	typeref:enum:__anon248
nrf_clock_hf_start_task_status_get	components\drivers_nrf\hal\nrf_clock.h	/^__STATIC_INLINE nrf_clock_start_task_status_t nrf_clock_hf_start_task_status_get(void)$/;"	f
nrf_clock_int_disable	components\drivers_nrf\hal\nrf_clock.h	/^__STATIC_INLINE void nrf_clock_int_disable(uint32_t int_mask)$/;"	f
nrf_clock_int_enable	components\drivers_nrf\hal\nrf_clock.h	/^__STATIC_INLINE void nrf_clock_int_enable(uint32_t int_mask)$/;"	f
nrf_clock_int_enable_check	components\drivers_nrf\hal\nrf_clock.h	/^__STATIC_INLINE bool nrf_clock_int_enable_check(nrf_clock_int_mask_t int_mask)$/;"	f
nrf_clock_int_mask_t	components\drivers_nrf\hal\nrf_clock.h	/^} nrf_clock_int_mask_t;$/;"	t	typeref:enum:__anon251
nrf_clock_lf_actv_src_get	components\drivers_nrf\hal\nrf_clock.h	/^__STATIC_INLINE nrf_clock_lf_src_t nrf_clock_lf_actv_src_get(void)$/;"	f
nrf_clock_lf_is_running	components\drivers_nrf\hal\nrf_clock.h	/^__STATIC_INLINE bool nrf_clock_lf_is_running(void)$/;"	f
nrf_clock_lf_src_get	components\drivers_nrf\hal\nrf_clock.h	/^__STATIC_INLINE nrf_clock_lf_src_t nrf_clock_lf_src_get(void)$/;"	f
nrf_clock_lf_src_set	components\drivers_nrf\hal\nrf_clock.h	/^__STATIC_INLINE void nrf_clock_lf_src_set(nrf_clock_lf_src_t source)$/;"	f
nrf_clock_lf_src_t	components\drivers_nrf\hal\nrf_clock.h	/^} nrf_clock_lf_src_t;$/;"	t	typeref:enum:__anon247
nrf_clock_lf_srccopy_get	components\drivers_nrf\hal\nrf_clock.h	/^__STATIC_INLINE nrf_clock_lf_src_t nrf_clock_lf_srccopy_get(void)$/;"	f
nrf_clock_lf_start_task_status_get	components\drivers_nrf\hal\nrf_clock.h	/^__STATIC_INLINE nrf_clock_start_task_status_t nrf_clock_lf_start_task_status_get(void)$/;"	f
nrf_clock_start_task_status_t	components\drivers_nrf\hal\nrf_clock.h	/^} nrf_clock_start_task_status_t;$/;"	t	typeref:enum:__anon249
nrf_clock_task_address_get	components\drivers_nrf\hal\nrf_clock.h	/^__STATIC_INLINE uint32_t nrf_clock_task_address_get(nrf_clock_tasks_t task)$/;"	f
nrf_clock_task_set	components\drivers_nrf\hal\nrf_clock.h	/^__STATIC_INLINE void nrf_clock_task_set(nrf_clock_tasks_t task)$/;"	f
nrf_clock_tasks_t	components\drivers_nrf\hal\nrf_clock.h	/^} nrf_clock_tasks_t;                                                          \/*lint -restore *\/$/;"	t	typeref:enum:__anon252
nrf_clock_xtalfreq_get	components\drivers_nrf\hal\nrf_clock.h	/^__STATIC_INLINE nrf_clock_xtalfreq_t nrf_clock_xtalfreq_get(void)$/;"	f
nrf_clock_xtalfreq_set	components\drivers_nrf\hal\nrf_clock.h	/^__STATIC_INLINE void nrf_clock_xtalfreq_set(nrf_clock_xtalfreq_t xtalfreq)$/;"	f
nrf_clock_xtalfreq_t	components\drivers_nrf\hal\nrf_clock.h	/^} nrf_clock_xtalfreq_t;$/;"	t	typeref:enum:__anon250
nrf_delay_ms	components\drivers_nrf\hal\nrf_delay.c	/^void nrf_delay_ms(uint32_t volatile number_of_ms)$/;"	f
_NRF_DELAY_H	components\drivers_nrf\hal\nrf_delay.h	2;"	d
nrf_delay_us	components\drivers_nrf\hal\nrf_delay.h	/^static __ASM void __INLINE nrf_delay_us(uint32_t volatile number_of_us)$/;"	f
nrf_delay_us	components\drivers_nrf\hal\nrf_delay.h	/^static void __INLINE nrf_delay_us(uint32_t volatile number_of_us)$/;"	f
ecb_ciphertext	components\drivers_nrf\hal\nrf_ecb.c	/^static uint8_t* ecb_ciphertext; \/\/\/< Ciphertext: Starts at ecb_data + 32 bytes.$/;"	v	file:
ecb_cleartext	components\drivers_nrf\hal\nrf_ecb.c	/^static uint8_t* ecb_cleartext;  \/\/\/< Cleartext:  Starts at ecb_data + 16 bytes.$/;"	v	file:
ecb_data	components\drivers_nrf\hal\nrf_ecb.c	/^static uint8_t  ecb_data[48];   \/\/\/< ECB data structure for RNG peripheral to access.$/;"	v	file:
ecb_key	components\drivers_nrf\hal\nrf_ecb.c	/^static uint8_t* ecb_key;        \/\/\/< Key:        Starts at ecb_data $/;"	v	file:
nrf_ecb_crypt	components\drivers_nrf\hal\nrf_ecb.c	/^bool nrf_ecb_crypt(uint8_t * dest_buf, const uint8_t * src_buf)$/;"	f
nrf_ecb_init	components\drivers_nrf\hal\nrf_ecb.c	/^bool nrf_ecb_init(void)$/;"	f
nrf_ecb_set_key	components\drivers_nrf\hal\nrf_ecb.c	/^void nrf_ecb_set_key(const uint8_t * key)$/;"	f
NRF_ECB_H__	components\drivers_nrf\hal\nrf_ecb.h	20;"	d
NRF_GPIO_H__	components\drivers_nrf\hal\nrf_gpio.h	2;"	d
NRF_GPIO_PIN_DIR_INPUT	components\drivers_nrf\hal\nrf_gpio.h	/^    NRF_GPIO_PIN_DIR_INPUT,   \/\/\/< Input$/;"	e	enum:__anon255
NRF_GPIO_PIN_DIR_OUTPUT	components\drivers_nrf\hal\nrf_gpio.h	/^    NRF_GPIO_PIN_DIR_OUTPUT   \/\/\/< Output$/;"	e	enum:__anon255
NRF_GPIO_PIN_NOPULL	components\drivers_nrf\hal\nrf_gpio.h	/^    NRF_GPIO_PIN_NOPULL   = GPIO_PIN_CNF_PULL_Disabled,                 \/\/\/<  Pin pullup resistor disabled$/;"	e	enum:__anon257
NRF_GPIO_PIN_NOSENSE	components\drivers_nrf\hal\nrf_gpio.h	/^    NRF_GPIO_PIN_NOSENSE    = GPIO_PIN_CNF_SENSE_Disabled,              \/\/\/<  Pin sense level disabled.$/;"	e	enum:__anon258
NRF_GPIO_PIN_PULLDOWN	components\drivers_nrf\hal\nrf_gpio.h	/^    NRF_GPIO_PIN_PULLDOWN = GPIO_PIN_CNF_PULL_Pulldown,                 \/\/\/<  Pin pulldown resistor enabled$/;"	e	enum:__anon257
NRF_GPIO_PIN_PULLUP	components\drivers_nrf\hal\nrf_gpio.h	/^    NRF_GPIO_PIN_PULLUP   = GPIO_PIN_CNF_PULL_Pullup,                   \/\/\/<  Pin pullup resistor enabled$/;"	e	enum:__anon257
NRF_GPIO_PIN_SENSE_HIGH	components\drivers_nrf\hal\nrf_gpio.h	/^    NRF_GPIO_PIN_SENSE_HIGH = GPIO_PIN_CNF_SENSE_High,                  \/\/\/<  Pin sense high level.$/;"	e	enum:__anon258
NRF_GPIO_PIN_SENSE_LOW	components\drivers_nrf\hal\nrf_gpio.h	/^    NRF_GPIO_PIN_SENSE_LOW  = GPIO_PIN_CNF_SENSE_Low,                   \/\/\/<  Pin sense low level.$/;"	e	enum:__anon258
NRF_GPIO_PORT_DIR_INPUT	components\drivers_nrf\hal\nrf_gpio.h	/^    NRF_GPIO_PORT_DIR_INPUT         \/\/\/<  Input$/;"	e	enum:__anon254
NRF_GPIO_PORT_DIR_OUTPUT	components\drivers_nrf\hal\nrf_gpio.h	/^    NRF_GPIO_PORT_DIR_OUTPUT,       \/\/\/<  Output$/;"	e	enum:__anon254
NRF_GPIO_PORT_SELECT_PORT0	components\drivers_nrf\hal\nrf_gpio.h	/^    NRF_GPIO_PORT_SELECT_PORT0 = 0,           \/\/\/<  Port 0 (GPIO pin 0-7)$/;"	e	enum:__anon256
NRF_GPIO_PORT_SELECT_PORT1	components\drivers_nrf\hal\nrf_gpio.h	/^    NRF_GPIO_PORT_SELECT_PORT1,               \/\/\/<  Port 1 (GPIO pin 8-15)$/;"	e	enum:__anon256
NRF_GPIO_PORT_SELECT_PORT2	components\drivers_nrf\hal\nrf_gpio.h	/^    NRF_GPIO_PORT_SELECT_PORT2,               \/\/\/<  Port 2 (GPIO pin 16-23)$/;"	e	enum:__anon256
NRF_GPIO_PORT_SELECT_PORT3	components\drivers_nrf\hal\nrf_gpio.h	/^    NRF_GPIO_PORT_SELECT_PORT3,               \/\/\/<  Port 3 (GPIO pin 24-31)$/;"	e	enum:__anon256
nrf_gpio_cfg_input	components\drivers_nrf\hal\nrf_gpio.h	/^static __INLINE void nrf_gpio_cfg_input(uint32_t pin_number, nrf_gpio_pin_pull_t pull_config)$/;"	f
nrf_gpio_cfg_output	components\drivers_nrf\hal\nrf_gpio.h	/^static __INLINE void nrf_gpio_cfg_output(uint32_t pin_number)$/;"	f
nrf_gpio_cfg_sense_input	components\drivers_nrf\hal\nrf_gpio.h	/^static __INLINE void nrf_gpio_cfg_sense_input(uint32_t pin_number, nrf_gpio_pin_pull_t pull_config, nrf_gpio_pin_sense_t sense_config)$/;"	f
nrf_gpio_pin_clear	components\drivers_nrf\hal\nrf_gpio.h	/^static __INLINE void nrf_gpio_pin_clear(uint32_t pin_number)$/;"	f
nrf_gpio_pin_dir_set	components\drivers_nrf\hal\nrf_gpio.h	/^static __INLINE void nrf_gpio_pin_dir_set(uint32_t pin_number, nrf_gpio_pin_dir_t direction)$/;"	f
nrf_gpio_pin_dir_t	components\drivers_nrf\hal\nrf_gpio.h	/^} nrf_gpio_pin_dir_t;$/;"	t	typeref:enum:__anon255
nrf_gpio_pin_pull_t	components\drivers_nrf\hal\nrf_gpio.h	/^} nrf_gpio_pin_pull_t;$/;"	t	typeref:enum:__anon257
nrf_gpio_pin_read	components\drivers_nrf\hal\nrf_gpio.h	/^static __INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)$/;"	f
nrf_gpio_pin_sense_t	components\drivers_nrf\hal\nrf_gpio.h	/^} nrf_gpio_pin_sense_t;$/;"	t	typeref:enum:__anon258
nrf_gpio_pin_set	components\drivers_nrf\hal\nrf_gpio.h	/^static __INLINE void nrf_gpio_pin_set(uint32_t pin_number)$/;"	f
nrf_gpio_pin_toggle	components\drivers_nrf\hal\nrf_gpio.h	/^static __INLINE void nrf_gpio_pin_toggle(uint32_t pin_number)$/;"	f
nrf_gpio_pin_write	components\drivers_nrf\hal\nrf_gpio.h	/^static __INLINE void nrf_gpio_pin_write(uint32_t pin_number, uint32_t value)$/;"	f
nrf_gpio_port_clear	components\drivers_nrf\hal\nrf_gpio.h	/^static __INLINE void nrf_gpio_port_clear(nrf_gpio_port_select_t port, uint8_t clr_mask)$/;"	f
nrf_gpio_port_dir_set	components\drivers_nrf\hal\nrf_gpio.h	/^static __INLINE void nrf_gpio_port_dir_set(nrf_gpio_port_select_t port, nrf_gpio_port_dir_t dir)$/;"	f
nrf_gpio_port_dir_t	components\drivers_nrf\hal\nrf_gpio.h	/^} nrf_gpio_port_dir_t;$/;"	t	typeref:enum:__anon254
nrf_gpio_port_read	components\drivers_nrf\hal\nrf_gpio.h	/^static __INLINE uint8_t nrf_gpio_port_read(nrf_gpio_port_select_t port)$/;"	f
nrf_gpio_port_select_t	components\drivers_nrf\hal\nrf_gpio.h	/^} nrf_gpio_port_select_t;$/;"	t	typeref:enum:__anon256
nrf_gpio_port_set	components\drivers_nrf\hal\nrf_gpio.h	/^static __INLINE void nrf_gpio_port_set(nrf_gpio_port_select_t port, uint8_t set_mask)$/;"	f
nrf_gpio_port_write	components\drivers_nrf\hal\nrf_gpio.h	/^static __INLINE void nrf_gpio_port_write(nrf_gpio_port_select_t port, uint8_t value)$/;"	f
nrf_gpio_range_cfg_input	components\drivers_nrf\hal\nrf_gpio.h	/^static __INLINE void nrf_gpio_range_cfg_input(uint32_t pin_range_start, uint32_t pin_range_end, nrf_gpio_pin_pull_t pull_config)$/;"	f
nrf_gpio_range_cfg_output	components\drivers_nrf\hal\nrf_gpio.h	/^static __INLINE void nrf_gpio_range_cfg_output(uint32_t pin_range_start, uint32_t pin_range_end)$/;"	f
nrf_gpio_word_byte_read	components\drivers_nrf\hal\nrf_gpio.h	/^static __INLINE uint8_t nrf_gpio_word_byte_read(const volatile uint32_t* word_address, uint8_t byte_no)$/;"	f
nrf_gpio_word_byte_write	components\drivers_nrf\hal\nrf_gpio.h	/^static __INLINE void nrf_gpio_word_byte_write(volatile uint32_t * word_address, uint8_t byte_no, uint8_t value)$/;"	f
NRF_GPIOTE_H__	components\drivers_nrf\hal\nrf_gpiote.h	13;"	d
NRF_GPIOTE_INITIAL_VALUE_HIGH	components\drivers_nrf\hal\nrf_gpiote.h	/^  NRF_GPIOTE_INITIAL_VALUE_HIGH = GPIOTE_CONFIG_OUTINIT_High       \/\/\/<  High to low$/;"	e	enum:__anon260
NRF_GPIOTE_INITIAL_VALUE_LOW	components\drivers_nrf\hal\nrf_gpiote.h	/^  NRF_GPIOTE_INITIAL_VALUE_LOW  = GPIOTE_CONFIG_OUTINIT_Low,       \/\/\/<  Low to high$/;"	e	enum:__anon260
NRF_GPIOTE_POLARITY_HITOLO	components\drivers_nrf\hal\nrf_gpiote.h	/^  NRF_GPIOTE_POLARITY_HITOLO = GPIOTE_CONFIG_POLARITY_HiToLo,       \/\/\/<  High to low$/;"	e	enum:__anon259
NRF_GPIOTE_POLARITY_LOTOHI	components\drivers_nrf\hal\nrf_gpiote.h	/^  NRF_GPIOTE_POLARITY_LOTOHI = GPIOTE_CONFIG_POLARITY_LoToHi,       \/\/\/<  Low to high$/;"	e	enum:__anon259
NRF_GPIOTE_POLARITY_TOGGLE	components\drivers_nrf\hal\nrf_gpiote.h	/^  NRF_GPIOTE_POLARITY_TOGGLE = GPIOTE_CONFIG_POLARITY_Toggle        \/\/\/<  Toggle$/;"	e	enum:__anon259
nrf_gpiote_event_config	components\drivers_nrf\hal\nrf_gpiote.h	/^static __INLINE void nrf_gpiote_event_config(uint32_t channel_number, uint32_t pin_number, nrf_gpiote_polarity_t polarity)$/;"	f
nrf_gpiote_outinit_t	components\drivers_nrf\hal\nrf_gpiote.h	/^} nrf_gpiote_outinit_t;$/;"	t	typeref:enum:__anon260
nrf_gpiote_polarity_t	components\drivers_nrf\hal\nrf_gpiote.h	/^} nrf_gpiote_polarity_t;$/;"	t	typeref:enum:__anon259
nrf_gpiote_task_config	components\drivers_nrf\hal\nrf_gpiote.h	/^static __INLINE void nrf_gpiote_task_config(uint32_t channel_number, uint32_t pin_number, nrf_gpiote_polarity_t polarity, nrf_gpiote_outinit_t initial_value)$/;"	f
nrf_gpiote_unconfig	components\drivers_nrf\hal\nrf_gpiote.h	/^static __INLINE void nrf_gpiote_unconfig(uint32_t channel_number)$/;"	f
NRF_LPCOMP_CONFIG_DEFAULT	components\drivers_nrf\hal\nrf_lpcomp.h	126;"	d
NRF_LPCOMP_CONFIG_REF_EXT_REF1	components\drivers_nrf\hal\nrf_lpcomp.h	/^    NRF_LPCOMP_CONFIG_REF_EXT_REF1 = LPCOMP_REFSEL_REFSEL_ARef |$/;"	e	enum:__anon261
NRF_LPCOMP_DETECT_CROSS	components\drivers_nrf\hal\nrf_lpcomp.h	/^    NRF_LPCOMP_DETECT_CROSS = LPCOMP_ANADETECT_ANADETECT_Cross, \/**< Generate ANADETEC on crossing, both upwards and downwards crossing. *\/$/;"	e	enum:__anon263
NRF_LPCOMP_DETECT_DOWN	components\drivers_nrf\hal\nrf_lpcomp.h	/^    NRF_LPCOMP_DETECT_DOWN  = LPCOMP_ANADETECT_ANADETECT_Down   \/**< Generate ANADETEC on downwards crossing only. *\/$/;"	e	enum:__anon263
NRF_LPCOMP_DETECT_UP	components\drivers_nrf\hal\nrf_lpcomp.h	/^    NRF_LPCOMP_DETECT_UP    = LPCOMP_ANADETECT_ANADETECT_Up,    \/**< Generate ANADETEC on upwards crossing only. *\/$/;"	e	enum:__anon263
NRF_LPCOMP_EVENTS_CROSS	components\drivers_nrf\hal\nrf_lpcomp.h	/^    NRF_LPCOMP_EVENTS_CROSS = offsetof(NRF_LPCOMP_Type, EVENTS_CROSS)  \/**< Input voltage crossed the threshold in any direction. *\/$/;"	e	enum:__anon265
NRF_LPCOMP_EVENTS_DOWN	components\drivers_nrf\hal\nrf_lpcomp.h	/^    NRF_LPCOMP_EVENTS_DOWN  = offsetof(NRF_LPCOMP_Type, EVENTS_DOWN),  \/**< Input voltage crossed the threshold going down. *\/$/;"	e	enum:__anon265
NRF_LPCOMP_EVENTS_READY	components\drivers_nrf\hal\nrf_lpcomp.h	/^    NRF_LPCOMP_EVENTS_READY = offsetof(NRF_LPCOMP_Type, EVENTS_READY), \/**< LPCOMP is ready and output is valid. *\/$/;"	e	enum:__anon265
NRF_LPCOMP_EVENTS_UP	components\drivers_nrf\hal\nrf_lpcomp.h	/^    NRF_LPCOMP_EVENTS_UP    = offsetof(NRF_LPCOMP_Type, EVENTS_UP),    \/**< Input voltage crossed the threshold going up. *\/$/;"	e	enum:__anon265
NRF_LPCOMP_H_	components\drivers_nrf\hal\nrf_lpcomp.h	19;"	d
NRF_LPCOMP_INPUT_0	components\drivers_nrf\hal\nrf_lpcomp.h	/^    NRF_LPCOMP_INPUT_0 = LPCOMP_PSEL_PSEL_AnalogInput0, \/**< Input 0. *\/$/;"	e	enum:__anon262
NRF_LPCOMP_INPUT_1	components\drivers_nrf\hal\nrf_lpcomp.h	/^    NRF_LPCOMP_INPUT_1 = LPCOMP_PSEL_PSEL_AnalogInput1, \/**< Input 1. *\/$/;"	e	enum:__anon262
NRF_LPCOMP_INPUT_2	components\drivers_nrf\hal\nrf_lpcomp.h	/^    NRF_LPCOMP_INPUT_2 = LPCOMP_PSEL_PSEL_AnalogInput2, \/**< Input 2. *\/$/;"	e	enum:__anon262
NRF_LPCOMP_INPUT_3	components\drivers_nrf\hal\nrf_lpcomp.h	/^    NRF_LPCOMP_INPUT_3 = LPCOMP_PSEL_PSEL_AnalogInput3, \/**< Input 3. *\/$/;"	e	enum:__anon262
NRF_LPCOMP_INPUT_4	components\drivers_nrf\hal\nrf_lpcomp.h	/^    NRF_LPCOMP_INPUT_4 = LPCOMP_PSEL_PSEL_AnalogInput4, \/**< Input 4. *\/$/;"	e	enum:__anon262
NRF_LPCOMP_INPUT_5	components\drivers_nrf\hal\nrf_lpcomp.h	/^    NRF_LPCOMP_INPUT_5 = LPCOMP_PSEL_PSEL_AnalogInput5, \/**< Input 5. *\/$/;"	e	enum:__anon262
NRF_LPCOMP_INPUT_6	components\drivers_nrf\hal\nrf_lpcomp.h	/^    NRF_LPCOMP_INPUT_6 = LPCOMP_PSEL_PSEL_AnalogInput6, \/**< Input 6. *\/$/;"	e	enum:__anon262
NRF_LPCOMP_INPUT_7	components\drivers_nrf\hal\nrf_lpcomp.h	/^    NRF_LPCOMP_INPUT_7 = LPCOMP_PSEL_PSEL_AnalogInput7  \/**< Input 7. *\/$/;"	e	enum:__anon262
NRF_LPCOMP_REF_EXT_REF0	components\drivers_nrf\hal\nrf_lpcomp.h	/^    NRF_LPCOMP_REF_EXT_REF0           = LPCOMP_REFSEL_REFSEL_ARef |$/;"	e	enum:__anon261
NRF_LPCOMP_REF_SUPPLY_FIVE_EIGHT	components\drivers_nrf\hal\nrf_lpcomp.h	/^    NRF_LPCOMP_REF_SUPPLY_FIVE_EIGHT  = LPCOMP_REFSEL_REFSEL_SupplyFiveEighthsPrescaling,  \/**< Use supply with a 5\/8 prescaler as reference. *\/$/;"	e	enum:__anon261
NRF_LPCOMP_REF_SUPPLY_FOUR_EIGHT	components\drivers_nrf\hal\nrf_lpcomp.h	/^    NRF_LPCOMP_REF_SUPPLY_FOUR_EIGHT  = LPCOMP_REFSEL_REFSEL_SupplyFourEighthsPrescaling,  \/**< Use supply with a 4\/8 prescaler as reference. *\/$/;"	e	enum:__anon261
NRF_LPCOMP_REF_SUPPLY_ONE_EIGHTH	components\drivers_nrf\hal\nrf_lpcomp.h	/^    NRF_LPCOMP_REF_SUPPLY_ONE_EIGHTH  = LPCOMP_REFSEL_REFSEL_SupplyOneEighthPrescaling,    \/**< Use supply with a 1\/8 prescaler as reference. *\/$/;"	e	enum:__anon261
NRF_LPCOMP_REF_SUPPLY_SEVEN_EIGHT	components\drivers_nrf\hal\nrf_lpcomp.h	/^    NRF_LPCOMP_REF_SUPPLY_SEVEN_EIGHT = LPCOMP_REFSEL_REFSEL_SupplySevenEighthsPrescaling, \/**< Use supply with a 7\/8 prescaler as reference. *\/$/;"	e	enum:__anon261
NRF_LPCOMP_REF_SUPPLY_SIX_EIGHT	components\drivers_nrf\hal\nrf_lpcomp.h	/^    NRF_LPCOMP_REF_SUPPLY_SIX_EIGHT   = LPCOMP_REFSEL_REFSEL_SupplySixEighthsPrescaling,   \/**< Use supply with a 6\/8 prescaler as reference. *\/$/;"	e	enum:__anon261
NRF_LPCOMP_REF_SUPPLY_THREE_EIGHT	components\drivers_nrf\hal\nrf_lpcomp.h	/^    NRF_LPCOMP_REF_SUPPLY_THREE_EIGHT = LPCOMP_REFSEL_REFSEL_SupplyThreeEighthsPrescaling, \/**< Use supply with a 3\/8 prescaler as reference. *\/$/;"	e	enum:__anon261
NRF_LPCOMP_REF_SUPPLY_TWO_EIGHT	components\drivers_nrf\hal\nrf_lpcomp.h	/^    NRF_LPCOMP_REF_SUPPLY_TWO_EIGHT   = LPCOMP_REFSEL_REFSEL_SupplyTwoEighthsPrescaling,   \/**< Use supply with a 2\/8 prescaler as reference. *\/$/;"	e	enum:__anon261
NRF_LPCOMP_SHORTS_CROSS_STOP_MASK	components\drivers_nrf\hal\nrf_lpcomp.h	/^    NRF_LPCOMP_SHORTS_CROSS_STOP_MASK   = LPCOMP_SHORTS_CROSS_STOP_Msk,  \/*!< Short between CROSS event and STOP task. *\/$/;"	e	enum:__anon266
NRF_LPCOMP_SHORTS_DOWN_STOP_MASK	components\drivers_nrf\hal\nrf_lpcomp.h	/^    NRF_LPCOMP_SHORTS_DOWN_STOP_MASK    = LPCOMP_SHORTS_DOWN_STOP_Msk,   \/*!< Short between DOWN event and STOP task. *\/$/;"	e	enum:__anon266
NRF_LPCOMP_SHORTS_READY_SAMPLE_MASK	components\drivers_nrf\hal\nrf_lpcomp.h	/^    NRF_LPCOMP_SHORTS_READY_SAMPLE_MASK = LPCOMP_SHORTS_READY_SAMPLE_Msk \/*!< Short between READY event and SAMPLE task. *\/$/;"	e	enum:__anon266
NRF_LPCOMP_SHORTS_READY_STOP_MASK	components\drivers_nrf\hal\nrf_lpcomp.h	/^    NRF_LPCOMP_SHORTS_READY_STOP_MASK   = LPCOMP_SHORTS_READY_STOP_Msk,  \/*!< Short between READY event and STOP task. *\/$/;"	e	enum:__anon266
NRF_LPCOMP_SHORTS_UP_STOP_MASK	components\drivers_nrf\hal\nrf_lpcomp.h	/^    NRF_LPCOMP_SHORTS_UP_STOP_MASK      = LPCOMP_SHORTS_UP_STOP_Msk,     \/*!< Short between UP event and STOP task. *\/$/;"	e	enum:__anon266
NRF_LPCOMP_TASKS_SAMPLE	components\drivers_nrf\hal\nrf_lpcomp.h	/^    NRF_LPCOMP_TASKS_SAMPLE = offsetof(NRF_LPCOMP_Type, TASKS_SAMPLE) \/**< Sample comparator value. *\/$/;"	e	enum:__anon264
NRF_LPCOMP_TASKS_START	components\drivers_nrf\hal\nrf_lpcomp.h	/^    NRF_LPCOMP_TASKS_START  = offsetof(NRF_LPCOMP_Type, TASKS_START), \/**< LPCOMP start sampling task. *\/$/;"	e	enum:__anon264
NRF_LPCOMP_TASKS_STOP	components\drivers_nrf\hal\nrf_lpcomp.h	/^    NRF_LPCOMP_TASKS_STOP   = offsetof(NRF_LPCOMP_Type, TASKS_STOP),  \/**< LPCOMP stop sampling task. *\/$/;"	e	enum:__anon264
detection	components\drivers_nrf\hal\nrf_lpcomp.h	/^    nrf_lpcomp_detect_t detection; \/**< LPCOMP detection type. *\/$/;"	m	struct:__anon267
nrf_lpcomp_config_t	components\drivers_nrf\hal\nrf_lpcomp.h	/^} nrf_lpcomp_config_t;$/;"	t	typeref:struct:__anon267
nrf_lpcomp_configure	components\drivers_nrf\hal\nrf_lpcomp.h	/^__STATIC_INLINE void nrf_lpcomp_configure(const nrf_lpcomp_config_t * p_config)$/;"	f
nrf_lpcomp_detect_t	components\drivers_nrf\hal\nrf_lpcomp.h	/^} nrf_lpcomp_detect_t;$/;"	t	typeref:enum:__anon263
nrf_lpcomp_disable	components\drivers_nrf\hal\nrf_lpcomp.h	/^__STATIC_INLINE void nrf_lpcomp_disable(void)$/;"	f
nrf_lpcomp_enable	components\drivers_nrf\hal\nrf_lpcomp.h	/^__STATIC_INLINE void nrf_lpcomp_enable(void)$/;"	f
nrf_lpcomp_event_address_get	components\drivers_nrf\hal\nrf_lpcomp.h	/^__STATIC_INLINE uint32_t * nrf_lpcomp_event_address_get(nrf_lpcomp_events_t lpcomp_event)$/;"	f
nrf_lpcomp_event_check	components\drivers_nrf\hal\nrf_lpcomp.h	/^__STATIC_INLINE bool nrf_lpcomp_event_check(nrf_lpcomp_events_t lpcomp_event)$/;"	f
nrf_lpcomp_event_clear	components\drivers_nrf\hal\nrf_lpcomp.h	/^__STATIC_INLINE void nrf_lpcomp_event_clear(nrf_lpcomp_events_t lpcomp_event)$/;"	f
nrf_lpcomp_events_t	components\drivers_nrf\hal\nrf_lpcomp.h	/^} nrf_lpcomp_events_t;                                                 \/*lint -restore*\/$/;"	t	typeref:enum:__anon265
nrf_lpcomp_input_select	components\drivers_nrf\hal\nrf_lpcomp.h	/^__STATIC_INLINE void nrf_lpcomp_input_select(nrf_lpcomp_input_t input)$/;"	f
nrf_lpcomp_input_t	components\drivers_nrf\hal\nrf_lpcomp.h	/^} nrf_lpcomp_input_t;$/;"	t	typeref:enum:__anon262
nrf_lpcomp_int_disable	components\drivers_nrf\hal\nrf_lpcomp.h	/^__STATIC_INLINE void nrf_lpcomp_int_disable(uint32_t lpcomp_int_mask)$/;"	f
nrf_lpcomp_int_enable	components\drivers_nrf\hal\nrf_lpcomp.h	/^__STATIC_INLINE void nrf_lpcomp_int_enable(uint32_t lpcomp_int_mask)$/;"	f
nrf_lpcomp_int_enable_check	components\drivers_nrf\hal\nrf_lpcomp.h	/^__STATIC_INLINE bool nrf_lpcomp_int_enable_check(uint32_t lpcomp_int_mask)$/;"	f
nrf_lpcomp_ref_t	components\drivers_nrf\hal\nrf_lpcomp.h	/^} nrf_lpcomp_ref_t;$/;"	t	typeref:enum:__anon261
nrf_lpcomp_result_get	components\drivers_nrf\hal\nrf_lpcomp.h	/^__STATIC_INLINE uint32_t nrf_lpcomp_result_get(void)$/;"	f
nrf_lpcomp_short_mask_t	components\drivers_nrf\hal\nrf_lpcomp.h	/^} nrf_lpcomp_short_mask_t;$/;"	t	typeref:enum:__anon266
nrf_lpcomp_shorts_clear	components\drivers_nrf\hal\nrf_lpcomp.h	/^__STATIC_INLINE void nrf_lpcomp_shorts_clear(uint32_t lpcomp_shorts_mask)$/;"	f
nrf_lpcomp_shorts_set	components\drivers_nrf\hal\nrf_lpcomp.h	/^__STATIC_INLINE void nrf_lpcomp_shorts_set(uint32_t lpcomp_shorts_mask)$/;"	f
nrf_lpcomp_task_address_get	components\drivers_nrf\hal\nrf_lpcomp.h	/^__STATIC_INLINE uint32_t * nrf_lpcomp_task_address_get(nrf_lpcomp_tasks_t lpcomp_task)$/;"	f
nrf_lpcomp_task_set	components\drivers_nrf\hal\nrf_lpcomp.h	/^__STATIC_INLINE void nrf_lpcomp_task_set(nrf_lpcomp_tasks_t lpcomp_task)$/;"	f
nrf_lpcomp_tasks_t	components\drivers_nrf\hal\nrf_lpcomp.h	/^} nrf_lpcomp_tasks_t;                                                 \/*lint -restore*\/$/;"	t	typeref:enum:__anon264
reference	components\drivers_nrf\hal\nrf_lpcomp.h	/^    nrf_lpcomp_ref_t    reference; \/**< LPCOMP reference. *\/$/;"	m	struct:__anon267
nrf_nvmc_page_erase	components\drivers_nrf\hal\nrf_nvmc.c	/^void nrf_nvmc_page_erase(uint32_t address)$/;"	f
nrf_nvmc_write_byte	components\drivers_nrf\hal\nrf_nvmc.c	/^void nrf_nvmc_write_byte(uint32_t address, uint8_t value)$/;"	f
nrf_nvmc_write_bytes	components\drivers_nrf\hal\nrf_nvmc.c	/^void nrf_nvmc_write_bytes(uint32_t address, const uint8_t * src, uint32_t num_bytes)$/;"	f
nrf_nvmc_write_word	components\drivers_nrf\hal\nrf_nvmc.c	/^void nrf_nvmc_write_word(uint32_t address, uint32_t value)$/;"	f
nrf_nvmc_write_words	components\drivers_nrf\hal\nrf_nvmc.c	/^void nrf_nvmc_write_words(uint32_t address, const uint32_t * src, uint32_t num_words)$/;"	f
NRF_NVMC_H__	components\drivers_nrf\hal\nrf_nvmc.h	20;"	d
NRF_PPI_CHANNEL0	components\drivers_nrf\hal\nrf_ppi.h	/^    NRF_PPI_CHANNEL0  = PPI_CHEN_CH0_Pos,  \/**< Channel 0. *\/$/;"	e	enum:__anon268
NRF_PPI_CHANNEL1	components\drivers_nrf\hal\nrf_ppi.h	/^    NRF_PPI_CHANNEL1  = PPI_CHEN_CH1_Pos,  \/**< Channel 1. *\/$/;"	e	enum:__anon268
NRF_PPI_CHANNEL10	components\drivers_nrf\hal\nrf_ppi.h	/^    NRF_PPI_CHANNEL10 = PPI_CHEN_CH10_Pos, \/**< Channel 10. *\/$/;"	e	enum:__anon268
NRF_PPI_CHANNEL11	components\drivers_nrf\hal\nrf_ppi.h	/^    NRF_PPI_CHANNEL11 = PPI_CHEN_CH11_Pos, \/**< Channel 11. *\/$/;"	e	enum:__anon268
NRF_PPI_CHANNEL12	components\drivers_nrf\hal\nrf_ppi.h	/^    NRF_PPI_CHANNEL12 = PPI_CHEN_CH12_Pos, \/**< Channel 12. *\/$/;"	e	enum:__anon268
NRF_PPI_CHANNEL13	components\drivers_nrf\hal\nrf_ppi.h	/^    NRF_PPI_CHANNEL13 = PPI_CHEN_CH13_Pos, \/**< Channel 13. *\/$/;"	e	enum:__anon268
NRF_PPI_CHANNEL14	components\drivers_nrf\hal\nrf_ppi.h	/^    NRF_PPI_CHANNEL14 = PPI_CHEN_CH14_Pos, \/**< Channel 14. *\/$/;"	e	enum:__anon268
NRF_PPI_CHANNEL15	components\drivers_nrf\hal\nrf_ppi.h	/^    NRF_PPI_CHANNEL15 = PPI_CHEN_CH15_Pos, \/**< Channel 15. *\/$/;"	e	enum:__anon268
NRF_PPI_CHANNEL2	components\drivers_nrf\hal\nrf_ppi.h	/^    NRF_PPI_CHANNEL2  = PPI_CHEN_CH2_Pos,  \/**< Channel 2. *\/$/;"	e	enum:__anon268
NRF_PPI_CHANNEL20	components\drivers_nrf\hal\nrf_ppi.h	/^    NRF_PPI_CHANNEL20 = PPI_CHEN_CH20_Pos, \/**< Channel 20. *\/$/;"	e	enum:__anon268
NRF_PPI_CHANNEL21	components\drivers_nrf\hal\nrf_ppi.h	/^    NRF_PPI_CHANNEL21 = PPI_CHEN_CH21_Pos, \/**< Channel 21. *\/$/;"	e	enum:__anon268
NRF_PPI_CHANNEL22	components\drivers_nrf\hal\nrf_ppi.h	/^    NRF_PPI_CHANNEL22 = PPI_CHEN_CH22_Pos, \/**< Channel 22. *\/$/;"	e	enum:__anon268
NRF_PPI_CHANNEL23	components\drivers_nrf\hal\nrf_ppi.h	/^    NRF_PPI_CHANNEL23 = PPI_CHEN_CH23_Pos, \/**< Channel 23. *\/$/;"	e	enum:__anon268
NRF_PPI_CHANNEL24	components\drivers_nrf\hal\nrf_ppi.h	/^    NRF_PPI_CHANNEL24 = PPI_CHEN_CH24_Pos, \/**< Channel 24. *\/$/;"	e	enum:__anon268
NRF_PPI_CHANNEL25	components\drivers_nrf\hal\nrf_ppi.h	/^    NRF_PPI_CHANNEL25 = PPI_CHEN_CH25_Pos, \/**< Channel 25. *\/$/;"	e	enum:__anon268
NRF_PPI_CHANNEL26	components\drivers_nrf\hal\nrf_ppi.h	/^    NRF_PPI_CHANNEL26 = PPI_CHEN_CH26_Pos, \/**< Channel 26. *\/$/;"	e	enum:__anon268
NRF_PPI_CHANNEL27	components\drivers_nrf\hal\nrf_ppi.h	/^    NRF_PPI_CHANNEL27 = PPI_CHEN_CH27_Pos, \/**< Channel 27. *\/$/;"	e	enum:__anon268
NRF_PPI_CHANNEL28	components\drivers_nrf\hal\nrf_ppi.h	/^    NRF_PPI_CHANNEL28 = PPI_CHEN_CH28_Pos, \/**< Channel 28. *\/$/;"	e	enum:__anon268
NRF_PPI_CHANNEL29	components\drivers_nrf\hal\nrf_ppi.h	/^    NRF_PPI_CHANNEL29 = PPI_CHEN_CH29_Pos, \/**< Channel 29. *\/$/;"	e	enum:__anon268
NRF_PPI_CHANNEL3	components\drivers_nrf\hal\nrf_ppi.h	/^    NRF_PPI_CHANNEL3  = PPI_CHEN_CH3_Pos,  \/**< Channel 3. *\/$/;"	e	enum:__anon268
NRF_PPI_CHANNEL30	components\drivers_nrf\hal\nrf_ppi.h	/^    NRF_PPI_CHANNEL30 = PPI_CHEN_CH30_Pos, \/**< Channel 30. *\/$/;"	e	enum:__anon268
NRF_PPI_CHANNEL31	components\drivers_nrf\hal\nrf_ppi.h	/^    NRF_PPI_CHANNEL31 = PPI_CHEN_CH31_Pos  \/**< Channel 31. *\/$/;"	e	enum:__anon268
NRF_PPI_CHANNEL4	components\drivers_nrf\hal\nrf_ppi.h	/^    NRF_PPI_CHANNEL4  = PPI_CHEN_CH4_Pos,  \/**< Channel 4. *\/$/;"	e	enum:__anon268
NRF_PPI_CHANNEL5	components\drivers_nrf\hal\nrf_ppi.h	/^    NRF_PPI_CHANNEL5  = PPI_CHEN_CH5_Pos,  \/**< Channel 5. *\/$/;"	e	enum:__anon268
NRF_PPI_CHANNEL6	components\drivers_nrf\hal\nrf_ppi.h	/^    NRF_PPI_CHANNEL6  = PPI_CHEN_CH6_Pos,  \/**< Channel 6. *\/$/;"	e	enum:__anon268
NRF_PPI_CHANNEL7	components\drivers_nrf\hal\nrf_ppi.h	/^    NRF_PPI_CHANNEL7  = PPI_CHEN_CH7_Pos,  \/**< Channel 7. *\/$/;"	e	enum:__anon268
NRF_PPI_CHANNEL8	components\drivers_nrf\hal\nrf_ppi.h	/^    NRF_PPI_CHANNEL8  = PPI_CHEN_CH8_Pos,  \/**< Channel 8. *\/$/;"	e	enum:__anon268
NRF_PPI_CHANNEL9	components\drivers_nrf\hal\nrf_ppi.h	/^    NRF_PPI_CHANNEL9  = PPI_CHEN_CH9_Pos,  \/**< Channel 9. *\/$/;"	e	enum:__anon268
NRF_PPI_CHANNEL_DISABLED	components\drivers_nrf\hal\nrf_ppi.h	/^    NRF_PPI_CHANNEL_DISABLED = PPI_CHEN_CH0_Disabled, \/**< Channel disabled. *\/$/;"	e	enum:__anon271
NRF_PPI_CHANNEL_ENABLED	components\drivers_nrf\hal\nrf_ppi.h	/^    NRF_PPI_CHANNEL_ENABLED  = PPI_CHEN_CH0_Enabled   \/**< Channel enabled. *\/$/;"	e	enum:__anon271
NRF_PPI_CHANNEL_EXCLUDE	components\drivers_nrf\hal\nrf_ppi.h	/^    NRF_PPI_CHANNEL_EXCLUDE = PPI_CHG_CH0_Excluded, \/**< Channel excluded from a group. *\/$/;"	e	enum:__anon270
NRF_PPI_CHANNEL_GROUP0	components\drivers_nrf\hal\nrf_ppi.h	/^    NRF_PPI_CHANNEL_GROUP0 = 0, \/**< Channel group 0. *\/$/;"	e	enum:__anon269
NRF_PPI_CHANNEL_GROUP1	components\drivers_nrf\hal\nrf_ppi.h	/^    NRF_PPI_CHANNEL_GROUP1 = 1, \/**< Channel group 1. *\/$/;"	e	enum:__anon269
NRF_PPI_CHANNEL_GROUP2	components\drivers_nrf\hal\nrf_ppi.h	/^    NRF_PPI_CHANNEL_GROUP2 = 2, \/**< Channel group 2. *\/$/;"	e	enum:__anon269
NRF_PPI_CHANNEL_GROUP3	components\drivers_nrf\hal\nrf_ppi.h	/^    NRF_PPI_CHANNEL_GROUP3 = 3  \/**< Channel group 3. *\/$/;"	e	enum:__anon269
NRF_PPI_CHANNEL_INCLUDE	components\drivers_nrf\hal\nrf_ppi.h	/^    NRF_PPI_CHANNEL_INCLUDE = PPI_CHG_CH0_Included  \/**< Channel included in a group. *\/$/;"	e	enum:__anon270
NRF_PPI_H__	components\drivers_nrf\hal\nrf_ppi.h	14;"	d
NRF_PPI_TASKS_CHG0_DIS	components\drivers_nrf\hal\nrf_ppi.h	/^    NRF_PPI_TASKS_CHG0_DIS = offsetof(NRF_PPI_Type, TASKS_CHG[0].DIS), \/**< Task for disabling channel group 0 *\/$/;"	e	enum:__anon272
NRF_PPI_TASKS_CHG0_EN	components\drivers_nrf\hal\nrf_ppi.h	/^    NRF_PPI_TASKS_CHG0_EN  = offsetof(NRF_PPI_Type, TASKS_CHG[0].EN),  \/**< Task for enabling channel group 0 *\/$/;"	e	enum:__anon272
NRF_PPI_TASKS_CHG1_DIS	components\drivers_nrf\hal\nrf_ppi.h	/^    NRF_PPI_TASKS_CHG1_DIS = offsetof(NRF_PPI_Type, TASKS_CHG[1].DIS), \/**< Task for disabling channel group 1 *\/$/;"	e	enum:__anon272
NRF_PPI_TASKS_CHG1_EN	components\drivers_nrf\hal\nrf_ppi.h	/^    NRF_PPI_TASKS_CHG1_EN  = offsetof(NRF_PPI_Type, TASKS_CHG[1].EN),  \/**< Task for enabling channel group 1 *\/$/;"	e	enum:__anon272
NRF_PPI_TASKS_CHG2_DIS	components\drivers_nrf\hal\nrf_ppi.h	/^    NRF_PPI_TASKS_CHG2_DIS = offsetof(NRF_PPI_Type, TASKS_CHG[2].DIS), \/**< Task for disabling channel group 2 *\/$/;"	e	enum:__anon272
NRF_PPI_TASKS_CHG2_EN	components\drivers_nrf\hal\nrf_ppi.h	/^    NRF_PPI_TASKS_CHG2_EN  = offsetof(NRF_PPI_Type, TASKS_CHG[2].EN),  \/**< Task for enabling channel group 2 *\/$/;"	e	enum:__anon272
NRF_PPI_TASKS_CHG3_DIS	components\drivers_nrf\hal\nrf_ppi.h	/^    NRF_PPI_TASKS_CHG3_DIS = offsetof(NRF_PPI_Type, TASKS_CHG[3].DIS)  \/**< Task for disabling channel group 3 *\/$/;"	e	enum:__anon272
NRF_PPI_TASKS_CHG3_EN	components\drivers_nrf\hal\nrf_ppi.h	/^    NRF_PPI_TASKS_CHG3_EN  = offsetof(NRF_PPI_Type, TASKS_CHG[3].EN),  \/**< Task for enabling channel group 3 *\/$/;"	e	enum:__anon272
NRF_PPI_TASK_SET	components\drivers_nrf\hal\nrf_ppi.h	26;"	d
nrf_ppi_channel_disable	components\drivers_nrf\hal\nrf_ppi.h	/^__STATIC_INLINE void nrf_ppi_channel_disable(nrf_ppi_channel_t channel)$/;"	f
nrf_ppi_channel_disable_all	components\drivers_nrf\hal\nrf_ppi.h	/^__STATIC_INLINE void nrf_ppi_channel_disable_all(void)$/;"	f
nrf_ppi_channel_enable	components\drivers_nrf\hal\nrf_ppi.h	/^__STATIC_INLINE void nrf_ppi_channel_enable(nrf_ppi_channel_t channel)$/;"	f
nrf_ppi_channel_enable_get	components\drivers_nrf\hal\nrf_ppi.h	/^__STATIC_INLINE nrf_ppi_channel_enable_t nrf_ppi_channel_enable_get(nrf_ppi_channel_t channel)$/;"	f
nrf_ppi_channel_enable_t	components\drivers_nrf\hal\nrf_ppi.h	/^} nrf_ppi_channel_enable_t;$/;"	t	typeref:enum:__anon271
nrf_ppi_channel_endpoint_setup	components\drivers_nrf\hal\nrf_ppi.h	/^__STATIC_INLINE void nrf_ppi_channel_endpoint_setup(nrf_ppi_channel_t channel,$/;"	f
nrf_ppi_channel_group_clear	components\drivers_nrf\hal\nrf_ppi.h	/^__STATIC_INLINE void nrf_ppi_channel_group_clear(nrf_ppi_channel_group_t group)$/;"	f
nrf_ppi_channel_group_t	components\drivers_nrf\hal\nrf_ppi.h	/^} nrf_ppi_channel_group_t;$/;"	t	typeref:enum:__anon269
nrf_ppi_channel_include_in_group	components\drivers_nrf\hal\nrf_ppi.h	/^__STATIC_INLINE void nrf_ppi_channel_include_in_group(nrf_ppi_channel_t       channel,$/;"	f
nrf_ppi_channel_include_t	components\drivers_nrf\hal\nrf_ppi.h	/^} nrf_ppi_channel_include_t;$/;"	t	typeref:enum:__anon270
nrf_ppi_channel_remove_from_group	components\drivers_nrf\hal\nrf_ppi.h	/^__STATIC_INLINE void nrf_ppi_channel_remove_from_group(nrf_ppi_channel_t       channel,$/;"	f
nrf_ppi_channel_t	components\drivers_nrf\hal\nrf_ppi.h	/^} nrf_ppi_channel_t;$/;"	t	typeref:enum:__anon268
nrf_ppi_group_disable	components\drivers_nrf\hal\nrf_ppi.h	/^__STATIC_INLINE void nrf_ppi_group_disable(nrf_ppi_channel_group_t group)$/;"	f
nrf_ppi_group_enable	components\drivers_nrf\hal\nrf_ppi.h	/^__STATIC_INLINE void nrf_ppi_group_enable(nrf_ppi_channel_group_t group)$/;"	f
nrf_ppi_task_address_get	components\drivers_nrf\hal\nrf_ppi.h	/^__STATIC_INLINE uint32_t * nrf_ppi_task_address_get(nrf_ppi_tasks_t ppi_task)$/;"	f
nrf_ppi_task_set	components\drivers_nrf\hal\nrf_ppi.h	/^__STATIC_INLINE void nrf_ppi_task_set(nrf_ppi_tasks_t ppi_task)$/;"	f
nrf_ppi_tasks_t	components\drivers_nrf\hal\nrf_ppi.h	/^} nrf_ppi_tasks_t;$/;"	t	typeref:enum:__anon272
NRF_QDEC_DBFEN_DISABLE	components\drivers_nrf\hal\nrf_qdec.h	/^    NRF_QDEC_DBFEN_DISABLE = QDEC_DBFEN_DBFEN_Disabled, \/**< Mask for disabling the debounce filter.  *\/$/;"	e	enum:__anon278
NRF_QDEC_DBFEN_ENABLE	components\drivers_nrf\hal\nrf_qdec.h	/^    NRF_QDEC_DBFEN_ENABLE  = QDEC_DBFEN_DBFEN_Enabled   \/**< Mask for enabling the debounce filter.  *\/$/;"	e	enum:__anon278
NRF_QDEC_DISABLE	components\drivers_nrf\hal\nrf_qdec.h	/^    NRF_QDEC_DISABLE = QDEC_ENABLE_ENABLE_Disabled, \/**< Mask for disabling the QDEC periperal. When disabled, the QDEC decoder pins are not active.  *\/$/;"	e	enum:__anon277
NRF_QDEC_ENABLE	components\drivers_nrf\hal\nrf_qdec.h	/^    NRF_QDEC_ENABLE  = QDEC_ENABLE_ENABLE_Enabled   \/**< Mask for enabling the QDEC periperal. When enabled, the QDEC pins are active. *\/$/;"	e	enum:__anon277
NRF_QDEC_EVENTS_ACCOF	components\drivers_nrf\hal\nrf_qdec.h	/^    NRF_QDEC_EVENTS_ACCOF     = offsetof(NRF_QDEC_Type, EVENTS_ACCOF)      \/**< Event generated for every accumulator overflow. *\/$/;"	e	enum:__anon274
NRF_QDEC_EVENTS_REPORTRDY	components\drivers_nrf\hal\nrf_qdec.h	/^    NRF_QDEC_EVENTS_REPORTRDY = offsetof(NRF_QDEC_Type, EVENTS_REPORTRDY), \/**< Event generated for every new report.  *\/$/;"	e	enum:__anon274
NRF_QDEC_EVENTS_SAMPLERDY	components\drivers_nrf\hal\nrf_qdec.h	/^    NRF_QDEC_EVENTS_SAMPLERDY = offsetof(NRF_QDEC_Type, EVENTS_SAMPLERDY), \/**< Event generated for every new sample.  *\/$/;"	e	enum:__anon274
NRF_QDEC_H__	components\drivers_nrf\hal\nrf_qdec.h	13;"	d
NRF_QDEC_INT_ACCOF_MASK	components\drivers_nrf\hal\nrf_qdec.h	/^    NRF_QDEC_INT_ACCOF_MASK     = QDEC_INTENSET_ACCOF_Msk      \/**< Mask for enabling or disabling an interrupt on ACCOF event.  *\/$/;"	e	enum:__anon276
NRF_QDEC_INT_REPORTRDY_MASK	components\drivers_nrf\hal\nrf_qdec.h	/^    NRF_QDEC_INT_REPORTRDY_MASK = QDEC_INTENSET_REPORTRDY_Msk, \/**< Mask for enabling or disabling an interrupt on REPORTRDY event.  *\/$/;"	e	enum:__anon276
NRF_QDEC_INT_SAMPLERDY_MASK	components\drivers_nrf\hal\nrf_qdec.h	/^    NRF_QDEC_INT_SAMPLERDY_MASK = QDEC_INTENSET_SAMPLERDY_Msk, \/**< Mask for enabling or disabling an interrupt on SAMPLERDY event.  *\/$/;"	e	enum:__anon276
NRF_QDEC_LEPOL_ACTIVE_HIGH	components\drivers_nrf\hal\nrf_qdec.h	/^    NRF_QDEC_LEPOL_ACTIVE_HIGH = QDEC_LEDPOL_LEDPOL_ActiveHigh \/**< QDEC LED active on output pin high.  *\/$/;"	e	enum:__anon280
NRF_QDEC_LEPOL_ACTIVE_LOW	components\drivers_nrf\hal\nrf_qdec.h	/^    NRF_QDEC_LEPOL_ACTIVE_LOW  = QDEC_LEDPOL_LEDPOL_ActiveLow, \/**< QDEC LED active on output pin low.  *\/$/;"	e	enum:__anon280
NRF_QDEC_PIO_PSELA	components\drivers_nrf\hal\nrf_qdec.h	/^    NRF_QDEC_PIO_PSELA,   \/**< QDEC A input pin.  *\/$/;"	e	enum:__anon279
NRF_QDEC_PIO_PSELB	components\drivers_nrf\hal\nrf_qdec.h	/^    NRF_QDEC_PIO_PSELB    \/**< QDEC B input pin.  *\/$/;"	e	enum:__anon279
NRF_QDEC_PIO_PSELLED	components\drivers_nrf\hal\nrf_qdec.h	/^    NRF_QDEC_PIO_PSELLED, \/**< QDEC LED output pin.  *\/$/;"	e	enum:__anon279
NRF_QDEC_REPORTPER_10	components\drivers_nrf\hal\nrf_qdec.h	/^    NRF_QDEC_REPORTPER_10  = QDEC_REPORTPER_REPORTPER_10Smpl,  \/**< QDEC report period 10 samples.  *\/$/;"	e	enum:__anon282
NRF_QDEC_REPORTPER_120	components\drivers_nrf\hal\nrf_qdec.h	/^    NRF_QDEC_REPORTPER_120 = QDEC_REPORTPER_REPORTPER_120Smpl, \/**< QDEC report period 120 samples. *\/$/;"	e	enum:__anon282
NRF_QDEC_REPORTPER_160	components\drivers_nrf\hal\nrf_qdec.h	/^    NRF_QDEC_REPORTPER_160 = QDEC_REPORTPER_REPORTPER_160Smpl, \/**< QDEC report period 160 samples. *\/$/;"	e	enum:__anon282
NRF_QDEC_REPORTPER_200	components\drivers_nrf\hal\nrf_qdec.h	/^    NRF_QDEC_REPORTPER_200 = QDEC_REPORTPER_REPORTPER_200Smpl, \/**< QDEC report period 200 samples. *\/$/;"	e	enum:__anon282
NRF_QDEC_REPORTPER_240	components\drivers_nrf\hal\nrf_qdec.h	/^    NRF_QDEC_REPORTPER_240 = QDEC_REPORTPER_REPORTPER_240Smpl, \/**< QDEC report period 240 samples. *\/$/;"	e	enum:__anon282
NRF_QDEC_REPORTPER_280	components\drivers_nrf\hal\nrf_qdec.h	/^    NRF_QDEC_REPORTPER_280 = QDEC_REPORTPER_REPORTPER_280Smpl, \/**< QDEC report period 280 samples. *\/$/;"	e	enum:__anon282
NRF_QDEC_REPORTPER_40	components\drivers_nrf\hal\nrf_qdec.h	/^    NRF_QDEC_REPORTPER_40  = QDEC_REPORTPER_REPORTPER_40Smpl,  \/**< QDEC report period 40 samples.  *\/$/;"	e	enum:__anon282
NRF_QDEC_REPORTPER_80	components\drivers_nrf\hal\nrf_qdec.h	/^    NRF_QDEC_REPORTPER_80  = QDEC_REPORTPER_REPORTPER_80Smpl,  \/**< QDEC report period 80 samples.  *\/$/;"	e	enum:__anon282
NRF_QDEC_REPORTPER_DISABLED	components\drivers_nrf\hal\nrf_qdec.h	/^    NRF_QDEC_REPORTPER_DISABLED                                \/**< QDEC reporting disabled.        *\/$/;"	e	enum:__anon282
NRF_QDEC_SAMPLEPER_1024us	components\drivers_nrf\hal\nrf_qdec.h	/^    NRF_QDEC_SAMPLEPER_1024us  = QDEC_SAMPLEPER_SAMPLEPER_1024us, \/**< QDEC sampling period 1024 microseconds.  *\/$/;"	e	enum:__anon281
NRF_QDEC_SAMPLEPER_128us	components\drivers_nrf\hal\nrf_qdec.h	/^    NRF_QDEC_SAMPLEPER_128us   = QDEC_SAMPLEPER_SAMPLEPER_128us,  \/**< QDEC sampling period 128 microseconds.  *\/$/;"	e	enum:__anon281
NRF_QDEC_SAMPLEPER_16384us	components\drivers_nrf\hal\nrf_qdec.h	/^    NRF_QDEC_SAMPLEPER_16384us = QDEC_SAMPLEPER_SAMPLEPER_16384us \/**< QDEC sampling period 16384 microseconds.  *\/$/;"	e	enum:__anon281
NRF_QDEC_SAMPLEPER_2048us	components\drivers_nrf\hal\nrf_qdec.h	/^    NRF_QDEC_SAMPLEPER_2048us  = QDEC_SAMPLEPER_SAMPLEPER_2048us, \/**< QDEC sampling period 2048 microseconds.  *\/$/;"	e	enum:__anon281
NRF_QDEC_SAMPLEPER_256us	components\drivers_nrf\hal\nrf_qdec.h	/^    NRF_QDEC_SAMPLEPER_256us   = QDEC_SAMPLEPER_SAMPLEPER_256us,  \/**< QDEC sampling period 256 microseconds.  *\/$/;"	e	enum:__anon281
NRF_QDEC_SAMPLEPER_4096us	components\drivers_nrf\hal\nrf_qdec.h	/^    NRF_QDEC_SAMPLEPER_4096us  = QDEC_SAMPLEPER_SAMPLEPER_4096us, \/**< QDEC sampling period 4096 microseconds.  *\/$/;"	e	enum:__anon281
NRF_QDEC_SAMPLEPER_512us	components\drivers_nrf\hal\nrf_qdec.h	/^    NRF_QDEC_SAMPLEPER_512us   = QDEC_SAMPLEPER_SAMPLEPER_512us,  \/**< QDEC sampling period 512 microseconds.  *\/$/;"	e	enum:__anon281
NRF_QDEC_SAMPLEPER_8192us	components\drivers_nrf\hal\nrf_qdec.h	/^    NRF_QDEC_SAMPLEPER_8192us  = QDEC_SAMPLEPER_SAMPLEPER_8192us, \/**< QDEC sampling period 8192 microseconds.  *\/$/;"	e	enum:__anon281
NRF_QDEC_SHORTS_REPORTRDY_READCLRACC_MASK	components\drivers_nrf\hal\nrf_qdec.h	/^    NRF_QDEC_SHORTS_REPORTRDY_READCLRACC_MASK = QDEC_SHORTS_REPORTRDY_READCLRACC_Msk, \/**< Shortcut between REPORTRDY event and READCLRACC task.  *\/$/;"	e	enum:__anon275
NRF_QDEC_SHORTS_SAMPLERDY_STOP_MASK	components\drivers_nrf\hal\nrf_qdec.h	/^    NRF_QDEC_SHORTS_SAMPLERDY_STOP_MASK       = QDEC_SHORTS_SAMPLERDY_STOP_Msk        \/**< Shortcut between SAMPLERDY event and STOP task.  *\/$/;"	e	enum:__anon275
NRF_QDEC_TASKS_READCLRACC	components\drivers_nrf\hal\nrf_qdec.h	/^    NRF_QDEC_TASKS_READCLRACC = offsetof(NRF_QDEC_Type, TASKS_READCLRACC) \/**< Reading and clearing ACC and ACCDBL registers. *\/$/;"	e	enum:__anon273
NRF_QDEC_TASKS_START	components\drivers_nrf\hal\nrf_qdec.h	/^    NRF_QDEC_TASKS_START      = offsetof(NRF_QDEC_Type, TASKS_START),     \/**< Starting the quadrature decoder. *\/$/;"	e	enum:__anon273
NRF_QDEC_TASKS_STOP	components\drivers_nrf\hal\nrf_qdec.h	/^    NRF_QDEC_TASKS_STOP       = offsetof(NRF_QDEC_Type, TASKS_STOP),      \/**< Stopping the quadrature decoder. *\/$/;"	e	enum:__anon273
nrf_qdec_acc_get	components\drivers_nrf\hal\nrf_qdec.h	/^__STATIC_INLINE int32_t nrf_qdec_acc_get(void)$/;"	f
nrf_qdec_accdbl_get	components\drivers_nrf\hal\nrf_qdec.h	/^__STATIC_INLINE uint32_t nrf_qdec_accdbl_get(void)$/;"	f
nrf_qdec_accdblread_get	components\drivers_nrf\hal\nrf_qdec.h	/^__STATIC_INLINE uint32_t nrf_qdec_accdblread_get(void)$/;"	f
nrf_qdec_accread_get	components\drivers_nrf\hal\nrf_qdec.h	/^__STATIC_INLINE int32_t nrf_qdec_accread_get(void)$/;"	f
nrf_qdec_dbfen_disable	components\drivers_nrf\hal\nrf_qdec.h	/^__STATIC_INLINE void nrf_qdec_dbfen_disable(void)$/;"	f
nrf_qdec_dbfen_enable	components\drivers_nrf\hal\nrf_qdec.h	/^__STATIC_INLINE void nrf_qdec_dbfen_enable(void)$/;"	f
nrf_qdec_dbfen_get	components\drivers_nrf\hal\nrf_qdec.h	/^__STATIC_INLINE uint32_t nrf_qdec_dbfen_get(void)$/;"	f
nrf_qdec_dbfen_t	components\drivers_nrf\hal\nrf_qdec.h	/^} nrf_qdec_dbfen_t;$/;"	t	typeref:enum:__anon278
nrf_qdec_disable	components\drivers_nrf\hal\nrf_qdec.h	/^__STATIC_INLINE void nrf_qdec_disable(void)$/;"	f
nrf_qdec_enable	components\drivers_nrf\hal\nrf_qdec.h	/^__STATIC_INLINE void nrf_qdec_enable(void)$/;"	f
nrf_qdec_enable_get	components\drivers_nrf\hal\nrf_qdec.h	/^__STATIC_INLINE uint32_t nrf_qdec_enable_get(void)$/;"	f
nrf_qdec_enable_t	components\drivers_nrf\hal\nrf_qdec.h	/^} nrf_qdec_enable_t;$/;"	t	typeref:enum:__anon277
nrf_qdec_event_address_get	components\drivers_nrf\hal\nrf_qdec.h	/^__STATIC_INLINE uint32_t * nrf_qdec_event_address_get(nrf_qdec_events_t qdec_event)$/;"	f
nrf_qdec_event_check	components\drivers_nrf\hal\nrf_qdec.h	/^__STATIC_INLINE uint32_t nrf_qdec_event_check(nrf_qdec_events_t qdec_event)$/;"	f
nrf_qdec_event_clear	components\drivers_nrf\hal\nrf_qdec.h	/^__STATIC_INLINE void nrf_qdec_event_clear(nrf_qdec_events_t qdec_event)$/;"	f
nrf_qdec_events_t	components\drivers_nrf\hal\nrf_qdec.h	/^} nrf_qdec_events_t;                                                       \/*lint -restore *\/$/;"	t	typeref:enum:__anon274
nrf_qdec_int_disable	components\drivers_nrf\hal\nrf_qdec.h	/^__STATIC_INLINE void nrf_qdec_int_disable(uint32_t qdec_int_mask)$/;"	f
nrf_qdec_int_enable	components\drivers_nrf\hal\nrf_qdec.h	/^__STATIC_INLINE void nrf_qdec_int_enable(uint32_t qdec_int_mask)$/;"	f
nrf_qdec_int_enable_check	components\drivers_nrf\hal\nrf_qdec.h	/^__STATIC_INLINE uint32_t nrf_qdec_int_enable_check(nrf_qdec_int_mask_t qdec_int_mask)$/;"	f
nrf_qdec_int_mask_t	components\drivers_nrf\hal\nrf_qdec.h	/^} nrf_qdec_int_mask_t;$/;"	t	typeref:enum:__anon276
nrf_qdec_ledpol_get	components\drivers_nrf\hal\nrf_qdec.h	/^__STATIC_INLINE uint32_t nrf_qdec_ledpol_get(void)$/;"	f
nrf_qdec_ledpol_set	components\drivers_nrf\hal\nrf_qdec.h	/^__STATIC_INLINE void nrf_qdec_ledpol_set(nrf_qdec_ledpol_t pol)$/;"	f
nrf_qdec_ledpol_t	components\drivers_nrf\hal\nrf_qdec.h	/^} nrf_qdec_ledpol_t;$/;"	t	typeref:enum:__anon280
nrf_qdec_ledpre_get	components\drivers_nrf\hal\nrf_qdec.h	/^__STATIC_INLINE uint32_t nrf_qdec_ledpre_get(void)$/;"	f
nrf_qdec_ledpre_set	components\drivers_nrf\hal\nrf_qdec.h	/^__STATIC_INLINE void nrf_qdec_ledpre_set(uint32_t time_us)$/;"	f
nrf_qdec_pio_assign	components\drivers_nrf\hal\nrf_qdec.h	/^__STATIC_INLINE uint32_t nrf_qdec_pio_assign(nrf_qdec_pio_t qdec_pio, uint32_t pin_number)$/;"	f
nrf_qdec_pio_assignment_get	components\drivers_nrf\hal\nrf_qdec.h	/^__STATIC_INLINE uint32_t nrf_qdec_pio_assignment_get(nrf_qdec_pio_t qdec_pio,$/;"	f
nrf_qdec_pio_t	components\drivers_nrf\hal\nrf_qdec.h	/^} nrf_qdec_pio_t;$/;"	t	typeref:enum:__anon279
nrf_qdec_reportper_reg_get	components\drivers_nrf\hal\nrf_qdec.h	/^__STATIC_INLINE uint32_t nrf_qdec_reportper_reg_get(void)$/;"	f
nrf_qdec_reportper_set	components\drivers_nrf\hal\nrf_qdec.h	/^__STATIC_INLINE void nrf_qdec_reportper_set(nrf_qdec_reportper_t reportper)$/;"	f
nrf_qdec_reportper_t	components\drivers_nrf\hal\nrf_qdec.h	/^} nrf_qdec_reportper_t;$/;"	t	typeref:enum:__anon282
nrf_qdec_reportper_to_value	components\drivers_nrf\hal\nrf_qdec.h	/^__STATIC_INLINE uint32_t nrf_qdec_reportper_to_value(uint32_t reportper)$/;"	f
nrf_qdec_sample_get	components\drivers_nrf\hal\nrf_qdec.h	/^__STATIC_INLINE int32_t nrf_qdec_sample_get(void)$/;"	f
nrf_qdec_sampleper_reg_get	components\drivers_nrf\hal\nrf_qdec.h	/^__STATIC_INLINE int32_t nrf_qdec_sampleper_reg_get(void)$/;"	f
nrf_qdec_sampleper_set	components\drivers_nrf\hal\nrf_qdec.h	/^__STATIC_INLINE void nrf_qdec_sampleper_set(nrf_qdec_sampleper_t sample_per)$/;"	f
nrf_qdec_sampleper_t	components\drivers_nrf\hal\nrf_qdec.h	/^} nrf_qdec_sampleper_t;$/;"	t	typeref:enum:__anon281
nrf_qdec_sampleper_to_value	components\drivers_nrf\hal\nrf_qdec.h	/^__STATIC_INLINE uint32_t nrf_qdec_sampleper_to_value(uint32_t sampleper)$/;"	f
nrf_qdec_shorts_clear	components\drivers_nrf\hal\nrf_qdec.h	/^__STATIC_INLINE void nrf_qdec_shorts_clear(uint32_t qdec_short_mask)$/;"	f
nrf_qdec_shorts_mask_t	components\drivers_nrf\hal\nrf_qdec.h	/^} nrf_qdec_shorts_mask_t;$/;"	t	typeref:enum:__anon275
nrf_qdec_shorts_set	components\drivers_nrf\hal\nrf_qdec.h	/^__STATIC_INLINE void nrf_qdec_shorts_set(uint32_t qdec_short_mask)$/;"	f
nrf_qdec_task_address_get	components\drivers_nrf\hal\nrf_qdec.h	/^__STATIC_INLINE uint32_t * nrf_qdec_task_address_get(nrf_qdec_tasks_t qdec_task)$/;"	f
nrf_qdec_task_set	components\drivers_nrf\hal\nrf_qdec.h	/^__STATIC_INLINE void nrf_qdec_task_set(nrf_qdec_tasks_t qdec_task)$/;"	f
nrf_qdec_tasks_t	components\drivers_nrf\hal\nrf_qdec.h	/^} nrf_qdec_tasks_t;$/;"	t	typeref:enum:__anon273
NRF_RNG_EVENTS_VALRDY	components\drivers_nrf\hal\nrf_rng.h	/^    NRF_RNG_EVENTS_VALRDY = offsetof(NRF_RNG_Type, EVENTS_VALRDY) \/**< New random number generated event. *\/$/;"	e	enum:__anon284
NRF_RNG_EVENT_CLEAR	components\drivers_nrf\hal\nrf_rng.h	32;"	d
NRF_RNG_H__	components\drivers_nrf\hal\nrf_rng.h	19;"	d
NRF_RNG_INT_VALRDY_MASK	components\drivers_nrf\hal\nrf_rng.h	/^    NRF_RNG_INT_VALRDY_MASK = RNG_INTENSET_VALRDY_Msk \/**< Mask for enabling or disabling an interrupt on VALRDY event.  *\/$/;"	e	enum:__anon285
NRF_RNG_SHORTS_VALRDY_STOP_MASK	components\drivers_nrf\hal\nrf_rng.h	/^    NRF_RNG_SHORTS_VALRDY_STOP_MASK = RNG_SHORTS_VALRDY_STOP_Msk \/**<  Mask for setting shortcut between EVENT_VALRDY and TASK_STOP. *\/$/;"	e	enum:__anon286
NRF_RNG_TASKS_START	components\drivers_nrf\hal\nrf_rng.h	/^    NRF_RNG_TASKS_START = offsetof(NRF_RNG_Type, TASKS_START), \/**< Start the random number generator. *\/$/;"	e	enum:__anon283
NRF_RNG_TASKS_STOP	components\drivers_nrf\hal\nrf_rng.h	/^    NRF_RNG_TASKS_STOP  = offsetof(NRF_RNG_Type, TASKS_STOP)   \/**< Stop the random number generator. *\/$/;"	e	enum:__anon283
NRF_RNG_TASK_SET	components\drivers_nrf\hal\nrf_rng.h	31;"	d
nrf_rng_error_correction_disable	components\drivers_nrf\hal\nrf_rng.h	/^__STATIC_INLINE void nrf_rng_error_correction_disable(void)$/;"	f
nrf_rng_error_correction_enable	components\drivers_nrf\hal\nrf_rng.h	/^__STATIC_INLINE void nrf_rng_error_correction_enable(void)$/;"	f
nrf_rng_event_address_get	components\drivers_nrf\hal\nrf_rng.h	/^__STATIC_INLINE uint32_t * nrf_rng_event_address_get(nrf_rng_events_t rng_event)$/;"	f
nrf_rng_event_clear	components\drivers_nrf\hal\nrf_rng.h	/^__STATIC_INLINE void nrf_rng_event_clear(nrf_rng_events_t rng_event)$/;"	f
nrf_rng_event_get	components\drivers_nrf\hal\nrf_rng.h	/^__STATIC_INLINE bool nrf_rng_event_get(nrf_rng_events_t rng_event)$/;"	f
nrf_rng_events_t	components\drivers_nrf\hal\nrf_rng.h	/^} nrf_rng_events_t;                                               \/*lint -restore *\/$/;"	t	typeref:enum:__anon284
nrf_rng_int_disable	components\drivers_nrf\hal\nrf_rng.h	/^__STATIC_INLINE void nrf_rng_int_disable(uint32_t rng_int_mask)$/;"	f
nrf_rng_int_enable	components\drivers_nrf\hal\nrf_rng.h	/^__STATIC_INLINE void nrf_rng_int_enable(uint32_t rng_int_mask)$/;"	f
nrf_rng_int_get	components\drivers_nrf\hal\nrf_rng.h	/^__STATIC_INLINE bool nrf_rng_int_get(nrf_rng_int_mask_t rng_int_mask)$/;"	f
nrf_rng_int_mask_t	components\drivers_nrf\hal\nrf_rng.h	/^} nrf_rng_int_mask_t;$/;"	t	typeref:enum:__anon285
nrf_rng_random_value_get	components\drivers_nrf\hal\nrf_rng.h	/^__STATIC_INLINE uint8_t nrf_rng_random_value_get(void)$/;"	f
nrf_rng_shorts_clear	components\drivers_nrf\hal\nrf_rng.h	/^__STATIC_INLINE void nrf_rng_shorts_clear(uint32_t rng_short_mask)$/;"	f
nrf_rng_shorts_mask_t	components\drivers_nrf\hal\nrf_rng.h	/^} nrf_rng_shorts_mask_t;$/;"	t	typeref:enum:__anon286
nrf_rng_shorts_set	components\drivers_nrf\hal\nrf_rng.h	/^__STATIC_INLINE void nrf_rng_shorts_set(uint32_t rng_short_mask)$/;"	f
nrf_rng_task_address_get	components\drivers_nrf\hal\nrf_rng.h	/^__STATIC_INLINE uint32_t * nrf_rng_task_address_get(nrf_rng_tasks_t rng_task)$/;"	f
nrf_rng_task_set	components\drivers_nrf\hal\nrf_rng.h	/^__STATIC_INLINE void nrf_rng_task_set(nrf_rng_tasks_t rng_task)$/;"	f
nrf_rng_tasks_t	components\drivers_nrf\hal\nrf_rng.h	/^} nrf_rng_tasks_t;                                             \/*lint -restore *\/$/;"	t	typeref:enum:__anon283
NRF_RTC_EVENT_COMPARE_0	components\drivers_nrf\hal\nrf_rtc.h	/^    NRF_RTC_EVENT_COMPARE_0   = offsetof(NRF_RTC_Type,EVENTS_COMPARE[0]), \/**< Compare 0 event. *\/$/;"	e	enum:__anon288
NRF_RTC_EVENT_COMPARE_1	components\drivers_nrf\hal\nrf_rtc.h	/^    NRF_RTC_EVENT_COMPARE_1   = offsetof(NRF_RTC_Type,EVENTS_COMPARE[1]), \/**< Compare 1 event. *\/$/;"	e	enum:__anon288
NRF_RTC_EVENT_COMPARE_2	components\drivers_nrf\hal\nrf_rtc.h	/^    NRF_RTC_EVENT_COMPARE_2   = offsetof(NRF_RTC_Type,EVENTS_COMPARE[2]), \/**< Compare 2 event. *\/$/;"	e	enum:__anon288
NRF_RTC_EVENT_COMPARE_3	components\drivers_nrf\hal\nrf_rtc.h	/^    NRF_RTC_EVENT_COMPARE_3   = offsetof(NRF_RTC_Type,EVENTS_COMPARE[3])  \/**< Compare 3 event. *\/$/;"	e	enum:__anon288
NRF_RTC_EVENT_OVERFLOW	components\drivers_nrf\hal\nrf_rtc.h	/^    NRF_RTC_EVENT_OVERFLOW    = offsetof(NRF_RTC_Type,EVENTS_OVRFLW),     \/**< Overflow event. *\/$/;"	e	enum:__anon288
NRF_RTC_EVENT_TICK	components\drivers_nrf\hal\nrf_rtc.h	/^    NRF_RTC_EVENT_TICK        = offsetof(NRF_RTC_Type,EVENTS_TICK),       \/**< Tick event. *\/$/;"	e	enum:__anon288
NRF_RTC_H	components\drivers_nrf\hal\nrf_rtc.h	19;"	d
NRF_RTC_INT_COMPARE0_MASK	components\drivers_nrf\hal\nrf_rtc.h	/^    NRF_RTC_INT_COMPARE0_MASK = RTC_INTENSET_COMPARE0_Msk, \/**< RTC interrupt from compare event on channel 0. *\/$/;"	e	enum:__anon289
NRF_RTC_INT_COMPARE1_MASK	components\drivers_nrf\hal\nrf_rtc.h	/^    NRF_RTC_INT_COMPARE1_MASK = RTC_INTENSET_COMPARE1_Msk, \/**< RTC interrupt from compare event on channel 1. *\/$/;"	e	enum:__anon289
NRF_RTC_INT_COMPARE2_MASK	components\drivers_nrf\hal\nrf_rtc.h	/^    NRF_RTC_INT_COMPARE2_MASK = RTC_INTENSET_COMPARE2_Msk, \/**< RTC interrupt from compare event on channel 2. *\/$/;"	e	enum:__anon289
NRF_RTC_INT_COMPARE3_MASK	components\drivers_nrf\hal\nrf_rtc.h	/^    NRF_RTC_INT_COMPARE3_MASK = RTC_INTENSET_COMPARE3_Msk  \/**< RTC interrupt from compare event on channel 3. *\/$/;"	e	enum:__anon289
NRF_RTC_INT_OVERFLOW_MASK	components\drivers_nrf\hal\nrf_rtc.h	/^    NRF_RTC_INT_OVERFLOW_MASK = RTC_INTENSET_OVRFLW_Msk,   \/**< RTC interrupt from overflow event. *\/$/;"	e	enum:__anon289
NRF_RTC_INT_TICK_MASK	components\drivers_nrf\hal\nrf_rtc.h	/^    NRF_RTC_INT_TICK_MASK     = RTC_INTENSET_TICK_Msk,     \/**< RTC interrupt from tick event. *\/$/;"	e	enum:__anon289
NRF_RTC_TASK_CLEAR	components\drivers_nrf\hal\nrf_rtc.h	/^    NRF_RTC_TASK_CLEAR            = offsetof(NRF_RTC_Type,TASKS_CLEAR),     \/**< Clear. *\/$/;"	e	enum:__anon287
NRF_RTC_TASK_START	components\drivers_nrf\hal\nrf_rtc.h	/^    NRF_RTC_TASK_START            = offsetof(NRF_RTC_Type,TASKS_START),     \/**< Start. *\/$/;"	e	enum:__anon287
NRF_RTC_TASK_STOP	components\drivers_nrf\hal\nrf_rtc.h	/^    NRF_RTC_TASK_STOP             = offsetof(NRF_RTC_Type,TASKS_STOP),      \/**< Stop. *\/$/;"	e	enum:__anon287
NRF_RTC_TASK_TRIGGER_OVERFLOW	components\drivers_nrf\hal\nrf_rtc.h	/^    NRF_RTC_TASK_TRIGGER_OVERFLOW = offsetof(NRF_RTC_Type,TASKS_TRIGOVRFLW),\/**< Trigger overflow. *\/$/;"	e	enum:__anon287
RTC_CHANNEL_EVENT_ADDR	components\drivers_nrf\hal\nrf_rtc.h	42;"	d
RTC_CHANNEL_INT_MASK	components\drivers_nrf\hal\nrf_rtc.h	41;"	d
RTC_CHANNEL_NUM	components\drivers_nrf\hal\nrf_rtc.h	34;"	d
RTC_INPUT_FREQ	components\drivers_nrf\hal\nrf_rtc.h	36;"	d
RTC_WRAP	components\drivers_nrf\hal\nrf_rtc.h	39;"	d
nrf_rtc_cc_get	components\drivers_nrf\hal\nrf_rtc.h	/^__STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type * p_rtc, uint32_t ch)$/;"	f
nrf_rtc_cc_set	components\drivers_nrf\hal\nrf_rtc.h	/^__STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_rtc, uint32_t ch, uint32_t cc_val)$/;"	f
nrf_rtc_counter_get	components\drivers_nrf\hal\nrf_rtc.h	/^__STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type * p_rtc)$/;"	f
nrf_rtc_event_address_get	components\drivers_nrf\hal\nrf_rtc.h	/^__STATIC_INLINE uint32_t nrf_rtc_event_address_get(NRF_RTC_Type * p_rtc, nrf_rtc_event_t event)$/;"	f
nrf_rtc_event_clear	components\drivers_nrf\hal\nrf_rtc.h	/^__STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_rtc, nrf_rtc_event_t event)$/;"	f
nrf_rtc_event_disable	components\drivers_nrf\hal\nrf_rtc.h	/^__STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_rtc, uint32_t mask)$/;"	f
nrf_rtc_event_enable	components\drivers_nrf\hal\nrf_rtc.h	/^__STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_rtc, uint32_t mask)$/;"	f
nrf_rtc_event_pending	components\drivers_nrf\hal\nrf_rtc.h	/^__STATIC_INLINE uint32_t nrf_rtc_event_pending(NRF_RTC_Type * p_rtc, nrf_rtc_event_t event)$/;"	f
nrf_rtc_event_t	components\drivers_nrf\hal\nrf_rtc.h	/^} nrf_rtc_event_t;$/;"	t	typeref:enum:__anon288
nrf_rtc_int_disable	components\drivers_nrf\hal\nrf_rtc.h	/^__STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_rtc, uint32_t mask)$/;"	f
nrf_rtc_int_enable	components\drivers_nrf\hal\nrf_rtc.h	/^__STATIC_INLINE void nrf_rtc_int_enable(NRF_RTC_Type * p_rtc, uint32_t mask)$/;"	f
nrf_rtc_int_get	components\drivers_nrf\hal\nrf_rtc.h	/^__STATIC_INLINE uint32_t nrf_rtc_int_get(NRF_RTC_Type * p_rtc)$/;"	f
nrf_rtc_int_is_enabled	components\drivers_nrf\hal\nrf_rtc.h	/^__STATIC_INLINE uint32_t nrf_rtc_int_is_enabled(NRF_RTC_Type * p_rtc, uint32_t mask)$/;"	f
nrf_rtc_int_t	components\drivers_nrf\hal\nrf_rtc.h	/^} nrf_rtc_int_t;$/;"	t	typeref:enum:__anon289
nrf_rtc_prescaler_set	components\drivers_nrf\hal\nrf_rtc.h	/^__STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_rtc, uint32_t val)$/;"	f
nrf_rtc_task_address_get	components\drivers_nrf\hal\nrf_rtc.h	/^__STATIC_INLINE uint32_t nrf_rtc_task_address_get(NRF_RTC_Type * p_rtc, nrf_rtc_task_t task)$/;"	f
nrf_rtc_task_set	components\drivers_nrf\hal\nrf_rtc.h	/^__STATIC_INLINE void nrf_rtc_task_set(NRF_RTC_Type * p_rtc, nrf_rtc_task_t task)$/;"	f
nrf_rtc_task_t	components\drivers_nrf\hal\nrf_rtc.h	/^} nrf_rtc_task_t;$/;"	t	typeref:enum:__anon287
rtc_prescaler_get	components\drivers_nrf\hal\nrf_rtc.h	/^__STATIC_INLINE uint32_t rtc_prescaler_get(NRF_RTC_Type * p_rtc)$/;"	f
MASK_SIGN	components\drivers_nrf\hal\nrf_temp.h	27;"	d
MASK_SIGN_EXTENSION	components\drivers_nrf\hal\nrf_temp.h	28;"	d
NRF_TEMP_H__	components\drivers_nrf\hal\nrf_temp.h	14;"	d
nrf_temp_init	components\drivers_nrf\hal\nrf_temp.h	/^static __INLINE void nrf_temp_init(void)$/;"	f
nrf_temp_read	components\drivers_nrf\hal\nrf_temp.h	/^static __INLINE int32_t nrf_temp_read(void)$/;"	f
NRF_TIMER_BIT_WIDTH_16	components\drivers_nrf\hal\nrf_timer.h	/^    NRF_TIMER_BIT_WIDTH_16 = TIMER_BITMODE_BITMODE_16Bit, \/**< Timer bit width 16 bit. *\/$/;"	e	enum:__anon294
NRF_TIMER_BIT_WIDTH_24	components\drivers_nrf\hal\nrf_timer.h	/^    NRF_TIMER_BIT_WIDTH_24 = TIMER_BITMODE_BITMODE_24Bit, \/**< Timer bit width 24 bit. *\/$/;"	e	enum:__anon294
NRF_TIMER_BIT_WIDTH_32	components\drivers_nrf\hal\nrf_timer.h	/^    NRF_TIMER_BIT_WIDTH_32 = TIMER_BITMODE_BITMODE_32Bit  \/**< Timer bit width 32 bit. *\/$/;"	e	enum:__anon294
NRF_TIMER_BIT_WIDTH_8	components\drivers_nrf\hal\nrf_timer.h	/^    NRF_TIMER_BIT_WIDTH_8  = TIMER_BITMODE_BITMODE_08Bit, \/**< Timer bit width 8 bit. *\/$/;"	e	enum:__anon294
NRF_TIMER_CC_CHANNEL0	components\drivers_nrf\hal\nrf_timer.h	/^    NRF_TIMER_CC_CHANNEL0 = 0, \/**< Timer compare\/capture channel 0. *\/$/;"	e	enum:__anon296
NRF_TIMER_CC_CHANNEL1	components\drivers_nrf\hal\nrf_timer.h	/^    NRF_TIMER_CC_CHANNEL1,     \/**< Timer compare\/capture channel 1. *\/$/;"	e	enum:__anon296
NRF_TIMER_CC_CHANNEL2	components\drivers_nrf\hal\nrf_timer.h	/^    NRF_TIMER_CC_CHANNEL2,     \/**< Timer compare\/capture channel 2. *\/$/;"	e	enum:__anon296
NRF_TIMER_CC_CHANNEL3	components\drivers_nrf\hal\nrf_timer.h	/^    NRF_TIMER_CC_CHANNEL3      \/**< Timer compare\/capture channel 3. *\/$/;"	e	enum:__anon296
NRF_TIMER_EVENTS_COMPARE0	components\drivers_nrf\hal\nrf_timer.h	/^    NRF_TIMER_EVENTS_COMPARE0 = offsetof(NRF_TIMER_Type, EVENTS_COMPARE[0]), \/**< Event from compare channel 0. *\/$/;"	e	enum:__anon291
NRF_TIMER_EVENTS_COMPARE1	components\drivers_nrf\hal\nrf_timer.h	/^    NRF_TIMER_EVENTS_COMPARE1 = offsetof(NRF_TIMER_Type, EVENTS_COMPARE[1]), \/**< Event from compare channel 1. *\/$/;"	e	enum:__anon291
NRF_TIMER_EVENTS_COMPARE2	components\drivers_nrf\hal\nrf_timer.h	/^    NRF_TIMER_EVENTS_COMPARE2 = offsetof(NRF_TIMER_Type, EVENTS_COMPARE[2]), \/**< Event from compare channel 2. *\/$/;"	e	enum:__anon291
NRF_TIMER_EVENTS_COMPARE3	components\drivers_nrf\hal\nrf_timer.h	/^    NRF_TIMER_EVENTS_COMPARE3 = offsetof(NRF_TIMER_Type, EVENTS_COMPARE[3])  \/**< Event from compare channel 3. *\/$/;"	e	enum:__anon291
NRF_TIMER_FREQ_125kHz	components\drivers_nrf\hal\nrf_timer.h	/^    NRF_TIMER_FREQ_125kHz,    \/**< Timer frequency 125 kHz. *\/$/;"	e	enum:__anon295
NRF_TIMER_FREQ_16MHz	components\drivers_nrf\hal\nrf_timer.h	/^    NRF_TIMER_FREQ_16MHz = 0, \/**< Timer frequency 16 MHz. *\/$/;"	e	enum:__anon295
NRF_TIMER_FREQ_1MHz	components\drivers_nrf\hal\nrf_timer.h	/^    NRF_TIMER_FREQ_1MHz,      \/**< Timer frequency 1 MHz. *\/$/;"	e	enum:__anon295
NRF_TIMER_FREQ_250kHz	components\drivers_nrf\hal\nrf_timer.h	/^    NRF_TIMER_FREQ_250kHz,    \/**< Timer frequency 250 kHz. *\/$/;"	e	enum:__anon295
NRF_TIMER_FREQ_2MHz	components\drivers_nrf\hal\nrf_timer.h	/^    NRF_TIMER_FREQ_2MHz,      \/**< Timer frequency 2 MHz. *\/$/;"	e	enum:__anon295
NRF_TIMER_FREQ_31250Hz	components\drivers_nrf\hal\nrf_timer.h	/^    NRF_TIMER_FREQ_31250Hz    \/**< Timer frequency 31250 Hz. *\/$/;"	e	enum:__anon295
NRF_TIMER_FREQ_4MHz	components\drivers_nrf\hal\nrf_timer.h	/^    NRF_TIMER_FREQ_4MHz,      \/**< Timer frequency 4 MHz. *\/$/;"	e	enum:__anon295
NRF_TIMER_FREQ_500kHz	components\drivers_nrf\hal\nrf_timer.h	/^    NRF_TIMER_FREQ_500kHz,    \/**< Timer frequency 500 kHz. *\/$/;"	e	enum:__anon295
NRF_TIMER_FREQ_62500Hz	components\drivers_nrf\hal\nrf_timer.h	/^    NRF_TIMER_FREQ_62500Hz,   \/**< Timer frequency 62500 Hz. *\/$/;"	e	enum:__anon295
NRF_TIMER_FREQ_8MHz	components\drivers_nrf\hal\nrf_timer.h	/^    NRF_TIMER_FREQ_8MHz,      \/**< Timer frequency 8 MHz. *\/$/;"	e	enum:__anon295
NRF_TIMER_H__	components\drivers_nrf\hal\nrf_timer.h	21;"	d
NRF_TIMER_INT_COMPARE0_MASK	components\drivers_nrf\hal\nrf_timer.h	/^    NRF_TIMER_INT_COMPARE0_MASK = TIMER_INTENSET_COMPARE0_Msk, \/**< Timer interrupt from compare event on channel 0. *\/$/;"	e	enum:__anon297
NRF_TIMER_INT_COMPARE1_MASK	components\drivers_nrf\hal\nrf_timer.h	/^    NRF_TIMER_INT_COMPARE1_MASK = TIMER_INTENSET_COMPARE1_Msk, \/**< Timer interrupt from compare event on channel 1. *\/$/;"	e	enum:__anon297
NRF_TIMER_INT_COMPARE2_MASK	components\drivers_nrf\hal\nrf_timer.h	/^    NRF_TIMER_INT_COMPARE2_MASK = TIMER_INTENSET_COMPARE2_Msk, \/**< Timer interrupt from compare event on channel 2. *\/$/;"	e	enum:__anon297
NRF_TIMER_INT_COMPARE3_MASK	components\drivers_nrf\hal\nrf_timer.h	/^    NRF_TIMER_INT_COMPARE3_MASK = TIMER_INTENSET_COMPARE3_Msk  \/**< Timer interrupt from compare event on channel 3. *\/$/;"	e	enum:__anon297
NRF_TIMER_MODE_COUNTER	components\drivers_nrf\hal\nrf_timer.h	/^    NRF_TIMER_MODE_COUNTER = TIMER_MODE_MODE_Counter \/**< Timer mode: counter. *\/$/;"	e	enum:__anon293
NRF_TIMER_MODE_TIMER	components\drivers_nrf\hal\nrf_timer.h	/^    NRF_TIMER_MODE_TIMER   = TIMER_MODE_MODE_Timer,  \/**< Timer mode: timer. *\/$/;"	e	enum:__anon293
NRF_TIMER_SHORTS_COMPARE0_CLEAR_MASK	components\drivers_nrf\hal\nrf_timer.h	/^    NRF_TIMER_SHORTS_COMPARE0_CLEAR_MASK = TIMER_SHORTS_COMPARE0_CLEAR_Msk, \/**< Shortcut for clearing the timer based on compare 0. *\/$/;"	e	enum:__anon292
NRF_TIMER_SHORTS_COMPARE0_STOP_MASK	components\drivers_nrf\hal\nrf_timer.h	/^    NRF_TIMER_SHORTS_COMPARE0_STOP_MASK = TIMER_SHORTS_COMPARE0_STOP_Msk,   \/**< Shortcut for stopping the timer based on compare 0. *\/$/;"	e	enum:__anon292
NRF_TIMER_SHORTS_COMPARE1_CLEAR_MASK	components\drivers_nrf\hal\nrf_timer.h	/^    NRF_TIMER_SHORTS_COMPARE1_CLEAR_MASK = TIMER_SHORTS_COMPARE1_CLEAR_Msk, \/**< Shortcut for clearing the timer based on compare 1. *\/$/;"	e	enum:__anon292
NRF_TIMER_SHORTS_COMPARE1_STOP_MASK	components\drivers_nrf\hal\nrf_timer.h	/^    NRF_TIMER_SHORTS_COMPARE1_STOP_MASK = TIMER_SHORTS_COMPARE1_STOP_Msk,   \/**< Shortcut for stopping the timer based on compare 1. *\/$/;"	e	enum:__anon292
NRF_TIMER_SHORTS_COMPARE2_CLEAR_MASK	components\drivers_nrf\hal\nrf_timer.h	/^    NRF_TIMER_SHORTS_COMPARE2_CLEAR_MASK = TIMER_SHORTS_COMPARE2_CLEAR_Msk, \/**< Shortcut for clearing the timer based on compare 2. *\/$/;"	e	enum:__anon292
NRF_TIMER_SHORTS_COMPARE2_STOP_MASK	components\drivers_nrf\hal\nrf_timer.h	/^    NRF_TIMER_SHORTS_COMPARE2_STOP_MASK = TIMER_SHORTS_COMPARE2_STOP_Msk,   \/**< Shortcut for stopping the timer based on compare 2. *\/$/;"	e	enum:__anon292
NRF_TIMER_SHORTS_COMPARE3_CLEAR_MASK	components\drivers_nrf\hal\nrf_timer.h	/^    NRF_TIMER_SHORTS_COMPARE3_CLEAR_MASK = TIMER_SHORTS_COMPARE3_CLEAR_Msk  \/**< Shortcut for clearing the timer based on compare 3. *\/$/;"	e	enum:__anon292
NRF_TIMER_SHORTS_COMPARE3_STOP_MASK	components\drivers_nrf\hal\nrf_timer.h	/^    NRF_TIMER_SHORTS_COMPARE3_STOP_MASK = TIMER_SHORTS_COMPARE3_STOP_Msk,   \/**< Shortcut for stopping the timer based on compare 3. *\/$/;"	e	enum:__anon292
NRF_TIMER_TASKS_CAPTURE0	components\drivers_nrf\hal\nrf_timer.h	/^    NRF_TIMER_TASKS_CAPTURE0 = offsetof(NRF_TIMER_Type, TASKS_CAPTURE[0]), \/**< Task for capturing the timer value on channel 0. *\/$/;"	e	enum:__anon290
NRF_TIMER_TASKS_CAPTURE1	components\drivers_nrf\hal\nrf_timer.h	/^    NRF_TIMER_TASKS_CAPTURE1 = offsetof(NRF_TIMER_Type, TASKS_CAPTURE[1]), \/**< Task for capturing the timer value on channel 1. *\/$/;"	e	enum:__anon290
NRF_TIMER_TASKS_CAPTURE2	components\drivers_nrf\hal\nrf_timer.h	/^    NRF_TIMER_TASKS_CAPTURE2 = offsetof(NRF_TIMER_Type, TASKS_CAPTURE[2]), \/**< Task for capturing the timer value on channel 2. *\/$/;"	e	enum:__anon290
NRF_TIMER_TASKS_CAPTURE3	components\drivers_nrf\hal\nrf_timer.h	/^    NRF_TIMER_TASKS_CAPTURE3 = offsetof(NRF_TIMER_Type, TASKS_CAPTURE[3]), \/**< Task for capturing the timer value on channel 3. *\/$/;"	e	enum:__anon290
NRF_TIMER_TASKS_CLEAR	components\drivers_nrf\hal\nrf_timer.h	/^    NRF_TIMER_TASKS_CLEAR    = offsetof(NRF_TIMER_Type, TASKS_CLEAR),      \/**< Task for resetting the timer value. *\/$/;"	e	enum:__anon290
NRF_TIMER_TASKS_COUNT	components\drivers_nrf\hal\nrf_timer.h	/^    NRF_TIMER_TASKS_COUNT    = offsetof(NRF_TIMER_Type, TASKS_COUNT),      \/**< Task for incrementing the timer (in counter mode). *\/$/;"	e	enum:__anon290
NRF_TIMER_TASKS_SHUTDOWN	components\drivers_nrf\hal\nrf_timer.h	/^    NRF_TIMER_TASKS_SHUTDOWN = offsetof(NRF_TIMER_Type, TASKS_SHUTDOWN),   \/**< Task for powering off the timer. *\/$/;"	e	enum:__anon290
NRF_TIMER_TASKS_START	components\drivers_nrf\hal\nrf_timer.h	/^    NRF_TIMER_TASKS_START    = offsetof(NRF_TIMER_Type, TASKS_START),      \/**< Task for starting the timer. *\/$/;"	e	enum:__anon290
NRF_TIMER_TASKS_STOP	components\drivers_nrf\hal\nrf_timer.h	/^    NRF_TIMER_TASKS_STOP     = offsetof(NRF_TIMER_Type, TASKS_STOP),       \/**< Task for stoping the timer. *\/$/;"	e	enum:__anon290
TIMER_CC_SHORTS	components\drivers_nrf\hal\nrf_timer.h	39;"	d
TIMER_CHANNEL_NUMBER	components\drivers_nrf\hal\nrf_timer.h	30;"	d
TIMER_INSTANCE_NUMBER	components\drivers_nrf\hal\nrf_timer.h	29;"	d
TIMER_IS_BIT_WIDTH_VALID	components\drivers_nrf\hal\nrf_timer.h	36;"	d
nrf_timer_bit_width_get	components\drivers_nrf\hal\nrf_timer.h	/^__STATIC_INLINE nrf_timer_bit_width_t nrf_timer_bit_width_get(NRF_TIMER_Type * NRF_TIMERx)$/;"	f
nrf_timer_bit_width_set	components\drivers_nrf\hal\nrf_timer.h	/^__STATIC_INLINE void nrf_timer_bit_width_set(NRF_TIMER_Type      * NRF_TIMERx,$/;"	f
nrf_timer_bit_width_t	components\drivers_nrf\hal\nrf_timer.h	/^} nrf_timer_bit_width_t;$/;"	t	typeref:enum:__anon294
nrf_timer_cc_channel_t	components\drivers_nrf\hal\nrf_timer.h	/^} nrf_timer_cc_channel_t;$/;"	t	typeref:enum:__anon296
nrf_timer_cc_read	components\drivers_nrf\hal\nrf_timer.h	/^__STATIC_INLINE uint32_t nrf_timer_cc_read(NRF_TIMER_Type       * NRF_TIMERx,$/;"	f
nrf_timer_cc_write	components\drivers_nrf\hal\nrf_timer.h	/^__STATIC_INLINE void nrf_timer_cc_write(NRF_TIMER_Type       * NRF_TIMERx,$/;"	f
nrf_timer_event_address_get	components\drivers_nrf\hal\nrf_timer.h	/^__STATIC_INLINE uint32_t * nrf_timer_event_address_get(NRF_TIMER_Type  * NRF_TIMERx,$/;"	f
nrf_timer_event_check	components\drivers_nrf\hal\nrf_timer.h	/^__STATIC_INLINE bool nrf_timer_event_check(NRF_TIMER_Type  * NRF_TIMERx,$/;"	f
nrf_timer_event_clear	components\drivers_nrf\hal\nrf_timer.h	/^__STATIC_INLINE void nrf_timer_event_clear(NRF_TIMER_Type  * NRF_TIMERx,$/;"	f
nrf_timer_events_t	components\drivers_nrf\hal\nrf_timer.h	/^} nrf_timer_events_t;$/;"	t	typeref:enum:__anon291
nrf_timer_frequency_get	components\drivers_nrf\hal\nrf_timer.h	/^__STATIC_INLINE nrf_timer_frequency_t nrf_timer_frequency_get(NRF_TIMER_Type * NRF_TIMERx)$/;"	f
nrf_timer_frequency_set	components\drivers_nrf\hal\nrf_timer.h	/^__STATIC_INLINE void nrf_timer_frequency_set(NRF_TIMER_Type      * NRF_TIMERx,$/;"	f
nrf_timer_frequency_t	components\drivers_nrf\hal\nrf_timer.h	/^} nrf_timer_frequency_t;$/;"	t	typeref:enum:__anon295
nrf_timer_int_disable	components\drivers_nrf\hal\nrf_timer.h	/^__STATIC_INLINE void nrf_timer_int_disable(NRF_TIMER_Type * NRF_TIMERx, uint32_t timer_int)$/;"	f
nrf_timer_int_enable	components\drivers_nrf\hal\nrf_timer.h	/^__STATIC_INLINE void nrf_timer_int_enable(NRF_TIMER_Type * NRF_TIMERx, uint32_t timer_int)$/;"	f
nrf_timer_int_enable_check	components\drivers_nrf\hal\nrf_timer.h	/^__STATIC_INLINE bool nrf_timer_int_enable_check(NRF_TIMER_Type * NRF_TIMERx, uint32_t timer_int)$/;"	f
nrf_timer_int_mask_t	components\drivers_nrf\hal\nrf_timer.h	/^} nrf_timer_int_mask_t;$/;"	t	typeref:enum:__anon297
nrf_timer_mode_get	components\drivers_nrf\hal\nrf_timer.h	/^__STATIC_INLINE nrf_timer_mode_t nrf_timer_mode_get(NRF_TIMER_Type * NRF_TIMERx)$/;"	f
nrf_timer_mode_set	components\drivers_nrf\hal\nrf_timer.h	/^__STATIC_INLINE void nrf_timer_mode_set(NRF_TIMER_Type * NRF_TIMERx, nrf_timer_mode_t timer_mode)$/;"	f
nrf_timer_mode_t	components\drivers_nrf\hal\nrf_timer.h	/^} nrf_timer_mode_t;$/;"	t	typeref:enum:__anon293
nrf_timer_shorts_clear	components\drivers_nrf\hal\nrf_timer.h	/^__STATIC_INLINE void nrf_timer_shorts_clear(NRF_TIMER_Type * NRF_TIMERx, uint32_t timer_short_mask)$/;"	f
nrf_timer_shorts_mask_t	components\drivers_nrf\hal\nrf_timer.h	/^} nrf_timer_shorts_mask_t;$/;"	t	typeref:enum:__anon292
nrf_timer_shorts_set	components\drivers_nrf\hal\nrf_timer.h	/^__STATIC_INLINE void nrf_timer_shorts_set(NRF_TIMER_Type * NRF_TIMERx, uint32_t timer_short_mask)$/;"	f
nrf_timer_task_address_get	components\drivers_nrf\hal\nrf_timer.h	/^__STATIC_INLINE uint32_t * nrf_timer_task_address_get(NRF_TIMER_Type * NRF_TIMERx,$/;"	f
nrf_timer_task_set	components\drivers_nrf\hal\nrf_timer.h	/^__STATIC_INLINE void nrf_timer_task_set(NRF_TIMER_Type * NRF_TIMERx, nrf_timer_tasks_t timer_task)$/;"	f
nrf_timer_tasks_t	components\drivers_nrf\hal\nrf_timer.h	/^} nrf_timer_tasks_t;$/;"	t	typeref:enum:__anon290
NRF_WDT_BEHAVIOUR_PAUSE_SLEEP_HALT	components\drivers_nrf\hal\nrf_wdt.h	/^    NRF_WDT_BEHAVIOUR_PAUSE_SLEEP_HALT = 0,                                          \/**< WDT will be paused when CPU is in SLEEP or HALT mode. *\/$/;"	e	enum:__anon300
NRF_WDT_BEHAVIOUR_RUN_HALT	components\drivers_nrf\hal\nrf_wdt.h	/^    NRF_WDT_BEHAVIOUR_RUN_HALT         = WDT_CONFIG_HALT_Msk,                        \/**< WDT will run when CPU is in HALT mode. *\/$/;"	e	enum:__anon300
NRF_WDT_BEHAVIOUR_RUN_SLEEP	components\drivers_nrf\hal\nrf_wdt.h	/^    NRF_WDT_BEHAVIOUR_RUN_SLEEP        = WDT_CONFIG_SLEEP_Msk,                       \/**< WDT will run when CPU is in SLEEP mode. *\/$/;"	e	enum:__anon300
NRF_WDT_BEHAVIOUR_RUN_SLEEP_HALT	components\drivers_nrf\hal\nrf_wdt.h	/^    NRF_WDT_BEHAVIOUR_RUN_SLEEP_HALT   = WDT_CONFIG_SLEEP_Msk | WDT_CONFIG_HALT_Msk, \/**< WDT will run when CPU is in SLEEP or HALT mode. *\/$/;"	e	enum:__anon300
NRF_WDT_CHANNEL_NUMBER	components\drivers_nrf\hal\nrf_wdt.h	30;"	d
NRF_WDT_EVENTS_TIMEOUT	components\drivers_nrf\hal\nrf_wdt.h	/^    NRF_WDT_EVENTS_TIMEOUT = offsetof(NRF_WDT_Type, EVENTS_TIMEOUT), \/**< Event from WDT time-out. *\/$/;"	e	enum:__anon299
NRF_WDT_EVENT_CLEAR	components\drivers_nrf\hal\nrf_wdt.h	34;"	d
NRF_WDT_H__	components\drivers_nrf\hal\nrf_wdt.h	22;"	d
NRF_WDT_INT_TIMEOUT_MASK	components\drivers_nrf\hal\nrf_wdt.h	/^    NRF_WDT_INT_TIMEOUT_MASK = WDT_INTENSET_TIMEOUT_Msk, \/**< WDT interrupt from time-out event. *\/$/;"	e	enum:__anon302
NRF_WDT_RR0	components\drivers_nrf\hal\nrf_wdt.h	/^    NRF_WDT_RR0 = 0, \/**< Reload request register 0. *\/$/;"	e	enum:__anon301
NRF_WDT_RR1	components\drivers_nrf\hal\nrf_wdt.h	/^    NRF_WDT_RR1,     \/**< Reload request register 1. *\/$/;"	e	enum:__anon301
NRF_WDT_RR2	components\drivers_nrf\hal\nrf_wdt.h	/^    NRF_WDT_RR2,     \/**< Reload request register 2. *\/$/;"	e	enum:__anon301
NRF_WDT_RR3	components\drivers_nrf\hal\nrf_wdt.h	/^    NRF_WDT_RR3,     \/**< Reload request register 3. *\/$/;"	e	enum:__anon301
NRF_WDT_RR4	components\drivers_nrf\hal\nrf_wdt.h	/^    NRF_WDT_RR4,     \/**< Reload request register 4. *\/$/;"	e	enum:__anon301
NRF_WDT_RR5	components\drivers_nrf\hal\nrf_wdt.h	/^    NRF_WDT_RR5,     \/**< Reload request register 5. *\/$/;"	e	enum:__anon301
NRF_WDT_RR6	components\drivers_nrf\hal\nrf_wdt.h	/^    NRF_WDT_RR6,     \/**< Reload request register 6. *\/$/;"	e	enum:__anon301
NRF_WDT_RR7	components\drivers_nrf\hal\nrf_wdt.h	/^    NRF_WDT_RR7      \/**< Reload request register 7. *\/$/;"	e	enum:__anon301
NRF_WDT_RR_VALUE	components\drivers_nrf\hal\nrf_wdt.h	31;"	d
NRF_WDT_TASKS_START	components\drivers_nrf\hal\nrf_wdt.h	/^    NRF_WDT_TASKS_START = offsetof(NRF_WDT_Type, TASKS_START), \/**< Task for starting WDT. *\/$/;"	e	enum:__anon298
NRF_WDT_TASK_SET	components\drivers_nrf\hal\nrf_wdt.h	33;"	d
nrf_wdt_behaviour_set	components\drivers_nrf\hal\nrf_wdt.h	/^__STATIC_INLINE void nrf_wdt_behaviour_set(nrf_wdt_behaviour_t behaviour)$/;"	f
nrf_wdt_behaviour_t	components\drivers_nrf\hal\nrf_wdt.h	/^} nrf_wdt_behaviour_t;$/;"	t	typeref:enum:__anon300
nrf_wdt_event_address_get	components\drivers_nrf\hal\nrf_wdt.h	/^__STATIC_INLINE uint32_t nrf_wdt_event_address_get(nrf_wdt_events_t event)$/;"	f
nrf_wdt_event_check	components\drivers_nrf\hal\nrf_wdt.h	/^__STATIC_INLINE bool nrf_wdt_event_check(nrf_wdt_events_t event)$/;"	f
nrf_wdt_event_clear	components\drivers_nrf\hal\nrf_wdt.h	/^__STATIC_INLINE void nrf_wdt_event_clear(nrf_wdt_events_t event)$/;"	f
nrf_wdt_events_t	components\drivers_nrf\hal\nrf_wdt.h	/^} nrf_wdt_events_t;$/;"	t	typeref:enum:__anon299
nrf_wdt_int_disable	components\drivers_nrf\hal\nrf_wdt.h	/^__STATIC_INLINE void nrf_wdt_int_disable(uint32_t int_mask)$/;"	f
nrf_wdt_int_enable	components\drivers_nrf\hal\nrf_wdt.h	/^__STATIC_INLINE void nrf_wdt_int_enable(uint32_t int_mask)$/;"	f
nrf_wdt_int_enable_check	components\drivers_nrf\hal\nrf_wdt.h	/^__STATIC_INLINE bool nrf_wdt_int_enable_check(uint32_t int_mask)$/;"	f
nrf_wdt_int_mask_t	components\drivers_nrf\hal\nrf_wdt.h	/^} nrf_wdt_int_mask_t;$/;"	t	typeref:enum:__anon302
nrf_wdt_reload_request_disable	components\drivers_nrf\hal\nrf_wdt.h	/^__STATIC_INLINE void nrf_wdt_reload_request_disable(nrf_wdt_rr_register_t rr_register)$/;"	f
nrf_wdt_reload_request_enable	components\drivers_nrf\hal\nrf_wdt.h	/^__STATIC_INLINE void nrf_wdt_reload_request_enable(nrf_wdt_rr_register_t rr_register)$/;"	f
nrf_wdt_reload_request_is_enabled	components\drivers_nrf\hal\nrf_wdt.h	/^__STATIC_INLINE bool nrf_wdt_reload_request_is_enabled(nrf_wdt_rr_register_t rr_register)$/;"	f
nrf_wdt_reload_request_set	components\drivers_nrf\hal\nrf_wdt.h	/^__STATIC_INLINE void nrf_wdt_reload_request_set(nrf_wdt_rr_register_t rr_register)$/;"	f
nrf_wdt_reload_value_get	components\drivers_nrf\hal\nrf_wdt.h	/^__STATIC_INLINE uint32_t nrf_wdt_reload_value_get(void)$/;"	f
nrf_wdt_reload_value_set	components\drivers_nrf\hal\nrf_wdt.h	/^__STATIC_INLINE void nrf_wdt_reload_value_set(uint32_t reload_value)$/;"	f
nrf_wdt_request_status	components\drivers_nrf\hal\nrf_wdt.h	/^__STATIC_INLINE bool nrf_wdt_request_status(nrf_wdt_rr_register_t rr_register)$/;"	f
nrf_wdt_rr_register_t	components\drivers_nrf\hal\nrf_wdt.h	/^} nrf_wdt_rr_register_t;$/;"	t	typeref:enum:__anon301
nrf_wdt_started	components\drivers_nrf\hal\nrf_wdt.h	/^__STATIC_INLINE bool nrf_wdt_started(void)$/;"	f
nrf_wdt_task_address_get	components\drivers_nrf\hal\nrf_wdt.h	/^__STATIC_INLINE uint32_t nrf_wdt_task_address_get(nrf_wdt_tasks_t task)$/;"	f
nrf_wdt_task_set	components\drivers_nrf\hal\nrf_wdt.h	/^__STATIC_INLINE void nrf_wdt_task_set(nrf_wdt_tasks_t task)$/;"	f
nrf_wdt_tasks_t	components\drivers_nrf\hal\nrf_wdt.h	/^} nrf_wdt_tasks_t;$/;"	t	typeref:enum:__anon298
LPCOMP_IRQHandler	components\drivers_nrf\lpcomp\nrf_drv_lpcomp.c	/^void LPCOMP_IRQHandler(void)$/;"	f
lpcomp_execute_handler	components\drivers_nrf\lpcomp\nrf_drv_lpcomp.c	/^static void lpcomp_execute_handler(nrf_lpcomp_events_t event, uint32_t event_mask)$/;"	f	file:
m_default_config	components\drivers_nrf\lpcomp\nrf_drv_lpcomp.c	/^static const nrf_drv_lpcomp_config_t m_default_config = NRF_DRV_LPCONF_DEFAULT_CONFIG;$/;"	v	file:
m_lpcomp_events_handler	components\drivers_nrf\lpcomp\nrf_drv_lpcomp.c	/^static lpcomp_events_handler_t m_lpcomp_events_handler = NULL;$/;"	v	file:
m_state	components\drivers_nrf\lpcomp\nrf_drv_lpcomp.c	/^static nrf_drv_state_t         m_state = NRF_DRV_STATE_UNINITIALIZED;$/;"	v	file:
nrf_drv_lpcomp_disable	components\drivers_nrf\lpcomp\nrf_drv_lpcomp.c	/^void nrf_drv_lpcomp_disable(void)$/;"	f
nrf_drv_lpcomp_enable	components\drivers_nrf\lpcomp\nrf_drv_lpcomp.c	/^void nrf_drv_lpcomp_enable(void)$/;"	f
nrf_drv_lpcomp_event_handler_register	components\drivers_nrf\lpcomp\nrf_drv_lpcomp.c	/^void nrf_drv_lpcomp_event_handler_register(lpcomp_events_handler_t lpcomp_events_handler)$/;"	f
nrf_drv_lpcomp_init	components\drivers_nrf\lpcomp\nrf_drv_lpcomp.c	/^ret_code_t nrf_drv_lpcomp_init(const nrf_drv_lpcomp_config_t * p_config,$/;"	f
nrf_drv_lpcomp_uninit	components\drivers_nrf\lpcomp\nrf_drv_lpcomp.c	/^void nrf_drv_lpcomp_uninit(void)$/;"	f
NRF_DRV_LPCOMP_H__	components\drivers_nrf\lpcomp\nrf_drv_lpcomp.h	14;"	d
NRF_DRV_LPCONF_DEFAULT_CONFIG	components\drivers_nrf\lpcomp\nrf_drv_lpcomp.h	48;"	d
hal	components\drivers_nrf\lpcomp\nrf_drv_lpcomp.h	/^    nrf_lpcomp_config_t    hal;                \/**< LPCOMP HAL configuration. *\/$/;"	m	struct:__anon303
input	components\drivers_nrf\lpcomp\nrf_drv_lpcomp.h	/^    nrf_lpcomp_input_t     input;              \/**< Input to be monitored. *\/$/;"	m	struct:__anon303
interrupt_priority	components\drivers_nrf\lpcomp\nrf_drv_lpcomp.h	/^    uint8_t                interrupt_priority; \/**< LPCOMP interrupt priority *\/$/;"	m	struct:__anon303
lpcomp_events_handler_t	components\drivers_nrf\lpcomp\nrf_drv_lpcomp.h	/^typedef void (* lpcomp_events_handler_t)(nrf_lpcomp_events_t event);$/;"	t
nrf_drv_lpcomp_config_t	components\drivers_nrf\lpcomp\nrf_drv_lpcomp.h	/^} nrf_drv_lpcomp_config_t;$/;"	t	typeref:struct:__anon303
NRF_ERROR_BASE_NUM	components\drivers_nrf\nrf_soc_nosd\nrf_error.h	18;"	d
NRF_ERROR_BUSY	components\drivers_nrf\nrf_soc_nosd\nrf_error.h	41;"	d
NRF_ERROR_DATA_SIZE	components\drivers_nrf\nrf_soc_nosd\nrf_error.h	36;"	d
NRF_ERROR_FORBIDDEN	components\drivers_nrf\nrf_soc_nosd\nrf_error.h	39;"	d
NRF_ERROR_H__	components\drivers_nrf\nrf_soc_nosd\nrf_error.h	12;"	d
NRF_ERROR_INTERNAL	components\drivers_nrf\nrf_soc_nosd\nrf_error.h	27;"	d
NRF_ERROR_INVALID_ADDR	components\drivers_nrf\nrf_soc_nosd\nrf_error.h	40;"	d
NRF_ERROR_INVALID_DATA	components\drivers_nrf\nrf_soc_nosd\nrf_error.h	35;"	d
NRF_ERROR_INVALID_FLAGS	components\drivers_nrf\nrf_soc_nosd\nrf_error.h	34;"	d
NRF_ERROR_INVALID_LENGTH	components\drivers_nrf\nrf_soc_nosd\nrf_error.h	33;"	d
NRF_ERROR_INVALID_PARAM	components\drivers_nrf\nrf_soc_nosd\nrf_error.h	31;"	d
NRF_ERROR_INVALID_STATE	components\drivers_nrf\nrf_soc_nosd\nrf_error.h	32;"	d
NRF_ERROR_NOT_FOUND	components\drivers_nrf\nrf_soc_nosd\nrf_error.h	29;"	d
NRF_ERROR_NOT_SUPPORTED	components\drivers_nrf\nrf_soc_nosd\nrf_error.h	30;"	d
NRF_ERROR_NO_MEM	components\drivers_nrf\nrf_soc_nosd\nrf_error.h	28;"	d
NRF_ERROR_NULL	components\drivers_nrf\nrf_soc_nosd\nrf_error.h	38;"	d
NRF_ERROR_SDM_BASE_NUM	components\drivers_nrf\nrf_soc_nosd\nrf_error.h	19;"	d
NRF_ERROR_SOC_BASE_NUM	components\drivers_nrf\nrf_soc_nosd\nrf_error.h	20;"	d
NRF_ERROR_SOFTDEVICE_NOT_ENABLED	components\drivers_nrf\nrf_soc_nosd\nrf_error.h	26;"	d
NRF_ERROR_STK_BASE_NUM	components\drivers_nrf\nrf_soc_nosd\nrf_error.h	21;"	d
NRF_ERROR_SVC_HANDLER_MISSING	components\drivers_nrf\nrf_soc_nosd\nrf_error.h	25;"	d
NRF_ERROR_TIMEOUT	components\drivers_nrf\nrf_soc_nosd\nrf_error.h	37;"	d
NRF_SUCCESS	components\drivers_nrf\nrf_soc_nosd\nrf_error.h	24;"	d
m_in_critical_region	components\drivers_nrf\nrf_soc_nosd\nrf_soc.c	/^static uint8_t m_in_critical_region = 0;$/;"	v	file:
sd_app_evt_wait	components\drivers_nrf\nrf_soc_nosd\nrf_soc.c	/^uint32_t sd_app_evt_wait(void)$/;"	f
sd_nvic_ClearPendingIRQ	components\drivers_nrf\nrf_soc_nosd\nrf_soc.c	/^uint32_t sd_nvic_ClearPendingIRQ(IRQn_Type IRQn)$/;"	f
sd_nvic_DisableIRQ	components\drivers_nrf\nrf_soc_nosd\nrf_soc.c	/^uint32_t sd_nvic_DisableIRQ(IRQn_Type IRQn)$/;"	f
sd_nvic_EnableIRQ	components\drivers_nrf\nrf_soc_nosd\nrf_soc.c	/^uint32_t sd_nvic_EnableIRQ(IRQn_Type IRQn)$/;"	f
sd_nvic_GetPendingIRQ	components\drivers_nrf\nrf_soc_nosd\nrf_soc.c	/^uint32_t sd_nvic_GetPendingIRQ(IRQn_Type IRQn, uint32_t * p_pending_irq)$/;"	f
sd_nvic_GetPriority	components\drivers_nrf\nrf_soc_nosd\nrf_soc.c	/^uint32_t sd_nvic_GetPriority(IRQn_Type IRQn, nrf_app_irq_priority_t * p_priority)$/;"	f
sd_nvic_SetPendingIRQ	components\drivers_nrf\nrf_soc_nosd\nrf_soc.c	/^uint32_t sd_nvic_SetPendingIRQ(IRQn_Type IRQn)$/;"	f
sd_nvic_SetPriority	components\drivers_nrf\nrf_soc_nosd\nrf_soc.c	/^uint32_t sd_nvic_SetPriority(IRQn_Type IRQn, nrf_app_irq_priority_t priority)$/;"	f
sd_nvic_SystemReset	components\drivers_nrf\nrf_soc_nosd\nrf_soc.c	/^uint32_t sd_nvic_SystemReset(void)$/;"	f
sd_nvic_critical_region_enter	components\drivers_nrf\nrf_soc_nosd\nrf_soc.c	/^uint32_t sd_nvic_critical_region_enter(uint8_t * p_is_nested_critical_region)$/;"	f
sd_nvic_critical_region_exit	components\drivers_nrf\nrf_soc_nosd\nrf_soc.c	/^uint32_t sd_nvic_critical_region_exit(uint8_t is_nested_critical_region)$/;"	f
NRF_SOC_H__	components\drivers_nrf\nrf_soc_nosd\nrf_soc.h	14;"	d
nrf_app_irq_priority_t	components\drivers_nrf\nrf_soc_nosd\nrf_soc.h	/^typedef uint8_t nrf_app_irq_priority_t;$/;"	t
channel_allocated_clr	components\drivers_nrf\ppi\nrf_drv_ppi.c	/^__STATIC_INLINE void channel_allocated_clr(nrf_ppi_channel_t channel)$/;"	f
channel_allocated_clr_all	components\drivers_nrf\ppi\nrf_drv_ppi.c	/^__STATIC_INLINE void channel_allocated_clr_all(void)$/;"	f
channel_allocated_set	components\drivers_nrf\ppi\nrf_drv_ppi.c	/^__STATIC_INLINE void channel_allocated_set(nrf_ppi_channel_t channel)$/;"	f
channel_to_mask	components\drivers_nrf\ppi\nrf_drv_ppi.c	/^__STATIC_INLINE uint32_t channel_to_mask(nrf_ppi_channel_t channel)$/;"	f
group_allocated_clr	components\drivers_nrf\ppi\nrf_drv_ppi.c	/^__STATIC_INLINE void group_allocated_clr(nrf_ppi_channel_group_t group)$/;"	f
group_allocated_clr_all	components\drivers_nrf\ppi\nrf_drv_ppi.c	/^__STATIC_INLINE void group_allocated_clr_all()$/;"	f
group_allocated_set	components\drivers_nrf\ppi\nrf_drv_ppi.c	/^__STATIC_INLINE void group_allocated_set(nrf_ppi_channel_group_t group)$/;"	f
group_to_mask	components\drivers_nrf\ppi\nrf_drv_ppi.c	/^__STATIC_INLINE uint32_t group_to_mask(nrf_ppi_channel_group_t group)$/;"	f
is_allocated_channel	components\drivers_nrf\ppi\nrf_drv_ppi.c	/^__STATIC_INLINE bool is_allocated_channel(nrf_ppi_channel_t channel)$/;"	f
is_allocated_group	components\drivers_nrf\ppi\nrf_drv_ppi.c	/^__STATIC_INLINE bool is_allocated_group(nrf_ppi_channel_group_t group)$/;"	f
is_app_channel	components\drivers_nrf\ppi\nrf_drv_ppi.c	/^__STATIC_INLINE bool is_app_channel(nrf_ppi_channel_t channel)$/;"	f
is_app_group	components\drivers_nrf\ppi\nrf_drv_ppi.c	/^__STATIC_INLINE bool is_app_group(nrf_ppi_channel_group_t group)$/;"	f
is_programmable_app_channel	components\drivers_nrf\ppi\nrf_drv_ppi.c	/^__STATIC_INLINE bool is_programmable_app_channel(nrf_ppi_channel_t channel)$/;"	f
m_channels_allocated	components\drivers_nrf\ppi\nrf_drv_ppi.c	/^static uint32_t            m_channels_allocated;   \/**< Bitmap representing channels availability. 1 when a channel is allocated, 0 otherwise. *\/$/;"	v	file:
m_drv_state	components\drivers_nrf\ppi\nrf_drv_ppi.c	/^static nrf_drv_state_t     m_drv_state;            \/**< Driver state *\/$/;"	v	file:
m_groups_allocated	components\drivers_nrf\ppi\nrf_drv_ppi.c	/^static uint8_t             m_groups_allocated;     \/**< Bitmap representing groups availability. 1 when a group is allocated, 0 otherwise.*\/$/;"	v	file:
nrf_drv_ppi_channel_alloc	components\drivers_nrf\ppi\nrf_drv_ppi.c	/^uint32_t nrf_drv_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)$/;"	f
nrf_drv_ppi_channel_assign	components\drivers_nrf\ppi\nrf_drv_ppi.c	/^uint32_t nrf_drv_ppi_channel_assign(nrf_ppi_channel_t channel, uint32_t eep, uint32_t tep)$/;"	f
nrf_drv_ppi_channel_disable	components\drivers_nrf\ppi\nrf_drv_ppi.c	/^uint32_t nrf_drv_ppi_channel_disable(nrf_ppi_channel_t channel)$/;"	f
nrf_drv_ppi_channel_enable	components\drivers_nrf\ppi\nrf_drv_ppi.c	/^uint32_t nrf_drv_ppi_channel_enable(nrf_ppi_channel_t channel)$/;"	f
nrf_drv_ppi_channel_free	components\drivers_nrf\ppi\nrf_drv_ppi.c	/^uint32_t nrf_drv_ppi_channel_free(nrf_ppi_channel_t channel)$/;"	f
nrf_drv_ppi_channel_include_in_group	components\drivers_nrf\ppi\nrf_drv_ppi.c	/^uint32_t nrf_drv_ppi_channel_include_in_group(nrf_ppi_channel_t       channel,$/;"	f
nrf_drv_ppi_channel_remove_from_group	components\drivers_nrf\ppi\nrf_drv_ppi.c	/^uint32_t nrf_drv_ppi_channel_remove_from_group(nrf_ppi_channel_t       channel,$/;"	f
nrf_drv_ppi_group_alloc	components\drivers_nrf\ppi\nrf_drv_ppi.c	/^uint32_t nrf_drv_ppi_group_alloc(nrf_ppi_channel_group_t * p_group)$/;"	f
nrf_drv_ppi_group_disable	components\drivers_nrf\ppi\nrf_drv_ppi.c	/^uint32_t nrf_drv_ppi_group_disable(nrf_ppi_channel_group_t group)$/;"	f
nrf_drv_ppi_group_enable	components\drivers_nrf\ppi\nrf_drv_ppi.c	/^uint32_t nrf_drv_ppi_group_enable(nrf_ppi_channel_group_t group)$/;"	f
nrf_drv_ppi_group_free	components\drivers_nrf\ppi\nrf_drv_ppi.c	/^uint32_t nrf_drv_ppi_group_free(nrf_ppi_channel_group_t group)$/;"	f
nrf_drv_ppi_init	components\drivers_nrf\ppi\nrf_drv_ppi.c	/^uint32_t nrf_drv_ppi_init(void)$/;"	f
nrf_drv_ppi_task_addr_get	components\drivers_nrf\ppi\nrf_drv_ppi.c	/^uint32_t nrf_drv_ppi_task_addr_get(nrf_ppi_tasks_t task, uint32_t * p_task)$/;"	f
nrf_drv_ppi_uninit	components\drivers_nrf\ppi\nrf_drv_ppi.c	/^uint32_t nrf_drv_ppi_uninit(void)$/;"	f
NRF_DRV_PPI_H	components\drivers_nrf\ppi\nrf_drv_ppi.h	14;"	d
NRF_PPI_ALL_APP_CHANNELS_MASK	components\drivers_nrf\ppi\nrf_drv_ppi.h	45;"	d
NRF_PPI_ALL_APP_GROUPS_MASK	components\drivers_nrf\ppi\nrf_drv_ppi.h	47;"	d
NRF_PPI_PROG_APP_CHANNELS_MASK	components\drivers_nrf\ppi\nrf_drv_ppi.h	46;"	d
NRF_PPI_RESTRICTED	components\drivers_nrf\ppi\nrf_drv_ppi.h	44;"	d
PSTORAGE_CMD_QUEUE_SIZE	components\drivers_nrf\pstorage\config\pstorage_platform.h	52;"	d
PSTORAGE_DATA_END_ADDR	components\drivers_nrf\pstorage\config\pstorage_platform.h	48;"	d
PSTORAGE_DATA_START_ADDR	components\drivers_nrf\pstorage\config\pstorage_platform.h	46;"	d
PSTORAGE_FLASH_EMPTY_MASK	components\drivers_nrf\pstorage\config\pstorage_platform.h	31;"	d
PSTORAGE_FLASH_PAGE_END	components\drivers_nrf\pstorage\config\pstorage_platform.h	41;"	d
PSTORAGE_FLASH_PAGE_SIZE	components\drivers_nrf\pstorage\config\pstorage_platform.h	30;"	d
PSTORAGE_MAX_APPLICATIONS	components\drivers_nrf\pstorage\config\pstorage_platform.h	43;"	d
PSTORAGE_MAX_BLOCK_SIZE	components\drivers_nrf\pstorage\config\pstorage_platform.h	51;"	d
PSTORAGE_MIN_BLOCK_SIZE	components\drivers_nrf\pstorage\config\pstorage_platform.h	44;"	d
PSTORAGE_PL_H__	components\drivers_nrf\pstorage\config\pstorage_platform.h	20;"	d
PSTORAGE_SWAP_ADDR	components\drivers_nrf\pstorage\config\pstorage_platform.h	49;"	d
block_id	components\drivers_nrf\pstorage\config\pstorage_platform.h	/^    pstorage_block_t    block_id;       \/**< Block ID.*\/$/;"	m	struct:__anon304
module_id	components\drivers_nrf\pstorage\config\pstorage_platform.h	/^    uint32_t            module_id;      \/**< Module ID.*\/$/;"	m	struct:__anon304
pstorage_block_t	components\drivers_nrf\pstorage\config\pstorage_platform.h	/^typedef uint32_t pstorage_block_t;$/;"	t
pstorage_flash_page_end	components\drivers_nrf\pstorage\config\pstorage_platform.h	/^static __INLINE uint32_t pstorage_flash_page_end()$/;"	f
pstorage_flash_page_size	components\drivers_nrf\pstorage\config\pstorage_platform.h	/^static __INLINE uint16_t pstorage_flash_page_size()$/;"	f
pstorage_handle_t	components\drivers_nrf\pstorage\config\pstorage_platform.h	/^} pstorage_handle_t;$/;"	t	typeref:struct:__anon304
pstorage_size_t	components\drivers_nrf\pstorage\config\pstorage_platform.h	/^typedef uint16_t pstorage_size_t;      \/** Size of length and offset fields. *\/$/;"	t
BLOCK_COUNT_CHECK	components\drivers_nrf\pstorage\pstorage.c	81;"	d	file:
BLOCK_ID_RANGE_CHECK	components\drivers_nrf\pstorage\pstorage.c	62;"	d	file:
BLOCK_SIZE_CHECK	components\drivers_nrf\pstorage\pstorage.c	72;"	d	file:
INVALID_OPCODE	components\drivers_nrf\pstorage\pstorage.c	24;"	d	file:
MODULE_BLOCK_SIZE	components\drivers_nrf\pstorage\pstorage.c	139;"	d	file:
MODULE_ID_RANGE_CHECK	components\drivers_nrf\pstorage\pstorage.c	51;"	d	file:
MODULE_RAW_ID_RANGE_CHECK	components\drivers_nrf\pstorage\pstorage.c	112;"	d	file:
NULL_PARAM_CHECK	components\drivers_nrf\pstorage\pstorage.c	41;"	d	file:
OFFSET_CHECK	components\drivers_nrf\pstorage\pstorage.c	101;"	d	file:
RAW_MODE_APP_ID	components\drivers_nrf\pstorage\pstorage.c	26;"	d	file:
SD_CMD_MAX_TRIES	components\drivers_nrf\pstorage\pstorage.c	27;"	d	file:
SIZE_CHECK	components\drivers_nrf\pstorage\pstorage.c	92;"	d	file:
SOC_MAX_WRITE_SIZE	components\drivers_nrf\pstorage\pstorage.c	25;"	d	file:
STATE_COMPLETE	components\drivers_nrf\pstorage\pstorage.c	/^    STATE_COMPLETE,            \/**< State for indicating that update\/clear sequence is completed internal in the module when using the update\/clear API. *\/$/;"	e	enum:__anon305	file:
STATE_DATA_ERASE	components\drivers_nrf\pstorage\pstorage.c	/^    STATE_DATA_ERASE,          \/**< State for erasing data page when using update\/clear API. *\/$/;"	e	enum:__anon305	file:
STATE_DATA_TO_SWAP_WRITE	components\drivers_nrf\pstorage\pstorage.c	/^    STATE_DATA_TO_SWAP_WRITE,  \/**< State for doing backup of data page into the swap page when using update\/clear API. *\/$/;"	e	enum:__anon305	file:
STATE_HEAD_RESTORE	components\drivers_nrf\pstorage\pstorage.c	/^    STATE_HEAD_RESTORE,        \/**< State for restoring head (beginning) of backed up data from swap to data page when using update\/clear API. *\/$/;"	e	enum:__anon305	file:
STATE_INIT	components\drivers_nrf\pstorage\pstorage.c	/^    STATE_INIT,                \/**< State for indicating that swap can be used when using update\/clear API. *\/$/;"	e	enum:__anon305	file:
STATE_NEW_BODY_WRITE	components\drivers_nrf\pstorage\pstorage.c	/^    STATE_NEW_BODY_WRITE,      \/**< State for writing body (middle) data to the data page when using update\/clear API. *\/$/;"	e	enum:__anon305	file:
STATE_SWAP_DIRTY	components\drivers_nrf\pstorage\pstorage.c	/^    STATE_SWAP_DIRTY           \/**< State for initializing the swap region on module initialization. *\/$/;"	e	enum:__anon305	file:
STATE_SWAP_ERASE	components\drivers_nrf\pstorage\pstorage.c	/^    STATE_SWAP_ERASE,          \/**< State for erasing the swap page when using the update\/clear API. *\/$/;"	e	enum:__anon305	file:
STATE_TAIL_RESTORE	components\drivers_nrf\pstorage\pstorage.c	/^    STATE_TAIL_RESTORE,        \/**< State for restoring tail (end) of backed up data from swap to data page when using update\/clear API. *\/$/;"	e	enum:__anon305	file:
VERIFY_MODULE_INITIALIZED	components\drivers_nrf\pstorage\pstorage.c	129;"	d	file:
app_notify	components\drivers_nrf\pstorage\pstorage.c	/^static void app_notify(uint32_t result, cmd_queue_element_t * p_elem)$/;"	f	file:
base_id	components\drivers_nrf\pstorage\pstorage.c	/^    pstorage_block_t     base_id;        \/**< Base block id assigned to the module. *\/$/;"	m	struct:__anon306	file:
block_count	components\drivers_nrf\pstorage\pstorage.c	/^    pstorage_size_t      block_count;    \/**< Number of block requested by application. *\/$/;"	m	struct:__anon306	file:
block_size	components\drivers_nrf\pstorage\pstorage.c	/^    pstorage_size_t      block_size;     \/**< Size of block for the module. *\/$/;"	m	struct:__anon306	file:
cb	components\drivers_nrf\pstorage\pstorage.c	/^    pstorage_ntf_cb_t      cb;             \/**< Callback registered with the module to be notified of result of flash access.  *\/$/;"	m	struct:__anon307	file:
cb	components\drivers_nrf\pstorage\pstorage.c	/^    pstorage_ntf_cb_t    cb;             \/**< Callback registered with the module to be notified of result of flash access.  *\/$/;"	m	struct:__anon306	file:
cmd	components\drivers_nrf\pstorage\pstorage.c	/^    cmd_queue_element_t  cmd[PSTORAGE_CMD_QUEUE_SIZE]; \/**< Array to maintain flash access operation details. *\/$/;"	m	struct:__anon309	file:
cmd_process	components\drivers_nrf\pstorage\pstorage.c	/^static uint32_t cmd_process(void)$/;"	f	file:
cmd_queue_dequeue	components\drivers_nrf\pstorage\pstorage.c	/^static uint32_t cmd_queue_dequeue(void)$/;"	f	file:
cmd_queue_element_init	components\drivers_nrf\pstorage\pstorage.c	/^static void cmd_queue_element_init(uint32_t index)$/;"	f	file:
cmd_queue_element_t	components\drivers_nrf\pstorage\pstorage.c	/^} cmd_queue_element_t;$/;"	t	typeref:struct:__anon308	file:
cmd_queue_enqueue	components\drivers_nrf\pstorage\pstorage.c	/^static uint32_t cmd_queue_enqueue(uint8_t             opcode,$/;"	f	file:
cmd_queue_init	components\drivers_nrf\pstorage\pstorage.c	/^static void cmd_queue_init(void)$/;"	f	file:
cmd_queue_t	components\drivers_nrf\pstorage\pstorage.c	/^} cmd_queue_t;$/;"	t	typeref:struct:__anon309	file:
count	components\drivers_nrf\pstorage\pstorage.c	/^    uint8_t              count;                        \/**< Number of elements in the queue.  *\/$/;"	m	struct:__anon309	file:
flash_access	components\drivers_nrf\pstorage\pstorage.c	/^    bool                 flash_access;                 \/**< Flag to ensure an flash event received is for an request issued by the module. *\/$/;"	m	struct:__anon309	file:
m_app_table	components\drivers_nrf\pstorage\pstorage.c	/^static pstorage_module_table_t m_app_table[PSTORAGE_MAX_APPLICATIONS]; \/**< Registered application information table. *\/$/;"	v	file:
m_cmd_queue	components\drivers_nrf\pstorage\pstorage.c	/^static cmd_queue_t         m_cmd_queue;                  \/**< Flash operation request queue. *\/$/;"	v	file:
m_module_initialized	components\drivers_nrf\pstorage\pstorage.c	/^static bool                m_module_initialized = false; \/**< Flag for checking if module has been initialized. *\/$/;"	v	file:
m_next_app_instance	components\drivers_nrf\pstorage\pstorage.c	/^static pstorage_size_t     m_next_app_instance;          \/**< Points to the application module instance that can be allocated next. *\/$/;"	v	file:
m_next_page_addr	components\drivers_nrf\pstorage\pstorage.c	/^static uint32_t            m_next_page_addr;             \/**< Points to the flash address that can be allocated to a module next, this is needed as blocks of a module can span across flash pages. *\/$/;"	v	file:
m_raw_app_table	components\drivers_nrf\pstorage\pstorage.c	/^static pstorage_raw_module_table_t m_raw_app_table;                    \/**< Registered application information table for raw mode. *\/$/;"	v	file:
m_round_val	components\drivers_nrf\pstorage\pstorage.c	/^static pstorage_size_t     m_round_val;                  \/**< Round value for multiple round operations. For erase operations, the round value will contain current round counter which is identical to number of pages erased. For store operations, the round value contains current round of operation * SOC_MAX_WRITE_SIZE to ensure each store to the SoC Flash API is within the SoC limit. *\/$/;"	v	file:
m_swap_state	components\drivers_nrf\pstorage\pstorage.c	/^static swap_backup_state_t m_swap_state;                 \/**< Swap page state. *\/$/;"	v	file:
n_tries	components\drivers_nrf\pstorage\pstorage.c	/^    uint8_t              n_tries;     \/**< Number of times this command has been retried after failing. *\/$/;"	m	struct:__anon308	file:
num_of_pages	components\drivers_nrf\pstorage\pstorage.c	/^    pstorage_size_t      num_of_pages;   \/**< Variable to remember how many pages have been allocated for this module. This information is used for clearing of block, so that application does not need to have knowledge of number of pages its using. *\/$/;"	m	struct:__anon306	file:
num_of_pages	components\drivers_nrf\pstorage\pstorage.c	/^    uint16_t               num_of_pages;   \/**< Variable to remember how many pages have been allocated for this module. This information is used for clearing of block, so that application does not need to have knowledge of number of pages its using. *\/$/;"	m	struct:__anon307	file:
offset	components\drivers_nrf\pstorage\pstorage.c	/^    pstorage_size_t      offset;        \/**< Offset requested by the application for access operation. *\/$/;"	m	struct:__anon308	file:
op_code	components\drivers_nrf\pstorage\pstorage.c	/^    uint8_t              op_code;       \/**< Identifies flash access operation being queued. Element is free if op-code is INVALID_OPCODE. *\/$/;"	m	struct:__anon308	file:
p_data_addr	components\drivers_nrf\pstorage\pstorage.c	/^    uint8_t *            p_data_addr;   \/**< Address\/Identifier for data memory. This is assumed to be resident memory. *\/$/;"	m	struct:__anon308	file:
pstorage_access_status_get	components\drivers_nrf\pstorage\pstorage.c	/^uint32_t pstorage_access_status_get(uint32_t * p_count)$/;"	f
pstorage_block_identifier_get	components\drivers_nrf\pstorage\pstorage.c	/^uint32_t pstorage_block_identifier_get(pstorage_handle_t * p_base_id,$/;"	f
pstorage_clear	components\drivers_nrf\pstorage\pstorage.c	/^uint32_t pstorage_clear(pstorage_handle_t * p_dest, pstorage_size_t size)$/;"	f
pstorage_init	components\drivers_nrf\pstorage\pstorage.c	/^uint32_t pstorage_init(void)$/;"	f
pstorage_load	components\drivers_nrf\pstorage\pstorage.c	/^uint32_t pstorage_load(uint8_t           * p_dest,$/;"	f
pstorage_module_table_t	components\drivers_nrf\pstorage\pstorage.c	/^} pstorage_module_table_t;$/;"	t	typeref:struct:__anon306	file:
pstorage_raw_clear	components\drivers_nrf\pstorage\pstorage.c	/^uint32_t pstorage_raw_clear(pstorage_handle_t * p_dest, pstorage_size_t size)$/;"	f
pstorage_raw_module_table_t	components\drivers_nrf\pstorage\pstorage.c	/^} pstorage_raw_module_table_t;$/;"	t	typeref:struct:__anon307	file:
pstorage_raw_register	components\drivers_nrf\pstorage\pstorage.c	/^uint32_t pstorage_raw_register(pstorage_module_param_t * p_module_param,$/;"	f
pstorage_raw_store	components\drivers_nrf\pstorage\pstorage.c	/^uint32_t pstorage_raw_store(pstorage_handle_t * p_dest,$/;"	f
pstorage_register	components\drivers_nrf\pstorage\pstorage.c	/^uint32_t pstorage_register(pstorage_module_param_t * p_module_param,$/;"	f
pstorage_store	components\drivers_nrf\pstorage\pstorage.c	/^uint32_t pstorage_store(pstorage_handle_t * p_dest,$/;"	f
pstorage_sys_event_handler	components\drivers_nrf\pstorage\pstorage.c	/^void pstorage_sys_event_handler(uint32_t sys_evt)$/;"	f
pstorage_update	components\drivers_nrf\pstorage\pstorage.c	/^uint32_t pstorage_update(pstorage_handle_t * p_dest,$/;"	f
rp	components\drivers_nrf\pstorage\pstorage.c	/^    uint8_t              rp;                           \/**< Read pointer, pointing to flash access that is ongoing or to be requested next. *\/$/;"	m	struct:__anon309	file:
size	components\drivers_nrf\pstorage\pstorage.c	/^    pstorage_size_t      size;          \/**< Identifies size in bytes requested for the operation. *\/$/;"	m	struct:__anon308	file:
storage_addr	components\drivers_nrf\pstorage\pstorage.c	/^    pstorage_handle_t    storage_addr;  \/**< Address\/Identifier for persistent memory. *\/$/;"	m	struct:__anon308	file:
swap_backup_state_t	components\drivers_nrf\pstorage\pstorage.c	/^} swap_backup_state_t;$/;"	t	typeref:enum:__anon305	file:
swap_state_process	components\drivers_nrf\pstorage\pstorage.c	/^static uint32_t swap_state_process(cmd_queue_element_t * p_cmd,$/;"	f	file:
PSTORAGE_CLEAR_OP_CODE	components\drivers_nrf\pstorage\pstorage.h	44;"	d
PSTORAGE_ERROR_OP_CODE	components\drivers_nrf\pstorage\pstorage.h	41;"	d
PSTORAGE_H__	components\drivers_nrf\pstorage\pstorage.h	26;"	d
PSTORAGE_LOAD_OP_CODE	components\drivers_nrf\pstorage\pstorage.h	43;"	d
PSTORAGE_STORE_OP_CODE	components\drivers_nrf\pstorage\pstorage.h	42;"	d
PSTORAGE_UPDATE_OP_CODE	components\drivers_nrf\pstorage\pstorage.h	45;"	d
block_count	components\drivers_nrf\pstorage\pstorage.h	/^    pstorage_size_t   block_count;    \/** Number of blocks requested by the module, minimum values is 1. *\/$/;"	m	struct:__anon310
block_size	components\drivers_nrf\pstorage\pstorage.h	/^    pstorage_size_t   block_size;     \/**< Desired block size for persistent memory storage, for example, if a module has a table with 10 entries, each entry is size 64 bytes,$/;"	m	struct:__anon310
cb	components\drivers_nrf\pstorage\pstorage.h	/^    pstorage_ntf_cb_t cb;             \/**< Callback registered with the module to be notified of any error occurring in persistent memory management *\/$/;"	m	struct:__anon310
pstorage_module_param_t	components\drivers_nrf\pstorage\pstorage.h	/^} pstorage_module_param_t;$/;"	t	typeref:struct:__anon310
pstorage_ntf_cb_t	components\drivers_nrf\pstorage\pstorage.h	/^typedef void (*pstorage_ntf_cb_t)(pstorage_handle_t *  p_handle,$/;"	t
BLOCK_COUNT_CHECK	components\drivers_nrf\pstorage\pstorage_nosd.c	82;"	d	file:
BLOCK_ID_RANGE_CHECK	components\drivers_nrf\pstorage\pstorage_nosd.c	55;"	d	file:
BLOCK_SIZE_CHECK	components\drivers_nrf\pstorage\pstorage_nosd.c	75;"	d	file:
MODULE_BLOCK_SIZE	components\drivers_nrf\pstorage\pstorage_nosd.c	129;"	d	file:
MODULE_ID_RANGE_CHECK	components\drivers_nrf\pstorage\pstorage_nosd.c	45;"	d	file:
MODULE_SIZE_CHECK	components\drivers_nrf\pstorage\pstorage_nosd.c	106;"	d	file:
NULL_PARAM_CHECK	components\drivers_nrf\pstorage\pstorage_nosd.c	36;"	d	file:
OFFSET_CHECK	components\drivers_nrf\pstorage\pstorage_nosd.c	96;"	d	file:
PAGE_BASE_ADDR	components\drivers_nrf\pstorage\pstorage_nosd.c	103;"	d	file:
SIZE_CHECK	components\drivers_nrf\pstorage\pstorage_nosd.c	89;"	d	file:
VERIFY_MODULE_INITIALIZED	components\drivers_nrf\pstorage\pstorage_nosd.c	119;"	d	file:
app_notify	components\drivers_nrf\pstorage\pstorage_nosd.c	/^static __INLINE void app_notify(pstorage_handle_t    * p_handle,$/;"	f	file:
base_id	components\drivers_nrf\pstorage\pstorage_nosd.c	/^    pstorage_block_t       base_id;        \/**< Base block id assigned to the module *\/$/;"	m	struct:ps_module_table	file:
block_count	components\drivers_nrf\pstorage\pstorage_nosd.c	/^    uint16_t               block_count;    \/**< Number of block requested by application *\/$/;"	m	struct:ps_module_table	file:
block_size	components\drivers_nrf\pstorage\pstorage_nosd.c	/^    uint16_t               block_size;     \/**< Size of block for the module *\/$/;"	m	struct:ps_module_table	file:
cb	components\drivers_nrf\pstorage\pstorage_nosd.c	/^    pstorage_ntf_cb_t      cb;             \/**< Callback registered with the module to be notified of any error occurring in persistent memory management *\/$/;"	m	struct:ps_module_table	file:
m_app_table	components\drivers_nrf\pstorage\pstorage_nosd.c	/^static pstorage_module_table_t m_app_table[PSTORAGE_MAX_APPLICATIONS];    \/**< Registered application information table. *\/$/;"	v	file:
m_module_initialized	components\drivers_nrf\pstorage\pstorage_nosd.c	/^static bool     m_module_initialized = false;                             \/**< Flag for checking if module has been initialized. *\/$/;"	v	file:
m_next_app_instance	components\drivers_nrf\pstorage\pstorage_nosd.c	/^static uint32_t m_next_app_instance;                                      \/**< Points to the application module instance that can be allocated next *\/$/;"	v	file:
m_next_page_addr	components\drivers_nrf\pstorage\pstorage_nosd.c	/^static uint32_t m_next_page_addr;                                         \/**< Points to the flash address that can be allocated to a module next, this is needed as blocks of a module can span across flash pages. *\/$/;"	v	file:
no_SUPPORT_MODULES_LARGER_THAN_PAGE	components\drivers_nrf\pstorage\pstorage_nosd.c	23;"	d	file:
no_of_pages	components\drivers_nrf\pstorage\pstorage_nosd.c	/^    uint16_t               no_of_pages;    \/**< Variable to remember how many pages have been allocated for this module. This information is used for clearing of block, so that application does not need to have knowledge of number of pages its using. *\/$/;"	m	struct:ps_module_table	file:
ps_module_table	components\drivers_nrf\pstorage\pstorage_nosd.c	/^typedef struct ps_module_table$/;"	s	file:
pstorage_access_status_get	components\drivers_nrf\pstorage\pstorage_nosd.c	/^uint32_t pstorage_access_status_get(uint32_t * p_count)$/;"	f
pstorage_block_identifier_get	components\drivers_nrf\pstorage\pstorage_nosd.c	/^uint32_t pstorage_block_identifier_get(pstorage_handle_t * p_base_id,$/;"	f
pstorage_clear	components\drivers_nrf\pstorage\pstorage_nosd.c	/^uint32_t pstorage_clear(pstorage_handle_t * p_dest, pstorage_size_t size)$/;"	f
pstorage_init	components\drivers_nrf\pstorage\pstorage_nosd.c	/^uint32_t pstorage_init(void)$/;"	f
pstorage_load	components\drivers_nrf\pstorage\pstorage_nosd.c	/^uint32_t pstorage_load(uint8_t *           p_dest,$/;"	f
pstorage_module_table_t	components\drivers_nrf\pstorage\pstorage_nosd.c	/^} pstorage_module_table_t;$/;"	t	typeref:struct:ps_module_table	file:
pstorage_register	components\drivers_nrf\pstorage\pstorage_nosd.c	/^uint32_t pstorage_register(pstorage_module_param_t * p_module_param,$/;"	f
pstorage_store	components\drivers_nrf\pstorage\pstorage_nosd.c	/^uint32_t pstorage_store(pstorage_handle_t * p_dest,$/;"	f
pstorage_sys_event_handler	components\drivers_nrf\pstorage\pstorage_nosd.c	/^void pstorage_sys_event_handler(uint32_t sys_evt)$/;"	f
pstorage_update	components\drivers_nrf\pstorage\pstorage_nosd.c	/^uint32_t pstorage_update(pstorage_handle_t * p_dest,$/;"	f
QDEC_IRQHandler	components\drivers_nrf\qdec\nrf_drv_qdec.c	/^void QDEC_IRQHandler(void)$/;"	f
m_default_config	components\drivers_nrf\qdec\nrf_drv_qdec.c	/^static const nrf_drv_qdec_config_t m_default_config = NRF_DRV_QDEC_DEFAULT_CONFIG;$/;"	v	file:
m_qdec_event_handler	components\drivers_nrf\qdec\nrf_drv_qdec.c	/^static qdec_event_handler_t m_qdec_event_handler = NULL;$/;"	v	file:
m_state	components\drivers_nrf\qdec\nrf_drv_qdec.c	/^static nrf_drv_state_t m_state = NRF_DRV_STATE_UNINITIALIZED;$/;"	v	file:
nrf_drv_qdec_accumulators_read	components\drivers_nrf\qdec\nrf_drv_qdec.c	/^void nrf_drv_qdec_accumulators_read(int16_t * p_acc, int16_t * p_accdbl)$/;"	f
nrf_drv_qdec_disable	components\drivers_nrf\qdec\nrf_drv_qdec.c	/^void nrf_drv_qdec_disable(void)$/;"	f
nrf_drv_qdec_enable	components\drivers_nrf\qdec\nrf_drv_qdec.c	/^void nrf_drv_qdec_enable(void)$/;"	f
nrf_drv_qdec_event_address_get	components\drivers_nrf\qdec\nrf_drv_qdec.c	/^void nrf_drv_qdec_event_address_get(nrf_qdec_events_t event, uint32_t * p_event)$/;"	f
nrf_drv_qdec_init	components\drivers_nrf\qdec\nrf_drv_qdec.c	/^ret_code_t nrf_drv_qdec_init(const nrf_drv_qdec_config_t * p_config,$/;"	f
nrf_drv_qdec_task_address_get	components\drivers_nrf\qdec\nrf_drv_qdec.c	/^void nrf_drv_qdec_task_address_get(nrf_qdec_tasks_t task, uint32_t * p_task)$/;"	f
nrf_drv_qdec_uninit	components\drivers_nrf\qdec\nrf_drv_qdec.c	/^void nrf_drv_qdec_uninit(void)$/;"	f
NRF_DRV_QDEC_DEFAULT_CONFIG	components\drivers_nrf\qdec\nrf_drv_qdec.h	51;"	d
NRF_DRV_QDEC_H__	components\drivers_nrf\qdec\nrf_drv_qdec.h	14;"	d
acc	components\drivers_nrf\qdec\nrf_drv_qdec.h	/^    int16_t acc;     \/**< Accumulated transitions. *\/$/;"	m	struct:__anon313
accdbl	components\drivers_nrf\qdec\nrf_drv_qdec.h	/^    uint16_t accdbl;  \/**< Accumulated double transitions. *\/$/;"	m	struct:__anon313
data	components\drivers_nrf\qdec\nrf_drv_qdec.h	/^    } data;$/;"	m	struct:__anon314	typeref:union:__anon314::__anon315
dbfen	components\drivers_nrf\qdec\nrf_drv_qdec.h	/^    bool                   dbfen;              \/**< State of debouncing filter. *\/$/;"	m	struct:__anon311
interrupt_priority	components\drivers_nrf\qdec\nrf_drv_qdec.h	/^    uint8_t                interrupt_priority; \/**< QDEC interrupt priority. *\/$/;"	m	struct:__anon311
ledpol	components\drivers_nrf\qdec\nrf_drv_qdec.h	/^    nrf_qdec_ledpol_t      ledpol;             \/**< Active LED polarity. *\/$/;"	m	struct:__anon311
ledpre	components\drivers_nrf\qdec\nrf_drv_qdec.h	/^    uint32_t               ledpre;             \/**< Time (in microseconds) how long LED is switched on before sampling. *\/$/;"	m	struct:__anon311
nrf_drv_qdec_config_t	components\drivers_nrf\qdec\nrf_drv_qdec.h	/^} nrf_drv_qdec_config_t;$/;"	t	typeref:struct:__anon311
nrf_drv_qdec_event_t	components\drivers_nrf\qdec\nrf_drv_qdec.h	/^} nrf_drv_qdec_event_t;$/;"	t	typeref:struct:__anon314
nrf_drv_qdec_report_data_evt_t	components\drivers_nrf\qdec\nrf_drv_qdec.h	/^} nrf_drv_qdec_report_data_evt_t;$/;"	t	typeref:struct:__anon313
nrf_drv_qdec_sample_data_evt_t	components\drivers_nrf\qdec\nrf_drv_qdec.h	/^} nrf_drv_qdec_sample_data_evt_t;$/;"	t	typeref:struct:__anon312
psela	components\drivers_nrf\qdec\nrf_drv_qdec.h	/^    uint32_t               psela;              \/**< Pin number for A input. *\/$/;"	m	struct:__anon311
pselb	components\drivers_nrf\qdec\nrf_drv_qdec.h	/^    uint32_t               pselb;              \/**< Pin number for B input. *\/$/;"	m	struct:__anon311
pselled	components\drivers_nrf\qdec\nrf_drv_qdec.h	/^    uint32_t               pselled;            \/**< Pin number for LED output. *\/$/;"	m	struct:__anon311
qdec_event_handler_t	components\drivers_nrf\qdec\nrf_drv_qdec.h	/^typedef void (*qdec_event_handler_t)(nrf_drv_qdec_event_t event);$/;"	t
report	components\drivers_nrf\qdec\nrf_drv_qdec.h	/^        nrf_drv_qdec_report_data_evt_t report; \/**< Report event data. *\/$/;"	m	union:__anon314::__anon315
reportper	components\drivers_nrf\qdec\nrf_drv_qdec.h	/^    nrf_qdec_reportper_t   reportper;          \/**< Report period in samples. *\/$/;"	m	struct:__anon311
sample	components\drivers_nrf\qdec\nrf_drv_qdec.h	/^        nrf_drv_qdec_sample_data_evt_t sample; \/**< Sample event data. *\/$/;"	m	union:__anon314::__anon315
sample_inten	components\drivers_nrf\qdec\nrf_drv_qdec.h	/^    bool                   sample_inten;       \/**< Enabling sample ready interrupt. *\/$/;"	m	struct:__anon311
sampleper	components\drivers_nrf\qdec\nrf_drv_qdec.h	/^    nrf_qdec_sampleper_t   sampleper;          \/**< Sampling period in microseconds. *\/$/;"	m	struct:__anon311
type	components\drivers_nrf\qdec\nrf_drv_qdec.h	/^    nrf_qdec_events_t  type;$/;"	m	struct:__anon314
value	components\drivers_nrf\qdec\nrf_drv_qdec.h	/^    int8_t value; \/**< Sample value. *\/$/;"	m	struct:__anon312
PACKET_LENGTH_FIELD_SIZE	components\drivers_nrf\radio_config\radio_config.c	23;"	d	file:
PACKET_S0_FIELD_SIZE	components\drivers_nrf\radio_config\radio_config.c	22;"	d	file:
PACKET_S1_FIELD_SIZE	components\drivers_nrf\radio_config\radio_config.c	21;"	d	file:
bytewise_bitswap	components\drivers_nrf\radio_config\radio_config.c	/^static uint32_t bytewise_bitswap(uint32_t inp)$/;"	f	file:
radio_configure	components\drivers_nrf\radio_config\radio_config.c	/^void radio_configure()$/;"	f
swap_bits	components\drivers_nrf\radio_config\radio_config.c	/^static uint32_t swap_bits(uint32_t inp)$/;"	f	file:
PACKET_BASE_ADDRESS_LENGTH	components\drivers_nrf\radio_config\radio_config.h	15;"	d
PACKET_PAYLOAD_MAXSIZE	components\drivers_nrf\radio_config\radio_config.h	17;"	d
PACKET_STATIC_LENGTH	components\drivers_nrf\radio_config\radio_config.h	16;"	d
RADIO_CONFIG_H	components\drivers_nrf\radio_config\radio_config.h	13;"	d
FIFO_LENGTH	components\drivers_nrf\rng\nrf_drv_rng.c	32;"	d	file:
RNG_IRQHandler	components\drivers_nrf\rng\nrf_drv_rng.c	/^void RNG_IRQHandler(void)$/;"	f
buffer	components\drivers_nrf\rng\nrf_drv_rng.c	/^    uint8_t    buffer[RNG_CONFIG_POOL_SIZE];$/;"	m	struct:__anon316	file:
fifo_length	components\drivers_nrf\rng\nrf_drv_rng.c	/^static __INLINE uint32_t fifo_length(app_fifo_t * p_fifo)$/;"	f	file:
m_default_config	components\drivers_nrf\rng\nrf_drv_rng.c	/^static const nrf_drv_rng_config_t m_default_config = NRF_DRV_RNG_DEFAULT_CONFIG;$/;"	v	file:
m_rng_cb	components\drivers_nrf\rng\nrf_drv_rng.c	/^static nrf_drv_rng_cb_t m_rng_cb;$/;"	v	file:
nrf_drv_rng_bytes_available	components\drivers_nrf\rng\nrf_drv_rng.c	/^ret_code_t nrf_drv_rng_bytes_available(uint8_t * p_bytes_available)$/;"	f
nrf_drv_rng_cb_t	components\drivers_nrf\rng\nrf_drv_rng.c	/^} nrf_drv_rng_cb_t;$/;"	t	typeref:struct:__anon316	file:
nrf_drv_rng_init	components\drivers_nrf\rng\nrf_drv_rng.c	/^ret_code_t nrf_drv_rng_init(nrf_drv_rng_config_t const * p_config)$/;"	f
nrf_drv_rng_pool_capacity	components\drivers_nrf\rng\nrf_drv_rng.c	/^ret_code_t nrf_drv_rng_pool_capacity(uint8_t * p_pool_capacity)$/;"	f
nrf_drv_rng_rand	components\drivers_nrf\rng\nrf_drv_rng.c	/^ret_code_t nrf_drv_rng_rand(uint8_t * p_buff, uint8_t length)$/;"	f
nrf_drv_rng_uninit	components\drivers_nrf\rng\nrf_drv_rng.c	/^void nrf_drv_rng_uninit(void)$/;"	f
rand_pool	components\drivers_nrf\rng\nrf_drv_rng.c	/^    app_fifo_t rand_pool;$/;"	m	struct:__anon316	file:
rng_start	components\drivers_nrf\rng\nrf_drv_rng.c	/^static void rng_start(void)$/;"	f	file:
rng_stop	components\drivers_nrf\rng\nrf_drv_rng.c	/^static void rng_stop(void)$/;"	f	file:
state	components\drivers_nrf\rng\nrf_drv_rng.c	/^    nrf_drv_state_t state;$/;"	m	struct:__anon316	file:
NRF_DRV_RNG_DEFAULT_CONFIG	components\drivers_nrf\rng\nrf_drv_rng.h	44;"	d
NRF_DRV_RNG_H__	components\drivers_nrf\rng\nrf_drv_rng.h	14;"	d
error_correction	components\drivers_nrf\rng\nrf_drv_rng.h	/^    bool     error_correction;      \/**< Error correction flag. *\/$/;"	m	struct:__anon317
interrupt_priority	components\drivers_nrf\rng\nrf_drv_rng.h	/^    uint8_t  interrupt_priority;    \/**< interrupt priority *\/$/;"	m	struct:__anon317
nrf_drv_rng_config_t	components\drivers_nrf\rng\nrf_drv_rng.h	/^} nrf_drv_rng_config_t;$/;"	t	typeref:struct:__anon317
RTC0_IRQHandler	components\drivers_nrf\rtc\nrf_drv_rtc.c	/^void RTC0_IRQHandler(void)$/;"	f
RTC1_IRQHandler	components\drivers_nrf\rtc\nrf_drv_rtc.c	/^void RTC1_IRQHandler(void)$/;"	f
m_cb	components\drivers_nrf\rtc\nrf_drv_rtc.c	/^static nrf_drv_rtc_cb_t      m_cb[RTC_COUNT];$/;"	v	file:
m_default_config	components\drivers_nrf\rtc\nrf_drv_rtc.c	/^static const nrf_drv_rtc_config_t m_default_config[] = {$/;"	v	file:
m_handlers	components\drivers_nrf\rtc\nrf_drv_rtc.c	/^static nrf_drv_rtc_handler_t m_handlers[RTC_COUNT];$/;"	v	file:
nrf_drv_rtc_cb_t	components\drivers_nrf\rtc\nrf_drv_rtc.c	/^} nrf_drv_rtc_cb_t;$/;"	t	typeref:struct:__anon318	file:
nrf_drv_rtc_cc_disable	components\drivers_nrf\rtc\nrf_drv_rtc.c	/^ret_code_t nrf_drv_rtc_cc_disable(nrf_drv_rtc_t const * const p_instance, uint32_t channel)$/;"	f
nrf_drv_rtc_cc_set	components\drivers_nrf\rtc\nrf_drv_rtc.c	/^ret_code_t nrf_drv_rtc_cc_set(nrf_drv_rtc_t const * const p_instance,$/;"	f
nrf_drv_rtc_disable	components\drivers_nrf\rtc\nrf_drv_rtc.c	/^void nrf_drv_rtc_disable(nrf_drv_rtc_t const * const p_instance)$/;"	f
nrf_drv_rtc_enable	components\drivers_nrf\rtc\nrf_drv_rtc.c	/^void nrf_drv_rtc_enable(nrf_drv_rtc_t const * const p_instance)$/;"	f
nrf_drv_rtc_init	components\drivers_nrf\rtc\nrf_drv_rtc.c	/^ret_code_t nrf_drv_rtc_init(nrf_drv_rtc_t const * const p_instance,$/;"	f
nrf_drv_rtc_int_handler	components\drivers_nrf\rtc\nrf_drv_rtc.c	/^__STATIC_INLINE void nrf_drv_rtc_int_handler(NRF_RTC_Type * p_reg, uint32_t instance_id)$/;"	f
nrf_drv_rtc_max_ticks_get	components\drivers_nrf\rtc\nrf_drv_rtc.c	/^uint32_t nrf_drv_rtc_max_ticks_get(nrf_drv_rtc_t const * const p_instance)$/;"	f
nrf_drv_rtc_overflow_disable	components\drivers_nrf\rtc\nrf_drv_rtc.c	/^void nrf_drv_rtc_overflow_disable(nrf_drv_rtc_t const * const p_instance)$/;"	f
nrf_drv_rtc_overflow_enable	components\drivers_nrf\rtc\nrf_drv_rtc.c	/^void nrf_drv_rtc_overflow_enable(nrf_drv_rtc_t const * const p_instance, bool enable_irq)$/;"	f
nrf_drv_rtc_tick_disable	components\drivers_nrf\rtc\nrf_drv_rtc.c	/^void nrf_drv_rtc_tick_disable(nrf_drv_rtc_t const * const p_instance)$/;"	f
nrf_drv_rtc_tick_enable	components\drivers_nrf\rtc\nrf_drv_rtc.c	/^void nrf_drv_rtc_tick_enable(nrf_drv_rtc_t const * const p_instance, bool enable_irq)$/;"	f
nrf_drv_rtc_uninit	components\drivers_nrf\rtc\nrf_drv_rtc.c	/^void nrf_drv_rtc_uninit(nrf_drv_rtc_t const * const p_instance)$/;"	f
reliable	components\drivers_nrf\rtc\nrf_drv_rtc.c	/^    bool            reliable;     \/**< Reliable mode flag. *\/$/;"	m	struct:__anon318	file:
state	components\drivers_nrf\rtc\nrf_drv_rtc.c	/^    nrf_drv_state_t state;        \/**< Instance state. *\/$/;"	m	struct:__anon318	file:
tick_latency	components\drivers_nrf\rtc\nrf_drv_rtc.c	/^    uint8_t         tick_latency; \/**< Maximum length of interrupt handler in ticks (max 7.7 ms). *\/$/;"	m	struct:__anon318	file:
NRF_DRV_RTC_DEFAULT_CONFIG	components\drivers_nrf\rtc\nrf_drv_rtc.h	81;"	d
NRF_DRV_RTC_H	components\drivers_nrf\rtc\nrf_drv_rtc.h	14;"	d
NRF_DRV_RTC_INSTANCE	components\drivers_nrf\rtc\nrf_drv_rtc.h	64;"	d
NRF_DRV_RTC_INT_COMPARE0	components\drivers_nrf\rtc\nrf_drv_rtc.h	/^    NRF_DRV_RTC_INT_COMPARE0 = 0, \/**< Interrupt from COMPARE0 event. *\/$/;"	e	enum:__anon319
NRF_DRV_RTC_INT_COMPARE1	components\drivers_nrf\rtc\nrf_drv_rtc.h	/^    NRF_DRV_RTC_INT_COMPARE1 = 1, \/**< Interrupt from COMPARE1 event. *\/$/;"	e	enum:__anon319
NRF_DRV_RTC_INT_COMPARE2	components\drivers_nrf\rtc\nrf_drv_rtc.h	/^    NRF_DRV_RTC_INT_COMPARE2 = 2, \/**< Interrupt from COMPARE2 event. *\/$/;"	e	enum:__anon319
NRF_DRV_RTC_INT_COMPARE3	components\drivers_nrf\rtc\nrf_drv_rtc.h	/^    NRF_DRV_RTC_INT_COMPARE3 = 3, \/**< Interrupt from COMPARE3 event. *\/$/;"	e	enum:__anon319
NRF_DRV_RTC_INT_OVERFLOW	components\drivers_nrf\rtc\nrf_drv_rtc.h	/^    NRF_DRV_RTC_INT_OVERFLOW = 5  \/**< Interrupt from OVERFLOW event. *\/$/;"	e	enum:__anon319
NRF_DRV_RTC_INT_TICK	components\drivers_nrf\rtc\nrf_drv_rtc.h	/^    NRF_DRV_RTC_INT_TICK     = 4, \/**< Interrupt from TICK event. *\/$/;"	e	enum:__anon319
RTC_US_TO_TICKS	components\drivers_nrf\rtc\nrf_drv_rtc.h	39;"	d
instance_id	components\drivers_nrf\rtc\nrf_drv_rtc.h	/^    uint8_t         instance_id; \/**< Instance index. *\/$/;"	m	struct:__anon320
interrupt_priority	components\drivers_nrf\rtc\nrf_drv_rtc.h	/^    uint8_t  interrupt_priority; \/**< Interrupt priority. *\/$/;"	m	struct:__anon321
irq	components\drivers_nrf\rtc\nrf_drv_rtc.h	/^    IRQn_Type       irq;         \/**< Instance IRQ ID. *\/$/;"	m	struct:__anon320
nrf_drv_rtc_config_t	components\drivers_nrf\rtc\nrf_drv_rtc.h	/^} nrf_drv_rtc_config_t;$/;"	t	typeref:struct:__anon321
nrf_drv_rtc_counter_clear	components\drivers_nrf\rtc\nrf_drv_rtc.h	/^__STATIC_INLINE void nrf_drv_rtc_counter_clear(nrf_drv_rtc_t const * const p_instance)$/;"	f
nrf_drv_rtc_counter_get	components\drivers_nrf\rtc\nrf_drv_rtc.h	/^__STATIC_INLINE uint32_t nrf_drv_rtc_counter_get(nrf_drv_rtc_t const * const p_instance)$/;"	f
nrf_drv_rtc_event_address_get	components\drivers_nrf\rtc\nrf_drv_rtc.h	/^__STATIC_INLINE uint32_t nrf_drv_rtc_event_address_get(nrf_drv_rtc_t const * const p_instance,$/;"	f
nrf_drv_rtc_handler_t	components\drivers_nrf\rtc\nrf_drv_rtc.h	/^typedef void (*nrf_drv_rtc_handler_t)(nrf_drv_rtc_int_type_t int_type);$/;"	t
nrf_drv_rtc_int_disable	components\drivers_nrf\rtc\nrf_drv_rtc.h	/^__STATIC_INLINE void nrf_drv_rtc_int_disable(nrf_drv_rtc_t const * const p_instance,$/;"	f
nrf_drv_rtc_int_enable	components\drivers_nrf\rtc\nrf_drv_rtc.h	/^__STATIC_INLINE void nrf_drv_rtc_int_enable(nrf_drv_rtc_t const * const p_instance, uint32_t mask)$/;"	f
nrf_drv_rtc_int_type_t	components\drivers_nrf\rtc\nrf_drv_rtc.h	/^} nrf_drv_rtc_int_type_t;$/;"	t	typeref:enum:__anon319
nrf_drv_rtc_t	components\drivers_nrf\rtc\nrf_drv_rtc.h	/^} nrf_drv_rtc_t;$/;"	t	typeref:struct:__anon320
nrf_drv_rtc_task_address_get	components\drivers_nrf\rtc\nrf_drv_rtc.h	/^__STATIC_INLINE uint32_t nrf_drv_rtc_task_address_get(nrf_drv_rtc_t const * const p_instance,$/;"	f
p_reg	components\drivers_nrf\rtc\nrf_drv_rtc.h	/^    NRF_RTC_Type  * p_reg;       \/**< Pointer to instance register set. *\/$/;"	m	struct:__anon320
prescaler	components\drivers_nrf\rtc\nrf_drv_rtc.h	/^    uint16_t prescaler;          \/**< Prescaler. *\/$/;"	m	struct:__anon321
reliable	components\drivers_nrf\rtc\nrf_drv_rtc.h	/^    bool     reliable;           \/**< Reliable mode flag. *\/$/;"	m	struct:__anon321
tick_latency	components\drivers_nrf\rtc\nrf_drv_rtc.h	/^    uint8_t  tick_latency;       \/**< Maximum length of interrupt handler in ticks (max 7.7 ms). *\/$/;"	m	struct:__anon321
SDIO_CONFIG_CLOCK_PIN_NUMBER	components\drivers_nrf\sdio\config\sdio_config.h	15;"	d
SDIO_CONFIG_DATA_PIN_NUMBER	components\drivers_nrf\sdio\config\sdio_config.h	16;"	d
SDIO_CONFIG_H	components\drivers_nrf\sdio\config\sdio_config.h	13;"	d
SDIO_CLOCK_HIGH	components\drivers_nrf\sdio\sdio.c	25;"	d	file:
SDIO_CLOCK_LOW	components\drivers_nrf\sdio\sdio.c	26;"	d	file:
SDIO_CLOCK_OUTPUT	components\drivers_nrf\sdio\sdio.c	30;"	d	file:
SDIO_CLOCK_READ	components\drivers_nrf\sdio\sdio.c	40;"	d	file:
SDIO_DATA_HIGH	components\drivers_nrf\sdio\sdio.c	27;"	d	file:
SDIO_DATA_INPUT	components\drivers_nrf\sdio\sdio.c	35;"	d	file:
SDIO_DATA_LOW	components\drivers_nrf\sdio\sdio.c	28;"	d	file:
SDIO_DATA_OUTPUT	components\drivers_nrf\sdio\sdio.c	29;"	d	file:
SDIO_DATA_READ	components\drivers_nrf\sdio\sdio.c	39;"	d	file:
SDIO_DELAY	components\drivers_nrf\sdio\sdio.c	41;"	d	file:
sdio_init	components\drivers_nrf\sdio\sdio.c	/^void sdio_init(void)$/;"	f
sdio_read_burst	components\drivers_nrf\sdio\sdio.c	/^void sdio_read_burst(uint8_t * target_buffer, uint8_t target_buffer_size)$/;"	f
sdio_read_byte	components\drivers_nrf\sdio\sdio.c	/^uint8_t sdio_read_byte(uint8_t address)$/;"	f
sdio_write_byte	components\drivers_nrf\sdio\sdio.c	/^void sdio_write_byte(uint8_t address, uint8_t data_byte)$/;"	f
SDIO_H	components\drivers_nrf\sdio\sdio.h	14;"	d
DOUBLE_BUFFERED	components\drivers_nrf\spi_master\spi_5W_master.c	33;"	d	file:
HOOK_STATE_ABORTED	components\drivers_nrf\spi_master\spi_5W_master.c	/^    HOOK_STATE_ABORTED,$/;"	e	enum:__anon323	file:
HOOK_STATE_DISABLED	components\drivers_nrf\spi_master\spi_5W_master.c	/^    HOOK_STATE_DISABLED,$/;"	e	enum:__anon323	file:
HOOK_STATE_GUARDED	components\drivers_nrf\spi_master\spi_5W_master.c	/^    HOOK_STATE_GUARDED,$/;"	e	enum:__anon323	file:
HOOK_STATE_IDLE	components\drivers_nrf\spi_master\spi_5W_master.c	/^    HOOK_STATE_IDLE,$/;"	e	enum:__anon323	file:
HOOK_STATE_PASSING	components\drivers_nrf\spi_master\spi_5W_master.c	/^    HOOK_STATE_PASSING$/;"	e	enum:__anon323	file:
HOOK_STATE_RESTARTED	components\drivers_nrf\spi_master\spi_5W_master.c	/^    HOOK_STATE_RESTARTED,$/;"	e	enum:__anon323	file:
SPI0_TWI0_IRQHandler	components\drivers_nrf\spi_master\spi_5W_master.c	/^void SPI0_TWI0_IRQHandler(void)$/;"	f
SPI1_TWI1_IRQHandler	components\drivers_nrf\spi_master\spi_5W_master.c	/^void SPI1_TWI1_IRQHandler(void)$/;"	f
SPI_DEFAULT_TX_BYTE	components\drivers_nrf\spi_master\spi_5W_master.c	36;"	d	file:
SPI_PIN_DISCONNECTED	components\drivers_nrf\spi_master\spi_5W_master.c	35;"	d	file:
_static	components\drivers_nrf\spi_master\spi_5W_master.c	31;"	d	file:
abort_flag	components\drivers_nrf\spi_master\spi_5W_master.c	/^    bool                       abort_flag;$/;"	m	struct:__anon322	file:
bytes_count	components\drivers_nrf\spi_master\spi_5W_master.c	/^    uint16_t bytes_count;$/;"	m	struct:__anon322	file:
callback_event_handler	components\drivers_nrf\spi_master\spi_5W_master.c	/^    spi_master_event_handler_t callback_event_handler; \/**< A handler for event callback function. *\/$/;"	m	struct:__anon322	file:
irq_type	components\drivers_nrf\spi_master\spi_5W_master.c	/^    IRQn_Type      irq_type;  \/**< A type of NVIC IRQn *\/$/;"	m	struct:__anon322	file:
m_debug_callback	components\drivers_nrf\spi_master\spi_5W_master.c	/^_static spi_master_raw_callback_t m_debug_callback;$/;"	v
m_hook_state	components\drivers_nrf\spi_master\spi_5W_master.c	/^_static spi_hook_state_t           m_hook_state = HOOK_STATE_DISABLED;$/;"	v
m_ser_phy_event_handler	components\drivers_nrf\spi_master\spi_5W_master.c	/^_static spi_master_event_handler_t m_ser_phy_event_handler;$/;"	v
m_spi_master_hw_instance	components\drivers_nrf\spi_master\spi_5W_master.c	/^_static spi_master_hw_instance_t   m_spi_master_hw_instance;$/;"	v
m_spi_master_instances	components\drivers_nrf\spi_master\spi_5W_master.c	/^_static spi_master_instance_t m_spi_master_instances[SPI_MASTER_HW_ENABLED_COUNT];$/;"	v
max_length	components\drivers_nrf\spi_master\spi_5W_master.c	/^    uint16_t max_length; \/**< Max length (Max of the TX and RX length). *\/$/;"	m	struct:__anon322	file:
p_nrf_spi	components\drivers_nrf\spi_master\spi_5W_master.c	/^    NRF_SPI_Type * p_nrf_spi; \/**< A pointer to the NRF SPI master *\/$/;"	m	struct:__anon322	file:
p_rx_buffer	components\drivers_nrf\spi_master\spi_5W_master.c	/^    uint8_t * p_rx_buffer; \/**< A pointer to RX buffer. *\/$/;"	m	struct:__anon322	file:
p_tx_buffer	components\drivers_nrf\spi_master\spi_5W_master.c	/^    uint8_t * p_tx_buffer; \/**< A pointer to TX buffer. *\/$/;"	m	struct:__anon322	file:
pin_slave_select	components\drivers_nrf\spi_master\spi_5W_master.c	/^    uint8_t  pin_slave_select; \/**< A pin for Slave Select. *\/$/;"	m	struct:__anon322	file:
rx_index	components\drivers_nrf\spi_master\spi_5W_master.c	/^    uint16_t  rx_index;    \/**< A index of the current element in the RX buffer. *\/$/;"	m	struct:__anon322	file:
rx_length	components\drivers_nrf\spi_master\spi_5W_master.c	/^    uint16_t  rx_length;   \/**< A length RX buffer. *\/$/;"	m	struct:__anon322	file:
spi_5W_master_event_handler	components\drivers_nrf\spi_master\spi_5W_master.c	/^static void spi_5W_master_event_handler(spi_master_evt_t evt)$/;"	f	file:
spi_5W_master_evt_handler_reg	components\drivers_nrf\spi_master\spi_5W_master.c	/^void spi_5W_master_evt_handler_reg(const spi_master_hw_instance_t spi_master_hw_instance,$/;"	f
spi_hook_state_t	components\drivers_nrf\spi_master\spi_5W_master.c	/^} spi_hook_state_t;$/;"	t	typeref:enum:__anon323	file:
spi_master_abort	components\drivers_nrf\spi_master\spi_5W_master.c	/^uint32_t spi_master_abort(const spi_master_hw_instance_t spi_master_hw_instance)$/;"	f
spi_master_buffer_init	components\drivers_nrf\spi_master\spi_5W_master.c	/^static __INLINE void spi_master_buffer_init(uint8_t * const  p_buf,$/;"	f	file:
spi_master_buffer_release	components\drivers_nrf\spi_master\spi_5W_master.c	/^static __INLINE void spi_master_buffer_release(uint8_t * * const pp_buf, uint16_t * const p_buf_len)$/;"	f	file:
spi_master_close	components\drivers_nrf\spi_master\spi_5W_master.c	/^void spi_master_close(const spi_master_hw_instance_t spi_master_hw_instance)$/;"	f
spi_master_evt_handler_reg	components\drivers_nrf\spi_master\spi_5W_master.c	/^__INLINE void spi_master_evt_handler_reg(const spi_master_hw_instance_t spi_master_hw_instance,$/;"	f
spi_master_get_instance	components\drivers_nrf\spi_master\spi_5W_master.c	/^static __INLINE spi_master_instance_t * spi_master_get_instance($/;"	f	file:
spi_master_get_state	components\drivers_nrf\spi_master\spi_5W_master.c	/^__INLINE spi_master_state_t spi_master_get_state($/;"	f
spi_master_init_hw_instance	components\drivers_nrf\spi_master\spi_5W_master.c	/^static __INLINE void spi_master_init_hw_instance(NRF_SPI_Type *          p_nrf_spi,$/;"	f	file:
spi_master_instance_t	components\drivers_nrf\spi_master\spi_5W_master.c	/^} spi_master_instance_t;$/;"	t	typeref:struct:__anon322	file:
spi_master_open	components\drivers_nrf\spi_master\spi_5W_master.c	/^uint32_t spi_master_open(const spi_master_hw_instance_t    spi_master_hw_instance,$/;"	f
spi_master_restart	components\drivers_nrf\spi_master\spi_5W_master.c	/^uint32_t spi_master_restart(const spi_master_hw_instance_t spi_master_hw_instance)$/;"	f
spi_master_send_initial_bytes	components\drivers_nrf\spi_master\spi_5W_master.c	/^static __INLINE void spi_master_send_initial_bytes(spi_master_instance_t * const p_spi_instance)$/;"	f	file:
spi_master_send_recv	components\drivers_nrf\spi_master\spi_5W_master.c	/^uint32_t spi_master_send_recv(const spi_master_hw_instance_t spi_master_hw_instance,$/;"	f
spi_master_send_recv_irq	components\drivers_nrf\spi_master\spi_5W_master.c	/^static __INLINE void spi_master_send_recv_irq(spi_master_instance_t * const p_spi_instance)$/;"	f	file:
spi_master_signal_evt	components\drivers_nrf\spi_master\spi_5W_master.c	/^static __INLINE void spi_master_signal_evt(spi_master_instance_t * const p_spi_instance,$/;"	f	file:
start_flag	components\drivers_nrf\spi_master\spi_5W_master.c	/^    bool                       start_flag;$/;"	m	struct:__anon322	file:
state	components\drivers_nrf\spi_master\spi_5W_master.c	/^    spi_master_state_t         state;                  \/**< A state of an instance of SPI master. *\/$/;"	m	struct:__anon322	file:
tx_index	components\drivers_nrf\spi_master\spi_5W_master.c	/^    uint16_t  tx_index;    \/**< A index of the current element in the TX buffer. *\/$/;"	m	struct:__anon322	file:
tx_length	components\drivers_nrf\spi_master\spi_5W_master.c	/^    uint16_t  tx_length;   \/**< A length of TX buffer. *\/$/;"	m	struct:__anon322	file:
APP_SPI_MASTER_H	components\drivers_nrf\spi_master\spi_5W_master.h	14;"	d
SPI_CPHA	components\drivers_nrf\spi_master\spi_5W_master.h	/^    uint8_t SPI_CPHA;       \/**< Serial clock phase LEADING or TRAILING. *\/$/;"	m	struct:__anon324
SPI_CPOL	components\drivers_nrf\spi_master\spi_5W_master.h	/^    uint8_t SPI_CPOL;       \/**< Serial clock polarity ACTIVEHIGH or ACTIVELOW. *\/$/;"	m	struct:__anon324
SPI_Freq	components\drivers_nrf\spi_master\spi_5W_master.h	/^    uint32_t SPI_Freq;      \/**< SPI frequency. *\/$/;"	m	struct:__anon324
SPI_MASTER_0	components\drivers_nrf\spi_master\spi_5W_master.h	/^        SPI_MASTER_0,   \/**< A instance of SPI master 0. *\/$/;"	e	enum:__anon328
SPI_MASTER_1	components\drivers_nrf\spi_master\spi_5W_master.h	/^        SPI_MASTER_1,   \/**< A instance of SPI master 1. *\/$/;"	e	enum:__anon328
SPI_MASTER_EVT_FIRST_BYTE_RECEIVED	components\drivers_nrf\spi_master\spi_5W_master.h	/^    SPI_MASTER_EVT_FIRST_BYTE_RECEIVED,   \/**< An event indicating end of one byte transfer  *\/$/;"	e	enum:__anon325
SPI_MASTER_EVT_TRANSFER_ABORTED	components\drivers_nrf\spi_master\spi_5W_master.h	/^    SPI_MASTER_EVT_TRANSFER_ABORTED,   \/**< An event indicating that transfer has been aborted *\/$/;"	e	enum:__anon325
SPI_MASTER_EVT_TRANSFER_COMPLETED	components\drivers_nrf\spi_master\spi_5W_master.h	/^    SPI_MASTER_EVT_TRANSFER_COMPLETED,   \/**< An event indicating that transfer has been completed *\/$/;"	e	enum:__anon325
SPI_MASTER_EVT_TRANSFER_RESTARTED	components\drivers_nrf\spi_master\spi_5W_master.h	/^    SPI_MASTER_EVT_TRANSFER_RESTARTED,   \/**< An event indicating that transfer has been resumed *\/$/;"	e	enum:__anon325
SPI_MASTER_EVT_TRANSFER_STARTED	components\drivers_nrf\spi_master\spi_5W_master.h	/^    SPI_MASTER_EVT_TRANSFER_STARTED = 0, \/**< An event indicating that transfer has been started *\/$/;"	e	enum:__anon325
SPI_MASTER_EVT_TYPE_MAX	components\drivers_nrf\spi_master\spi_5W_master.h	/^    SPI_MASTER_EVT_TYPE_MAX              \/**< Enumeration upper bound. *\/$/;"	e	enum:__anon325
SPI_MASTER_HW_ENABLED_COUNT	components\drivers_nrf\spi_master\spi_5W_master.h	/^     SPI_MASTER_HW_ENABLED_COUNT    \/**< A number of enabled instances of SPI master. *\/$/;"	e	enum:__anon328
SPI_MASTER_STATE_ABORTED	components\drivers_nrf\spi_master\spi_5W_master.h	/^   SPI_MASTER_STATE_ABORTED,$/;"	e	enum:__anon327
SPI_MASTER_STATE_BUSY	components\drivers_nrf\spi_master\spi_5W_master.h	/^   SPI_MASTER_STATE_BUSY,     \/**< A state indicating that SPI master is sending now. *\/$/;"	e	enum:__anon327
SPI_MASTER_STATE_DISABLED	components\drivers_nrf\spi_master\spi_5W_master.h	/^   SPI_MASTER_STATE_DISABLED, \/**< A state indicating that SPI master is disabled. *\/$/;"	e	enum:__anon327
SPI_MASTER_STATE_IDLE	components\drivers_nrf\spi_master\spi_5W_master.h	/^   SPI_MASTER_STATE_IDLE      \/**< A state indicating that SPI master is idle now. *\/$/;"	e	enum:__anon327
SPI_ORDER	components\drivers_nrf\spi_master\spi_5W_master.h	/^    uint8_t SPI_ORDER;      \/**< Bytes order MSBFIRST or LSBFIRST. *\/$/;"	m	struct:__anon324
SPI_Pin_MISO	components\drivers_nrf\spi_master\spi_5W_master.h	/^    uint32_t SPI_Pin_MISO;  \/**< MISO pin number. *\/$/;"	m	struct:__anon324
SPI_Pin_MOSI	components\drivers_nrf\spi_master\spi_5W_master.h	/^    uint32_t SPI_Pin_MOSI;  \/**< MOSI pin number .*\/$/;"	m	struct:__anon324
SPI_Pin_SCK	components\drivers_nrf\spi_master\spi_5W_master.h	/^    uint32_t SPI_Pin_SCK;   \/**< SCK pin number. *\/$/;"	m	struct:__anon324
SPI_Pin_SS	components\drivers_nrf\spi_master\spi_5W_master.h	/^    uint32_t SPI_Pin_SS;    \/**< Slave select pin number. *\/$/;"	m	struct:__anon324
_SPI_5W_	components\drivers_nrf\spi_master\spi_5W_master.h	20;"	d
data	components\drivers_nrf\spi_master\spi_5W_master.h	/^   uint16_t data;                   \/**< event data - context dependent *\/$/;"	m	struct:__anon326
spi_master_config_t	components\drivers_nrf\spi_master\spi_5W_master.h	/^ } spi_master_config_t;$/;"	t	typeref:struct:__anon324
spi_master_event_handler_t	components\drivers_nrf\spi_master\spi_5W_master.h	/^typedef void (*spi_master_event_handler_t) (spi_master_evt_t spi_master_evt);$/;"	t
spi_master_evt_t	components\drivers_nrf\spi_master\spi_5W_master.h	/^ } spi_master_evt_t;$/;"	t	typeref:struct:__anon326
spi_master_evt_type_t	components\drivers_nrf\spi_master\spi_5W_master.h	/^} spi_master_evt_type_t;$/;"	t	typeref:enum:__anon325
spi_master_hw_instance_t	components\drivers_nrf\spi_master\spi_5W_master.h	/^ } spi_master_hw_instance_t;$/;"	t	typeref:enum:__anon328
spi_master_state_t	components\drivers_nrf\spi_master\spi_5W_master.h	/^ } spi_master_state_t;$/;"	t	typeref:enum:__anon327
type	components\drivers_nrf\spi_master\spi_5W_master.h	/^   spi_master_evt_type_t type; \/**< Type of an event *\/$/;"	m	struct:__anon326
SPI0_TWI0_IRQHandler	components\drivers_nrf\spi_master\spi_master.c	/^void SPI0_TWI0_IRQHandler(void)$/;"	f
SPI1_TWI1_IRQHandler	components\drivers_nrf\spi_master\spi_master.c	/^void SPI1_TWI1_IRQHandler(void)$/;"	f
_static	components\drivers_nrf\spi_master\spi_master.c	46;"	d	file:
bytes_count	components\drivers_nrf\spi_master\spi_master.c	/^    uint16_t bytes_count;$/;"	m	struct:__anon329	file:
callback_event_handler	components\drivers_nrf\spi_master\spi_master.c	/^    spi_master_event_handler_t callback_event_handler;  \/**< A handler for event callback function. *\/$/;"	m	struct:__anon329	file:
disable_all_irq	components\drivers_nrf\spi_master\spi_master.c	/^    bool disable_all_irq;$/;"	m	struct:__anon329	file:
irq_type	components\drivers_nrf\spi_master\spi_master.c	/^    IRQn_Type irq_type;         \/**< A type of NVIC IRQn *\/$/;"	m	struct:__anon329	file:
m_spi_master_instances	components\drivers_nrf\spi_master\spi_master.c	/^_static volatile spi_master_instance_t m_spi_master_instances[SPI_MASTER_HW_ENABLED_COUNT];$/;"	v
max_length	components\drivers_nrf\spi_master\spi_master.c	/^    uint16_t max_length;        \/**< Max length (Max of the TX and RX length). *\/$/;"	m	struct:__anon329	file:
p_nrf_spi	components\drivers_nrf\spi_master\spi_master.c	/^    NRF_SPI_Type * p_nrf_spi;   \/**< A pointer to the NRF SPI master *\/$/;"	m	struct:__anon329	file:
p_rx_buffer	components\drivers_nrf\spi_master\spi_master.c	/^    uint8_t * p_rx_buffer;      \/**< A pointer to RX buffer. *\/$/;"	m	struct:__anon329	file:
p_tx_buffer	components\drivers_nrf\spi_master\spi_master.c	/^    uint8_t * p_tx_buffer;      \/**< A pointer to TX buffer. *\/$/;"	m	struct:__anon329	file:
pin_slave_select	components\drivers_nrf\spi_master\spi_master.c	/^    uint8_t pin_slave_select;   \/**< A pin for Slave Select. *\/$/;"	m	struct:__anon329	file:
rx_index	components\drivers_nrf\spi_master\spi_master.c	/^    uint16_t rx_index;          \/**< A index of the current element in the RX buffer. *\/$/;"	m	struct:__anon329	file:
rx_length	components\drivers_nrf\spi_master\spi_master.c	/^    uint16_t rx_length;         \/**< A length RX buffer. *\/$/;"	m	struct:__anon329	file:
spi_master_buffer_init	components\drivers_nrf\spi_master\spi_master.c	/^static __INLINE void spi_master_buffer_init(uint8_t * const           p_buf,$/;"	f	file:
spi_master_buffer_release	components\drivers_nrf\spi_master\spi_master.c	/^static __INLINE void spi_master_buffer_release(uint8_t * volatile * const pp_buf,$/;"	f	file:
spi_master_close	components\drivers_nrf\spi_master\spi_master.c	/^void spi_master_close(const spi_master_hw_instance_t spi_master_hw_instance)$/;"	f
spi_master_evt_handler_reg	components\drivers_nrf\spi_master\spi_master.c	/^__INLINE void spi_master_evt_handler_reg(const spi_master_hw_instance_t spi_master_hw_instance,$/;"	f
spi_master_get_instance	components\drivers_nrf\spi_master\spi_master.c	/^static __INLINE volatile spi_master_instance_t * spi_master_get_instance($/;"	f	file:
spi_master_get_state	components\drivers_nrf\spi_master\spi_master.c	/^__INLINE spi_master_state_t spi_master_get_state($/;"	f
spi_master_init_hw_instance	components\drivers_nrf\spi_master\spi_master.c	/^static __INLINE void spi_master_init_hw_instance(NRF_SPI_Type *                   p_nrf_spi,$/;"	f	file:
spi_master_instance_t	components\drivers_nrf\spi_master\spi_master.c	/^} spi_master_instance_t;$/;"	t	typeref:struct:__anon329	file:
spi_master_open	components\drivers_nrf\spi_master\spi_master.c	/^uint32_t spi_master_open(const spi_master_hw_instance_t    spi_master_hw_instance,$/;"	f
spi_master_send_initial_bytes	components\drivers_nrf\spi_master\spi_master.c	/^static __INLINE void spi_master_send_initial_bytes($/;"	f	file:
spi_master_send_recv	components\drivers_nrf\spi_master\spi_master.c	/^uint32_t spi_master_send_recv(const spi_master_hw_instance_t spi_master_hw_instance,$/;"	f
spi_master_send_recv_irq	components\drivers_nrf\spi_master\spi_master.c	/^static __INLINE void spi_master_send_recv_irq(volatile spi_master_instance_t * const p_spi_instance)$/;"	f	file:
spi_master_signal_evt	components\drivers_nrf\spi_master\spi_master.c	/^static __INLINE void spi_master_signal_evt(volatile spi_master_instance_t * const p_spi_instance,$/;"	f	file:
started_flag	components\drivers_nrf\spi_master\spi_master.c	/^    bool started_flag;$/;"	m	struct:__anon329	file:
state	components\drivers_nrf\spi_master\spi_master.c	/^    spi_master_state_t state;   \/**< A state of an instance of SPI master. *\/$/;"	m	struct:__anon329	file:
tx_index	components\drivers_nrf\spi_master\spi_master.c	/^    uint16_t tx_index;          \/**< A index of the current element in the TX buffer. *\/$/;"	m	struct:__anon329	file:
tx_length	components\drivers_nrf\spi_master\spi_master.c	/^    uint16_t tx_length;         \/**< A length of TX buffer. *\/$/;"	m	struct:__anon329	file:
APP_SPI_MASTER_H	components\drivers_nrf\spi_master\spi_master.h	26;"	d
SPI_CONFIG_CPHA	components\drivers_nrf\spi_master\spi_master.h	/^    uint8_t SPI_CONFIG_CPHA;    \/**< Serial clock phase LEADING or TRAILING. *\/$/;"	m	struct:__anon330
SPI_CONFIG_CPOL	components\drivers_nrf\spi_master\spi_master.h	/^    uint8_t SPI_CONFIG_CPOL;    \/**< Serial clock polarity ACTIVEHIGH or ACTIVELOW. *\/$/;"	m	struct:__anon330
SPI_CONFIG_ORDER	components\drivers_nrf\spi_master\spi_master.h	/^    uint8_t SPI_CONFIG_ORDER;   \/**< Bytes order LSB or MSB shifted out first. *\/$/;"	m	struct:__anon330
SPI_DEFAULT_TX_BYTE	components\drivers_nrf\spi_master\spi_master.h	32;"	d
SPI_DisableAllIRQ	components\drivers_nrf\spi_master\spi_master.h	/^    uint8_t SPI_DisableAllIRQ;  \/**< Disable all IRQs in critical section. *\/$/;"	m	struct:__anon330
SPI_Freq	components\drivers_nrf\spi_master\spi_master.h	/^    uint32_t SPI_Freq;          \/**< SPI master frequency *\/$/;"	m	struct:__anon330
SPI_MASTER_0	components\drivers_nrf\spi_master\spi_master.h	/^    SPI_MASTER_0,   \/**< A instance of NRF_SPI0. *\/$/;"	e	enum:__anon333
SPI_MASTER_1	components\drivers_nrf\spi_master\spi_master.h	/^    SPI_MASTER_1,   \/**< A instance of NRF_SPI1. *\/$/;"	e	enum:__anon333
SPI_MASTER_EVT_TRANSFER_COMPLETED	components\drivers_nrf\spi_master\spi_master.h	/^    SPI_MASTER_EVT_TRANSFER_COMPLETED,      \/**< An event indicating that transfer has been completed. *\/$/;"	e	enum:spi_master_evt_type_t
SPI_MASTER_EVT_TRANSFER_STARTED	components\drivers_nrf\spi_master\spi_master.h	/^    SPI_MASTER_EVT_TRANSFER_STARTED = 0,    \/**< An event indicating that transfer has been started. *\/$/;"	e	enum:spi_master_evt_type_t
SPI_MASTER_EVT_TYPE_MAX	components\drivers_nrf\spi_master\spi_master.h	/^    SPI_MASTER_EVT_TYPE_MAX                 \/**< Enumeration upper bound. *\/$/;"	e	enum:spi_master_evt_type_t
SPI_MASTER_HW_ENABLED_COUNT	components\drivers_nrf\spi_master\spi_master.h	/^    SPI_MASTER_HW_ENABLED_COUNT \/**< A number of enabled instances of the SPI master. *\/$/;"	e	enum:__anon333
SPI_MASTER_INIT_DEFAULT	components\drivers_nrf\spi_master\spi_master.h	36;"	d
SPI_MASTER_STATE_BUSY	components\drivers_nrf\spi_master\spi_master.h	/^    SPI_MASTER_STATE_BUSY,      \/**< A state indicating that SPI master is sending now. *\/$/;"	e	enum:__anon332
SPI_MASTER_STATE_DISABLED	components\drivers_nrf\spi_master\spi_master.h	/^    SPI_MASTER_STATE_DISABLED,  \/**< A state indicating that SPI master is disabled. *\/$/;"	e	enum:__anon332
SPI_MASTER_STATE_IDLE	components\drivers_nrf\spi_master\spi_master.h	/^    SPI_MASTER_STATE_IDLE       \/**< A state indicating that SPI master is idle now. *\/$/;"	e	enum:__anon332
SPI_PIN_DISCONNECTED	components\drivers_nrf\spi_master\spi_master.h	31;"	d
SPI_Pin_MISO	components\drivers_nrf\spi_master\spi_master.h	/^    uint32_t SPI_Pin_MISO;      \/**< MISO pin number. *\/$/;"	m	struct:__anon330
SPI_Pin_MOSI	components\drivers_nrf\spi_master\spi_master.h	/^    uint32_t SPI_Pin_MOSI;      \/**< MOSI pin number .*\/$/;"	m	struct:__anon330
SPI_Pin_SCK	components\drivers_nrf\spi_master\spi_master.h	/^    uint32_t SPI_Pin_SCK;       \/**< SCK pin number. *\/$/;"	m	struct:__anon330
SPI_Pin_SS	components\drivers_nrf\spi_master\spi_master.h	/^    uint32_t SPI_Pin_SS;        \/**< Slave select pin number. *\/$/;"	m	struct:__anon330
SPI_PriorityIRQ	components\drivers_nrf\spi_master\spi_master.h	/^    uint32_t SPI_PriorityIRQ;   \/**< SPI master interrupt priority. *\/$/;"	m	struct:__anon330
data_count	components\drivers_nrf\spi_master\spi_master.h	/^    uint16_t data_count;            \/**< Count of data sent. *\/$/;"	m	struct:__anon331
evt_type	components\drivers_nrf\spi_master\spi_master.h	/^    spi_master_evt_type_t evt_type; \/**< Type of an event. *\/$/;"	m	struct:__anon331
spi_master_config_t	components\drivers_nrf\spi_master\spi_master.h	/^} spi_master_config_t;$/;"	t	typeref:struct:__anon330
spi_master_event_handler_t	components\drivers_nrf\spi_master\spi_master.h	/^typedef void (*spi_master_event_handler_t)(spi_master_evt_t spi_master_evt);$/;"	t
spi_master_evt_t	components\drivers_nrf\spi_master\spi_master.h	/^} spi_master_evt_t;$/;"	t	typeref:struct:__anon331
spi_master_evt_type_t	components\drivers_nrf\spi_master\spi_master.h	/^typedef enum spi_master_evt_type_t$/;"	g
spi_master_evt_type_t	components\drivers_nrf\spi_master\spi_master.h	/^} spi_master_evt_type_t;$/;"	t	typeref:enum:spi_master_evt_type_t
spi_master_hw_instance_t	components\drivers_nrf\spi_master\spi_master.h	/^} spi_master_hw_instance_t;$/;"	t	typeref:enum:__anon333
spi_master_state_t	components\drivers_nrf\spi_master\spi_master.h	/^} spi_master_state_t;$/;"	t	typeref:enum:__anon332
DEFAULT_CS_PULLUP_CONFIG	components\drivers_nrf\spi_slave\spi_slave.c	22;"	d	file:
DEFAULT_DRIVE_CONFIG	components\drivers_nrf\spi_slave\spi_slave.c	23;"	d	file:
SPI1_TWI1_IRQHandler	components\drivers_nrf\spi_slave\spi_slave.c	/^void SPI1_TWI1_IRQHandler(void)$/;"	f
SPI1_TWI1_IRQ_PRI	components\drivers_nrf\spi_slave\spi_slave.c	21;"	d	file:
SPI_BUFFER_RESOURCE_CONFIGURED	components\drivers_nrf\spi_slave\spi_slave.c	/^    SPI_BUFFER_RESOURCE_CONFIGURED,                 \/**< State where the configuration of the memory buffers, which are to be used in SPI transaction, has completed. *\/$/;"	e	enum:__anon334	file:
SPI_BUFFER_RESOURCE_REQUESTED	components\drivers_nrf\spi_slave\spi_slave.c	/^    SPI_BUFFER_RESOURCE_REQUESTED,                  \/**< State where the configuration of the memory buffers, which are to be used in SPI transaction, has started. *\/$/;"	e	enum:__anon334	file:
SPI_STATE_INIT	components\drivers_nrf\spi_slave\spi_slave.c	/^    SPI_STATE_INIT,                                 \/**< Initialization state. In this state the module waits for a call to @ref spi_slave_buffers_set. *\/                                                                                             $/;"	e	enum:__anon334	file:
SPI_XFER_COMPLETED	components\drivers_nrf\spi_slave\spi_slave.c	/^    SPI_XFER_COMPLETED                              \/**< State where SPI transaction has been completed. *\/$/;"	e	enum:__anon334	file:
m_cs_pullup_config	components\drivers_nrf\spi_slave\spi_slave.c	/^static uint32_t m_cs_pullup_config = DEFAULT_CS_PULLUP_CONFIG;$/;"	v	file:
m_drive_config	components\drivers_nrf\spi_slave\spi_slave.c	/^static uint32_t m_drive_config = GPIO_PIN_CNF_DRIVE_S0S1;$/;"	v	file:
m_event_callback	components\drivers_nrf\spi_slave\spi_slave.c	/^static spi_slave_event_handler_t m_event_callback;  \/**< SPI slave event callback function. *\/$/;"	v	file:
m_spi_rx_buf_size	components\drivers_nrf\spi_slave\spi_slave.c	/^static volatile uint32_t    m_spi_rx_buf_size;      \/**< SPI slave RX buffer size in bytes. *\/$/;"	v	file:
m_spi_state	components\drivers_nrf\spi_slave\spi_slave.c	/^static volatile spi_state_t m_spi_state;            \/**< SPI slave state. *\/$/;"	v	file:
m_spi_tx_buf_size	components\drivers_nrf\spi_slave\spi_slave.c	/^static volatile uint32_t    m_spi_tx_buf_size;      \/**< SPI slave TX buffer size in bytes. *\/$/;"	v	file:
mp_spi_rx_buf	components\drivers_nrf\spi_slave\spi_slave.c	/^static volatile uint8_t *   mp_spi_rx_buf;          \/**< SPI slave RX buffer. *\/$/;"	v	file:
mp_spi_tx_buf	components\drivers_nrf\spi_slave\spi_slave.c	/^static volatile uint8_t *   mp_spi_tx_buf;          \/**< SPI slave TX buffer. *\/$/;"	v	file:
sm_state_change	components\drivers_nrf\spi_slave\spi_slave.c	/^static void sm_state_change(spi_state_t new_state)$/;"	f	file:
spi_slave_buffers_set	components\drivers_nrf\spi_slave\spi_slave.c	/^uint32_t spi_slave_buffers_set(uint8_t * p_tx_buf, $/;"	f
spi_slave_evt_handler_register	components\drivers_nrf\spi_slave\spi_slave.c	/^uint32_t spi_slave_evt_handler_register(spi_slave_event_handler_t event_handler)$/;"	f
spi_slave_init	components\drivers_nrf\spi_slave\spi_slave.c	/^uint32_t spi_slave_init(const spi_slave_config_t * p_spi_slave_config)$/;"	f
spi_slave_set_cs_pull_up_config	components\drivers_nrf\spi_slave\spi_slave.c	/^uint32_t spi_slave_set_cs_pull_up_config(uint32_t alternate_config)$/;"	f
spi_slave_set_drive_config	components\drivers_nrf\spi_slave\spi_slave.c	/^uint32_t spi_slave_set_drive_config(uint32_t alternate_config)$/;"	f
spi_state_t	components\drivers_nrf\spi_slave\spi_slave.c	/^} spi_state_t;$/;"	t	typeref:enum:__anon334	file:
state_entry_action_execute	components\drivers_nrf\spi_slave\spi_slave.c	/^static __INLINE void state_entry_action_execute(void)$/;"	f	file:
SPIM_LSB_FIRST	components\drivers_nrf\spi_slave\spi_slave.h	/^    SPIM_LSB_FIRST,                         \/**< Least significant bit shifted out first. *\/$/;"	e	enum:__anon335
SPIM_MSB_FIRST	components\drivers_nrf\spi_slave\spi_slave.h	/^    SPIM_MSB_FIRST                          \/**< Most significant bit shifted out first. *\/$/;"	e	enum:__anon335
SPI_MODE_0	components\drivers_nrf\spi_slave\spi_slave.h	/^    SPI_MODE_0,                             \/**< (CPOL = 0, CPHA = 0). *\/$/;"	e	enum:__anon336
SPI_MODE_1	components\drivers_nrf\spi_slave\spi_slave.h	/^    SPI_MODE_1,                             \/**< (CPOL = 0, CPHA = 1). *\/$/;"	e	enum:__anon336
SPI_MODE_2	components\drivers_nrf\spi_slave\spi_slave.h	/^    SPI_MODE_2,                             \/**< (CPOL = 1, CPHA = 0). *\/$/;"	e	enum:__anon336
SPI_MODE_3	components\drivers_nrf\spi_slave\spi_slave.h	/^    SPI_MODE_3                              \/**< (CPOL = 1, CPHA = 1). *\/$/;"	e	enum:__anon336
SPI_SLAVE_BUFFERS_SET_DONE	components\drivers_nrf\spi_slave\spi_slave.h	/^    SPI_SLAVE_BUFFERS_SET_DONE,             \/**< Memory buffer set event. Memory buffers have been set successfully to the SPI slave device and SPI transactions can be done. *\/$/;"	e	enum:__anon338
SPI_SLAVE_EVT_TYPE_MAX	components\drivers_nrf\spi_slave\spi_slave.h	/^    SPI_SLAVE_EVT_TYPE_MAX                  \/**< Enumeration upper bound. *\/      $/;"	e	enum:__anon338
SPI_SLAVE_H__	components\drivers_nrf\spi_slave\spi_slave.h	23;"	d
SPI_SLAVE_XFER_DONE	components\drivers_nrf\spi_slave\spi_slave.h	/^    SPI_SLAVE_XFER_DONE,                    \/**< SPI transaction event. SPI transaction has been completed. *\/  $/;"	e	enum:__anon338
bit_order	components\drivers_nrf\spi_slave\spi_slave.h	/^    spi_slave_endian_t bit_order;           \/**< SPI transaction bit order. *\/    $/;"	m	struct:__anon337
def_tx_character	components\drivers_nrf\spi_slave\spi_slave.h	/^    uint8_t            def_tx_character;    \/**< Device configuration mode default character (DEF). Character clocked out in case of an ignored transaction. *\/    $/;"	m	struct:__anon337
evt_type	components\drivers_nrf\spi_slave\spi_slave.h	/^    spi_slave_evt_type_t evt_type;          \/**< Type of event. *\/    $/;"	m	struct:__anon339
mode	components\drivers_nrf\spi_slave\spi_slave.h	/^    spi_slave_mode_t   mode;                \/**< SPI mode. *\/$/;"	m	struct:__anon337
orc_tx_character	components\drivers_nrf\spi_slave\spi_slave.h	/^    uint8_t            orc_tx_character;    \/**< Device configuration mode over-read character. Character clocked out after an over-read of the transmit buffer. *\/        $/;"	m	struct:__anon337
pin_csn	components\drivers_nrf\spi_slave\spi_slave.h	/^    uint32_t           pin_csn;             \/**< SPI CSN pin. *\/$/;"	m	struct:__anon337
pin_miso	components\drivers_nrf\spi_slave\spi_slave.h	/^    uint32_t           pin_miso;            \/**< SPI MISO pin. *\/$/;"	m	struct:__anon337
pin_mosi	components\drivers_nrf\spi_slave\spi_slave.h	/^    uint32_t           pin_mosi;            \/**< SPI MOSI pin. *\/$/;"	m	struct:__anon337
pin_sck	components\drivers_nrf\spi_slave\spi_slave.h	/^    uint32_t           pin_sck;             \/**< SPI SCK pin. *\/$/;"	m	struct:__anon337
rx_amount	components\drivers_nrf\spi_slave\spi_slave.h	/^    uint32_t             rx_amount;         \/**< Number of bytes received in last transaction (parameter is only valid upon @ref SPI_SLAVE_XFER_DONE event). *\/$/;"	m	struct:__anon339
spi_slave_config_t	components\drivers_nrf\spi_slave\spi_slave.h	/^} spi_slave_config_t;$/;"	t	typeref:struct:__anon337
spi_slave_endian_t	components\drivers_nrf\spi_slave\spi_slave.h	/^} spi_slave_endian_t;$/;"	t	typeref:enum:__anon335
spi_slave_event_handler_t	components\drivers_nrf\spi_slave\spi_slave.h	/^typedef void (*spi_slave_event_handler_t)(spi_slave_evt_t event);$/;"	t
spi_slave_evt_t	components\drivers_nrf\spi_slave\spi_slave.h	/^} spi_slave_evt_t;$/;"	t	typeref:struct:__anon339
spi_slave_evt_type_t	components\drivers_nrf\spi_slave\spi_slave.h	/^} spi_slave_evt_type_t;$/;"	t	typeref:enum:__anon338
spi_slave_mode_t	components\drivers_nrf\spi_slave\spi_slave.h	/^} spi_slave_mode_t;$/;"	t	typeref:enum:__anon336
tx_amount	components\drivers_nrf\spi_slave\spi_slave.h	/^    uint32_t             tx_amount;         \/**< Number of bytes transmitted in last transaction (parameter is only valid upon @ref SPI_SLAVE_XFER_DONE event). *\/    $/;"	m	struct:__anon339
TIMER0_IRQHandler	components\drivers_nrf\timer\nrf_drv_timer.c	/^void TIMER0_IRQHandler(void)$/;"	f
TIMER1_IRQHandler	components\drivers_nrf\timer\nrf_drv_timer.c	/^void TIMER1_IRQHandler(void)$/;"	f
TIMER2_IRQHandler	components\drivers_nrf\timer\nrf_drv_timer.c	/^void TIMER2_IRQHandler(void)$/;"	f
m_cb	components\drivers_nrf\timer\nrf_drv_timer.c	/^static nrf_drv_timer_cb_t        m_cb[TIMER_COUNT];$/;"	v	file:
m_default_config	components\drivers_nrf\timer\nrf_drv_timer.c	/^static const nrf_drv_timer_config_t m_default_config[] = {$/;"	v	file:
m_timer_event_handlers	components\drivers_nrf\timer\nrf_drv_timer.c	/^static nrf_timer_event_handler_t m_timer_event_handlers[TIMER_COUNT];$/;"	v	file:
nrf_drv_timer_capture	components\drivers_nrf\timer\nrf_drv_timer.c	/^uint32_t nrf_drv_timer_capture(nrf_drv_timer_t const * const p_instance,$/;"	f
nrf_drv_timer_capture_get	components\drivers_nrf\timer\nrf_drv_timer.c	/^uint32_t nrf_drv_timer_capture_get(nrf_drv_timer_t const * const p_instance,$/;"	f
nrf_drv_timer_cb_t	components\drivers_nrf\timer\nrf_drv_timer.c	/^} nrf_drv_timer_cb_t;$/;"	t	typeref:struct:__anon340	file:
nrf_drv_timer_clear	components\drivers_nrf\timer\nrf_drv_timer.c	/^void nrf_drv_timer_clear(nrf_drv_timer_t const * const p_instance)$/;"	f
nrf_drv_timer_compare	components\drivers_nrf\timer\nrf_drv_timer.c	/^void nrf_drv_timer_compare(nrf_drv_timer_t const * const p_instance,$/;"	f
nrf_drv_timer_disable	components\drivers_nrf\timer\nrf_drv_timer.c	/^void nrf_drv_timer_disable(nrf_drv_timer_t const * const p_instance)$/;"	f
nrf_drv_timer_enable	components\drivers_nrf\timer\nrf_drv_timer.c	/^void nrf_drv_timer_enable(nrf_drv_timer_t const * const p_instance)$/;"	f
nrf_drv_timer_event_address_get	components\drivers_nrf\timer\nrf_drv_timer.c	/^uint32_t nrf_drv_timer_event_address_get(nrf_drv_timer_t const * const p_instance,$/;"	f
nrf_drv_timer_extended_compare	components\drivers_nrf\timer\nrf_drv_timer.c	/^void nrf_drv_timer_extended_compare(nrf_drv_timer_t const * const p_instance,$/;"	f
nrf_drv_timer_increment	components\drivers_nrf\timer\nrf_drv_timer.c	/^void nrf_drv_timer_increment(nrf_drv_timer_t const * const p_instance)$/;"	f
nrf_drv_timer_init	components\drivers_nrf\timer\nrf_drv_timer.c	/^ret_code_t nrf_drv_timer_init(nrf_drv_timer_t const * const p_instance,$/;"	f
nrf_drv_timer_interrupt_handle	components\drivers_nrf\timer\nrf_drv_timer.c	/^static void nrf_drv_timer_interrupt_handle(NRF_TIMER_Type * p_reg, uint32_t timer_id)$/;"	f	file:
nrf_drv_timer_ms_to_ticks	components\drivers_nrf\timer\nrf_drv_timer.c	/^uint32_t nrf_drv_timer_ms_to_ticks(nrf_drv_timer_t const * const p_instance,$/;"	f
nrf_drv_timer_pause	components\drivers_nrf\timer\nrf_drv_timer.c	/^void nrf_drv_timer_pause(nrf_drv_timer_t const * const p_instance)$/;"	f
nrf_drv_timer_resume	components\drivers_nrf\timer\nrf_drv_timer.c	/^void nrf_drv_timer_resume(nrf_drv_timer_t const * const p_instance)$/;"	f
nrf_drv_timer_task_address_get	components\drivers_nrf\timer\nrf_drv_timer.c	/^uint32_t nrf_drv_timer_task_address_get(nrf_drv_timer_t const * const p_instance,$/;"	f
nrf_drv_timer_uninit	components\drivers_nrf\timer\nrf_drv_timer.c	/^void nrf_drv_timer_uninit(nrf_drv_timer_t const * const p_instance)$/;"	f
nrf_drv_timer_us_to_ticks	components\drivers_nrf\timer\nrf_drv_timer.c	/^uint32_t nrf_drv_timer_us_to_ticks(nrf_drv_timer_t const * const p_instance,$/;"	f
state	components\drivers_nrf\timer\nrf_drv_timer.c	/^    nrf_drv_state_t       state;$/;"	m	struct:__anon340	file:
NRF_DRV_TIMER_DEFAULT_CONFIG	components\drivers_nrf\timer\nrf_drv_timer.h	64;"	d
NRF_DRV_TIMER_H__	components\drivers_nrf\timer\nrf_drv_timer.h	28;"	d
NRF_DRV_TIMER_INSTANCE	components\drivers_nrf\timer\nrf_drv_timer.h	42;"	d
TIMER_CONFIG_BIT_WIDTH	components\drivers_nrf\timer\nrf_drv_timer.h	60;"	d
TIMER_CONFIG_FREQUENCY	components\drivers_nrf\timer\nrf_drv_timer.h	58;"	d
TIMER_CONFIG_IRQ_PRIORITY	components\drivers_nrf\timer\nrf_drv_timer.h	61;"	d
TIMER_CONFIG_MODE	components\drivers_nrf\timer\nrf_drv_timer.h	59;"	d
bit_width	components\drivers_nrf\timer\nrf_drv_timer.h	/^    nrf_timer_bit_width_t  bit_width;          \/**< Bit width. *\/$/;"	m	struct:__anon342
frequency	components\drivers_nrf\timer\nrf_drv_timer.h	/^    nrf_timer_frequency_t  frequency;          \/**< Frequency. *\/$/;"	m	struct:__anon342
instance_id	components\drivers_nrf\timer\nrf_drv_timer.h	/^    uint8_t                instance_id;        \/**< Instance ID. *\/$/;"	m	struct:__anon341
interrupt_priority	components\drivers_nrf\timer\nrf_drv_timer.h	/^    uint8_t                interrupt_priority; \/**< TIMER interrupt priority *\/$/;"	m	struct:__anon342
irq	components\drivers_nrf\timer\nrf_drv_timer.h	/^    IRQn_Type              irq;                \/**< Instance IRQ id. *\/$/;"	m	struct:__anon341
mode	components\drivers_nrf\timer\nrf_drv_timer.h	/^    nrf_timer_mode_t       mode;               \/**< Mode of operation. *\/$/;"	m	struct:__anon342
nrf_drv_timer_config_t	components\drivers_nrf\timer\nrf_drv_timer.h	/^} nrf_drv_timer_config_t;$/;"	t	typeref:struct:__anon342
nrf_drv_timer_t	components\drivers_nrf\timer\nrf_drv_timer.h	/^} nrf_drv_timer_t;$/;"	t	typeref:struct:__anon341
nrf_timer_event_handler_t	components\drivers_nrf\timer\nrf_drv_timer.h	/^typedef void (*nrf_timer_event_handler_t)(nrf_timer_events_t event_type);$/;"	t
p_reg	components\drivers_nrf\timer\nrf_drv_timer.h	/^    NRF_TIMER_Type       * p_reg;              \/**< Pointer to timer instance registers struct. *\/$/;"	m	struct:__anon341
TWI_MASTER_CONFIG	components\drivers_nrf\twi_master\config\twi_master_config.h	13;"	d
TWI_MASTER_CONFIG_CLOCK_PIN_NUMBER	components\drivers_nrf\twi_master\config\twi_master_config.h	15;"	d
TWI_MASTER_CONFIG_DATA_PIN_NUMBER	components\drivers_nrf\twi_master\config\twi_master_config.h	16;"	d
MAX_TIMEOUT_LOOPS	components\drivers_nrf\twi_master\twi_hw_master.c	23;"	d	file:
twi_master_clear_bus	components\drivers_nrf\twi_master\twi_hw_master.c	/^static bool twi_master_clear_bus(void)$/;"	f	file:
twi_master_init	components\drivers_nrf\twi_master\twi_hw_master.c	/^bool twi_master_init(void)$/;"	f
twi_master_read	components\drivers_nrf\twi_master\twi_hw_master.c	/^static bool twi_master_read(uint8_t * data, uint8_t data_length, bool issue_stop_condition)$/;"	f	file:
twi_master_transfer	components\drivers_nrf\twi_master\twi_hw_master.c	/^bool twi_master_transfer(uint8_t   address,$/;"	f
twi_master_write	components\drivers_nrf\twi_master\twi_hw_master.c	/^static bool twi_master_write(uint8_t * data, uint8_t data_length, bool issue_stop_condition)$/;"	f	file:
TWI_DELAY	components\drivers_nrf\twi_master\twi_master.h	58;"	d
TWI_DONT_ISSUE_STOP	components\drivers_nrf\twi_master\twi_master.h	41;"	d
TWI_ISSUE_STOP	components\drivers_nrf\twi_master\twi_master.h	40;"	d
TWI_MASTER_H	components\drivers_nrf\twi_master\twi_master.h	14;"	d
TWI_READ_BIT	components\drivers_nrf\twi_master\twi_master.h	38;"	d
TWI_SCL_HIGH	components\drivers_nrf\twi_master\twi_master.h	46;"	d
TWI_SCL_LOW	components\drivers_nrf\twi_master\twi_master.h	47;"	d
TWI_SCL_OUTPUT	components\drivers_nrf\twi_master\twi_master.h	52;"	d
TWI_SCL_READ	components\drivers_nrf\twi_master\twi_master.h	56;"	d
TWI_SDA_HIGH	components\drivers_nrf\twi_master\twi_master.h	48;"	d
TWI_SDA_INPUT	components\drivers_nrf\twi_master\twi_master.h	50;"	d
TWI_SDA_LOW	components\drivers_nrf\twi_master\twi_master.h	49;"	d
TWI_SDA_OUTPUT	components\drivers_nrf\twi_master\twi_master.h	51;"	d
TWI_SDA_READ	components\drivers_nrf\twi_master\twi_master.h	55;"	d
TWI_MASTER_TIMEOUT_COUNTER_LOAD_VALUE	components\drivers_nrf\twi_master\twi_sw_master.c	42;"	d	file:
TWI_SCL_STANDARD0_NODRIVE1	components\drivers_nrf\twi_master\twi_sw_master.c	30;"	d	file:
TWI_SDA_STANDARD0_NODRIVE1	components\drivers_nrf\twi_master\twi_sw_master.c	21;"	d	file:
twi_master_clear_bus	components\drivers_nrf\twi_master\twi_sw_master.c	/^static bool twi_master_clear_bus(void)$/;"	f	file:
twi_master_clock_byte	components\drivers_nrf\twi_master\twi_sw_master.c	/^static bool twi_master_clock_byte(uint_fast8_t databyte)$/;"	f	file:
twi_master_clock_byte_in	components\drivers_nrf\twi_master\twi_sw_master.c	/^static bool twi_master_clock_byte_in(uint8_t *databyte, bool ack)$/;"	f	file:
twi_master_init	components\drivers_nrf\twi_master\twi_sw_master.c	/^bool twi_master_init(void)$/;"	f
twi_master_issue_startcondition	components\drivers_nrf\twi_master\twi_sw_master.c	/^static bool twi_master_issue_startcondition(void)$/;"	f	file:
twi_master_issue_stopcondition	components\drivers_nrf\twi_master\twi_sw_master.c	/^static bool twi_master_issue_stopcondition(void)$/;"	f	file:
twi_master_transfer	components\drivers_nrf\twi_master\twi_sw_master.c	/^bool twi_master_transfer(uint8_t address, uint8_t * data, uint8_t data_length, bool issue_stop_condition)$/;"	f
twi_master_wait_while_scl_low	components\drivers_nrf\twi_master\twi_sw_master.c	/^static bool twi_master_wait_while_scl_low(void)$/;"	f	file:
BYTE_INVALID	components\drivers_nrf\uart\app_uart.c	23;"	d	file:
FIFO_LENGTH	components\drivers_nrf\uart\app_uart.c	20;"	d	file:
ON_CTS_HIGH	components\drivers_nrf\uart\app_uart.c	/^    ON_CTS_HIGH,   \/**< Event: CTS gone high. *\/$/;"	e	enum:__anon344	file:
ON_CTS_LOW	components\drivers_nrf\uart\app_uart.c	/^    ON_CTS_LOW,    \/**< Event: CTS gone low. *\/$/;"	e	enum:__anon344	file:
ON_TX_READY	components\drivers_nrf\uart\app_uart.c	/^    ON_TX_READY,   \/**< Event: Data has been transmitted on the uart and line is available. *\/$/;"	e	enum:__anon344	file:
ON_UART_CLOSE	components\drivers_nrf\uart\app_uart.c	/^    ON_UART_CLOSE, \/**< Event: The UART module are being stopped. *\/$/;"	e	enum:__anon344	file:
ON_UART_PUT	components\drivers_nrf\uart\app_uart.c	/^    ON_UART_PUT,   \/**< Event: Application wants to transmit data. *\/$/;"	e	enum:__anon344	file:
UART0_IRQHandler	components\drivers_nrf\uart\app_uart.c	/^void UART0_IRQHandler(void)$/;"	f
UART_INSTANCE_GPIOTE_BASE	components\drivers_nrf\uart\app_uart.c	21;"	d	file:
UART_INSTANCE_ID_INVALID	components\drivers_nrf\uart\app_uart.c	22;"	d	file:
UART_OFF	components\drivers_nrf\uart\app_uart.c	/^    UART_OFF,        \/**< app_uart state OFF, indicating CTS is low. *\/$/;"	e	enum:__anon343	file:
UART_ON	components\drivers_nrf\uart\app_uart.c	/^    UART_ON,         \/**< app_uart state TX, indicating UART is ongoing transmitting data. *\/$/;"	e	enum:__anon343	file:
UART_READY	components\drivers_nrf\uart\app_uart.c	/^    UART_READY,      \/**< app_uart state ON, indicating CTS is high. *\/$/;"	e	enum:__anon343	file:
UART_WAIT_CLOSE	components\drivers_nrf\uart\app_uart.c	/^    UART_WAIT_CLOSE, \/**< app_uart state WAIT CLOSE, indicating that CTS is low, but a byte is currently being transmitted on the line. *\/$/;"	e	enum:__anon343	file:
action_tx_ready	components\drivers_nrf\uart\app_uart.c	/^static void action_tx_ready()$/;"	f	file:
action_tx_send	components\drivers_nrf\uart\app_uart.c	/^static void action_tx_send()$/;"	f	file:
action_tx_stop	components\drivers_nrf\uart\app_uart.c	/^void action_tx_stop()$/;"	f
action_uart_deactivate	components\drivers_nrf\uart\app_uart.c	/^static void action_uart_deactivate(void)$/;"	f	file:
app_uart_close	components\drivers_nrf\uart\app_uart.c	/^uint32_t app_uart_close(uint16_t app_uart_uid)$/;"	f
app_uart_flush	components\drivers_nrf\uart\app_uart.c	/^uint32_t app_uart_flush(void)$/;"	f
app_uart_get	components\drivers_nrf\uart\app_uart.c	/^uint32_t app_uart_get(uint8_t * p_byte)$/;"	f
app_uart_get_connection_state	components\drivers_nrf\uart\app_uart.c	/^uint32_t app_uart_get_connection_state(app_uart_connection_state_t * p_conn_state)$/;"	f
app_uart_init	components\drivers_nrf\uart\app_uart.c	/^uint32_t app_uart_init(const app_uart_comm_params_t * p_comm_params,$/;"	f
app_uart_put	components\drivers_nrf\uart\app_uart.c	/^uint32_t app_uart_put(uint8_t byte)$/;"	f
app_uart_state_events_t	components\drivers_nrf\uart\app_uart.c	/^} app_uart_state_events_t;$/;"	t	typeref:enum:__anon344	file:
app_uart_states_t	components\drivers_nrf\uart\app_uart.c	/^} app_uart_states_t;$/;"	t	typeref:enum:__anon343	file:
gpiote_uart_event_handler	components\drivers_nrf\uart\app_uart.c	/^static void gpiote_uart_event_handler(uint32_t event_pins_low_to_high,$/;"	f	file:
m_current_state	components\drivers_nrf\uart\app_uart.c	/^static volatile app_uart_states_t m_current_state = UART_OFF; \/**< State of the state machine. *\/$/;"	v	file:
m_event_handler	components\drivers_nrf\uart\app_uart.c	/^static app_uart_event_handler_t   m_event_handler;            \/**< Event handler function. *\/$/;"	v	file:
m_gpiote_uid	components\drivers_nrf\uart\app_uart.c	/^static app_gpiote_user_id_t       m_gpiote_uid;               \/**< GPIOTE id for currently active caller to the UART module. *\/$/;"	v	file:
m_instance_counter	components\drivers_nrf\uart\app_uart.c	/^static uint8_t                    m_instance_counter = 1;     \/**< Instance counter for each caller using the UART module. The GPIOTE user id is mapped directly for callers using HW Flow Control. *\/$/;"	v	file:
m_pin_cts_mask	components\drivers_nrf\uart\app_uart.c	/^static uint32_t                   m_pin_cts_mask;             \/**< CTS pin mask for UART module. *\/$/;"	v	file:
m_rx_byte	components\drivers_nrf\uart\app_uart.c	/^static uint16_t m_rx_byte = BYTE_INVALID; \/**< RX Byte placeholder for last received byte. *\/$/;"	v	file:
m_tx_byte	components\drivers_nrf\uart\app_uart.c	/^static uint8_t  m_tx_byte;                \/**< TX Byte placeholder for next byte to transmit. *\/$/;"	v	file:
on_cts_high	components\drivers_nrf\uart\app_uart.c	/^static void on_cts_high(void)$/;"	f	file:
on_cts_low	components\drivers_nrf\uart\app_uart.c	/^static void on_cts_low(void)$/;"	f	file:
on_tx_ready	components\drivers_nrf\uart\app_uart.c	/^static void on_tx_ready(void)$/;"	f	file:
on_uart_close	components\drivers_nrf\uart\app_uart.c	/^static void on_uart_close(void)$/;"	f	file:
on_uart_event	components\drivers_nrf\uart\app_uart.c	/^static void on_uart_event(app_uart_state_events_t event)$/;"	f	file:
on_uart_put	components\drivers_nrf\uart\app_uart.c	/^static void on_uart_put(void)$/;"	f	file:
uart_no_flow_control_init	components\drivers_nrf\uart\app_uart.c	/^static void uart_no_flow_control_init(void)$/;"	f	file:
uart_standard_flow_control_init	components\drivers_nrf\uart\app_uart.c	/^static void uart_standard_flow_control_init(const app_uart_comm_params_t * p_comm_params)$/;"	f	file:
APP_UART_COMMUNICATION_ERROR	components\drivers_nrf\uart\app_uart.h	/^    APP_UART_COMMUNICATION_ERROR, \/**< An communication error has occured during reception. The error is stored in app_uart_evt_t.data.error_communication field. *\/$/;"	e	enum:__anon349
APP_UART_CONNECTED	components\drivers_nrf\uart\app_uart.h	/^    APP_UART_CONNECTED     \/**< State indicating that the UART is connected and ready to receive or transmit bytes. If flow control is disabled, the state will always be connected. *\/$/;"	e	enum:__anon348
APP_UART_DATA	components\drivers_nrf\uart\app_uart.h	/^    APP_UART_DATA,                \/**< An event indicating that UART data has been received, and data is present in data field. This event is only used when no FIFO is configured. *\/$/;"	e	enum:__anon349
APP_UART_DATA_READY	components\drivers_nrf\uart\app_uart.h	/^    APP_UART_DATA_READY,          \/**< An event indicating that UART data has been received. The data is available in the FIFO and can be fetched using @ref app_uart_get. *\/$/;"	e	enum:__anon349
APP_UART_DISCONNECTED	components\drivers_nrf\uart\app_uart.h	/^    APP_UART_DISCONNECTED, \/**< State indicating that the UART is disconnected and cannot receive or transmit bytes. *\/$/;"	e	enum:__anon348
APP_UART_FIFO_ERROR	components\drivers_nrf\uart\app_uart.h	/^    APP_UART_FIFO_ERROR,          \/**< An error in the FIFO module used by the app_uart module has occured. The FIFO error code is stored in app_uart_evt_t.data.error_code field. *\/$/;"	e	enum:__anon349
APP_UART_FIFO_INIT	components\drivers_nrf\uart\app_uart.h	134;"	d
APP_UART_FLOW_CONTROL_DISABLED	components\drivers_nrf\uart\app_uart.h	/^    APP_UART_FLOW_CONTROL_DISABLED, \/**< UART Hw Flow Control is disabled. *\/$/;"	e	enum:__anon345
APP_UART_FLOW_CONTROL_ENABLED	components\drivers_nrf\uart\app_uart.h	/^    APP_UART_FLOW_CONTROL_ENABLED,  \/**< Standard UART Hw Flow Control is enabled. *\/$/;"	e	enum:__anon345
APP_UART_FLOW_CONTROL_LOW_POWER	components\drivers_nrf\uart\app_uart.h	/^    APP_UART_FLOW_CONTROL_LOW_POWER \/**< Specialized UART Hw Flow Control is used. The Low Power setting allows the nRF51 to Power Off the UART module when CTS is in-active, and re-enabling the UART when the CTS signal becomes active. This allows the nRF51 to safe power by only using the UART module when it is needed by the remote site. *\/$/;"	e	enum:__anon345
APP_UART_H__	components\drivers_nrf\uart\app_uart.h	23;"	d
APP_UART_INIT	components\drivers_nrf\uart\app_uart.h	161;"	d
APP_UART_TX_EMPTY	components\drivers_nrf\uart\app_uart.h	/^    APP_UART_TX_EMPTY,            \/**< An event indicating that UART has completed transmission of all available data in the TX FIFO. *\/$/;"	e	enum:__anon349
UART_PIN_DISCONNECTED	components\drivers_nrf\uart\app_uart.h	29;"	d
app_uart_buffers_t	components\drivers_nrf\uart\app_uart.h	/^} app_uart_buffers_t;$/;"	t	typeref:struct:__anon347
app_uart_comm_params_t	components\drivers_nrf\uart\app_uart.h	/^} app_uart_comm_params_t;$/;"	t	typeref:struct:__anon346
app_uart_connection_state_t	components\drivers_nrf\uart\app_uart.h	/^} app_uart_connection_state_t;$/;"	t	typeref:enum:__anon348
app_uart_event_handler_t	components\drivers_nrf\uart\app_uart.h	/^typedef void (* app_uart_event_handler_t) (app_uart_evt_t * p_app_uart_event);$/;"	t
app_uart_evt_t	components\drivers_nrf\uart\app_uart.h	/^} app_uart_evt_t;$/;"	t	typeref:struct:__anon350
app_uart_evt_type_t	components\drivers_nrf\uart\app_uart.h	/^} app_uart_evt_type_t;$/;"	t	typeref:enum:__anon349
app_uart_flow_control_t	components\drivers_nrf\uart\app_uart.h	/^} app_uart_flow_control_t;$/;"	t	typeref:enum:__anon345
baud_rate	components\drivers_nrf\uart\app_uart.h	/^    uint32_t                baud_rate;    \/**< Baud rate configuration. *\/$/;"	m	struct:__anon346
cts_pin_no	components\drivers_nrf\uart\app_uart.h	/^    uint8_t                 cts_pin_no;   \/**< CTS pin number, only used if flow control is enabled. *\/$/;"	m	struct:__anon346
data	components\drivers_nrf\uart\app_uart.h	/^    } data;$/;"	m	struct:__anon350	typeref:union:__anon350::__anon351
error_code	components\drivers_nrf\uart\app_uart.h	/^        uint32_t error_code;          \/**< Field used if evt_type is: NRF_ERROR_x. Additional status\/error code if the error event type is APP_UART_FIFO_ERROR. This error code refer to errors defined in nrf_error.h. *\/$/;"	m	union:__anon350::__anon351
error_communication	components\drivers_nrf\uart\app_uart.h	/^        uint32_t error_communication; \/**< Field used if evt_type is: APP_UART_COMMUNICATION_ERROR. This field contains the value in the ERRORSRC register for the UART peripheral. The UART_ERRORSRC_x defines from nrf51_bitfields.h can be used to parse the error code. See also the nRF51 Series Reference Manual for specification. *\/$/;"	m	union:__anon350::__anon351
evt_type	components\drivers_nrf\uart\app_uart.h	/^    app_uart_evt_type_t evt_type; \/**< Type of event. *\/$/;"	m	struct:__anon350
flow_control	components\drivers_nrf\uart\app_uart.h	/^    app_uart_flow_control_t flow_control; \/**< Flow control setting, if flow control is used, the system will use low power UART mode, based on CTS signal. *\/$/;"	m	struct:__anon346
rts_pin_no	components\drivers_nrf\uart\app_uart.h	/^    uint8_t                 rts_pin_no;   \/**< RTS pin number, only used if flow control is enabled. *\/$/;"	m	struct:__anon346
rx_buf	components\drivers_nrf\uart\app_uart.h	/^    uint8_t * rx_buf;      \/**< Pointer to the RX buffer. *\/$/;"	m	struct:__anon347
rx_buf_size	components\drivers_nrf\uart\app_uart.h	/^    uint32_t  rx_buf_size; \/**< Size of the RX buffer. *\/$/;"	m	struct:__anon347
rx_pin_no	components\drivers_nrf\uart\app_uart.h	/^    uint8_t                 rx_pin_no;    \/**< RX pin number. *\/$/;"	m	struct:__anon346
tx_buf	components\drivers_nrf\uart\app_uart.h	/^    uint8_t * tx_buf;      \/**< Pointer to the TX buffer. *\/$/;"	m	struct:__anon347
tx_buf_size	components\drivers_nrf\uart\app_uart.h	/^    uint32_t  tx_buf_size; \/**< Size of the TX buffer. *\/$/;"	m	struct:__anon347
tx_pin_no	components\drivers_nrf\uart\app_uart.h	/^    uint8_t                 tx_pin_no;    \/**< TX pin number. *\/$/;"	m	struct:__anon346
use_parity	components\drivers_nrf\uart\app_uart.h	/^    bool                    use_parity;   \/**< Even parity if TRUE, no parity if FALSE. *\/$/;"	m	struct:__anon346
value	components\drivers_nrf\uart\app_uart.h	/^        uint8_t  value;               \/**< Field used if evt_type is: NRF_ERROR_x. Additional status\/error code if the error event type is APP_UART_FIFO_ERROR. This error code refer to errors defined in nrf_error.h. *\/$/;"	m	union:__anon350::__anon351
FIFO_LENGTH	components\drivers_nrf\uart\app_uart_fifo.c	27;"	d	file:
ON_CTS_HIGH	components\drivers_nrf\uart\app_uart_fifo.c	/^    ON_CTS_HIGH,                                                            \/**< Event: CTS gone high. *\/$/;"	e	enum:__anon353	file:
ON_CTS_LOW	components\drivers_nrf\uart\app_uart_fifo.c	/^    ON_CTS_LOW,                                                             \/**< Event: CTS gone low. *\/$/;"	e	enum:__anon353	file:
ON_TX_READY	components\drivers_nrf\uart\app_uart_fifo.c	/^    ON_TX_READY,                                                            \/**< Event: Data has been transmitted on the uart and line is available. *\/$/;"	e	enum:__anon353	file:
ON_UART_CLOSE	components\drivers_nrf\uart\app_uart_fifo.c	/^    ON_UART_CLOSE,                                                          \/**< Event: The UART module are being stopped. *\/$/;"	e	enum:__anon353	file:
ON_UART_PUT	components\drivers_nrf\uart\app_uart_fifo.c	/^    ON_UART_PUT,                                                            \/**< Event: Application wants to transmit data. *\/$/;"	e	enum:__anon353	file:
UART0_IRQHandler	components\drivers_nrf\uart\app_uart_fifo.c	/^void UART0_IRQHandler(void)$/;"	f
UART_INSTANCE_GPIOTE_BASE	components\drivers_nrf\uart\app_uart_fifo.c	30;"	d	file:
UART_INSTANCE_ID_INVALID	components\drivers_nrf\uart\app_uart_fifo.c	31;"	d	file:
UART_OFF	components\drivers_nrf\uart\app_uart_fifo.c	/^    UART_OFF,                                                               \/**< app_uart state OFF, indicating CTS is low. *\/$/;"	e	enum:__anon352	file:
UART_ON	components\drivers_nrf\uart\app_uart_fifo.c	/^    UART_ON,                                                                \/**< app_uart state TX, indicating UART is ongoing transmitting data. *\/$/;"	e	enum:__anon352	file:
UART_READY	components\drivers_nrf\uart\app_uart_fifo.c	/^    UART_READY,                                                             \/**< app_uart state ON, indicating CTS is high. *\/$/;"	e	enum:__anon352	file:
UART_WAIT_CLOSE	components\drivers_nrf\uart\app_uart_fifo.c	/^    UART_WAIT_CLOSE,                                                        \/**< app_uart state WAIT CLOSE, indicating that CTS is low, but a byte is currently being transmitted on the line. *\/$/;"	e	enum:__anon352	file:
action_tx_ready	components\drivers_nrf\uart\app_uart_fifo.c	/^static void action_tx_ready()$/;"	f	file:
action_tx_send	components\drivers_nrf\uart\app_uart_fifo.c	/^static void action_tx_send()$/;"	f	file:
action_tx_stop	components\drivers_nrf\uart\app_uart_fifo.c	/^void action_tx_stop()$/;"	f
action_uart_deactivate	components\drivers_nrf\uart\app_uart_fifo.c	/^static void action_uart_deactivate(void)$/;"	f	file:
app_uart_close	components\drivers_nrf\uart\app_uart_fifo.c	/^uint32_t app_uart_close(uint16_t app_uart_uid)$/;"	f
app_uart_flush	components\drivers_nrf\uart\app_uart_fifo.c	/^uint32_t app_uart_flush(void)$/;"	f
app_uart_get	components\drivers_nrf\uart\app_uart_fifo.c	/^uint32_t app_uart_get(uint8_t * p_byte)$/;"	f
app_uart_get_connection_state	components\drivers_nrf\uart\app_uart_fifo.c	/^uint32_t app_uart_get_connection_state(app_uart_connection_state_t * p_conn_state)$/;"	f
app_uart_init	components\drivers_nrf\uart\app_uart_fifo.c	/^uint32_t app_uart_init(const app_uart_comm_params_t * p_comm_params,$/;"	f
app_uart_put	components\drivers_nrf\uart\app_uart_fifo.c	/^uint32_t app_uart_put(uint8_t byte)$/;"	f
app_uart_state_events_t	components\drivers_nrf\uart\app_uart_fifo.c	/^} app_uart_state_events_t;$/;"	t	typeref:enum:__anon353	file:
app_uart_states_t	components\drivers_nrf\uart\app_uart_fifo.c	/^} app_uart_states_t;$/;"	t	typeref:enum:__anon352	file:
fifo_length	components\drivers_nrf\uart\app_uart_fifo.c	/^static __INLINE uint32_t fifo_length(app_fifo_t * const fifo)$/;"	f	file:
gpiote_uart_event_handler	components\drivers_nrf\uart\app_uart_fifo.c	/^static void gpiote_uart_event_handler(uint32_t event_pins_low_to_high,$/;"	f	file:
m_current_state	components\drivers_nrf\uart\app_uart_fifo.c	/^static volatile app_uart_states_t  m_current_state = UART_OFF;              \/**< State of the state machine. *\/$/;"	v	file:
m_event_handler	components\drivers_nrf\uart\app_uart_fifo.c	/^static app_uart_event_handler_t    m_event_handler;                         \/**< Event handler function. *\/$/;"	v	file:
m_gpiote_uid	components\drivers_nrf\uart\app_uart_fifo.c	/^static app_gpiote_user_id_t        m_gpiote_uid;                            \/**< GPIOTE id for currently active caller to the UART module. *\/$/;"	v	file:
m_instance_counter	components\drivers_nrf\uart\app_uart_fifo.c	/^static uint8_t                     m_instance_counter = 1;                  \/**< Instance counter for each caller using the UART module. The GPIOTE user id is mapped directly for callers using HW Flow Control. *\/$/;"	v	file:
m_pin_cts_mask	components\drivers_nrf\uart\app_uart_fifo.c	/^static uint32_t                    m_pin_cts_mask;                          \/**< CTS pin mask for UART module. *\/$/;"	v	file:
m_rx_fifo	components\drivers_nrf\uart\app_uart_fifo.c	/^static app_fifo_t                  m_rx_fifo;                               \/**< RX FIFO buffer for storing data received on the UART until the application fetches them using app_uart_get(). *\/$/;"	v	file:
m_tx_fifo	components\drivers_nrf\uart\app_uart_fifo.c	/^static app_fifo_t                  m_tx_fifo;                               \/**< TX FIFO buffer for storing data to be transmitted on the UART when TXD is ready. Data is put to the buffer on using app_uart_put(). *\/$/;"	v	file:
on_cts_high	components\drivers_nrf\uart\app_uart_fifo.c	/^static void on_cts_high(void)$/;"	f	file:
on_cts_low	components\drivers_nrf\uart\app_uart_fifo.c	/^static void on_cts_low(void)$/;"	f	file:
on_tx_ready	components\drivers_nrf\uart\app_uart_fifo.c	/^static void on_tx_ready(void)$/;"	f	file:
on_uart_close	components\drivers_nrf\uart\app_uart_fifo.c	/^static void on_uart_close(void)$/;"	f	file:
on_uart_event	components\drivers_nrf\uart\app_uart_fifo.c	/^static void on_uart_event(app_uart_state_events_t event)$/;"	f	file:
on_uart_put	components\drivers_nrf\uart\app_uart_fifo.c	/^static void on_uart_put(void)$/;"	f	file:
uart_no_flow_control_init	components\drivers_nrf\uart\app_uart_fifo.c	/^static void uart_no_flow_control_init(void)$/;"	f	file:
uart_standard_flow_control_init	components\drivers_nrf\uart\app_uart_fifo.c	/^static void uart_standard_flow_control_init(const app_uart_comm_params_t * p_comm_params)$/;"	f	file:
WDT_IRQHandler	components\drivers_nrf\wdt\nrf_drv_wdt.c	/^void WDT_IRQHandler(void)$/;"	f
m_alloc_index	components\drivers_nrf\wdt\nrf_drv_wdt.c	/^static uint32_t m_alloc_index;$/;"	v	file:
m_default_config	components\drivers_nrf\wdt\nrf_drv_wdt.c	/^static const nrf_drv_wdt_config_t m_default_config = NRF_DRV_WDT_DEAFULT_CONFIG;$/;"	v	file:
m_state	components\drivers_nrf\wdt\nrf_drv_wdt.c	/^static nrf_drv_state_t m_state;$/;"	v	file:
m_wdt_event_handler	components\drivers_nrf\wdt\nrf_drv_wdt.c	/^static nrf_wdt_event_handler_t m_wdt_event_handler;$/;"	v	file:
nrf_drv_wdt_channel_alloc	components\drivers_nrf\wdt\nrf_drv_wdt.c	/^ret_code_t nrf_drv_wdt_channel_alloc(nrf_drv_wdt_channel_id * p_channel_id)$/;"	f
nrf_drv_wdt_channel_feed	components\drivers_nrf\wdt\nrf_drv_wdt.c	/^void nrf_drv_wdt_channel_feed(nrf_drv_wdt_channel_id channel_id)$/;"	f
nrf_drv_wdt_enable	components\drivers_nrf\wdt\nrf_drv_wdt.c	/^void nrf_drv_wdt_enable(void)$/;"	f
nrf_drv_wdt_feed	components\drivers_nrf\wdt\nrf_drv_wdt.c	/^void nrf_drv_wdt_feed(void)$/;"	f
nrf_drv_wdt_init	components\drivers_nrf\wdt\nrf_drv_wdt.c	/^ret_code_t nrf_drv_wdt_init(nrf_drv_wdt_config_t const * p_config,$/;"	f
NRF_DRV_WDT_DEAFULT_CONFIG	components\drivers_nrf\wdt\nrf_drv_wdt.h	45;"	d
NRF_DRV_WDT_H__	components\drivers_nrf\wdt\nrf_drv_wdt.h	24;"	d
behaviour	components\drivers_nrf\wdt\nrf_drv_wdt.h	/^    nrf_wdt_behaviour_t    behaviour;          \/**< WDT behaviour when CPU in sleep\/halt mode. *\/$/;"	m	struct:__anon354
interrupt_priority	components\drivers_nrf\wdt\nrf_drv_wdt.h	/^    uint8_t                interrupt_priority; \/**< WDT interrupt priority *\/$/;"	m	struct:__anon354
nrf_drv_wdt_channel_id	components\drivers_nrf\wdt\nrf_drv_wdt.h	/^typedef nrf_wdt_rr_register_t nrf_drv_wdt_channel_id;$/;"	t
nrf_drv_wdt_config_t	components\drivers_nrf\wdt\nrf_drv_wdt.h	/^} nrf_drv_wdt_config_t;$/;"	t	typeref:struct:__anon354
nrf_drv_wdt_ppi_event_addr	components\drivers_nrf\wdt\nrf_drv_wdt.h	/^__STATIC_INLINE uint32_t nrf_drv_wdt_ppi_event_addr(nrf_wdt_events_t event)$/;"	f
nrf_drv_wdt_ppi_task_addr	components\drivers_nrf\wdt\nrf_drv_wdt.h	/^__STATIC_INLINE uint32_t nrf_drv_wdt_ppi_task_addr(nrf_wdt_tasks_t task)$/;"	f
nrf_wdt_event_handler_t	components\drivers_nrf\wdt\nrf_drv_wdt.h	/^typedef void (*nrf_wdt_event_handler_t)(void);$/;"	t
reload_value	components\drivers_nrf\wdt\nrf_drv_wdt.h	/^    uint32_t               reload_value;       \/**< WDT reload value in ms. *\/$/;"	m	struct:__anon354
ADDRESS_PARAMETER_OFFSET_0	components\libraries\ant_fs\antfs.c	101;"	d	file:
ADDRESS_PARAMETER_OFFSET_1	components\libraries\ant_fs\antfs.c	102;"	d	file:
ADDRESS_PARAMETER_OFFSET_2	components\libraries\ant_fs\antfs.c	103;"	d	file:
ADDRESS_PARAMETER_OFFSET_3	components\libraries\ant_fs\antfs.c	104;"	d	file:
ANTFS_AUTH_TYPE_PAIRING	components\libraries\ant_fs\antfs.c	109;"	d	file:
ANTFS_AUTH_TYPE_PASSKEY	components\libraries\ant_fs\antfs.c	110;"	d	file:
ANTFS_AUTH_TYPE_PASSTHROUGH	components\libraries\ant_fs\antfs.c	111;"	d	file:
ANTFS_BEACON_ID	components\libraries\ant_fs\antfs.c	32;"	d	file:
ANTFS_CMD_AUTHENTICATE_ID	components\libraries\ant_fs\antfs.c	54;"	d	file:
ANTFS_CMD_DISCONNECT_ID	components\libraries\ant_fs\antfs.c	53;"	d	file:
ANTFS_CMD_DOWNLOAD_ID	components\libraries\ant_fs\antfs.c	56;"	d	file:
ANTFS_CMD_ERASE_ID	components\libraries\ant_fs\antfs.c	58;"	d	file:
ANTFS_CMD_LINK_ID	components\libraries\ant_fs\antfs.c	52;"	d	file:
ANTFS_CMD_NONE	components\libraries\ant_fs\antfs.c	51;"	d	file:
ANTFS_CMD_PING_ID	components\libraries\ant_fs\antfs.c	55;"	d	file:
ANTFS_CMD_UPLOAD_DATA_ID	components\libraries\ant_fs\antfs.c	59;"	d	file:
ANTFS_CMD_UPLOAD_REQUEST_ID	components\libraries\ant_fs\antfs.c	57;"	d	file:
ANTFS_COMMAND_ID	components\libraries\ant_fs\antfs.c	33;"	d	file:
ANTFS_COMMAND_OFFSET	components\libraries\ant_fs\antfs.c	26;"	d	file:
ANTFS_CONNECTION_TYPE_OFFSET	components\libraries\ant_fs\antfs.c	25;"	d	file:
ANTFS_CONTROL_OFFSET	components\libraries\ant_fs\antfs.c	29;"	d	file:
ANTFS_DATA_OFFSET	components\libraries\ant_fs\antfs.c	30;"	d	file:
ANTFS_EVENT_QUEUE_SIZE	components\libraries\ant_fs\antfs.c	127;"	d	file:
ANTFS_INCLUDE_UPLOAD	components\libraries\ant_fs\antfs.c	112;"	d	file:
ANTFS_NETWORK_KEY	components\libraries\ant_fs\antfs.c	23;"	d	file:
ANTFS_RESPONSE_OFFSET	components\libraries\ant_fs\antfs.c	27;"	d	file:
ANTFS_RSP_AUTHENTICATE_ID	components\libraries\ant_fs\antfs.c	62;"	d	file:
ANTFS_RSP_DOWNLOAD_ID	components\libraries\ant_fs\antfs.c	63;"	d	file:
ANTFS_RSP_ERASE_ID	components\libraries\ant_fs\antfs.c	65;"	d	file:
ANTFS_RSP_UPLOAD_DATA_ID	components\libraries\ant_fs\antfs.c	66;"	d	file:
ANTFS_RSP_UPLOAD_REQ_ID	components\libraries\ant_fs\antfs.c	64;"	d	file:
AUTHENTICATION_RETRIES	components\libraries\ant_fs\antfs.c	125;"	d	file:
AUTHENTICATION_TYPE	components\libraries\ant_fs\antfs.c	116;"	d	file:
AUTHENTICATION_TYPE	components\libraries\ant_fs\antfs.c	118;"	d	file:
AUTHENTICATION_TYPE	components\libraries\ant_fs\antfs.c	120;"	d	file:
AUTH_RESPONSE_ACCEPT	components\libraries\ant_fs\antfs.c	86;"	d	file:
AUTH_RESPONSE_N_A	components\libraries\ant_fs\antfs.c	85;"	d	file:
AUTH_RESPONSE_REJECT	components\libraries\ant_fs\antfs.c	87;"	d	file:
AUTH_STRING_LENGTH_OFFSET	components\libraries\ant_fs\antfs.c	90;"	d	file:
BUFFER_INDEX_CHANNEL_NUM	components\libraries\ant_fs\antfs.c	133;"	d	file:
BUFFER_INDEX_MESG_DATA	components\libraries\ant_fs\antfs.c	134;"	d	file:
BUFFER_INDEX_MESG_ID	components\libraries\ant_fs\antfs.c	132;"	d	file:
BUFFER_INDEX_MESG_SIZE	components\libraries\ant_fs\antfs.c	131;"	d	file:
BUFFER_INDEX_RESPONSE_CODE	components\libraries\ant_fs\antfs.c	135;"	d	file:
BURST_PACKET_SIZE	components\libraries\ant_fs\antfs.c	22;"	d	file:
COMMAND_TYPE_OFFSET	components\libraries\ant_fs\antfs.c	77;"	d	file:
COMMAND_TYPE_PROCEED	components\libraries\ant_fs\antfs.c	78;"	d	file:
COMMAND_TYPE_REQUEST_PAIR	components\libraries\ant_fs\antfs.c	80;"	d	file:
COMMAND_TYPE_REQUEST_PASSKEY	components\libraries\ant_fs\antfs.c	81;"	d	file:
COMMAND_TYPE_REQUEST_SERIAL	components\libraries\ant_fs\antfs.c	79;"	d	file:
DATA_INDEX_OFFSET_HIGH	components\libraries\ant_fs\antfs.c	99;"	d	file:
DATA_INDEX_OFFSET_LOW	components\libraries\ant_fs\antfs.c	98;"	d	file:
DEVICE_DESCRIPTOR_OFFSET_0	components\libraries\ant_fs\antfs.c	45;"	d	file:
DEVICE_DESCRIPTOR_OFFSET_1	components\libraries\ant_fs\antfs.c	46;"	d	file:
DEVICE_DESCRIPTOR_OFFSET_2	components\libraries\ant_fs\antfs.c	47;"	d	file:
DEVICE_DESCRIPTOR_OFFSET_3	components\libraries\ant_fs\antfs.c	48;"	d	file:
DEVICE_STATE_AUTHENTICATE	components\libraries\ant_fs\antfs.c	41;"	d	file:
DEVICE_STATE_BUSY	components\libraries\ant_fs\antfs.c	43;"	d	file:
DEVICE_STATE_LINK	components\libraries\ant_fs\antfs.c	40;"	d	file:
DEVICE_STATE_MASK	components\libraries\ant_fs\antfs.c	39;"	d	file:
DEVICE_STATE_SHIFT	components\libraries\ant_fs\antfs.c	38;"	d	file:
DEVICE_STATE_TRANSPORT	components\libraries\ant_fs\antfs.c	42;"	d	file:
HOST_ID_OFFSET_0	components\libraries\ant_fs\antfs.c	71;"	d	file:
HOST_ID_OFFSET_1	components\libraries\ant_fs\antfs.c	72;"	d	file:
HOST_ID_OFFSET_2	components\libraries\ant_fs\antfs.c	73;"	d	file:
HOST_ID_OFFSET_3	components\libraries\ant_fs\antfs.c	74;"	d	file:
INITIAL_REQUEST_OFFSET	components\libraries\ant_fs\antfs.c	97;"	d	file:
RESPONSE_TYPE_OFFSET	components\libraries\ant_fs\antfs.c	84;"	d	file:
SAVE_DISTANCE	components\libraries\ant_fs\antfs.c	128;"	d	file:
SERIAL_NUMBER_OFFSET_0	components\libraries\ant_fs\antfs.c	91;"	d	file:
SERIAL_NUMBER_OFFSET_1	components\libraries\ant_fs\antfs.c	92;"	d	file:
SERIAL_NUMBER_OFFSET_2	components\libraries\ant_fs\antfs.c	93;"	d	file:
SERIAL_NUMBER_OFFSET_3	components\libraries\ant_fs\antfs.c	94;"	d	file:
STATUS1_OFFSET	components\libraries\ant_fs\antfs.c	36;"	d	file:
STATUS2_OFFSET	components\libraries\ant_fs\antfs.c	37;"	d	file:
TRANSPORT_CHANNEL_FREQUENCY_OFFSET	components\libraries\ant_fs\antfs.c	69;"	d	file:
TRANSPORT_MESSAGE_PERIOD_OFFSET	components\libraries\ant_fs\antfs.c	70;"	d	file:
UPLOAD_CRC_OFFSET_HIGH	components\libraries\ant_fs\antfs.c	106;"	d	file:
UPLOAD_CRC_OFFSET_LOW	components\libraries\ant_fs\antfs.c	105;"	d	file:
antfs_channel_setup	components\libraries\ant_fs\antfs.c	/^void antfs_channel_setup(void)$/;"	f
antfs_download_req_resp_prepare	components\libraries\ant_fs\antfs.c	/^void antfs_download_req_resp_prepare(uint8_t response,$/;"	f
antfs_erase_req_resp_transmit	components\libraries\ant_fs\antfs.c	/^void antfs_erase_req_resp_transmit(uint8_t response)$/;"	f
antfs_event_extract	components\libraries\ant_fs\antfs.c	/^bool antfs_event_extract(antfs_event_return_t * const p_event)$/;"	f
antfs_event_queue_t	components\libraries\ant_fs\antfs.c	/^} antfs_event_queue_t;$/;"	t	typeref:struct:__anon358	file:
antfs_hostname_get	components\libraries\ant_fs\antfs.c	/^const char * antfs_hostname_get(void)$/;"	f
antfs_init	components\libraries\ant_fs\antfs.c	/^void antfs_init(const antfs_params_t * const p_params,$/;"	f
antfs_input_data_download	components\libraries\ant_fs\antfs.c	/^uint32_t antfs_input_data_download(uint16_t index,$/;"	f
antfs_message_process	components\libraries\ant_fs\antfs.c	/^void antfs_message_process(uint8_t * p_message)$/;"	f
antfs_pairing_resp_transmit	components\libraries\ant_fs\antfs.c	/^bool antfs_pairing_resp_transmit(bool accept)$/;"	f
antfs_states_t	components\libraries\ant_fs\antfs.c	/^} antfs_states_t;$/;"	t	typeref:struct:__anon357	file:
antfs_substate_t	components\libraries\ant_fs\antfs.c	/^} antfs_substate_t;$/;"	t	typeref:union:__anon356	file:
antfs_upload_data_resp_transmit	components\libraries\ant_fs\antfs.c	/^bool antfs_upload_data_resp_transmit(bool data_upload_success)$/;"	f
antfs_upload_req_resp_transmit	components\libraries\ant_fs\antfs.c	/^bool antfs_upload_req_resp_transmit(uint8_t response,$/;"	f
auth_sub_state	components\libraries\ant_fs\antfs.c	/^    antfs_authenticate_substate_t auth_sub_state;                         \/**< Sub-state (Authentication layer). *\/$/;"	m	union:__anon356	file:
authenticate_layer_cmd_decode	components\libraries\ant_fs\antfs.c	/^static void authenticate_layer_cmd_decode(uint8_t control_byte,$/;"	f	file:
authenticate_layer_transit	components\libraries\ant_fs\antfs.c	/^static void authenticate_layer_transit(void)$/;"	f	file:
authenticate_response_transmit	components\libraries\ant_fs\antfs.c	/^static void authenticate_response_transmit(uint8_t response_type,$/;"	f	file:
beacon_transmit	components\libraries\ant_fs\antfs.c	/^static void beacon_transmit(uint32_t message_type)$/;"	f	file:
channel_period_set	components\libraries\ant_fs\antfs.c	/^static void channel_period_set(uint32_t link_period)$/;"	f	file:
download_request_response_transmit	components\libraries\ant_fs\antfs.c	/^static void download_request_response_transmit(uint8_t response)$/;"	f	file:
event_queue_write	components\libraries\ant_fs\antfs.c	/^static void event_queue_write(antfs_event_t event_code)$/;"	f	file:
friendly_name	components\libraries\ant_fs\antfs.c	/^    char     friendly_name[ANTFS_FRIENDLY_NAME_MAX];                      \/**< Friendly Name. *\/$/;"	m	struct:__anon355	file:
friendly_name_size	components\libraries\ant_fs\antfs.c	/^    uint32_t friendly_name_size;                                          \/**< Friendly name size. *\/$/;"	m	struct:__anon355	file:
friendly_name_t	components\libraries\ant_fs\antfs.c	/^} friendly_name_t;$/;"	t	typeref:struct:__anon355	file:
head	components\libraries\ant_fs\antfs.c	/^    uint32_t head;                                                        \/**< ANT-FS event queue head index. *\/$/;"	m	struct:__anon358	file:
index	components\libraries\ant_fs\antfs.c	/^    uint32_t index;                                                       \/**< Current index (for reading the friendly name). *\/$/;"	m	struct:__anon355	file:
is_name_set	components\libraries\ant_fs\antfs.c	/^    bool     is_name_set;                                                 \/**< Is the name set. *\/$/;"	m	struct:__anon355	file:
link_layer_cmd_decode	components\libraries\ant_fs\antfs.c	/^static void link_layer_cmd_decode(const uint8_t * p_command_buffer)$/;"	f	file:
link_layer_transit	components\libraries\ant_fs\antfs.c	/^static void link_layer_transit(void)$/;"	f	file:
link_sub_state	components\libraries\ant_fs\antfs.c	/^    antfs_link_substate_t         link_sub_state;                         \/**< Sub-state (Link layer). *\/$/;"	m	union:__anon356	file:
m_active_beacon_frequency	components\libraries\ant_fs\antfs.c	/^static uint32_t                    m_active_beacon_frequency;             \/**< Active beacon frequency. *\/$/;"	v	file:
m_active_beacon_status1_field	components\libraries\ant_fs\antfs.c	/^static antfs_beacon_status_byte1_t m_active_beacon_status1_field;         \/**< Status 1 field in beacon. *\/$/;"	v	file:
m_authenticate_command_type	components\libraries\ant_fs\antfs.c	/^static uint32_t                    m_authenticate_command_type;           \/**< Authenticate command type in progress. *\/$/;"	v	file:
m_block_size	components\libraries\ant_fs\antfs.c	/^    static ulong_union_t m_block_size;                                    \/**< Number of bytes the client can receive in a single burst. *\/$/;"	v	file:
m_burst_wait	components\libraries\ant_fs\antfs.c	/^static volatile uint8_t            m_burst_wait;                          \/**< Polling status flag for data unlock on burst handler input. *\/$/;"	v	file:
m_burst_wait_handler	components\libraries\ant_fs\antfs.c	/^static antfs_burst_wait_handler_t m_burst_wait_handler = NULL;            \/**< Burst wait handler *\/$/;"	v	file:
m_bytes_remaining	components\libraries\ant_fs\antfs.c	/^static ulong_union_t   m_bytes_remaining;                                 \/**< Total remaining data length (bytes). *\/$/;"	v	file:
m_bytes_to_write	components\libraries\ant_fs\antfs.c	/^static uint32_t        m_bytes_to_write;                                  \/**< Number of bytes to write to file (upload). *\/$/;"	v	file:
m_compared_crc	components\libraries\ant_fs\antfs.c	/^static uint16_t m_compared_crc;                                           \/**< 16-bit CRC for all data packets in the block (provided by download request). *\/$/;"	v	file:
m_current_state	components\libraries\ant_fs\antfs.c	/^static antfs_states_t              m_current_state;                       \/**< Current state. *\/$/;"	v	file:
m_event_queue	components\libraries\ant_fs\antfs.c	/^static antfs_event_queue_t m_event_queue;                                 \/**< Event queue. *\/$/;"	v	file:
m_event_queue_buffer	components\libraries\ant_fs\antfs.c	/^static antfs_event_return_t m_event_queue_buffer[ANTFS_EVENT_QUEUE_SIZE]; \/**< Event queue storage. *\/$/;"	v	file:
m_file_index	components\libraries\ant_fs\antfs.c	/^static ushort_union_t  m_file_index;                                      \/**< File index of current upload\/download. *\/$/;"	v	file:
m_file_size	components\libraries\ant_fs\antfs.c	/^static ulong_union_t   m_file_size;                                       \/**< File size of current upload\/download (bytes). *\/$/;"	v	file:
m_friendly_name	components\libraries\ant_fs\antfs.c	/^static friendly_name_t             m_friendly_name;                       \/**< Host's friendly name. *\/$/;"	v	file:
m_initial_parameters	components\libraries\ant_fs\antfs.c	/^static antfs_params_t              m_initial_parameters;                  \/**< Initial parameters. *\/$/;"	v	file:
m_is_crc_pending	components\libraries\ant_fs\antfs.c	/^static bool            m_is_crc_pending;                                  \/**< CRC for data packets pending. *\/$/;"	v	file:
m_is_data_request_pending	components\libraries\ant_fs\antfs.c	/^static bool            m_is_data_request_pending;                         \/**< Requested data pending. *\/$/;"	v	file:
m_link_burst_index	components\libraries\ant_fs\antfs.c	/^static ulong_union_t   m_link_burst_index;                                \/**< Current location of Tx block (bytes). *\/$/;"	v	file:
m_link_command_in_progress	components\libraries\ant_fs\antfs.c	/^static uint32_t                    m_link_command_in_progress;            \/**< ANT-FS command in progress. *\/$/;"	v	file:
m_link_host_serial_number	components\libraries\ant_fs\antfs.c	/^static ulong_union_t               m_link_host_serial_number;             \/**< Host's serial number. *\/$/;"	v	file:
m_max_block_size	components\libraries\ant_fs\antfs.c	/^static ulong_union_t   m_max_block_size;                                  \/**< Maximum number of bytes expected to be downloaded in a single burst block of data (set by host). *\/$/;"	v	file:
m_max_transfer_index	components\libraries\ant_fs\antfs.c	/^static ulong_union_t   m_max_transfer_index;                              \/**< Upper limit of the current Tx burst block (bytes). *\/$/;"	v	file:
m_passkey_index	components\libraries\ant_fs\antfs.c	/^   static uint32_t m_passkey_index;                                       \/**< Current location of Tx block (auth string). *\/$/;"	v	file:
m_retry	components\libraries\ant_fs\antfs.c	/^static uint8_t                     m_retry;                               \/**< Retry counter *\/$/;"	v	file:
m_saved_buffer_crc	components\libraries\ant_fs\antfs.c	/^static uint16_t m_saved_buffer_crc;                                       \/**< 16-bit CRC saved at last CRC update (save point) for buffering the nRF *\/$/;"	v	file:
m_saved_buffer_crc_offset	components\libraries\ant_fs\antfs.c	/^static uint32_t m_saved_buffer_crc_offset;                                \/**< Data offset to track how much data has been buffered into nRF *\/$/;"	v	file:
m_saved_crc_offset	components\libraries\ant_fs\antfs.c	/^static uint32_t m_saved_crc_offset;                                       \/**< CRC data offset (bytes) saved at last CRC update (save point). *\/$/;"	v	file:
m_saved_transfer_crc	components\libraries\ant_fs\antfs.c	/^static uint16_t m_saved_transfer_crc;                                     \/**< 16-bit CRC saved at last CRC update (save point). *\/$/;"	v	file:
m_temp_crc_offset	components\libraries\ant_fs\antfs.c	/^static uint32_t m_temp_crc_offset;                                        \/**< Temporary CRC data offset used in CRC calculation. *\/$/;"	v	file:
m_timer_id	components\libraries\ant_fs\antfs.c	/^static app_timer_id_t              m_timer_id;                            \/**< Timer ID used with the timer module. *\/$/;"	v	file:
m_transfer_crc	components\libraries\ant_fs\antfs.c	/^static uint16_t m_transfer_crc;                                           \/**< 16-bit CRC for all data packets in the block (calculated by client). *\/$/;"	v	file:
mp_upload_data	components\libraries\ant_fs\antfs.c	/^static const uint8_t * mp_upload_data;                                    \/**< Address of begin of the buffer that holds data received from upload. *\/$/;"	v	file:
p_queue	components\libraries\ant_fs\antfs.c	/^    antfs_event_return_t * p_queue;                                       \/**< ANT-FS event queue. *\/$/;"	m	struct:__anon358	file:
state	components\libraries\ant_fs\antfs.c	/^    antfs_state_t    state;                                               \/**< ANT-FS state. *\/$/;"	m	struct:__anon357	file:
state_machine_reset	components\libraries\ant_fs\antfs.c	/^static void state_machine_reset(void)$/;"	f	file:
sub_state	components\libraries\ant_fs\antfs.c	/^    antfs_substate_t sub_state;                                           \/**< ANT-FS sub-state. *\/$/;"	m	struct:__anon357	file:
tail	components\libraries\ant_fs\antfs.c	/^    uint32_t tail;                                                        \/**< ANT-FS event queue tail index. *\/$/;"	m	struct:__anon358	file:
timeout_disable	components\libraries\ant_fs\antfs.c	/^static void timeout_disable(void)$/;"	f	file:
timeout_handle	components\libraries\ant_fs\antfs.c	/^static void timeout_handle(void * p_context)$/;"	f	file:
timeout_start	components\libraries\ant_fs\antfs.c	/^static void timeout_start(uint32_t timeout_in_secs)$/;"	f	file:
trans_sub_state	components\libraries\ant_fs\antfs.c	/^    antfs_transport_substate_t    trans_sub_state;                        \/**< Sub-state (Transport layer). *\/$/;"	m	union:__anon356	file:
transport_layer_cmd_decode	components\libraries\ant_fs\antfs.c	/^static void transport_layer_cmd_decode(uint8_t control_byte, const uint8_t * p_command_buffer)$/;"	f	file:
transport_layer_transit	components\libraries\ant_fs\antfs.c	/^static void transport_layer_transit(void)$/;"	f	file:
upload_data_process	components\libraries\ant_fs\antfs.c	/^static void upload_data_process(uint8_t control_byte, const uint8_t * p_buffer)$/;"	f	file:
wait_burst_request_to_complete	components\libraries\ant_fs\antfs.c	/^static void wait_burst_request_to_complete(void)$/;"	f	file:
ANTFS_AUTH_STRING_MAX	components\libraries\ant_fs\antfs.h	47;"	d
ANTFS_AUTH_SUBSTATE_ACCEPT	components\libraries\ant_fs\antfs.h	/^    ANTFS_AUTH_SUBSTATE_ACCEPT,                                 \/**< Authenticate accept state. *\/$/;"	e	enum:__anon363
ANTFS_AUTH_SUBSTATE_NONE	components\libraries\ant_fs\antfs.h	/^    ANTFS_AUTH_SUBSTATE_NONE,                                   \/**< None state. *\/$/;"	e	enum:__anon363
ANTFS_AUTH_SUBSTATE_PAIR	components\libraries\ant_fs\antfs.h	/^    ANTFS_AUTH_SUBSTATE_PAIR,                                   \/**< Pairing state. *\/$/;"	e	enum:__anon363
ANTFS_AUTH_SUBSTATE_PASSKEY	components\libraries\ant_fs\antfs.h	/^    ANTFS_AUTH_SUBSTATE_PASSKEY,                                \/**< Passkey state. *\/$/;"	e	enum:__anon363
ANTFS_AUTH_SUBSTATE_REJECT	components\libraries\ant_fs\antfs.h	/^    ANTFS_AUTH_SUBSTATE_REJECT                                  \/**< Authenticate reject state. *\/$/;"	e	enum:__anon363
ANTFS_BEACON_PERIOD_STATUS	components\libraries\ant_fs\antfs.h	44;"	d
ANTFS_BURST_BLOCK_SIZE	components\libraries\ant_fs\antfs.h	103;"	d
ANTFS_CHANNEL	components\libraries\ant_fs\antfs.h	37;"	d
ANTFS_CHANNEL_TYPE	components\libraries\ant_fs\antfs.h	43;"	d
ANTFS_CUSTOM_TRANSMIT_POWER	components\libraries\ant_fs\antfs.h	46;"	d
ANTFS_DEFAULT_BEACON	components\libraries\ant_fs\antfs.h	79;"	d
ANTFS_DEVICE_TYPE	components\libraries\ant_fs\antfs.h	42;"	d
ANTFS_DIR_APPEND_MASK	components\libraries\ant_fs\antfs.h	100;"	d
ANTFS_DIR_ARCHIVE_MASK	components\libraries\ant_fs\antfs.h	99;"	d
ANTFS_DIR_ERASE_MASK	components\libraries\ant_fs\antfs.h	98;"	d
ANTFS_DIR_READ_MASK	components\libraries\ant_fs\antfs.h	96;"	d
ANTFS_DIR_STRUCT_VERSION	components\libraries\ant_fs\antfs.h	32;"	d
ANTFS_DIR_WRITE_MASK	components\libraries\ant_fs\antfs.h	97;"	d
ANTFS_EVENT_AUTH	components\libraries\ant_fs\antfs.h	/^    ANTFS_EVENT_AUTH =                  0xB7,                   \/**< Enter authenticate layer event. *\/$/;"	e	enum:__anon365
ANTFS_EVENT_CLOSE_COMPLETE	components\libraries\ant_fs\antfs.h	/^    ANTFS_EVENT_CLOSE_COMPLETE =        0xB4,                   \/**< Channel closed event. *\/$/;"	e	enum:__anon365
ANTFS_EVENT_DOWNLOAD_COMPLETE	components\libraries\ant_fs\antfs.h	/^    ANTFS_EVENT_DOWNLOAD_COMPLETE =     0xBC,                   \/**< Download completed event. *\/$/;"	e	enum:__anon365
ANTFS_EVENT_DOWNLOAD_FAIL	components\libraries\ant_fs\antfs.h	/^    ANTFS_EVENT_DOWNLOAD_FAIL =         0xBD,                   \/**< Download failed event. *\/$/;"	e	enum:__anon365
ANTFS_EVENT_DOWNLOAD_REQUEST	components\libraries\ant_fs\antfs.h	/^    ANTFS_EVENT_DOWNLOAD_REQUEST =      0xB9,                   \/**< Download request event. *\/$/;"	e	enum:__anon365
ANTFS_EVENT_DOWNLOAD_REQUEST_DATA	components\libraries\ant_fs\antfs.h	/^    ANTFS_EVENT_DOWNLOAD_REQUEST_DATA = 0xBA,                   \/**< Download request data event. *\/$/;"	e	enum:__anon365
ANTFS_EVENT_DOWNLOAD_START	components\libraries\ant_fs\antfs.h	/^    ANTFS_EVENT_DOWNLOAD_START  =       0xBB,                   \/**< Download started event. *\/$/;"	e	enum:__anon365
ANTFS_EVENT_ERASE_REQUEST	components\libraries\ant_fs\antfs.h	/^    ANTFS_EVENT_ERASE_REQUEST =         0xC3                    \/**< Erase request event. *\/$/;"	e	enum:__anon365
ANTFS_EVENT_LINK	components\libraries\ant_fs\antfs.h	/^    ANTFS_EVENT_LINK =                  0xB6,                   \/**< Enter link layer event. *\/$/;"	e	enum:__anon365
ANTFS_EVENT_OPEN_COMPLETE	components\libraries\ant_fs\antfs.h	/^    ANTFS_EVENT_OPEN_COMPLETE =         0xB2,                   \/**< Channel setup complete event. *\/$/;"	e	enum:__anon365
ANTFS_EVENT_PAIRING_REQUEST	components\libraries\ant_fs\antfs.h	/^    ANTFS_EVENT_PAIRING_REQUEST =       0xB0,                   \/**< Pairing request event. *\/$/;"	e	enum:__anon365
ANTFS_EVENT_PAIRING_TIMEOUT	components\libraries\ant_fs\antfs.h	/^    ANTFS_EVENT_PAIRING_TIMEOUT =       0xB1,                   \/**< Pairing timeout event. *\/$/;"	e	enum:__anon365
ANTFS_EVENT_TRANS	components\libraries\ant_fs\antfs.h	/^    ANTFS_EVENT_TRANS =                 0xB8,                   \/**< Enter transport layer event. *\/$/;"	e	enum:__anon365
ANTFS_EVENT_UPLOAD_COMPLETE	components\libraries\ant_fs\antfs.h	/^    ANTFS_EVENT_UPLOAD_COMPLETE =       0xC1,                   \/**< Upload completed event. *\/$/;"	e	enum:__anon365
ANTFS_EVENT_UPLOAD_DATA	components\libraries\ant_fs\antfs.h	/^    ANTFS_EVENT_UPLOAD_DATA =           0xBF,                   \/**< Upload data available for read event. *\/$/;"	e	enum:__anon365
ANTFS_EVENT_UPLOAD_FAIL	components\libraries\ant_fs\antfs.h	/^    ANTFS_EVENT_UPLOAD_FAIL =           0xC2,                   \/**< Upload process failed event. *\/$/;"	e	enum:__anon365
ANTFS_EVENT_UPLOAD_REQUEST	components\libraries\ant_fs\antfs.h	/^    ANTFS_EVENT_UPLOAD_REQUEST =        0xBE,                   \/**< Upload request event. *\/$/;"	e	enum:__anon365
ANTFS_EVENT_UPLOAD_START	components\libraries\ant_fs\antfs.h	/^    ANTFS_EVENT_UPLOAD_START  =         0xC0,                   \/**< Upload begin event. *\/$/;"	e	enum:__anon365
ANTFS_FRIENDLY_NAME_MAX	components\libraries\ant_fs\antfs.h	49;"	d
ANTFS_H__	components\libraries\ant_fs\antfs.h	21;"	d
ANTFS_LINK_COMMAND_TIMEOUT	components\libraries\ant_fs\antfs.h	40;"	d
ANTFS_LINK_FREQ	components\libraries\ant_fs\antfs.h	38;"	d
ANTFS_LINK_SUBSTATE_NONE	components\libraries\ant_fs\antfs.h	/^    ANTFS_LINK_SUBSTATE_NONE                                    \/**< None state. *\/$/;"	e	enum:__anon362
ANTFS_MAX_FILE_SIZE	components\libraries\ant_fs\antfs.h	102;"	d
ANTFS_NETWORK_NUMBER	components\libraries\ant_fs\antfs.h	36;"	d
ANTFS_PAIRING_BIT	components\libraries\ant_fs\antfs.h	69;"	d
ANTFS_PAIRING_BIT	components\libraries\ant_fs\antfs.h	71;"	d
ANTFS_PAIRING_TIMEOUT	components\libraries\ant_fs\antfs.h	39;"	d
ANTFS_PASSKEY_SIZE	components\libraries\ant_fs\antfs.h	48;"	d
ANTFS_REMOTE_FRIENDLY_NAME_MAX	components\libraries\ant_fs\antfs.h	50;"	d
ANTFS_STATE_AUTH	components\libraries\ant_fs\antfs.h	/^    ANTFS_STATE_AUTH,                                           \/**< Authenticate state. *\/$/;"	e	enum:__anon361
ANTFS_STATE_INIT	components\libraries\ant_fs\antfs.h	/^    ANTFS_STATE_INIT,                                           \/**< Init state. *\/$/;"	e	enum:__anon361
ANTFS_STATE_LINK	components\libraries\ant_fs\antfs.h	/^    ANTFS_STATE_LINK,                                           \/**< Link state. *\/$/;"	e	enum:__anon361
ANTFS_STATE_OFF	components\libraries\ant_fs\antfs.h	/^    ANTFS_STATE_OFF,                                            \/**< Off state. *\/$/;"	e	enum:__anon361
ANTFS_STATE_TRANS	components\libraries\ant_fs\antfs.h	/^    ANTFS_STATE_TRANS                                           \/**< Transport state. *\/$/;"	e	enum:__anon361
ANTFS_TRANSMIT_POWER	components\libraries\ant_fs\antfs.h	45;"	d
ANTFS_TRANS_SUBSTATE_DOWNLOADING	components\libraries\ant_fs\antfs.h	/^    ANTFS_TRANS_SUBSTATE_DOWNLOADING,                           \/**< Downloading state. *\/$/;"	e	enum:__anon364
ANTFS_TRANS_SUBSTATE_NONE	components\libraries\ant_fs\antfs.h	/^    ANTFS_TRANS_SUBSTATE_NONE,                                  \/**< None state. *\/$/;"	e	enum:__anon364
ANTFS_TRANS_SUBSTATE_UPLOADING	components\libraries\ant_fs\antfs.h	/^    ANTFS_TRANS_SUBSTATE_UPLOADING,                             \/**< Ready \/ receiving upload data state. *\/$/;"	e	enum:__anon364
ANTFS_TRANS_SUBSTATE_UPLOAD_RESUME	components\libraries\ant_fs\antfs.h	/^    ANTFS_TRANS_SUBSTATE_UPLOAD_RESUME                          \/**< RX failure upon receiving upload data state. *\/$/;"	e	enum:__anon364
ANTFS_TRANS_SUBSTATE_UPLOAD_WAIT_FOR_DATA	components\libraries\ant_fs\antfs.h	/^    ANTFS_TRANS_SUBSTATE_UPLOAD_WAIT_FOR_DATA,                  \/**< Wait for upload data request state. *\/$/;"	e	enum:__anon364
ANTFS_TRANS_SUBSTATE_VERIFY_CRC	components\libraries\ant_fs\antfs.h	/^    ANTFS_TRANS_SUBSTATE_VERIFY_CRC,                            \/**< Verify CRC state. *\/$/;"	e	enum:__anon364
ANTFS_TRANS_TYPE	components\libraries\ant_fs\antfs.h	41;"	d
ANTFS_UPLOAD_BIT	components\libraries\ant_fs\antfs.h	74;"	d
ANTFS_UPLOAD_BIT	components\libraries\ant_fs\antfs.h	76;"	d
ANTFS_VERSION_DATE	components\libraries\ant_fs\antfs.h	33;"	d
ANTFS_VERSION_ITERATION	components\libraries\ant_fs\antfs.h	29;"	d
ANTFS_VERSION_MAJOR	components\libraries\ant_fs\antfs.h	27;"	d
ANTFS_VERSION_MINOR	components\libraries\ant_fs\antfs.h	28;"	d
ANTFS_VERSION_SPEC	components\libraries\ant_fs\antfs.h	31;"	d
ANTFS_VERSION_TYPE	components\libraries\ant_fs\antfs.h	30;"	d
BEACON_PERIOD_0_5_HZ	components\libraries\ant_fs\antfs.h	55;"	d
BEACON_PERIOD_1_HZ	components\libraries\ant_fs\antfs.h	56;"	d
BEACON_PERIOD_2_HZ	components\libraries\ant_fs\antfs.h	57;"	d
BEACON_PERIOD_4_HZ	components\libraries\ant_fs\antfs.h	58;"	d
BEACON_PERIOD_8_HZ	components\libraries\ant_fs\antfs.h	59;"	d
BEACON_PERIOD_MASK	components\libraries\ant_fs\antfs.h	54;"	d
BEACON_PERIOD_SHIFT	components\libraries\ant_fs\antfs.h	53;"	d
DATA_AVAILABLE_FLAG_MASK	components\libraries\ant_fs\antfs.h	65;"	d
DATA_AVAILABLE_FLAG_SHIFT	components\libraries\ant_fs\antfs.h	64;"	d
PAIRING_AVAILABLE_FLAG_MASK	components\libraries\ant_fs\antfs.h	61;"	d
PAIRING_AVAILABLE_FLAG_SHIFT	components\libraries\ant_fs\antfs.h	60;"	d
RESPONSE_INVALID_CRC	components\libraries\ant_fs\antfs.h	88;"	d
RESPONSE_INVALID_OPERATION	components\libraries\ant_fs\antfs.h	85;"	d
RESPONSE_MESSAGE_FAIL	components\libraries\ant_fs\antfs.h	93;"	d
RESPONSE_MESSAGE_NOT_AVAILABLE	components\libraries\ant_fs\antfs.h	84;"	d
RESPONSE_MESSAGE_NOT_ENOUGH_SPACE	components\libraries\ant_fs\antfs.h	90;"	d
RESPONSE_MESSAGE_NOT_EXIST	components\libraries\ant_fs\antfs.h	83;"	d
RESPONSE_MESSAGE_NOT_READY	components\libraries\ant_fs\antfs.h	87;"	d
RESPONSE_MESSAGE_OK	components\libraries\ant_fs\antfs.h	82;"	d
RESPONSE_MESSAGE_UPLOAD_NOT_READY	components\libraries\ant_fs\antfs.h	91;"	d
UPLOAD_ENABLED_FLAG_MASK	components\libraries\ant_fs\antfs.h	63;"	d
UPLOAD_ENABLED_FLAG_SHIFT	components\libraries\ant_fs\antfs.h	62;"	d
antfs_authenticate_substate_t	components\libraries\ant_fs\antfs.h	/^} antfs_authenticate_substate_t;$/;"	t	typeref:enum:__anon363
antfs_beacon_status_byte1_t	components\libraries\ant_fs\antfs.h	/^} antfs_beacon_status_byte1_t;$/;"	t	typeref:union:__anon359
antfs_burst_wait_handler_t	components\libraries\ant_fs\antfs.h	/^typedef void(*antfs_burst_wait_handler_t)(void);$/;"	t
antfs_dir_header_t	components\libraries\ant_fs\antfs.h	/^} antfs_dir_header_t;$/;"	t	typeref:struct:__anon368
antfs_dir_struct_t	components\libraries\ant_fs\antfs.h	/^} antfs_dir_struct_t;$/;"	t	typeref:struct:__anon369
antfs_event_return_t	components\libraries\ant_fs\antfs.h	/^} antfs_event_return_t;$/;"	t	typeref:struct:__anon366
antfs_event_t	components\libraries\ant_fs\antfs.h	/^} antfs_event_t;$/;"	t	typeref:enum:__anon365
antfs_link_substate_t	components\libraries\ant_fs\antfs.h	/^} antfs_link_substate_t;$/;"	t	typeref:enum:__anon362
antfs_params_t	components\libraries\ant_fs\antfs.h	/^} antfs_params_t;$/;"	t	typeref:struct:__anon367
antfs_request_info_t	components\libraries\ant_fs\antfs.h	/^} antfs_request_info_t;$/;"	t	typeref:struct:__anon370
antfs_state_t	components\libraries\ant_fs\antfs.h	/^} antfs_state_t;$/;"	t	typeref:enum:__anon361
antfs_transport_substate_t	components\libraries\ant_fs\antfs.h	/^} antfs_transport_substate_t;$/;"	t	typeref:enum:__anon364
beacon_device_manufacturing_id	components\libraries\ant_fs\antfs.h	/^    uint16_t                    beacon_device_manufacturing_id; \/**< Client manufacturing ID. *\/$/;"	m	struct:__anon367
beacon_device_type	components\libraries\ant_fs\antfs.h	/^    uint16_t                    beacon_device_type;             \/**< Client device type. *\/$/;"	m	struct:__anon367
beacon_frequency	components\libraries\ant_fs\antfs.h	/^    uint8_t                     beacon_frequency;               \/**< Beacon RF Frequency. *\/$/;"	m	struct:__anon367
beacon_status_byte1	components\libraries\ant_fs\antfs.h	/^    antfs_beacon_status_byte1_t beacon_status_byte1;            \/**< Beacon status byte 1. *\/$/;"	m	struct:__anon367
bytes	components\libraries\ant_fs\antfs.h	/^    uint32_t      bytes;                                        \/**< Number of bytes in block (download\/upload). *\/$/;"	m	struct:__anon366
client_serial_number	components\libraries\ant_fs\antfs.h	/^    uint32_t                    client_serial_number;           \/**< Client serial number. *\/$/;"	m	struct:__anon367
crc	components\libraries\ant_fs\antfs.h	/^    uint16_t      crc;                                          \/**< Current CRC (upload). *\/$/;"	m	struct:__anon366
data	components\libraries\ant_fs\antfs.h	/^    uint8_t       data[8];                                      \/**< Block of data (upload). *\/$/;"	m	struct:__anon366
data_file_index	components\libraries\ant_fs\antfs.h	/^    uint16_t data_file_index;                                   \/**< Data file index. *\/$/;"	m	struct:__anon369
date	components\libraries\ant_fs\antfs.h	/^    uint32_t date;                                              \/**< Number of seconds elapsed since 00:00 hrs Dec 31, 1980, if supported. *\/$/;"	m	struct:__anon369
date	components\libraries\ant_fs\antfs.h	/^    uint32_t date;                                              \/**< Number of seconds elapsed since 00:00 hrs Dec 31, 1989. If system time is unknown, used as counter. *\/$/;"	m	struct:__anon368
event	components\libraries\ant_fs\antfs.h	/^    antfs_event_t event;                                        \/**< ANT-FS event. *\/$/;"	m	struct:__anon366
file_crc	components\libraries\ant_fs\antfs.h	/^    uint16_t       file_crc;                                    \/**< CRC (uploads). *\/$/;"	m	struct:__anon370
file_data_type	components\libraries\ant_fs\antfs.h	/^    uint8_t  file_data_type;                                    \/**< File data type. *\/$/;"	m	struct:__anon369
file_index	components\libraries\ant_fs\antfs.h	/^    uint16_t      file_index;                                   \/**< File index (download\/upload\/erase). *\/$/;"	m	struct:__anon366
file_index	components\libraries\ant_fs\antfs.h	/^    ushort_union_t file_index;                                  \/**< File index. *\/$/;"	m	struct:__anon370
file_size	components\libraries\ant_fs\antfs.h	/^    ulong_union_t  file_size;                                   \/**< Size of a file to download when reading, or the size of a partially completed upload when writing. *\/$/;"	m	struct:__anon370
file_size_in_bytes	components\libraries\ant_fs\antfs.h	/^    uint32_t file_size_in_bytes;                                \/**< File size, in bytes. *\/$/;"	m	struct:__anon369
general_flags	components\libraries\ant_fs\antfs.h	/^    uint8_t  general_flags;                                     \/**< Bit mapped flags of flag permissions. *\/$/;"	m	struct:__anon369
is_data_available	components\libraries\ant_fs\antfs.h	/^        bool        is_data_available   : 1;                    \/**< Data is available for download \/ no data available. *\/$/;"	m	struct:__anon359::__anon360
is_pairing_enabled	components\libraries\ant_fs\antfs.h	/^        bool        is_pairing_enabled  : 1;                    \/**< Pairing is enabled\/disabled. *\/$/;"	m	struct:__anon359::__anon360
is_upload_enabled	components\libraries\ant_fs\antfs.h	/^        bool        is_upload_enabled   : 1;                    \/**< Upload is enabled\/disabled. *\/$/;"	m	struct:__anon359::__anon360
length	components\libraries\ant_fs\antfs.h	/^    uint8_t  length;                                            \/**< Length of each structure, in bytes. *\/$/;"	m	struct:__anon368
link_period	components\libraries\ant_fs\antfs.h	/^        uint32_t    link_period         : 3;                    \/**< Beacon period (0.5 - 8 Hz). *\/$/;"	m	struct:__anon359::__anon360
max_burst_block_size	components\libraries\ant_fs\antfs.h	/^    ulong_union_t  max_burst_block_size;                        \/**< Maximum burst block size. *\/$/;"	m	struct:__anon370
max_file_size	components\libraries\ant_fs\antfs.h	/^    uint32_t       max_file_size;                               \/**< The maximum size of the file specified, this is the file size when reading, and the maximum allowed file size when writing. *\/$/;"	m	struct:__anon370
offset	components\libraries\ant_fs\antfs.h	/^    uint32_t      offset;                                       \/**< Current offset (download\/upload). *\/$/;"	m	struct:__anon366
p_pass_key	components\libraries\ant_fs\antfs.h	/^    const uint8_t *             p_pass_key;                     \/**< Pass Key. *\/$/;"	m	struct:__anon367
p_remote_friendly_name	components\libraries\ant_fs\antfs.h	/^    const uint8_t *             p_remote_friendly_name;         \/**< Friendly Name. *\/$/;"	m	struct:__anon367
parameters	components\libraries\ant_fs\antfs.h	/^    } parameters;$/;"	m	union:__anon359	typeref:struct:__anon359::__anon360
reserved	components\libraries\ant_fs\antfs.h	/^        bool        reserved            : 2;                    \/**< Reserved. *\/$/;"	m	struct:__anon359::__anon360
reserved01	components\libraries\ant_fs\antfs.h	/^    uint8_t  reserved01;$/;"	m	struct:__anon368
reserved02	components\libraries\ant_fs\antfs.h	/^    uint8_t  reserved02;$/;"	m	struct:__anon368
reserved03	components\libraries\ant_fs\antfs.h	/^    uint8_t  reserved03;$/;"	m	struct:__anon368
reserved04	components\libraries\ant_fs\antfs.h	/^    uint8_t  reserved04;$/;"	m	struct:__anon368
reserved05	components\libraries\ant_fs\antfs.h	/^    uint8_t  reserved05;$/;"	m	struct:__anon368
status	components\libraries\ant_fs\antfs.h	/^    uint32_t        status;                                     \/**< Beacon status byte 1. *\/$/;"	m	union:__anon359
system_time	components\libraries\ant_fs\antfs.h	/^    uint32_t system_time;                                       \/**< Number of seconds elapsed since system power up. *\/$/;"	m	struct:__anon368
time_format	components\libraries\ant_fs\antfs.h	/^    uint8_t  time_format;                                       \/**< Defines how system keeps track of date\/time stamps. *\/$/;"	m	struct:__anon368
user_defined1	components\libraries\ant_fs\antfs.h	/^    uint8_t  user_defined1;                                     \/**< Identifier, first byte (structure defined by data type). *\/$/;"	m	struct:__anon369
user_defined2	components\libraries\ant_fs\antfs.h	/^    uint16_t user_defined2;                                     \/**< Identifier, last two bytes (structure defined by data type). *\/$/;"	m	struct:__anon369
user_flags	components\libraries\ant_fs\antfs.h	/^    uint8_t  user_flags;                                        \/**< File data type specific flags (bits defined by data type). *\/$/;"	m	struct:__anon369
version	components\libraries\ant_fs\antfs.h	/^    uint8_t  version;                                           \/**< Version of the directory file structure. *\/$/;"	m	struct:__anon368
crc16_get	components\libraries\ant_fs\crc.c	/^static __INLINE uint16_t crc16_get(uint16_t current_crc, uint8_t byte)$/;"	f	file:
crc_crc16_update	components\libraries\ant_fs\crc.c	/^uint16_t crc_crc16_update(uint16_t current_crc, const volatile void * p_data, uint32_t size)$/;"	f
CRC_H__	components\libraries\ant_fs\crc.h	20;"	d
APP_TIMER_PRESCALER	components\libraries\ant_fs\defines.h	54;"	d
DEFINES_H__	components\libraries\ant_fs\defines.h	20;"	d
MAX_ULONG	components\libraries\ant_fs\defines.h	24;"	d
byte0	components\libraries\ant_fs\defines.h	/^        uint8_t byte0;                        \/**< Byte 0 of the data content. *\/$/;"	m	struct:__anon373::__anon374
byte1	components\libraries\ant_fs\defines.h	/^        uint8_t byte1;                        \/**< Byte 1 of the data content. *\/$/;"	m	struct:__anon373::__anon374
byte2	components\libraries\ant_fs\defines.h	/^        uint8_t byte2;                        \/**< Byte 2 of the data content. *\/$/;"	m	struct:__anon373::__anon374
byte3	components\libraries\ant_fs\defines.h	/^        uint8_t byte3;                        \/**< Byte 3 of the data content. *\/$/;"	m	struct:__anon373::__anon374
bytes	components\libraries\ant_fs\defines.h	/^    } bytes;$/;"	m	union:__anon371	typeref:struct:__anon371::__anon372
bytes	components\libraries\ant_fs\defines.h	/^    } bytes;$/;"	m	union:__anon373	typeref:struct:__anon373::__anon374
data	components\libraries\ant_fs\defines.h	/^    uint16_t data;                            \/**< The data content. *\/$/;"	m	union:__anon371
data	components\libraries\ant_fs\defines.h	/^    uint32_t data;                            \/**< The data content as a single variable. *\/$/;"	m	union:__anon373
data_bytes	components\libraries\ant_fs\defines.h	/^    uint8_t  data_bytes[sizeof(uint32_t)];    \/**< The data content as a byte array. *\/$/;"	m	union:__anon373
high	components\libraries\ant_fs\defines.h	/^        uint8_t high;                         \/**< The high byte of the data content. *\/$/;"	m	struct:__anon371::__anon372
low	components\libraries\ant_fs\defines.h	/^        uint8_t low;                          \/**< The low byte of the data content. *\/$/;"	m	struct:__anon371::__anon372
ulong_union_t	components\libraries\ant_fs\defines.h	/^} ulong_union_t;$/;"	t	typeref:union:__anon373
ushort_union_t	components\libraries\ant_fs\defines.h	/^} ushort_union_t;$/;"	t	typeref:union:__anon371
MEM_POOL_INTERNAL_H__	components\libraries\bootloader_dfu\ble_transport\hci_mem_pool_internal.h	23;"	d
RX_BUF_QUEUE_SIZE	components\libraries\bootloader_dfu\ble_transport\hci_mem_pool_internal.h	28;"	d
RX_BUF_SIZE	components\libraries\bootloader_dfu\ble_transport\hci_mem_pool_internal.h	26;"	d
TX_BUF_SIZE	components\libraries\bootloader_dfu\ble_transport\hci_mem_pool_internal.h	25;"	d
BOOTLOADER_COMPLETE	components\libraries\bootloader_dfu\bootloader.c	/^    BOOTLOADER_COMPLETE,                                \/**< Bootloader status for indicating that all operations for the update procedure has completed and it is safe to reset the system. *\/$/;"	e	enum:__anon375	file:
BOOTLOADER_RESET	components\libraries\bootloader_dfu\bootloader.c	/^    BOOTLOADER_RESET,                                   \/**< Bootloader status field for indicating that a reset has been requested and current update process should be aborted. *\/$/;"	e	enum:__anon375	file:
BOOTLOADER_SETTINGS_SAVING	components\libraries\bootloader_dfu\bootloader.c	/^    BOOTLOADER_SETTINGS_SAVING,                         \/**< Bootloader status for indicating that saving of bootloader settings is in progress. *\/$/;"	e	enum:__anon375	file:
BOOTLOADER_TIMEOUT	components\libraries\bootloader_dfu\bootloader.c	/^    BOOTLOADER_TIMEOUT,                                 \/**< Bootloader status field for indicating that a timeout has occured and current update process should be aborted. *\/$/;"	e	enum:__anon375	file:
BOOTLOADER_UPDATING	components\libraries\bootloader_dfu\bootloader.c	/^    BOOTLOADER_UPDATING,                                \/**< Bootloader status for indicating that an update is in progress. *\/$/;"	e	enum:__anon375	file:
IRQ_ENABLED	components\libraries\bootloader_dfu\bootloader.c	29;"	d	file:
MAX_NUMBER_INTERRUPTS	components\libraries\bootloader_dfu\bootloader.c	30;"	d	file:
bootloader_app_is_valid	components\libraries\bootloader_dfu\bootloader.c	/^bool bootloader_app_is_valid(uint32_t app_addr)$/;"	f
bootloader_app_start	components\libraries\bootloader_dfu\bootloader.c	/^void bootloader_app_start(uint32_t app_addr)$/;"	f
bootloader_dfu_sd_in_progress	components\libraries\bootloader_dfu\bootloader.c	/^bool bootloader_dfu_sd_in_progress(void)$/;"	f
bootloader_dfu_sd_update_continue	components\libraries\bootloader_dfu\bootloader.c	/^uint32_t bootloader_dfu_sd_update_continue(void)$/;"	f
bootloader_dfu_sd_update_finalize	components\libraries\bootloader_dfu\bootloader.c	/^uint32_t bootloader_dfu_sd_update_finalize(void)$/;"	f
bootloader_dfu_start	components\libraries\bootloader_dfu\bootloader.c	/^uint32_t bootloader_dfu_start(void)$/;"	f
bootloader_dfu_update_process	components\libraries\bootloader_dfu\bootloader.c	/^void bootloader_dfu_update_process(dfu_update_status_t update_status)$/;"	f
bootloader_init	components\libraries\bootloader_dfu\bootloader.c	/^uint32_t bootloader_init(void)$/;"	f
bootloader_settings_get	components\libraries\bootloader_dfu\bootloader.c	/^void bootloader_settings_get(bootloader_settings_t * const p_settings)$/;"	f
bootloader_settings_save	components\libraries\bootloader_dfu\bootloader.c	/^static void bootloader_settings_save(bootloader_settings_t * p_settings)$/;"	f	file:
bootloader_status_t	components\libraries\bootloader_dfu\bootloader.c	/^} bootloader_status_t;$/;"	t	typeref:enum:__anon375	file:
interrupts_disable	components\libraries\bootloader_dfu\bootloader.c	/^static void interrupts_disable(void)$/;"	f	file:
m_bootsettings_handle	components\libraries\bootloader_dfu\bootloader.c	/^static pstorage_handle_t        m_bootsettings_handle;  \/**< Pstorage handle to use for registration and identifying the bootloader module on subsequent calls to the pstorage module for load and store of bootloader setting in flash. *\/$/;"	v	file:
m_update_status	components\libraries\bootloader_dfu\bootloader.c	/^static bootloader_status_t      m_update_status;        \/**< Current update status for the bootloader module to ensure correct behaviour when updating settings and when update completes. *\/$/;"	v	file:
pstorage_callback_handler	components\libraries\bootloader_dfu\bootloader.c	/^static void pstorage_callback_handler(pstorage_handle_t * p_handle,$/;"	f	file:
wait_for_events	components\libraries\bootloader_dfu\bootloader.c	/^static void wait_for_events(void)$/;"	f	file:
BOOTLOADER_H__	components\libraries\bootloader_dfu\bootloader.h	22;"	d
BOOTLOADER_SETTINGS_H__	components\libraries\bootloader_dfu\bootloader_settings.h	22;"	d
bootloader_util_settings_get	components\libraries\bootloader_dfu\bootloader_settings_arm.c	/^void bootloader_util_settings_get(const bootloader_settings_t ** pp_bootloader_settings)$/;"	f
m_boot_settings	components\libraries\bootloader_dfu\bootloader_settings_arm.c	/^uint8_t  m_boot_settings[CODE_PAGE_SIZE] __attribute__((at(BOOTLOADER_SETTINGS_ADDRESS))) __attribute__((used));          \/**< This variable reserves a codepage for bootloader specific settings, to ensure the compiler doesn't locate any code or variables at his location. *\/$/;"	v
m_uicr_bootloader_start_address	components\libraries\bootloader_dfu\bootloader_settings_arm.c	/^uint32_t m_uicr_bootloader_start_address __attribute__((at(NRF_UICR_BOOT_START_ADDRESS))) = BOOTLOADER_REGION_START;      \/**< This variable ensures that the linker script will write the bootloader start address to the UICR register. This value will be written in the HEX file and thus written to UICR when the bootloader is flashed into the chip. *\/$/;"	v
BANK_ERASED	components\libraries\bootloader_dfu\bootloader_types.h	/^    BANK_ERASED      = 0xFE,$/;"	e	enum:__anon376
BANK_INVALID_APP	components\libraries\bootloader_dfu\bootloader_types.h	/^    BANK_INVALID_APP = 0xFF,$/;"	e	enum:__anon376
BANK_VALID_APP	components\libraries\bootloader_dfu\bootloader_types.h	/^    BANK_VALID_APP   = 0x01,$/;"	e	enum:__anon376
BANK_VALID_BOOT	components\libraries\bootloader_dfu\bootloader_types.h	/^    BANK_VALID_BOOT  = 0xAA,$/;"	e	enum:__anon376
BANK_VALID_SD	components\libraries\bootloader_dfu\bootloader_types.h	/^    BANK_VALID_SD    = 0xA5,$/;"	e	enum:__anon376
BOOTLOADER_DFU_START	components\libraries\bootloader_dfu\bootloader_types.h	28;"	d
BOOTLOADER_SVC_APP_DATA_PTR_GET	components\libraries\bootloader_dfu\bootloader_types.h	30;"	d
BOOTLOADER_TYPES_H__	components\libraries\bootloader_dfu\bootloader_types.h	24;"	d
app_image_size	components\libraries\bootloader_dfu\bootloader_types.h	/^    uint32_t               app_image_size;  \/**< Size of Application image in bank0 if bank_0 code is BANK_VALID_SD. *\/$/;"	m	struct:__anon377
bank_0	components\libraries\bootloader_dfu\bootloader_types.h	/^    bootloader_bank_code_t bank_0;          \/**< Variable to store if bank 0 contains a valid application. *\/$/;"	m	struct:__anon377
bank_0_crc	components\libraries\bootloader_dfu\bootloader_types.h	/^    uint16_t               bank_0_crc;      \/**< If bank is valid, this field will contain a valid CRC of the total image. *\/$/;"	m	struct:__anon377
bank_0_size	components\libraries\bootloader_dfu\bootloader_types.h	/^    uint32_t               bank_0_size;     \/**< Size of active image in bank0 if present, otherwise 0. *\/$/;"	m	struct:__anon377
bank_1	components\libraries\bootloader_dfu\bootloader_types.h	/^    bootloader_bank_code_t bank_1;          \/**< Variable to store if bank 1 has been erased\/prepared for new image. Bank 1 is only used in Banked Update scenario. *\/$/;"	m	struct:__anon377
bl_image_size	components\libraries\bootloader_dfu\bootloader_types.h	/^    uint32_t               bl_image_size;   \/**< Size of Bootloader image in bank0 if bank_0 code is BANK_VALID_SD. *\/$/;"	m	struct:__anon377
bootloader_bank_code_t	components\libraries\bootloader_dfu\bootloader_types.h	/^} bootloader_bank_code_t;$/;"	t	typeref:enum:__anon376
bootloader_settings_t	components\libraries\bootloader_dfu\bootloader_types.h	/^} bootloader_settings_t;$/;"	t	typeref:struct:__anon377
sd_image_size	components\libraries\bootloader_dfu\bootloader_types.h	/^    uint32_t               sd_image_size;   \/**< Size of SoftDevice image in bank0 if bank_0 code is BANK_VALID_SD. *\/$/;"	m	struct:__anon377
sd_image_start	components\libraries\bootloader_dfu\bootloader_types.h	/^    uint32_t               sd_image_start;  \/**< Location in flash where SoftDevice image is stored for SoftDevice update. *\/$/;"	m	struct:__anon377
BOOTLOADER_UTIL_H__	components\libraries\bootloader_dfu\bootloader_util.h	22;"	d
bootloader_util_app_start	components\libraries\bootloader_dfu\bootloader_util_arm.c	/^void bootloader_util_app_start(uint32_t start_addr)$/;"	f
bootloader_util_reset	components\libraries\bootloader_dfu\bootloader_util_arm.c	/^__asm static void bootloader_util_reset(uint32_t start_addr)$/;"	f	file:
StartApplication	components\libraries\bootloader_dfu\bootloader_util_gcc.c	/^static inline void StartApplication(uint32_t start_addr)$/;"	f	file:
bootloader_util_app_start	components\libraries\bootloader_dfu\bootloader_util_gcc.c	/^void bootloader_util_app_start(uint32_t start_addr)$/;"	f
bootloader_util_settings_get	components\libraries\bootloader_dfu\bootloader_util_gcc.c	/^void bootloader_util_settings_get(const bootloader_settings_t ** pp_bootloader_settings)$/;"	f
m_boot_settings	components\libraries\bootloader_dfu\bootloader_util_gcc.c	/^__attribute__ ((section(".bootloaderSettings"))) uint8_t m_boot_settings[1024] ;$/;"	v
m_uicr_bootloader_start_address	components\libraries\bootloader_dfu\bootloader_util_gcc.c	/^__attribute__ ((section(".uicrBootStartAddress"))) uint32_t m_uicr_bootloader_start_address = BOOTLOADER_REGION_START;$/;"	v
mp_bootloader_settings	components\libraries\bootloader_dfu\bootloader_util_gcc.c	/^const bootloader_settings_t const * const mp_bootloader_settings = (bootloader_settings_t *) &m_boot_settings[0];   \/**< Read only pointer to bootloader settings in flash. *\/$/;"	v
DFU_H__	components\libraries\bootloader_dfu\dfu.h	22;"	d
dfu_callback_t	components\libraries\bootloader_dfu\dfu.h	/^typedef void (*dfu_callback_t)(uint32_t packet, uint32_t  result, uint8_t * p_data);$/;"	t
IRQ_ENABLED	components\libraries\bootloader_dfu\dfu_app_handler.c	25;"	d	file:
MAX_NUMBER_INTERRUPTS	components\libraries\bootloader_dfu\dfu_app_handler.c	26;"	d	file:
bootloader_start	components\libraries\bootloader_dfu\dfu_app_handler.c	/^static void bootloader_start(uint16_t conn_handle)$/;"	f	file:
dfu_app_dm_appl_instance_set	components\libraries\bootloader_dfu\dfu_app_handler.c	/^void dfu_app_dm_appl_instance_set(dm_application_instance_t app_instance)$/;"	f
dfu_app_on_dfu_evt	components\libraries\bootloader_dfu\dfu_app_handler.c	/^void dfu_app_on_dfu_evt(ble_dfu_t * p_dfu, ble_dfu_evt_t * p_evt)$/;"	f
dfu_app_peer_data_set	components\libraries\bootloader_dfu\dfu_app_handler.c	/^static void dfu_app_peer_data_set(uint16_t conn_handle)$/;"	f	file:
dfu_app_reset_prepare	components\libraries\bootloader_dfu\dfu_app_handler.c	/^static void dfu_app_reset_prepare(void)$/;"	f	file:
dfu_app_reset_prepare_set	components\libraries\bootloader_dfu\dfu_app_handler.c	/^void dfu_app_reset_prepare_set(dfu_app_reset_prepare_t reset_prepare_func)$/;"	f
interrupts_disable	components\libraries\bootloader_dfu\dfu_app_handler.c	/^static void interrupts_disable(void)$/;"	f	file:
m_dm_handle	components\libraries\bootloader_dfu\dfu_app_handler.c	/^static dm_handle_t             m_dm_handle;                             \/**< Device Manager handle with instance IDs of current BLE connection. *\/$/;"	v	file:
m_peer_data	components\libraries\bootloader_dfu\dfu_app_handler.c	/^static dfu_ble_peer_data_t     m_peer_data;                             \/**< Peer data to be used for data exchange when resetting into DFU mode. *\/$/;"	v	file:
m_reset_prepare	components\libraries\bootloader_dfu\dfu_app_handler.c	/^static dfu_app_reset_prepare_t m_reset_prepare = dfu_app_reset_prepare; \/**< Callback function to application to prepare for system reset. Allows application to clean up service and memory before reset. *\/$/;"	v	file:
DFU_APP_ATT_TABLE_CHANGED	components\libraries\bootloader_dfu\dfu_app_handler.h	43;"	d
DFU_APP_ATT_TABLE_POS	components\libraries\bootloader_dfu\dfu_app_handler.h	42;"	d
DFU_APP_HANDLER_H__	components\libraries\bootloader_dfu\dfu_app_handler.h	35;"	d
dfu_app_reset_prepare_t	components\libraries\bootloader_dfu\dfu_app_handler.h	/^typedef void (*dfu_app_reset_prepare_t)(void);$/;"	t
APP_TIMER_PRESCALER	components\libraries\bootloader_dfu\dfu_bank_internal.h	43;"	d
DFU_BANK_INTERNAL_H__	components\libraries\bootloader_dfu\dfu_bank_internal.h	26;"	d
DFU_STATE_IDLE	components\libraries\bootloader_dfu\dfu_bank_internal.h	/^    DFU_STATE_IDLE,                                                                 \/**< State for: idle. *\/$/;"	e	enum:__anon378
DFU_STATE_INIT_ERROR	components\libraries\bootloader_dfu\dfu_bank_internal.h	/^    DFU_STATE_INIT_ERROR,                                                           \/**< State for: dfu_init(...) error. *\/$/;"	e	enum:__anon378
DFU_STATE_PREPARING	components\libraries\bootloader_dfu\dfu_bank_internal.h	/^    DFU_STATE_PREPARING,                                                            \/**< State for: preparing, indicates that the flash is being erased and no data packets can be processed. *\/$/;"	e	enum:__anon378
DFU_STATE_RDY	components\libraries\bootloader_dfu\dfu_bank_internal.h	/^    DFU_STATE_RDY,                                                                  \/**< State for: ready. *\/$/;"	e	enum:__anon378
DFU_STATE_RX_DATA_PKT	components\libraries\bootloader_dfu\dfu_bank_internal.h	/^    DFU_STATE_RX_DATA_PKT,                                                          \/**< State for: receiving data packet. *\/$/;"	e	enum:__anon378
DFU_STATE_RX_INIT_PKT	components\libraries\bootloader_dfu\dfu_bank_internal.h	/^    DFU_STATE_RX_INIT_PKT,                                                          \/**< State for: receiving initialization packet. *\/$/;"	e	enum:__anon378
DFU_STATE_VALIDATE	components\libraries\bootloader_dfu\dfu_bank_internal.h	/^    DFU_STATE_VALIDATE,                                                             \/**< State for: validate. *\/$/;"	e	enum:__anon378
DFU_STATE_WAIT_4_ACTIVATE	components\libraries\bootloader_dfu\dfu_bank_internal.h	/^    DFU_STATE_WAIT_4_ACTIVATE                                                       \/**< State for: waiting for dfu_image_activate(). *\/$/;"	e	enum:__anon378
DFU_TIMEOUT_INTERVAL	components\libraries\bootloader_dfu\dfu_bank_internal.h	44;"	d
IMAGE_WRITE_IN_PROGRESS	components\libraries\bootloader_dfu\dfu_bank_internal.h	49;"	d
IS_UPDATING_APP	components\libraries\bootloader_dfu\dfu_bank_internal.h	48;"	d
IS_UPDATING_BL	components\libraries\bootloader_dfu\dfu_bank_internal.h	47;"	d
IS_UPDATING_SD	components\libraries\bootloader_dfu\dfu_bank_internal.h	46;"	d
IS_WORD_SIZED	components\libraries\bootloader_dfu\dfu_bank_internal.h	50;"	d
activate	components\libraries\bootloader_dfu\dfu_bank_internal.h	/^    dfu_bank_activate_t activate;                                                   \/**< Function pointer to the activate function called on finalizing the update procedure. *\/$/;"	m	struct:__anon379
cleared	components\libraries\bootloader_dfu\dfu_bank_internal.h	/^    dfu_bank_cleared_t  cleared;                                                    \/**< Function pointer to the cleared function called after prepare function completes. *\/$/;"	m	struct:__anon379
dfu_bank_activate_t	components\libraries\bootloader_dfu\dfu_bank_internal.h	/^typedef uint32_t (*dfu_bank_activate_t)(void);$/;"	t
dfu_bank_cleared_t	components\libraries\bootloader_dfu\dfu_bank_internal.h	/^typedef void (*dfu_bank_cleared_t)(void);$/;"	t
dfu_bank_func_t	components\libraries\bootloader_dfu\dfu_bank_internal.h	/^} dfu_bank_func_t;$/;"	t	typeref:struct:__anon379
dfu_bank_prepare_t	components\libraries\bootloader_dfu\dfu_bank_internal.h	/^typedef void (*dfu_bank_prepare_t)(uint32_t image_size);$/;"	t
dfu_state_t	components\libraries\bootloader_dfu\dfu_bank_internal.h	/^} dfu_state_t;$/;"	t	typeref:enum:__anon378
m_data_received	components\libraries\bootloader_dfu\dfu_bank_internal.h	/^static uint32_t                     m_data_received;                                \/**< Amount of received data. *\/$/;"	v
prepare	components\libraries\bootloader_dfu\dfu_bank_internal.h	/^    dfu_bank_prepare_t  prepare;                                                    \/**< Function pointer to the prepare function called on start of update procedure. *\/$/;"	m	struct:__anon379
BOOTLOADER_SVCS	components\libraries\bootloader_dfu\dfu_ble_svc.h	/^enum BOOTLOADER_SVCS$/;"	g
BOOTLOADER_SVC_BASE	components\libraries\bootloader_dfu\dfu_ble_svc.h	43;"	d
BOOTLOADER_SVC_LAST	components\libraries\bootloader_dfu\dfu_ble_svc.h	/^    BOOTLOADER_SVC_LAST$/;"	e	enum:BOOTLOADER_SVCS
DFU_BLE_SVC_H__	components\libraries\bootloader_dfu\dfu_ble_svc.h	34;"	d
DFU_BLE_SVC_SET_PEER_DATA	components\libraries\bootloader_dfu\dfu_ble_svc.h	/^    DFU_BLE_SVC_SET_PEER_DATA = BOOTLOADER_SVC_BASE,    \/**< SVC number for the setting of peer data call. *\/$/;"	e	enum:BOOTLOADER_SVCS
SYSTEM_SERVICE_ATT_SIZE	components\libraries\bootloader_dfu\dfu_ble_svc.h	44;"	d
addr	components\libraries\bootloader_dfu\dfu_ble_svc.h	/^    ble_gap_addr_t      addr;                                   \/**< BLE GAP address of the device that initiated the DFU process. *\/$/;"	m	struct:__anon380
dfu_ble_peer_data_t	components\libraries\bootloader_dfu\dfu_ble_svc.h	/^} dfu_ble_peer_data_t;$/;"	t	typeref:struct:__anon380
enc_key	components\libraries\bootloader_dfu\dfu_ble_svc.h	/^    ble_gap_enc_key_t   enc_key;                                \/**< Encryption key structure containing encrypted diversifier and LTK for re-establishing the bond. *\/$/;"	m	struct:__anon380
irk	components\libraries\bootloader_dfu\dfu_ble_svc.h	/^    ble_gap_irk_t       irk;                                    \/**< IRK of the device that initiated the DFU process if this device uses Private Resolvable Addresses. *\/$/;"	m	struct:__anon380
sys_serv_attr	components\libraries\bootloader_dfu\dfu_ble_svc.h	/^    uint8_t             sys_serv_attr[SYSTEM_SERVICE_ATT_SIZE]; \/**< System service attributes for restoring of Service Changed Indication setting in DFU mode. *\/$/;"	m	struct:__anon380
DFU_BLE_SVC_INTERNAL_H__	components\libraries\bootloader_dfu\dfu_ble_svc_internal.h	25;"	d
dfu_activate_app	components\libraries\bootloader_dfu\dfu_dual_bank.c	/^static uint32_t dfu_activate_app(void)$/;"	f	file:
dfu_activate_bl	components\libraries\bootloader_dfu\dfu_dual_bank.c	/^static uint32_t dfu_activate_bl(void)$/;"	f	file:
dfu_activate_sd	components\libraries\bootloader_dfu\dfu_dual_bank.c	/^static uint32_t dfu_activate_sd(void)$/;"	f	file:
dfu_bl_image_swap	components\libraries\bootloader_dfu\dfu_dual_bank.c	/^uint32_t dfu_bl_image_swap(void)$/;"	f
dfu_bl_image_validate	components\libraries\bootloader_dfu\dfu_dual_bank.c	/^uint32_t dfu_bl_image_validate(void)$/;"	f
dfu_cleared_func_app	components\libraries\bootloader_dfu\dfu_dual_bank.c	/^static void dfu_cleared_func_app(void)$/;"	f	file:
dfu_cleared_func_swap	components\libraries\bootloader_dfu\dfu_dual_bank.c	/^static void dfu_cleared_func_swap(void)$/;"	f	file:
dfu_compare_block	components\libraries\bootloader_dfu\dfu_dual_bank.c	/^static uint32_t dfu_compare_block(uint32_t * ptr1, uint32_t * ptr2, uint32_t len)$/;"	f	file:
dfu_copy_sd	components\libraries\bootloader_dfu\dfu_dual_bank.c	/^static uint32_t dfu_copy_sd(uint32_t * src, uint32_t * dst, uint32_t len)$/;"	f	file:
dfu_data_pkt_handle	components\libraries\bootloader_dfu\dfu_dual_bank.c	/^uint32_t dfu_data_pkt_handle(dfu_update_packet_t * p_packet)$/;"	f
dfu_image_activate	components\libraries\bootloader_dfu\dfu_dual_bank.c	/^uint32_t dfu_image_activate()$/;"	f
dfu_image_validate	components\libraries\bootloader_dfu\dfu_dual_bank.c	/^uint32_t dfu_image_validate()$/;"	f
dfu_init	components\libraries\bootloader_dfu\dfu_dual_bank.c	/^uint32_t dfu_init(void)$/;"	f
dfu_init_pkt_complete	components\libraries\bootloader_dfu\dfu_dual_bank.c	/^uint32_t dfu_init_pkt_complete(void)$/;"	f
dfu_init_pkt_handle	components\libraries\bootloader_dfu\dfu_dual_bank.c	/^uint32_t dfu_init_pkt_handle(dfu_update_packet_t * p_packet)$/;"	f
dfu_prepare_func_app_erase	components\libraries\bootloader_dfu\dfu_dual_bank.c	/^static void dfu_prepare_func_app_erase(uint32_t image_size)$/;"	f	file:
dfu_prepare_func_swap_erase	components\libraries\bootloader_dfu\dfu_dual_bank.c	/^static void dfu_prepare_func_swap_erase(uint32_t image_size)$/;"	f	file:
dfu_register_callback	components\libraries\bootloader_dfu\dfu_dual_bank.c	/^void dfu_register_callback(dfu_callback_t callback_handler)$/;"	f
dfu_reset	components\libraries\bootloader_dfu\dfu_dual_bank.c	/^void dfu_reset(void)$/;"	f
dfu_sd_image_swap	components\libraries\bootloader_dfu\dfu_dual_bank.c	/^uint32_t dfu_sd_image_swap(void)$/;"	f
dfu_sd_image_validate	components\libraries\bootloader_dfu\dfu_dual_bank.c	/^uint32_t dfu_sd_image_validate(void)$/;"	f
dfu_sd_img_block_swap	components\libraries\bootloader_dfu\dfu_dual_bank.c	/^static uint32_t dfu_sd_img_block_swap(uint32_t * src, $/;"	f	file:
dfu_start_pkt_handle	components\libraries\bootloader_dfu\dfu_dual_bank.c	/^uint32_t dfu_start_pkt_handle(dfu_update_packet_t * p_packet)$/;"	f
dfu_timeout_handler	components\libraries\bootloader_dfu\dfu_dual_bank.c	/^static void dfu_timeout_handler(void * p_context)$/;"	f	file:
dfu_timer_restart	components\libraries\bootloader_dfu\dfu_dual_bank.c	/^static uint32_t dfu_timer_restart(void)$/;"	f	file:
m_data_pkt_cb	components\libraries\bootloader_dfu\dfu_dual_bank.c	/^static dfu_callback_t               m_data_pkt_cb;              \/**< Callback from DFU Bank module for notification of asynchronous operation such as flash prepare. *\/$/;"	v	file:
m_dfu_state	components\libraries\bootloader_dfu\dfu_dual_bank.c	/^static dfu_state_t                  m_dfu_state;                \/**< Current DFU state. *\/$/;"	v	file:
m_dfu_timed_out	components\libraries\bootloader_dfu\dfu_dual_bank.c	/^static bool                         m_dfu_timed_out = false;    \/**< Boolean flag value for tracking DFU timer timeout state. *\/$/;"	v	file:
m_dfu_timer_id	components\libraries\bootloader_dfu\dfu_dual_bank.c	/^static app_timer_id_t               m_dfu_timer_id;             \/**< Application timer id. *\/$/;"	v	file:
m_functions	components\libraries\bootloader_dfu\dfu_dual_bank.c	/^static dfu_bank_func_t              m_functions;                \/**< Structure holding operations for the selected update process. *\/$/;"	v	file:
m_image_crc	components\libraries\bootloader_dfu\dfu_dual_bank.c	/^static uint16_t                     m_image_crc;                \/**< Calculated CRC of the image received. *\/$/;"	v	file:
m_image_size	components\libraries\bootloader_dfu\dfu_dual_bank.c	/^static uint32_t                     m_image_size;               \/**< Size of the image that will be transmitted. *\/$/;"	v	file:
m_init_packet	components\libraries\bootloader_dfu\dfu_dual_bank.c	/^static uint8_t                      m_init_packet[64];          \/**< Init packet, can hold CRC, Hash, Signed Hash and similar, for image validation, integrety check and authorization checking. *\/ $/;"	v	file:
m_init_packet_length	components\libraries\bootloader_dfu\dfu_dual_bank.c	/^static uint8_t                      m_init_packet_length;       \/**< Length of init packet received. *\/$/;"	v	file:
m_start_packet	components\libraries\bootloader_dfu\dfu_dual_bank.c	/^static dfu_start_packet_t           m_start_packet;             \/**< Start packet received for this update procedure. Contains update mode and image sizes information to be used for image transfer. *\/$/;"	v	file:
m_storage_handle_app	components\libraries\bootloader_dfu\dfu_dual_bank.c	/^static pstorage_handle_t            m_storage_handle_app;       \/**< Pstorage handle for the application area (bank 0). Bank used when updating a SoftDevice w\/wo bootloader. Handle also used when swapping received application from bank 1 to bank 0. *\/$/;"	v	file:
m_storage_handle_swap	components\libraries\bootloader_dfu\dfu_dual_bank.c	/^static pstorage_handle_t            m_storage_handle_swap;      \/**< Pstorage handle for the swap area (bank 1). Bank used when updating an application or bootloader without SoftDevice. *\/$/;"	v	file:
mp_storage_handle_active	components\libraries\bootloader_dfu\dfu_dual_bank.c	/^static pstorage_handle_t          * mp_storage_handle_active;   \/**< Pointer to the pstorage handle for the active bank for receiving of data packets. *\/$/;"	v	file:
offset_calculate	components\libraries\bootloader_dfu\dfu_dual_bank.c	/^uint32_t offset_calculate(uint32_t sd_image_size)$/;"	f
pstorage_callback_handler	components\libraries\bootloader_dfu\dfu_dual_bank.c	/^static void pstorage_callback_handler(pstorage_handle_t * p_handle,$/;"	f	file:
DFU_DEVICE_INFO	components\libraries\bootloader_dfu\dfu_init.h	79;"	d
DFU_DEVICE_INFO_BASE	components\libraries\bootloader_dfu\dfu_init.h	76;"	d
DFU_DEVICE_REVISION_EMPTY	components\libraries\bootloader_dfu\dfu_init.h	82;"	d
DFU_DEVICE_TYPE_EMPTY	components\libraries\bootloader_dfu\dfu_init.h	81;"	d
DFU_INIT_H__	components\libraries\bootloader_dfu\dfu_init.h	42;"	d
DFU_SOFTDEVICE_ANY	components\libraries\bootloader_dfu\dfu_init.h	83;"	d
UICR_CUSTOMER_DEVICE_INFO_OFFSET	components\libraries\bootloader_dfu\dfu_init.h	72;"	d
UICR_CUSTOMER_RESERVED_OFFSET	components\libraries\bootloader_dfu\dfu_init.h	75;"	d
app_version	components\libraries\bootloader_dfu\dfu_init.h	/^    uint32_t app_version;                                                                   \/**< Application version for the image software. This field allows for additional checking, for example ensuring that a downgrade is not allowed. *\/$/;"	m	struct:__anon381
device_rev	components\libraries\bootloader_dfu\dfu_init.h	/^    uint16_t device_rev;                                                                    \/**< Device revision (2 bytes), for example major revision 1, minor revision 0. This number must be defined by the customer before production. It can be located in UICR or FICR. *\/$/;"	m	struct:__anon381
device_rev	components\libraries\bootloader_dfu\dfu_init.h	/^    uint16_t device_rev;                                                                    \/**< Device revision (2 bytes), for example major revision 1, minor revision 0. This number must be defined by the customer before production. It can be located in UICR or FICR. *\/$/;"	m	struct:__anon382
device_type	components\libraries\bootloader_dfu\dfu_init.h	/^    uint16_t device_type;                                                                   \/**< Device type (2 bytes), for example Heart Rate. This number must be defined by the customer before production. It can be located in UICR or FICR. *\/$/;"	m	struct:__anon381
device_type	components\libraries\bootloader_dfu\dfu_init.h	/^    uint16_t device_type;                                                                   \/**< Device type (2 bytes), for example Heart Rate. This number must be defined by the customer before production. It can be located in UICR or FICR. *\/$/;"	m	struct:__anon382
dfu_device_info_t	components\libraries\bootloader_dfu\dfu_init.h	/^} dfu_device_info_t;$/;"	t	typeref:struct:__anon382
dfu_init_packet_t	components\libraries\bootloader_dfu\dfu_init.h	/^} dfu_init_packet_t;$/;"	t	typeref:struct:__anon381
softdevice	components\libraries\bootloader_dfu\dfu_init.h	/^    uint16_t softdevice[1];                                                                 \/**< Variable length array of SoftDevices compatible with this application. The length of the array is specified in the length field. SoftDevice firmware id 0xFFFE indicates any SoftDevice. *\/$/;"	m	struct:__anon381
softdevice_len	components\libraries\bootloader_dfu\dfu_init.h	/^    uint16_t softdevice_len;                                                                \/**< Number of different SoftDevice revisions compatible with this application. The list of SoftDevice firmware IDs is defined in @ref softdevice. *\/$/;"	m	struct:__anon381
DFU_INIT_PACKET_EXT_LENGTH_MAX	components\libraries\bootloader_dfu\dfu_init_template.c	51;"	d	file:
DFU_INIT_PACKET_EXT_LENGTH_MIN	components\libraries\bootloader_dfu\dfu_init_template.c	50;"	d	file:
dfu_init_postvalidate	components\libraries\bootloader_dfu\dfu_init_template.c	/^uint32_t dfu_init_postvalidate(uint8_t * p_image, uint32_t image_len)$/;"	f
dfu_init_prevalidate	components\libraries\bootloader_dfu\dfu_init_template.c	/^uint32_t dfu_init_prevalidate(uint8_t * p_init_data, uint32_t init_data_len)$/;"	f
m_extended_packet	components\libraries\bootloader_dfu\dfu_init_template.c	/^static uint8_t m_extended_packet[DFU_INIT_PACKET_EXT_LENGTH_MAX];   \/\/< Data array for storage of the extended data received. The extended data follows the normal init data of type \\ref dfu_init_packet_t. Extended data can be used for a CRC, hash, signature, or other data. *\/$/;"	v	file:
m_extended_packet_length	components\libraries\bootloader_dfu\dfu_init_template.c	/^static uint8_t m_extended_packet_length;                            \/\/< Length of the extended data received with init packet. *\/$/;"	v	file:
dfu_activate_app	components\libraries\bootloader_dfu\dfu_single_bank.c	/^static uint32_t dfu_activate_app(void)$/;"	f	file:
dfu_activate_bl	components\libraries\bootloader_dfu\dfu_single_bank.c	/^static uint32_t dfu_activate_bl(void)$/;"	f	file:
dfu_activate_sd	components\libraries\bootloader_dfu\dfu_single_bank.c	/^static uint32_t dfu_activate_sd(void)$/;"	f	file:
dfu_bl_image_swap	components\libraries\bootloader_dfu\dfu_single_bank.c	/^uint32_t dfu_bl_image_swap(void)$/;"	f
dfu_bl_image_validate	components\libraries\bootloader_dfu\dfu_single_bank.c	/^uint32_t dfu_bl_image_validate(void)$/;"	f
dfu_cleared_func_app	components\libraries\bootloader_dfu\dfu_single_bank.c	/^static void dfu_cleared_func_app(void)$/;"	f	file:
dfu_compare_block	components\libraries\bootloader_dfu\dfu_single_bank.c	/^static uint32_t dfu_compare_block(uint32_t * ptr1, uint32_t * ptr2, uint32_t len)$/;"	f	file:
dfu_copy_sd	components\libraries\bootloader_dfu\dfu_single_bank.c	/^static uint32_t dfu_copy_sd(uint32_t * src, uint32_t * dst, uint32_t len)$/;"	f	file:
dfu_data_pkt_handle	components\libraries\bootloader_dfu\dfu_single_bank.c	/^uint32_t dfu_data_pkt_handle(dfu_update_packet_t * p_packet)$/;"	f
dfu_image_activate	components\libraries\bootloader_dfu\dfu_single_bank.c	/^uint32_t dfu_image_activate()$/;"	f
dfu_image_validate	components\libraries\bootloader_dfu\dfu_single_bank.c	/^uint32_t dfu_image_validate()$/;"	f
dfu_init	components\libraries\bootloader_dfu\dfu_single_bank.c	/^uint32_t dfu_init(void)$/;"	f
dfu_init_pkt_complete	components\libraries\bootloader_dfu\dfu_single_bank.c	/^uint32_t dfu_init_pkt_complete(void)$/;"	f
dfu_init_pkt_handle	components\libraries\bootloader_dfu\dfu_single_bank.c	/^uint32_t dfu_init_pkt_handle(dfu_update_packet_t * p_packet)$/;"	f
dfu_prepare_func_app_erase	components\libraries\bootloader_dfu\dfu_single_bank.c	/^static void dfu_prepare_func_app_erase(uint32_t image_size)$/;"	f	file:
dfu_register_callback	components\libraries\bootloader_dfu\dfu_single_bank.c	/^void dfu_register_callback(dfu_callback_t callback_handler)$/;"	f
dfu_reset	components\libraries\bootloader_dfu\dfu_single_bank.c	/^void dfu_reset(void)$/;"	f
dfu_sd_image_swap	components\libraries\bootloader_dfu\dfu_single_bank.c	/^uint32_t dfu_sd_image_swap(void)$/;"	f
dfu_sd_image_validate	components\libraries\bootloader_dfu\dfu_single_bank.c	/^uint32_t dfu_sd_image_validate(void)$/;"	f
dfu_sd_img_block_swap	components\libraries\bootloader_dfu\dfu_single_bank.c	/^static uint32_t dfu_sd_img_block_swap(uint32_t * src, $/;"	f	file:
dfu_start_pkt_handle	components\libraries\bootloader_dfu\dfu_single_bank.c	/^uint32_t dfu_start_pkt_handle(dfu_update_packet_t * p_packet)$/;"	f
dfu_timeout_handler	components\libraries\bootloader_dfu\dfu_single_bank.c	/^static void dfu_timeout_handler(void * p_context)$/;"	f	file:
dfu_timer_restart	components\libraries\bootloader_dfu\dfu_single_bank.c	/^static uint32_t dfu_timer_restart(void)$/;"	f	file:
m_data_pkt_cb	components\libraries\bootloader_dfu\dfu_single_bank.c	/^static dfu_callback_t               m_data_pkt_cb;              \/**< Callback from DFU Bank module for notification of asynchronous operation such as flash prepare. *\/$/;"	v	file:
m_dfu_state	components\libraries\bootloader_dfu\dfu_single_bank.c	/^static dfu_state_t                  m_dfu_state;                \/**< Current DFU state. *\/$/;"	v	file:
m_dfu_timed_out	components\libraries\bootloader_dfu\dfu_single_bank.c	/^static bool                         m_dfu_timed_out = false;    \/**< Boolean flag value for tracking DFU timer timeout state. *\/$/;"	v	file:
m_dfu_timer_id	components\libraries\bootloader_dfu\dfu_single_bank.c	/^static app_timer_id_t               m_dfu_timer_id;             \/**< Application timer id. *\/$/;"	v	file:
m_functions	components\libraries\bootloader_dfu\dfu_single_bank.c	/^static dfu_bank_func_t              m_functions;                \/**< Structure holding operations for the selected update process. *\/$/;"	v	file:
m_image_crc	components\libraries\bootloader_dfu\dfu_single_bank.c	/^static uint16_t                     m_image_crc;                \/**< Calculated CRC of the image received. *\/$/;"	v	file:
m_image_size	components\libraries\bootloader_dfu\dfu_single_bank.c	/^static uint32_t                     m_image_size;               \/**< Size of the image that will be transmitted. *\/$/;"	v	file:
m_init_packet	components\libraries\bootloader_dfu\dfu_single_bank.c	/^static uint8_t                      m_init_packet[64];          \/**< Init packet, can hold CRC, Hash, Signed Hash and similar, for image validation, integrety check and authorization checking. *\/ $/;"	v	file:
m_init_packet_length	components\libraries\bootloader_dfu\dfu_single_bank.c	/^static uint8_t                      m_init_packet_length;       \/**< Length of init packet received. *\/$/;"	v	file:
m_start_packet	components\libraries\bootloader_dfu\dfu_single_bank.c	/^static dfu_start_packet_t           m_start_packet;             \/**< Start packet received for this update procedure. Contains update mode and image sizes information to be used for image transfer. *\/$/;"	v	file:
m_storage_handle_app	components\libraries\bootloader_dfu\dfu_single_bank.c	/^static pstorage_handle_t            m_storage_handle_app;       \/**< Pstorage handle for the application area (bank 0). Bank used when updating a SoftDevice w\/wo bootloader. Handle also used when swapping received application from bank 1 to bank 0. *\/$/;"	v	file:
mp_storage_handle_active	components\libraries\bootloader_dfu\dfu_single_bank.c	/^static pstorage_handle_t          * mp_storage_handle_active;   \/**< Pointer to the pstorage handle for the active bank for receiving of data packets. *\/$/;"	v	file:
offset_calculate	components\libraries\bootloader_dfu\dfu_single_bank.c	/^uint32_t offset_calculate(uint32_t sd_image_size)$/;"	f
pstorage_callback_handler	components\libraries\bootloader_dfu\dfu_single_bank.c	/^static void pstorage_callback_handler(pstorage_handle_t * p_handle,$/;"	f	file:
DFU_TRANSPORT_H__	components\libraries\bootloader_dfu\dfu_transport.h	22;"	d
ADVERTISING_LED_PIN_NO	components\libraries\bootloader_dfu\dfu_transport_ble.c	43;"	d	file:
APP_ADV_INTERVAL	components\libraries\bootloader_dfu\dfu_transport_ble.c	62;"	d	file:
APP_ADV_TIMEOUT_IN_SECONDS	components\libraries\bootloader_dfu\dfu_transport_ble.c	63;"	d	file:
APP_DIRECTED_ADV_TIMEOUT	components\libraries\bootloader_dfu\dfu_transport_ble.c	64;"	d	file:
APP_FEATURE_NOT_SUPPORTED	components\libraries\bootloader_dfu\dfu_transport_ble.c	81;"	d	file:
APP_IMAGE_SIZE_OFFSET	components\libraries\bootloader_dfu\dfu_transport_ble.c	84;"	d	file:
APP_TIMER_PRESCALER	components\libraries\bootloader_dfu\dfu_transport_ble.c	56;"	d	file:
BLE_HANDLE_MAX	components\libraries\bootloader_dfu\dfu_transport_ble.c	46;"	d	file:
BL_IMAGE_SIZE_OFFSET	components\libraries\bootloader_dfu\dfu_transport_ble.c	83;"	d	file:
CONNECTED_LED_PIN_NO	components\libraries\bootloader_dfu\dfu_transport_ble.c	44;"	d	file:
CONN_SUP_TIMEOUT	components\libraries\bootloader_dfu\dfu_transport_ble.c	54;"	d	file:
DEVICE_NAME	components\libraries\bootloader_dfu\dfu_transport_ble.c	48;"	d	file:
DFU_REVISION	components\libraries\bootloader_dfu\dfu_transport_ble.c	42;"	d	file:
DFU_REV_MAJOR	components\libraries\bootloader_dfu\dfu_transport_ble.c	40;"	d	file:
DFU_REV_MINOR	components\libraries\bootloader_dfu\dfu_transport_ble.c	41;"	d	file:
DFU_SERVICE_HANDLE	components\libraries\bootloader_dfu\dfu_transport_ble.c	45;"	d	file:
FIRST_CONN_PARAMS_UPDATE_DELAY	components\libraries\bootloader_dfu\dfu_transport_ble.c	58;"	d	file:
IS_CONNECTED	components\libraries\bootloader_dfu\dfu_transport_ble.c	79;"	d	file:
MANUFACTURER_NAME	components\libraries\bootloader_dfu\dfu_transport_ble.c	49;"	d	file:
MAX_CONN_INTERVAL	components\libraries\bootloader_dfu\dfu_transport_ble.c	52;"	d	file:
MAX_CONN_PARAMS_UPDATE_COUNT	components\libraries\bootloader_dfu\dfu_transport_ble.c	60;"	d	file:
MAX_SIZE_OF_BLE_STACK_EVT	components\libraries\bootloader_dfu\dfu_transport_ble.c	76;"	d	file:
MIN_CONN_INTERVAL	components\libraries\bootloader_dfu\dfu_transport_ble.c	51;"	d	file:
NEXT_CONN_PARAMS_UPDATE_DELAY	components\libraries\bootloader_dfu\dfu_transport_ble.c	59;"	d	file:
NUM_WORDS_RESERVED_FOR_BLE_EVENTS	components\libraries\bootloader_dfu\dfu_transport_ble.c	77;"	d	file:
PEER_ADDRESS_TYPE_INVALID	components\libraries\bootloader_dfu\dfu_transport_ble.c	65;"	d	file:
PEER_ADDRESS_TYPE_INVALID	components\libraries\bootloader_dfu\dfu_transport_ble.c	66;"	d	file:
PKT_TYPE_FIRMWARE_DATA	components\libraries\bootloader_dfu\dfu_transport_ble.c	/^    PKT_TYPE_FIRMWARE_DATA                                                                           \/**< Firmware data packet.*\/$/;"	e	enum:__anon383	file:
PKT_TYPE_INIT	components\libraries\bootloader_dfu\dfu_transport_ble.c	/^    PKT_TYPE_INIT,                                                                                   \/**< Init packet.*\/$/;"	e	enum:__anon383	file:
PKT_TYPE_INVALID	components\libraries\bootloader_dfu\dfu_transport_ble.c	/^    PKT_TYPE_INVALID,                                                                                \/**< Invalid packet type. Used for initialization purpose.*\/$/;"	e	enum:__anon383	file:
PKT_TYPE_START	components\libraries\bootloader_dfu\dfu_transport_ble.c	/^    PKT_TYPE_START,                                                                                  \/**< Start packet.*\/$/;"	e	enum:__anon383	file:
SD_IMAGE_SIZE_OFFSET	components\libraries\bootloader_dfu\dfu_transport_ble.c	82;"	d	file:
SEC_PARAM_BOND	components\libraries\bootloader_dfu\dfu_transport_ble.c	69;"	d	file:
SEC_PARAM_IO_CAPABILITIES	components\libraries\bootloader_dfu\dfu_transport_ble.c	71;"	d	file:
SEC_PARAM_MAX_KEY_SIZE	components\libraries\bootloader_dfu\dfu_transport_ble.c	74;"	d	file:
SEC_PARAM_MIN_KEY_SIZE	components\libraries\bootloader_dfu\dfu_transport_ble.c	73;"	d	file:
SEC_PARAM_MITM	components\libraries\bootloader_dfu\dfu_transport_ble.c	70;"	d	file:
SEC_PARAM_OOB	components\libraries\bootloader_dfu\dfu_transport_ble.c	72;"	d	file:
SEC_PARAM_TIMEOUT	components\libraries\bootloader_dfu\dfu_transport_ble.c	68;"	d	file:
SLAVE_LATENCY	components\libraries\bootloader_dfu\dfu_transport_ble.c	53;"	d	file:
advertising_init	components\libraries\bootloader_dfu\dfu_transport_ble.c	/^static void advertising_init(uint8_t adv_flags)$/;"	f	file:
advertising_start	components\libraries\bootloader_dfu\dfu_transport_ble.c	/^static void advertising_start(void)$/;"	f	file:
advertising_stop	components\libraries\bootloader_dfu\dfu_transport_ble.c	/^static void advertising_stop(void)$/;"	f	file:
app_data_process	components\libraries\bootloader_dfu\dfu_transport_ble.c	/^static void app_data_process(ble_dfu_t * p_dfu, ble_dfu_evt_t * p_evt)$/;"	f	file:
ble_evt_dispatch	components\libraries\bootloader_dfu\dfu_transport_ble.c	/^static void ble_evt_dispatch(ble_evt_t * p_ble_evt)$/;"	f	file:
conn_params_error_handler	components\libraries\bootloader_dfu\dfu_transport_ble.c	/^static void conn_params_error_handler(uint32_t nrf_error)$/;"	f	file:
conn_params_init	components\libraries\bootloader_dfu\dfu_transport_ble.c	/^static void conn_params_init(void)$/;"	f	file:
dfu_cb_handler	components\libraries\bootloader_dfu\dfu_transport_ble.c	/^static void dfu_cb_handler(uint32_t packet, uint32_t result, uint8_t * p_data)$/;"	f	file:
dfu_error_notify	components\libraries\bootloader_dfu\dfu_transport_ble.c	/^static void dfu_error_notify(ble_dfu_t * p_dfu, uint32_t err_code)$/;"	f	file:
dfu_transport_close	components\libraries\bootloader_dfu\dfu_transport_ble.c	/^uint32_t dfu_transport_close()$/;"	f
dfu_transport_update_start	components\libraries\bootloader_dfu\dfu_transport_ble.c	/^uint32_t dfu_transport_update_start(void)$/;"	f
gap_params_init	components\libraries\bootloader_dfu\dfu_transport_ble.c	/^static void gap_params_init(void)$/;"	f	file:
init_data_process	components\libraries\bootloader_dfu\dfu_transport_ble.c	/^static void init_data_process(ble_dfu_t * p_dfu, ble_dfu_evt_t * p_evt)$/;"	f	file:
leds_init	components\libraries\bootloader_dfu\dfu_transport_ble.c	/^static void leds_init(void)$/;"	f	file:
m_adv_params	components\libraries\bootloader_dfu\dfu_transport_ble.c	/^static ble_gap_adv_params_t m_adv_params;                                                            \/**< Parameters to be passed to the stack when starting advertising. *\/$/;"	v	file:
m_ble_peer_data	components\libraries\bootloader_dfu\dfu_transport_ble.c	/^static dfu_ble_peer_data_t  m_ble_peer_data;                                                         \/**< BLE Peer data exchanged from application on buttonless update mode. *\/$/;"	v	file:
m_ble_peer_data_valid	components\libraries\bootloader_dfu\dfu_transport_ble.c	/^static bool                 m_ble_peer_data_valid    = false;                                        \/**< True if BLE Peer data has been exchanged from application. *\/$/;"	v	file:
m_conn_handle	components\libraries\bootloader_dfu\dfu_transport_ble.c	/^static uint16_t             m_conn_handle            = BLE_CONN_HANDLE_INVALID;                      \/**< Handle of the current connection. *\/$/;"	v	file:
m_dfu	components\libraries\bootloader_dfu\dfu_transport_ble.c	/^static ble_dfu_t            m_dfu;                                                                   \/**< Structure used to identify the Device Firmware Update service. *\/$/;"	v	file:
m_direct_adv_cnt	components\libraries\bootloader_dfu\dfu_transport_ble.c	/^static uint32_t             m_direct_adv_cnt         = APP_DIRECTED_ADV_TIMEOUT;                     \/**< Counter of direct advertisements. *\/$/;"	v	file:
m_is_advertising	components\libraries\bootloader_dfu\dfu_transport_ble.c	/^static bool                 m_is_advertising         = false;                                        \/**< Variable to indicate if advertising is ongoing.*\/$/;"	v	file:
m_num_of_firmware_bytes_rcvd	components\libraries\bootloader_dfu\dfu_transport_ble.c	/^static uint32_t             m_num_of_firmware_bytes_rcvd;                                            \/**< Cumulative number of bytes of firmware data received. *\/$/;"	v	file:
m_pkt_notif_target	components\libraries\bootloader_dfu\dfu_transport_ble.c	/^static uint16_t             m_pkt_notif_target;                                                      \/**< Number of packets of firmware data to be received before transmitting the next Packet Receipt Notification to the DFU Controller. *\/$/;"	v	file:
m_pkt_notif_target_cnt	components\libraries\bootloader_dfu\dfu_transport_ble.c	/^static uint16_t             m_pkt_notif_target_cnt;                                                  \/**< Number of packets of firmware data received after sending last Packet Receipt Notification or since the receipt of a @ref BLE_DFU_PKT_RCPT_NOTIF_ENABLED event from the DFU service, which ever occurs later.*\/$/;"	v	file:
m_pkt_rcpt_notif_enabled	components\libraries\bootloader_dfu\dfu_transport_ble.c	/^static bool                 m_pkt_rcpt_notif_enabled = false;                                        \/**< Variable to denote whether packet receipt notification has been enabled by the DFU controller.*\/$/;"	v	file:
m_pkt_type	components\libraries\bootloader_dfu\dfu_transport_ble.c	/^static pkt_type_t           m_pkt_type;                                                              \/**< Type of packet to be expected from the DFU Controller. *\/$/;"	v	file:
m_sec_params	components\libraries\bootloader_dfu\dfu_transport_ble.c	/^static ble_gap_sec_params_t m_sec_params;                                                            \/**< Security requirements for this application. *\/$/;"	v	file:
m_tear_down_in_progress	components\libraries\bootloader_dfu\dfu_transport_ble.c	/^static bool                 m_tear_down_in_progress  = false;                                        \/**< Variable to indicate whether a tear down is in progress. A tear down could be because the application has initiated it or the peer has disconnected. *\/$/;"	v	file:
m_update_mode	components\libraries\bootloader_dfu\dfu_transport_ble.c	/^static uint8_t              m_update_mode;                                                           \/**< Type of update mode specified by the DFU Controller. *\/$/;"	v	file:
mp_final_packet	components\libraries\bootloader_dfu\dfu_transport_ble.c	/^static uint8_t            * mp_final_packet;                                                         \/**< Pointer to final data packet received. When callback for succesful packet handling is received from dfu bank handling a transfer complete response can be sent to peer. *\/$/;"	v	file:
mp_rx_buffer	components\libraries\bootloader_dfu\dfu_transport_ble.c	/^static uint8_t            * mp_rx_buffer;                                                            \/**< Pointer to a RX buffer.*\/$/;"	v	file:
nrf_err_code_translate	components\libraries\bootloader_dfu\dfu_transport_ble.c	/^static ble_dfu_resp_val_t nrf_err_code_translate(uint32_t                  err_code,$/;"	f	file:
on_ble_evt	components\libraries\bootloader_dfu\dfu_transport_ble.c	/^static void on_ble_evt(ble_evt_t * p_ble_evt)$/;"	f	file:
on_dfu_evt	components\libraries\bootloader_dfu\dfu_transport_ble.c	/^static void on_dfu_evt(ble_dfu_t * p_dfu, ble_dfu_evt_t * p_evt)$/;"	f	file:
on_dfu_pkt_write	components\libraries\bootloader_dfu\dfu_transport_ble.c	/^static void on_dfu_pkt_write(ble_dfu_t * p_dfu, ble_dfu_evt_t * p_evt)$/;"	f	file:
pkt_type_t	components\libraries\bootloader_dfu\dfu_transport_ble.c	/^} pkt_type_t;$/;"	t	typeref:enum:__anon383	file:
sec_params_init	components\libraries\bootloader_dfu\dfu_transport_ble.c	/^static void sec_params_init(void)$/;"	f	file:
service_change_indicate	components\libraries\bootloader_dfu\dfu_transport_ble.c	/^static uint32_t service_change_indicate()$/;"	f	file:
service_error_handler	components\libraries\bootloader_dfu\dfu_transport_ble.c	/^static void service_error_handler(uint32_t nrf_error)$/;"	f	file:
services_init	components\libraries\bootloader_dfu\dfu_transport_ble.c	/^static void services_init(void)$/;"	f	file:
start_data_process	components\libraries\bootloader_dfu\dfu_transport_ble.c	/^static void start_data_process(ble_dfu_t * p_dfu, ble_dfu_evt_t * p_evt)$/;"	f	file:
APP_GPIOTE_MAX_USERS	components\libraries\bootloader_dfu\dfu_transport_serial.c	25;"	d	file:
DATA_QUEUE_ELEMENT_COPY_PDATA	components\libraries\bootloader_dfu\dfu_transport_serial.c	49;"	d	file:
DATA_QUEUE_ELEMENT_GET_PDATA	components\libraries\bootloader_dfu\dfu_transport_serial.c	57;"	d	file:
DATA_QUEUE_ELEMENT_GET_PTYPE	components\libraries\bootloader_dfu\dfu_transport_serial.c	61;"	d	file:
DATA_QUEUE_ELEMENT_INIT	components\libraries\bootloader_dfu\dfu_transport_serial.c	41;"	d	file:
DATA_QUEUE_ELEMENT_SET_PLEN	components\libraries\bootloader_dfu\dfu_transport_serial.c	53;"	d	file:
DATA_QUEUE_ELEMENT_SET_PTYPE	components\libraries\bootloader_dfu\dfu_transport_serial.c	45;"	d	file:
DATA_QUEUE_EMPTY	components\libraries\bootloader_dfu\dfu_transport_serial.c	37;"	d	file:
DATA_QUEUE_FULL	components\libraries\bootloader_dfu\dfu_transport_serial.c	33;"	d	file:
MAX_BUFFERS	components\libraries\bootloader_dfu\dfu_transport_serial.c	24;"	d	file:
count	components\libraries\bootloader_dfu\dfu_transport_serial.c	/^    volatile uint8_t      count;                                                     \/**< Counter to maintain number of elements in the queue. *\/$/;"	m	struct:__anon384	file:
data_packet	components\libraries\bootloader_dfu\dfu_transport_serial.c	/^    dfu_update_packet_t   data_packet[MAX_BUFFERS];                                  \/**< Bootloader data packets used when processing data from the UART. *\/$/;"	m	struct:__anon384	file:
data_queue_element_alloc	components\libraries\bootloader_dfu\dfu_transport_serial.c	/^static uint32_t data_queue_element_alloc(uint8_t * p_element_index, uint8_t packet_type)$/;"	f	file:
data_queue_element_free	components\libraries\bootloader_dfu\dfu_transport_serial.c	/^static uint32_t data_queue_element_free(uint8_t element_index)$/;"	f	file:
data_queue_element_init	components\libraries\bootloader_dfu\dfu_transport_serial.c	/^static void data_queue_element_init (uint8_t element_index)$/;"	f	file:
data_queue_flush	components\libraries\bootloader_dfu\dfu_transport_serial.c	/^static void data_queue_flush(void)$/;"	f	file:
data_queue_init	components\libraries\bootloader_dfu\dfu_transport_serial.c	/^static void data_queue_init(void)$/;"	f	file:
dfu_cb_handler	components\libraries\bootloader_dfu\dfu_transport_serial.c	/^static void dfu_cb_handler(uint32_t packet, uint32_t result, uint8_t * p_data)$/;"	f	file:
dfu_data_queue_t	components\libraries\bootloader_dfu\dfu_transport_serial.c	/^} dfu_data_queue_t;$/;"	t	typeref:struct:__anon384	file:
dfu_transport_close	components\libraries\bootloader_dfu\dfu_transport_serial.c	/^uint32_t dfu_transport_close(void)$/;"	f
dfu_transport_update_start	components\libraries\bootloader_dfu\dfu_transport_serial.c	/^uint32_t dfu_transport_update_start(void)$/;"	f
m_data_queue	components\libraries\bootloader_dfu\dfu_transport_serial.c	/^static dfu_data_queue_t      m_data_queue;                                           \/**< Received-data packet queue. *\/$/;"	v	file:
process_dfu_packet	components\libraries\bootloader_dfu\dfu_transport_serial.c	/^static void process_dfu_packet(void * p_event_data, uint16_t event_size)$/;"	f	file:
rpc_transport_event_handler	components\libraries\bootloader_dfu\dfu_transport_serial.c	/^void rpc_transport_event_handler(hci_transport_evt_t event)$/;"	f
BOOTLOADER_REGION_START	components\libraries\bootloader_dfu\dfu_types.h	51;"	d
BOOTLOADER_SETTINGS_ADDRESS	components\libraries\bootloader_dfu\dfu_types.h	52;"	d
CODE_PAGE_SIZE	components\libraries\bootloader_dfu\dfu_types.h	68;"	d
CODE_REGION_1_START	components\libraries\bootloader_dfu\dfu_types.h	48;"	d
DATA_PACKET	components\libraries\bootloader_dfu\dfu_types.h	75;"	d
DFU_APP_DATA_RESERVED	components\libraries\bootloader_dfu\dfu_types.h	56;"	d
DFU_BANK_0_ERASED	components\libraries\bootloader_dfu\dfu_types.h	/^    DFU_BANK_0_ERASED,                                                                                  \/**< Status bank 0 erased.*\/$/;"	e	enum:__anon390
DFU_BANK_0_REGION_START	components\libraries\bootloader_dfu\dfu_types.h	65;"	d
DFU_BANK_1_REGION_START	components\libraries\bootloader_dfu\dfu_types.h	66;"	d
DFU_BANK_PADDING	components\libraries\bootloader_dfu\dfu_types.h	57;"	d
DFU_BL_IMAGE_MAX_SIZE	components\libraries\bootloader_dfu\dfu_types.h	63;"	d
DFU_IMAGE_MAX_SIZE_BANKED	components\libraries\bootloader_dfu\dfu_types.h	59;"	d
DFU_IMAGE_MAX_SIZE_FULL	components\libraries\bootloader_dfu\dfu_types.h	58;"	d
DFU_INIT_COMPLETE	components\libraries\bootloader_dfu\dfu_types.h	83;"	d
DFU_INIT_RX	components\libraries\bootloader_dfu\dfu_types.h	82;"	d
DFU_REGION_TOTAL_SIZE	components\libraries\bootloader_dfu\dfu_types.h	54;"	d
DFU_RESET	components\libraries\bootloader_dfu\dfu_types.h	/^    DFU_RESET                                                                                           \/**< Status Reset to indicate current update procedure has been aborted and system should reset. *\/$/;"	e	enum:__anon390
DFU_TIMEOUT	components\libraries\bootloader_dfu\dfu_types.h	/^    DFU_TIMEOUT,                                                                                        \/**< Status timeout.*\/$/;"	e	enum:__anon390
DFU_TYPES_H__	components\libraries\bootloader_dfu\dfu_types.h	24;"	d
DFU_UPDATE_APP	components\libraries\bootloader_dfu\dfu_types.h	80;"	d
DFU_UPDATE_APP_COMPLETE	components\libraries\bootloader_dfu\dfu_types.h	/^    DFU_UPDATE_APP_COMPLETE,                                                                            \/**< Status update of application complete.*\/$/;"	e	enum:__anon390
DFU_UPDATE_BL	components\libraries\bootloader_dfu\dfu_types.h	79;"	d
DFU_UPDATE_BOOT_COMPLETE	components\libraries\bootloader_dfu\dfu_types.h	/^    DFU_UPDATE_BOOT_COMPLETE,                                                                           \/**< Status update complete.*\/$/;"	e	enum:__anon390
DFU_UPDATE_SD	components\libraries\bootloader_dfu\dfu_types.h	78;"	d
DFU_UPDATE_SD_COMPLETE	components\libraries\bootloader_dfu\dfu_types.h	/^    DFU_UPDATE_SD_COMPLETE,                                                                             \/**< Status update of SoftDevice update complete. Note that this solely indicates that a new SoftDevice has been received and stored in bank 0 and 1. *\/$/;"	e	enum:__anon390
DFU_UPDATE_SD_SWAPPED	components\libraries\bootloader_dfu\dfu_types.h	/^    DFU_UPDATE_SD_SWAPPED,                                                                              \/**< Status update of SoftDevice update complete. Note that this solely indicates that a new SoftDevice has been received and stored in bank 0 and 1. *\/$/;"	e	enum:__anon390
EMPTY_FLASH_MASK	components\libraries\bootloader_dfu\dfu_types.h	69;"	d
INIT_PACKET	components\libraries\bootloader_dfu\dfu_types.h	72;"	d
INVALID_PACKET	components\libraries\bootloader_dfu\dfu_types.h	71;"	d
NRF_UICR_BOOT_START_ADDRESS	components\libraries\bootloader_dfu\dfu_types.h	46;"	d
SOFTDEVICE_INFORMATION	components\libraries\bootloader_dfu\dfu_types.h	44;"	d
SOFTDEVICE_INFORMATION_BASE	components\libraries\bootloader_dfu\dfu_types.h	43;"	d
SOFTDEVICE_INFORMATION_Type	components\libraries\bootloader_dfu\dfu_types.h	/^} SOFTDEVICE_INFORMATION_Type;$/;"	t	typeref:struct:__anon385
SOFTDEVICE_REGION_START	components\libraries\bootloader_dfu\dfu_types.h	50;"	d
START_PACKET	components\libraries\bootloader_dfu\dfu_types.h	74;"	d
STOP_DATA_PACKET	components\libraries\bootloader_dfu\dfu_types.h	76;"	d
STOP_INIT_PACKET	components\libraries\bootloader_dfu\dfu_types.h	73;"	d
app_crc	components\libraries\bootloader_dfu\dfu_types.h	/^    uint16_t                 app_crc;                                                                   \/**< CRC of the recieved application. *\/$/;"	m	struct:__anon391
app_image_size	components\libraries\bootloader_dfu\dfu_types.h	/^    uint32_t app_image_size;                                                                            \/**< Size of the application image to be transmitted. Zero if no Bootloader image will be transfered. *\/$/;"	m	struct:__anon386
app_size	components\libraries\bootloader_dfu\dfu_types.h	/^    uint32_t                 app_size;                                                                  \/**< Size of the recieved Application. *\/$/;"	m	struct:__anon391
bl_image_size	components\libraries\bootloader_dfu\dfu_types.h	/^    uint32_t bl_image_size;                                                                             \/**< Size of the Bootloader image to be transferred. Zero if no Bootloader image will be transfered. *\/$/;"	m	struct:__anon386
bl_size	components\libraries\bootloader_dfu\dfu_types.h	/^    uint32_t                 bl_size;                                                                   \/**< Size of the recieved BootLoader. *\/$/;"	m	struct:__anon391
data_packet	components\libraries\bootloader_dfu\dfu_types.h	/^        dfu_data_packet_t    data_packet;                                                               \/**< Used when packet type is INIT_PACKET or DATA_PACKET. Packet contains data received for init or data. *\/$/;"	m	union:__anon388::__anon389
dfu_complete_handler_t	components\libraries\bootloader_dfu\dfu_types.h	/^typedef void (*dfu_complete_handler_t)(dfu_update_status_t dfu_update_status);$/;"	t
dfu_data_packet_t	components\libraries\bootloader_dfu\dfu_types.h	/^} dfu_data_packet_t;$/;"	t	typeref:struct:__anon387
dfu_start_packet_t	components\libraries\bootloader_dfu\dfu_types.h	/^} dfu_start_packet_t;$/;"	t	typeref:struct:__anon386
dfu_update_mode	components\libraries\bootloader_dfu\dfu_types.h	/^    uint8_t  dfu_update_mode;                                                                           \/**< Packet type, used to identify the content of the received packet referenced by data packet. *\/$/;"	m	struct:__anon386
dfu_update_packet_t	components\libraries\bootloader_dfu\dfu_types.h	/^} dfu_update_packet_t;$/;"	t	typeref:struct:__anon388
dfu_update_status_code_t	components\libraries\bootloader_dfu\dfu_types.h	/^} dfu_update_status_code_t;$/;"	t	typeref:enum:__anon390
dfu_update_status_t	components\libraries\bootloader_dfu\dfu_types.h	/^} dfu_update_status_t;$/;"	t	typeref:struct:__anon391
firmware_id	components\libraries\bootloader_dfu\dfu_types.h	/^    uint16_t firmware_id;                                                                               \/**< Firmware id. *\/$/;"	m	struct:__anon385
info_size	components\libraries\bootloader_dfu\dfu_types.h	/^    uint8_t  info_size;                                                                                 \/**< Not used. *\/$/;"	m	struct:__anon385
magic_number	components\libraries\bootloader_dfu\dfu_types.h	/^    uint32_t magic_number;                                                                              \/**< Not used. *\/$/;"	m	struct:__anon385
p_data_packet	components\libraries\bootloader_dfu\dfu_types.h	/^    uint32_t * p_data_packet;                                                                           \/**< Data Packet received. Each data is a word size entry. *\/$/;"	m	struct:__anon387
packet_length	components\libraries\bootloader_dfu\dfu_types.h	/^    uint32_t   packet_length;                                                                           \/**< Packet length of the data packet. Each data is word size, meaning length of 4 is 4 words, not bytes. *\/$/;"	m	struct:__anon387
packet_type	components\libraries\bootloader_dfu\dfu_types.h	/^    uint32_t   packet_type;                                                                             \/**< Packet type, used to identify the content of the received packet referenced by data packet. *\/$/;"	m	struct:__anon388
params	components\libraries\bootloader_dfu\dfu_types.h	/^    } params;$/;"	m	struct:__anon388	typeref:union:__anon388::__anon389
reserved1	components\libraries\bootloader_dfu\dfu_types.h	/^    uint8_t  reserved1[3];                                                                              \/**< Not used. *\/$/;"	m	struct:__anon385
reserved2	components\libraries\bootloader_dfu\dfu_types.h	/^    uint8_t  reserved2[2];                                                                                 \/**< Not used. *\/$/;"	m	struct:__anon385
sd_image_size	components\libraries\bootloader_dfu\dfu_types.h	/^    uint32_t sd_image_size;                                                                             \/**< Size of the SoftDevice image to be transferred. Zero if no SoftDevice image will be transfered. *\/$/;"	m	struct:__anon386
sd_image_start	components\libraries\bootloader_dfu\dfu_types.h	/^    uint32_t                 sd_image_start;                                                            \/**< Location in flash where the received SoftDevice image is stored. *\/$/;"	m	struct:__anon391
sd_size	components\libraries\bootloader_dfu\dfu_types.h	/^    uint32_t                 sd_size;                                                                   \/**< Size of the recieved SoftDevice. *\/$/;"	m	struct:__anon391
softdevice_size	components\libraries\bootloader_dfu\dfu_types.h	/^    uint32_t softdevice_size;                                                                           \/**< Size field containing the size of installed SoftDevice. *\/$/;"	m	struct:__anon385
start_packet	components\libraries\bootloader_dfu\dfu_types.h	/^        dfu_start_packet_t * start_packet;                                                              \/**< Used when packet type is START_DATA_PACKET. Will contain information on software to be updtaed, i.e. SoftDevice, Bootloader and\/or Application along with image sizes. *\/$/;"	m	union:__anon388::__anon389
status_code	components\libraries\bootloader_dfu\dfu_types.h	/^    dfu_update_status_code_t status_code;                                                               \/**< Device Firmware Update status. *\/$/;"	m	struct:__anon391
MEM_POOL_INTERNAL_H__	components\libraries\bootloader_dfu\hci_transport\hci_mem_pool_internal.h	23;"	d
RX_BUF_QUEUE_SIZE	components\libraries\bootloader_dfu\hci_transport\hci_mem_pool_internal.h	28;"	d
RX_BUF_SIZE	components\libraries\bootloader_dfu\hci_transport\hci_mem_pool_internal.h	26;"	d
TX_BUF_SIZE	components\libraries\bootloader_dfu\hci_transport\hci_mem_pool_internal.h	25;"	d
HCI_SLIP_UART_BAUDRATE	components\libraries\bootloader_dfu\hci_transport\hci_transport_config.h	37;"	d
HCI_SLIP_UART_CTS_PIN_NUMBER	components\libraries\bootloader_dfu\hci_transport\hci_transport_config.h	33;"	d
HCI_SLIP_UART_MODE	components\libraries\bootloader_dfu\hci_transport\hci_transport_config.h	35;"	d
HCI_SLIP_UART_RTS_PIN_NUMBER	components\libraries\bootloader_dfu\hci_transport\hci_transport_config.h	31;"	d
HCI_SLIP_UART_RX_PIN_NUMBER	components\libraries\bootloader_dfu\hci_transport\hci_transport_config.h	27;"	d
HCI_SLIP_UART_TX_PIN_NUMBER	components\libraries\bootloader_dfu\hci_transport\hci_transport_config.h	29;"	d
HCI_TRANSPORT_CONFIG_H__	components\libraries\bootloader_dfu\hci_transport\hci_transport_config.h	22;"	d
MAX_PACKET_SIZE_IN_BITS	components\libraries\bootloader_dfu\hci_transport\hci_transport_config.h	40;"	d
USED_BAUD_RATE	components\libraries\bootloader_dfu\hci_transport\hci_transport_config.h	41;"	d
app_button_disable	components\libraries\button\app_button.c	/^uint32_t app_button_disable(void)$/;"	f
app_button_enable	components\libraries\button\app_button.c	/^uint32_t app_button_enable(void)$/;"	f
app_button_init	components\libraries\button\app_button.c	/^uint32_t app_button_init(app_button_cfg_t *             p_buttons,$/;"	f
app_button_is_pushed	components\libraries\button\app_button.c	/^uint32_t app_button_is_pushed(uint8_t button_id, bool * p_is_pushed)$/;"	f
button_handler_execute	components\libraries\button\app_button.c	/^static void button_handler_execute(app_button_cfg_t * p_btn, uint32_t transition)$/;"	f	file:
detection_delay_timeout_handler	components\libraries\button\app_button.c	/^static void detection_delay_timeout_handler(void * p_context)$/;"	f	file:
gpiote_event_handler	components\libraries\button\app_button.c	/^static void gpiote_event_handler(uint32_t event_pins_low_to_high, uint32_t event_pins_high_to_low)$/;"	f	file:
m_button_count	components\libraries\button\app_button.c	/^static uint8_t                        m_button_count;              \/**< Number of configured buttons. *\/$/;"	v	file:
m_detection_delay	components\libraries\button\app_button.c	/^static uint32_t                       m_detection_delay;           \/**< Delay before a button is reported as pushed. *\/$/;"	v	file:
m_detection_delay_timer_id	components\libraries\button\app_button.c	/^static app_timer_id_t                 m_detection_delay_timer_id;  \/**< Polling timer id. *\/$/;"	v	file:
m_gpiote_user_id	components\libraries\button\app_button.c	/^static app_gpiote_user_id_t           m_gpiote_user_id;            \/**< GPIOTE user id for buttons module. *\/$/;"	v	file:
m_pin_transition	components\libraries\button\app_button.c	/^static pin_transition_t               m_pin_transition;            \/**< pin transaction direction. *\/$/;"	v	file:
mp_buttons	components\libraries\button\app_button.c	/^static app_button_cfg_t *             mp_buttons = NULL;           \/**< Button configuration. *\/$/;"	v	file:
APP_BUTTON_ACTIVE_HIGH	components\libraries\button\app_button.h	47;"	d
APP_BUTTON_ACTIVE_LOW	components\libraries\button\app_button.h	48;"	d
APP_BUTTON_H__	components\libraries\button\app_button.h	37;"	d
APP_BUTTON_PUSH	components\libraries\button\app_button.h	45;"	d
APP_BUTTON_RELEASE	components\libraries\button\app_button.h	46;"	d
active_state	components\libraries\button\app_button.h	/^    uint8_t              active_state;     \/**< APP_BUTTON_ACTIVE_HIGH or APP_BUTTON_ACTIVE_LOW. *\/$/;"	m	struct:__anon392
app_button_cfg_t	components\libraries\button\app_button.h	/^} app_button_cfg_t;$/;"	t	typeref:struct:__anon392
app_button_handler_t	components\libraries\button\app_button.h	/^typedef void (*app_button_handler_t)(uint8_t pin_no, uint8_t button_action);$/;"	t
button_handler	components\libraries\button\app_button.h	/^    app_button_handler_t button_handler;   \/**< Handler to be called when button is pushed. *\/$/;"	m	struct:__anon392
high_to_low	components\libraries\button\app_button.h	/^    uint32_t high_to_low;   \/**Pin went from high to low *\/$/;"	m	struct:__anon393
low_to_high	components\libraries\button\app_button.h	/^    uint32_t low_to_high;   \/**Pin went from low to high *\/$/;"	m	struct:__anon393
pin_no	components\libraries\button\app_button.h	/^    uint8_t              pin_no;           \/**< Pin to be used as a button. *\/$/;"	m	struct:__anon392
pin_transition_t	components\libraries\button\app_button.h	/^} pin_transition_t;$/;"	t	typeref:struct:__anon393
pull_cfg	components\libraries\button\app_button.h	/^    nrf_gpio_pin_pull_t  pull_cfg;         \/**< Pull-up or -down configuration. *\/$/;"	m	struct:__anon392
CONSOLE_AVAILABLE	components\libraries\console\console.c	/^    CONSOLE_AVAILABLE$/;"	e	enum:__anon395	file:
CONSOLE_UNINIT	components\libraries\console\console.c	/^    CONSOLE_UNINIT = 0,$/;"	e	enum:__anon395	file:
NEWLINE_INPUT_LEN	components\libraries\console\console.c	23;"	d	file:
console_available	components\libraries\console\console.c	/^bool console_available(void)$/;"	f
console_chars_available	components\libraries\console\console.c	/^bool console_chars_available(void)$/;"	f
console_get_char	components\libraries\console\console.c	/^uint8_t console_get_char(void)$/;"	f
console_get_chars	components\libraries\console\console.c	/^void console_get_chars(uint8_t * chars, uint8_t num_chars)$/;"	f
console_get_hexnybble	components\libraries\console\console.c	/^uint8_t console_get_hexnybble(void)$/;"	f
console_get_line	components\libraries\console\console.c	/^void console_get_line(uint8_t * string, uint8_t max_len)$/;"	f
console_get_string	components\libraries\console\console.c	/^void console_get_string(uint8_t * string, uint8_t num_chars)$/;"	f
console_init	components\libraries\console\console.c	/^void console_init(void)$/;"	f
console_put_char	components\libraries\console\console.c	/^void console_put_char(uint8_t ch)$/;"	f
console_put_chars	components\libraries\console\console.c	/^void console_put_chars(uint8_t const * chars, uint8_t num_chars)$/;"	f
console_put_dec32bit	components\libraries\console\console.c	/^void console_put_dec32bit(uint32_t ww)  \/\/ ww is in the range [0 4294967295]$/;"	f
console_put_decbyte	components\libraries\console\console.c	/^void console_put_decbyte(uint8_t b) \/\/ b is in the range [0 255]$/;"	f
console_put_decword	components\libraries\console\console.c	/^void console_put_decword(uint16_t w)  \/\/ w is in the range [0 65535]$/;"	f
console_put_hexbyte	components\libraries\console\console.c	/^void console_put_hexbyte(uint8_t b)$/;"	f
console_put_hexbytearray	components\libraries\console\console.c	/^void console_put_hexbytearray(uint8_t * p, uint8_t n)$/;"	f
console_put_hexnybble	components\libraries\console\console.c	/^void console_put_hexnybble(uint8_t n)$/;"	f
console_put_hexword	components\libraries\console\console.c	/^void console_put_hexword(uint16_t w)$/;"	f
console_put_line	components\libraries\console\console.c	/^void console_put_line(uint8_t const * string)$/;"	f
console_put_newline	components\libraries\console\console.c	/^void console_put_newline(void)$/;"	f
console_put_string	components\libraries\console\console.c	/^void console_put_string(uint8_t const * string)$/;"	f
hex_tab	components\libraries\console\console.c	/^static const char hex_tab[] = "0123456789ABCDEF"; \/*!< Table of ASCII hexadecimal digits *\/$/;"	v	file:
m_console	components\libraries\console\console.c	/^} m_console = CONSOLE_UNINIT;$/;"	v	typeref:enum:__anon395	file:
newline_input	components\libraries\console\console.c	/^static const uint8_t newline_input[] = CONSOLE_NEWLINE_INPUT; \/*!< Needed to compare input against to find end of line *\/$/;"	v	file:
CONSOLE_H__	components\libraries\console\console.h	81;"	d
CONSOLE_NEWLINE_CR	components\libraries\console\console.h	88;"	d
CONSOLE_NEWLINE_CRLF	components\libraries\console\console.h	87;"	d
CONSOLE_NEWLINE_CRLF_NUMERIC	components\libraries\console\console.h	90;"	d
CONSOLE_NEWLINE_CR_NUMERIC	components\libraries\console\console.h	91;"	d
CONSOLE_NEWLINE_DEFAULT	components\libraries\console\console.h	94;"	d
CONSOLE_NEWLINE_INPUT	components\libraries\console\console.h	99;"	d
CONSOLE_NEWLINE_LF	components\libraries\console\console.h	89;"	d
CONSOLE_NEWLINE_LF_NUMERIC	components\libraries\console\console.h	92;"	d
CONSOLE_NEWLINE_OUTPUT	components\libraries\console\console.h	105;"	d
crc16_compute	components\libraries\crc16\crc16.c	/^uint16_t crc16_compute(const uint8_t * p_data, uint32_t size, const uint16_t * p_crc)$/;"	f
CRC16_H__	components\libraries\crc16\crc16.h	23;"	d
FIFO_LENGTH	components\libraries\fifo\app_fifo.c	23;"	d	file:
app_fifo_flush	components\libraries\fifo\app_fifo.c	/^uint32_t app_fifo_flush(app_fifo_t * p_fifo)$/;"	f
app_fifo_get	components\libraries\fifo\app_fifo.c	/^uint32_t app_fifo_get(app_fifo_t * p_fifo, uint8_t * p_byte)$/;"	f
app_fifo_init	components\libraries\fifo\app_fifo.c	/^uint32_t app_fifo_init(app_fifo_t * p_fifo, uint8_t * p_buf, uint16_t buf_size)$/;"	f
app_fifo_put	components\libraries\fifo\app_fifo.c	/^uint32_t app_fifo_put(app_fifo_t * p_fifo, uint8_t byte)$/;"	f
fifo_length	components\libraries\fifo\app_fifo.c	/^static __INLINE uint32_t fifo_length(app_fifo_t * p_fifo)$/;"	f	file:
APP_FIFO_H__	components\libraries\fifo\app_fifo.h	23;"	d
app_fifo_t	components\libraries\fifo\app_fifo.h	/^} app_fifo_t;$/;"	t	typeref:struct:__anon396
buf_size_mask	components\libraries\fifo\app_fifo.h	/^    uint16_t           buf_size_mask;   \/**< Read\/write index mask. Also used for size checking. *\/$/;"	m	struct:__anon396
p_buf	components\libraries\fifo\app_fifo.h	/^    uint8_t *          p_buf;           \/**< Pointer to FIFO buffer memory.                      *\/$/;"	m	struct:__anon396
read_pos	components\libraries\fifo\app_fifo.h	/^    volatile uint32_t  read_pos;        \/**< Next read position in the FIFO buffer.              *\/$/;"	m	struct:__anon396
write_pos	components\libraries\fifo\app_fifo.h	/^    volatile uint32_t  write_pos;       \/**< Next write position in the FIFO buffer.             *\/$/;"	m	struct:__anon396
GPIOTE_IRQHandler	components\libraries\gpiote\app_gpiote.c	/^void GPIOTE_IRQHandler(void)$/;"	f
app_gpiote_disable_interrupts	components\libraries\gpiote\app_gpiote.c	/^uint32_t app_gpiote_disable_interrupts(void)$/;"	f
app_gpiote_enable_interrupts	components\libraries\gpiote\app_gpiote.c	/^uint32_t app_gpiote_enable_interrupts(void)$/;"	f
app_gpiote_end_irq_event_handler_register	components\libraries\gpiote\app_gpiote.c	/^uint32_t app_gpiote_end_irq_event_handler_register(app_gpiote_input_event_handler_t event_handler)$/;"	f
app_gpiote_end_irq_event_handler_unregister	components\libraries\gpiote\app_gpiote.c	/^uint32_t app_gpiote_end_irq_event_handler_unregister(void)$/;"	f
app_gpiote_init	components\libraries\gpiote\app_gpiote.c	/^uint32_t app_gpiote_init(uint8_t max_users, void * p_buffer)$/;"	f
app_gpiote_input_event_handler_register	components\libraries\gpiote\app_gpiote.c	/^uint32_t app_gpiote_input_event_handler_register(const uint8_t                    channel,$/;"	f
app_gpiote_input_event_handler_unregister	components\libraries\gpiote\app_gpiote.c	/^uint32_t app_gpiote_input_event_handler_unregister(const uint8_t channel)$/;"	f
app_gpiote_pins_state_get	components\libraries\gpiote\app_gpiote.c	/^uint32_t app_gpiote_pins_state_get(app_gpiote_user_id_t user_id, uint32_t * p_pins)$/;"	f
app_gpiote_user_disable	components\libraries\gpiote\app_gpiote.c	/^uint32_t app_gpiote_user_disable(app_gpiote_user_id_t user_id)$/;"	f
app_gpiote_user_enable	components\libraries\gpiote\app_gpiote.c	/^uint32_t app_gpiote_user_enable(app_gpiote_user_id_t user_id)$/;"	f
app_gpiote_user_register	components\libraries\gpiote\app_gpiote.c	/^uint32_t app_gpiote_user_register(app_gpiote_user_id_t     * p_user_id,$/;"	f
event_handler	components\libraries\gpiote\app_gpiote.c	/^    app_gpiote_event_handler_t event_handler;         \/**< Pointer to function to be executed when an event occurs. *\/$/;"	m	struct:__anon397	file:
gpiote_user_t	components\libraries\gpiote\app_gpiote.c	/^} gpiote_user_t;$/;"	t	typeref:struct:__anon397	file:
m_enabled_users_mask	components\libraries\gpiote\app_gpiote.c	/^static uint32_t        m_enabled_users_mask;          \/**< Mask for tracking which users are enabled. *\/$/;"	v	file:
m_user_array_size	components\libraries\gpiote\app_gpiote.c	/^static uint8_t         m_user_array_size;             \/**< Size of user array. *\/$/;"	v	file:
m_user_count	components\libraries\gpiote\app_gpiote.c	/^static uint8_t         m_user_count;                  \/**< Number of registered users. *\/$/;"	v	file:
mp_users	components\libraries\gpiote\app_gpiote.c	/^static gpiote_user_t * mp_users = NULL;               \/**< Array of GPIOTE users. *\/$/;"	v	file:
pins_high_to_low_mask	components\libraries\gpiote\app_gpiote.c	/^    uint32_t                   pins_high_to_low_mask; \/**< Mask defining which pins will generate events to this user when toggling high->low. *\/$/;"	m	struct:__anon397	file:
pins_low_to_high_mask	components\libraries\gpiote\app_gpiote.c	/^    uint32_t                   pins_low_to_high_mask; \/**< Mask defining which pins will generate events to this user when toggling low->high. *\/$/;"	m	struct:__anon397	file:
pins_mask	components\libraries\gpiote\app_gpiote.c	/^    uint32_t                   pins_mask;             \/**< Mask defining which pins user wants to monitor. *\/$/;"	m	struct:__anon397	file:
pins_sense_disable	components\libraries\gpiote\app_gpiote.c	/^static void pins_sense_disable(app_gpiote_user_id_t user_id)$/;"	f	file:
sense_high_pins	components\libraries\gpiote\app_gpiote.c	/^    uint32_t                   sense_high_pins;       \/**< Mask defining which pins are configured to generate GPIOTE interrupt on transition to high level. *\/$/;"	m	struct:__anon397	file:
sense_level_toggle	components\libraries\gpiote\app_gpiote.c	/^static void sense_level_toggle(gpiote_user_t * p_user, uint32_t pins)$/;"	f	file:
APP_GPIOTE_BUF_SIZE	components\libraries\gpiote\app_gpiote.h	58;"	d
APP_GPIOTE_H__	components\libraries\gpiote\app_gpiote.h	41;"	d
APP_GPIOTE_INIT	components\libraries\gpiote\app_gpiote.h	80;"	d
GPIOTE_USER_NODE_SIZE	components\libraries\gpiote\app_gpiote.h	49;"	d
NO_OF_PINS	components\libraries\gpiote\app_gpiote.h	50;"	d
app_gpiote_event_handler_t	components\libraries\gpiote\app_gpiote.h	/^typedef void (*app_gpiote_event_handler_t)(uint32_t event_pins_low_to_high,$/;"	t
app_gpiote_input_event_handler_t	components\libraries\gpiote\app_gpiote.h	/^typedef void (*app_gpiote_input_event_handler_t)(void);$/;"	t
app_gpiote_user_id_t	components\libraries\gpiote\app_gpiote.h	/^typedef uint8_t app_gpiote_user_id_t;$/;"	t
GPIOTE_IRQHandler	components\libraries\gpiote\app_gpiote_fast_detect.c	/^void GPIOTE_IRQHandler(void)$/;"	f
NRF51_GPIOTE_CHANNEL	components\libraries\gpiote\app_gpiote_fast_detect.c	21;"	d	file:
NRF51_PINS	components\libraries\gpiote\app_gpiote_fast_detect.c	22;"	d	file:
SWI1_IRQHandler	components\libraries\gpiote\app_gpiote_fast_detect.c	/^void SWI1_IRQHandler(void)$/;"	f
app_gpiote_disable_interrupts	components\libraries\gpiote\app_gpiote_fast_detect.c	/^uint32_t app_gpiote_disable_interrupts(void)$/;"	f
app_gpiote_enable_interrupts	components\libraries\gpiote\app_gpiote_fast_detect.c	/^uint32_t app_gpiote_enable_interrupts(void)$/;"	f
app_gpiote_end_irq_event_handler_register	components\libraries\gpiote\app_gpiote_fast_detect.c	/^uint32_t app_gpiote_end_irq_event_handler_register(app_gpiote_input_event_handler_t event_handler)$/;"	f
app_gpiote_end_irq_event_handler_unregister	components\libraries\gpiote\app_gpiote_fast_detect.c	/^uint32_t app_gpiote_end_irq_event_handler_unregister(void)$/;"	f
app_gpiote_init	components\libraries\gpiote\app_gpiote_fast_detect.c	/^uint32_t app_gpiote_init(uint8_t max_users, void * p_buffer)$/;"	f
app_gpiote_input_event_handler_register	components\libraries\gpiote\app_gpiote_fast_detect.c	/^uint32_t app_gpiote_input_event_handler_register(const uint8_t                    channel,$/;"	f
app_gpiote_input_event_handler_unregister	components\libraries\gpiote\app_gpiote_fast_detect.c	/^uint32_t app_gpiote_input_event_handler_unregister(const uint8_t channel)$/;"	f
app_gpiote_pins_state_get	components\libraries\gpiote\app_gpiote_fast_detect.c	/^uint32_t app_gpiote_pins_state_get(app_gpiote_user_id_t user_id, uint32_t * p_pins)$/;"	f
app_gpiote_swi1_disable_irq	components\libraries\gpiote\app_gpiote_fast_detect.c	/^static void app_gpiote_swi1_disable_irq(void)$/;"	f	file:
app_gpiote_swi1_enable_irq	components\libraries\gpiote\app_gpiote_fast_detect.c	/^static void app_gpiote_swi1_enable_irq(void)$/;"	f	file:
app_gpiote_user_disable	components\libraries\gpiote\app_gpiote_fast_detect.c	/^uint32_t app_gpiote_user_disable(app_gpiote_user_id_t user_id)$/;"	f
app_gpiote_user_enable	components\libraries\gpiote\app_gpiote_fast_detect.c	/^uint32_t app_gpiote_user_enable(app_gpiote_user_id_t user_id)$/;"	f
app_gpiote_user_register	components\libraries\gpiote\app_gpiote_fast_detect.c	/^uint32_t app_gpiote_user_register(app_gpiote_user_id_t *     p_user_id,$/;"	f
event_handler	components\libraries\gpiote\app_gpiote_fast_detect.c	/^    app_gpiote_event_handler_t event_handler;         \/**< Pointer to function to be executed when an event occurs. *\/$/;"	m	struct:__anon398	file:
gpiote_user_t	components\libraries\gpiote\app_gpiote_fast_detect.c	/^} gpiote_user_t;$/;"	t	typeref:struct:__anon398	file:
m_app_gpiote_end_irq_event_handler	components\libraries\gpiote\app_gpiote_fast_detect.c	/^static app_gpiote_input_event_handler_t m_app_gpiote_end_irq_event_handler = NULL;$/;"	v	file:
m_app_gpiote_input_event_handlers	components\libraries\gpiote\app_gpiote_fast_detect.c	/^static app_gpiote_input_event_handler_t m_app_gpiote_input_event_handlers[4] = {0};$/;"	v	file:
m_enabled_users_mask	components\libraries\gpiote\app_gpiote_fast_detect.c	/^static uint32_t        m_enabled_users_mask; \/**< Mask for tracking which users are enabled. *\/$/;"	v	file:
m_user_array_size	components\libraries\gpiote\app_gpiote_fast_detect.c	/^static uint8_t         m_user_array_size;    \/**< Size of user array. *\/$/;"	v	file:
m_user_count	components\libraries\gpiote\app_gpiote_fast_detect.c	/^static uint8_t         m_user_count;         \/**< Number of registered users. *\/$/;"	v	file:
mp_users	components\libraries\gpiote\app_gpiote_fast_detect.c	/^static gpiote_user_t * mp_users = NULL;      \/**< Array of GPIOTE users. *\/$/;"	v	file:
pins_high_to_low_mask	components\libraries\gpiote\app_gpiote_fast_detect.c	/^    uint32_t                   pins_high_to_low_mask; \/**< Mask defining which pins will generate events to this user when toggling high->low. *\/$/;"	m	struct:__anon398	file:
pins_low_to_high_mask	components\libraries\gpiote\app_gpiote_fast_detect.c	/^    uint32_t                   pins_low_to_high_mask; \/**< Mask defining which pins will generate events to this user when toggling low->high. *\/$/;"	m	struct:__anon398	file:
pins_mask	components\libraries\gpiote\app_gpiote_fast_detect.c	/^    uint32_t                   pins_mask;             \/**< Mask defining which pins user wants to monitor. *\/$/;"	m	struct:__anon398	file:
pins_sense_disable	components\libraries\gpiote\app_gpiote_fast_detect.c	/^static void pins_sense_disable(app_gpiote_user_id_t user_id)$/;"	f	file:
sense_high_pins	components\libraries\gpiote\app_gpiote_fast_detect.c	/^    uint32_t                   sense_high_pins;       \/**< Mask defining which pins are configured to generate GPIOTE interrupt on transition to high level. *\/$/;"	m	struct:__anon398	file:
sense_level_toggle	components\libraries\gpiote\app_gpiote_fast_detect.c	/^static void sense_level_toggle(gpiote_user_t * p_user, uint32_t pins)$/;"	f	file:
MEM_POOL_INTERNAL_H__	components\libraries\hci\config\hci_mem_pool_internal.h	23;"	d
RX_BUF_QUEUE_SIZE	components\libraries\hci\config\hci_mem_pool_internal.h	28;"	d
RX_BUF_SIZE	components\libraries\hci\config\hci_mem_pool_internal.h	26;"	d
TX_BUF_SIZE	components\libraries\hci\config\hci_mem_pool_internal.h	25;"	d
HCI_SLIP_UART_BAUDRATE	components\libraries\hci\config\hci_transport_config.h	32;"	d
HCI_SLIP_UART_CTS_PIN_NUMBER	components\libraries\hci\config\hci_transport_config.h	28;"	d
HCI_SLIP_UART_MODE	components\libraries\hci\config\hci_transport_config.h	30;"	d
HCI_SLIP_UART_RTS_PIN_NUMBER	components\libraries\hci\config\hci_transport_config.h	26;"	d
HCI_SLIP_UART_RX_PIN_NUMBER	components\libraries\hci\config\hci_transport_config.h	22;"	d
HCI_SLIP_UART_TX_PIN_NUMBER	components\libraries\hci\config\hci_transport_config.h	24;"	d
HCI_TRANSPORT_CFG_H__	components\libraries\hci\config\hci_transport_config.h	19;"	d
MAX_PACKET_SIZE_IN_BITS	components\libraries\hci\config\hci_transport_config.h	35;"	d
USED_BAUD_RATE	components\libraries\hci\config\hci_transport_config.h	36;"	d
free_available_count	components\libraries\hci\hci_mem_pool.c	/^    uint32_t           free_available_count;                        \/**< Free area element count. *\/$/;"	m	struct:__anon400	file:
free_index	components\libraries\hci\hci_mem_pool.c	/^    uint32_t           free_index;                                  \/**< Free position index. *\/                                                                                                                  $/;"	m	struct:__anon400	file:
free_window_count	components\libraries\hci\hci_mem_pool.c	/^    uint32_t           free_window_count;                           \/**< Free space element count. *\/$/;"	m	struct:__anon400	file:
hci_mem_pool_close	components\libraries\hci\hci_mem_pool.c	/^uint32_t hci_mem_pool_close(void)$/;"	f
hci_mem_pool_open	components\libraries\hci\hci_mem_pool.c	/^uint32_t hci_mem_pool_open(void)$/;"	f
hci_mem_pool_rx_consume	components\libraries\hci\hci_mem_pool.c	/^uint32_t hci_mem_pool_rx_consume(uint8_t * p_buffer)$/;"	f
hci_mem_pool_rx_data_size_set	components\libraries\hci\hci_mem_pool.c	/^uint32_t hci_mem_pool_rx_data_size_set(uint32_t length)$/;"	f
hci_mem_pool_rx_extract	components\libraries\hci\hci_mem_pool.c	/^uint32_t hci_mem_pool_rx_extract(uint8_t ** pp_buffer, uint32_t * p_length)$/;"	f
hci_mem_pool_rx_produce	components\libraries\hci\hci_mem_pool.c	/^uint32_t hci_mem_pool_rx_produce(uint32_t length, void ** pp_buffer)$/;"	f
hci_mem_pool_tx_alloc	components\libraries\hci\hci_mem_pool.c	/^uint32_t hci_mem_pool_tx_alloc(void ** pp_buffer)$/;"	f
hci_mem_pool_tx_free	components\libraries\hci\hci_mem_pool.c	/^uint32_t hci_mem_pool_tx_free(void)$/;"	f
length	components\libraries\hci\hci_mem_pool.c	/^    uint32_t length;                                                \/**< Length of the RX buffer memory array. *\/$/;"	m	struct:__anon399	file:
m_is_tx_allocated	components\libraries\hci\hci_mem_pool.c	/^static bool              m_is_tx_allocated;                         \/**< Boolean value to determine if the TX buffer is allocated. *\/$/;"	v	file:
m_rx_buffer_elem_queue	components\libraries\hci\hci_mem_pool.c	/^static rx_buffer_elem_t  m_rx_buffer_elem_queue[RX_BUF_QUEUE_SIZE]; \/**< RX buffer element instances. *\/$/;"	v	file:
m_rx_buffer_queue	components\libraries\hci\hci_mem_pool.c	/^static rx_buffer_queue_t m_rx_buffer_queue;                         \/**< RX buffer queue element instance. *\/$/;"	v	file:
p_buffer	components\libraries\hci\hci_mem_pool.c	/^    rx_buffer_elem_t * p_buffer;                                    \/**< Pointer to RX buffer element. *\/$/;"	m	struct:__anon400	file:
read_available_count	components\libraries\hci\hci_mem_pool.c	/^    uint32_t           read_available_count;                        \/**< Read area element count. *\/$/;"	m	struct:__anon400	file:
read_index	components\libraries\hci\hci_mem_pool.c	/^    uint32_t           read_index;                                  \/**< Read position index. *\/                                                                            $/;"	m	struct:__anon400	file:
rx_buffer	components\libraries\hci\hci_mem_pool.c	/^    uint8_t  rx_buffer[RX_BUF_SIZE];                                \/**< RX buffer memory array. *\/  $/;"	m	struct:__anon399	file:
rx_buffer_elem_t	components\libraries\hci\hci_mem_pool.c	/^} rx_buffer_elem_t;$/;"	t	typeref:struct:__anon399	file:
rx_buffer_queue_t	components\libraries\hci\hci_mem_pool.c	/^} rx_buffer_queue_t;$/;"	t	typeref:struct:__anon400	file:
write_index	components\libraries\hci\hci_mem_pool.c	/^    uint32_t           write_index;                                 \/**< Write position index. *\/                                      $/;"	m	struct:__anon400	file:
HCI_MEM_POOL_H__	components\libraries\hci\hci_mem_pool.h	46;"	d
APP_SLIP_END	components\libraries\hci\hci_slip.c	20;"	d	file:
APP_SLIP_ESC	components\libraries\hci\hci_slip.c	21;"	d	file:
APP_SLIP_ESC_END	components\libraries\hci\hci_slip.c	22;"	d	file:
APP_SLIP_ESC_ESC	components\libraries\hci\hci_slip.c	23;"	d	file:
SLIP_OFF	components\libraries\hci\hci_slip.c	/^    SLIP_OFF,                                               \/**< SLIP state OFF. *\/$/;"	e	enum:__anon401	file:
SLIP_READY	components\libraries\hci\hci_slip.c	/^    SLIP_READY,                                             \/**< SLIP state ON. *\/$/;"	e	enum:__anon401	file:
SLIP_TRANSMITTING	components\libraries\hci\hci_slip.c	/^    SLIP_TRANSMITTING,                                      \/**< SLIP state is transmitting indicating write() has been called but data transmission has not completed. *\/$/;"	e	enum:__anon401	file:
handle_rx_byte	components\libraries\hci\hci_slip.c	/^static void (*handle_rx_byte) (uint8_t byte) = handle_rx_byte_wait_start;$/;"	v	file:
handle_rx_byte_default	components\libraries\hci\hci_slip.c	/^static void handle_rx_byte_default(uint8_t byte)$/;"	f	file:
handle_rx_byte_esc	components\libraries\hci\hci_slip.c	/^static void handle_rx_byte_esc(uint8_t byte)$/;"	f	file:
handle_rx_byte_wait_start	components\libraries\hci\hci_slip.c	/^static void handle_rx_byte_wait_start(uint8_t byte)$/;"	f	file:
handle_slip_end	components\libraries\hci\hci_slip.c	/^static void handle_slip_end(void)$/;"	f	file:
hci_slip_close	components\libraries\hci\hci_slip.c	/^uint32_t hci_slip_close()$/;"	f
hci_slip_evt_handler_register	components\libraries\hci\hci_slip.c	/^uint32_t hci_slip_evt_handler_register(hci_slip_event_handler_t event_handler)$/;"	f
hci_slip_open	components\libraries\hci\hci_slip.c	/^uint32_t hci_slip_open()$/;"	f
hci_slip_rx_buffer_register	components\libraries\hci\hci_slip.c	/^uint32_t hci_slip_rx_buffer_register(uint8_t * p_buffer, uint32_t length)$/;"	f
hci_slip_write	components\libraries\hci\hci_slip.c	/^uint32_t hci_slip_write(const uint8_t * p_buffer, uint32_t length)$/;"	f
m_current_state	components\libraries\hci\hci_slip.c	/^static slip_states_t            m_current_state = SLIP_OFF; \/** Current state for the SLIP TX state machine. *\/$/;"	v	file:
m_rx_buffer_length	components\libraries\hci\hci_slip.c	/^static uint32_t                 m_rx_buffer_length;         \/** Length of the current RX buffer. *\/$/;"	v	file:
m_rx_received_count	components\libraries\hci\hci_slip.c	/^static uint32_t                 m_rx_received_count;        \/** Number of SLIP decoded bytes received and stored in mp_rx_buffer. *\/$/;"	v	file:
m_slip_event_handler	components\libraries\hci\hci_slip.c	/^static hci_slip_event_handler_t m_slip_event_handler;       \/** Event callback function for handling of SLIP events, @ref hci_slip_evt_type_t . *\/$/;"	v	file:
m_tx_buffer_index	components\libraries\hci\hci_slip.c	/^static volatile uint32_t        m_tx_buffer_index;          \/** Current index for next byte to transmit in the mp_tx_buffer. *\/$/;"	v	file:
m_tx_buffer_length	components\libraries\hci\hci_slip.c	/^static uint32_t                 m_tx_buffer_length;         \/** Length of the current TX buffer that is in transmission. *\/$/;"	v	file:
m_uart_id	components\libraries\hci\hci_slip.c	/^static uint16_t                 m_uart_id;                  \/** UART id returned from the UART module when calling app_uart_init, this id is kept, as it must be provided to the UART module when calling app_uart_close. *\/$/;"	v	file:
mp_rx_buffer	components\libraries\hci\hci_slip.c	/^static uint8_t *                mp_rx_buffer;               \/** Pointer to the current RX buffer where the next SLIP decoded packet will be stored. *\/$/;"	v	file:
mp_tx_buffer	components\libraries\hci\hci_slip.c	/^static const uint8_t *          mp_tx_buffer;               \/** Pointer to the current TX buffer that is in transmission. *\/$/;"	v	file:
rx_buffer_overflowed	components\libraries\hci\hci_slip.c	/^static bool rx_buffer_overflowed(void)$/;"	f	file:
send_tx_byte	components\libraries\hci\hci_slip.c	/^uint32_t (*send_tx_byte) (void) = send_tx_byte_default;$/;"	v
send_tx_byte_default	components\libraries\hci\hci_slip.c	/^static uint32_t send_tx_byte_default(void)$/;"	f	file:
send_tx_byte_encoded	components\libraries\hci\hci_slip.c	/^static uint32_t send_tx_byte_encoded(void)$/;"	f	file:
send_tx_byte_end	components\libraries\hci\hci_slip.c	/^static uint32_t send_tx_byte_end(void)$/;"	f	file:
send_tx_byte_esc	components\libraries\hci\hci_slip.c	/^static uint32_t send_tx_byte_esc(void)$/;"	f	file:
slip_states_t	components\libraries\hci\hci_slip.c	/^} slip_states_t;$/;"	t	typeref:enum:__anon401	file:
slip_uart_eventhandler	components\libraries\hci\hci_slip.c	/^static void slip_uart_eventhandler(app_uart_evt_t * uart_event)$/;"	f	file:
slip_uart_open	components\libraries\hci\hci_slip.c	/^static uint32_t slip_uart_open(void)$/;"	f	file:
transmit_buffer	components\libraries\hci\hci_slip.c	/^static void transmit_buffer(void)$/;"	f	file:
HCI_SLIP_ERROR	components\libraries\hci\hci_slip.h	/^    HCI_SLIP_ERROR,                         \/**< An event indicating that an unrecoverable error has occurred. *\/$/;"	e	enum:__anon402
HCI_SLIP_EVT_TYPE_MAX	components\libraries\hci\hci_slip.h	/^    HCI_SLIP_EVT_TYPE_MAX                   \/**< Enumeration upper bound. *\/$/;"	e	enum:__anon402
HCI_SLIP_H__	components\libraries\hci\hci_slip.h	32;"	d
HCI_SLIP_RX_OVERFLOW	components\libraries\hci\hci_slip.h	/^    HCI_SLIP_RX_OVERFLOW,                   \/**< An event indicating that RX data has been discarded due to lack of free RX memory. *\/$/;"	e	enum:__anon402
HCI_SLIP_RX_RDY	components\libraries\hci\hci_slip.h	/^    HCI_SLIP_RX_RDY,                        \/**< An event indicating that an RX packet is ready to be read. *\/$/;"	e	enum:__anon402
HCI_SLIP_TX_DONE	components\libraries\hci\hci_slip.h	/^    HCI_SLIP_TX_DONE,                       \/**< An event indicating write completion of the TX packet provided in the function call \\ref hci_slip_write . *\/$/;"	e	enum:__anon402
evt_type	components\libraries\hci\hci_slip.h	/^    hci_slip_evt_type_t evt_type;           \/**< Type of event. *\/$/;"	m	struct:__anon403
hci_slip_event_handler_t	components\libraries\hci\hci_slip.h	/^typedef void (*hci_slip_event_handler_t)(hci_slip_evt_t event);$/;"	t
hci_slip_evt_t	components\libraries\hci\hci_slip.h	/^} hci_slip_evt_t;$/;"	t	typeref:struct:__anon403
hci_slip_evt_type_t	components\libraries\hci\hci_slip.h	/^} hci_slip_evt_type_t;$/;"	t	typeref:enum:__anon402
packet	components\libraries\hci\hci_slip.h	/^    const uint8_t *     packet;             \/**< This field contains a pointer to the packet for which the event relates, i.e. SLIP_TX_DONE: the packet transmitted, SLIP_RX_RDY: the packet received, SLIP_RX_OVERFLOW: The packet which overflow\/or NULL if no receive buffer is available. *\/$/;"	m	struct:__anon403
packet_length	components\libraries\hci\hci_slip.h	/^    uint32_t            packet_length;      \/**< Packet length, i.e. SLIP_TX_DONE: Bytes transmitted, SLIP_RX_RDY: Bytes received, SLIP_RX_OVERFLOW: index at which the packet overflowed. *\/$/;"	m	struct:__anon403
ACK_BUF_SIZE	components\libraries\hci\hci_transport.c	41;"	d	file:
APP_TIMER_PRESCALER	components\libraries\hci\hci_transport.c	38;"	d	file:
DATA_INTEGRITY_MASK	components\libraries\hci\hci_transport.c	31;"	d	file:
INITIAL_ACK_NUMBER_EXPECTED	components\libraries\hci\hci_transport.c	33;"	d	file:
INITIAL_ACK_NUMBER_TX	components\libraries\hci\hci_transport.c	34;"	d	file:
INVALID_PKT_TYPE	components\libraries\hci\hci_transport.c	35;"	d	file:
MAX_RETRY_COUNT	components\libraries\hci\hci_transport.c	40;"	d	file:
MAX_TRANSMISSION_TIME	components\libraries\hci\hci_transport.c	36;"	d	file:
PKT_CRC_SIZE	components\libraries\hci\hci_transport.c	28;"	d	file:
PKT_HDR_SIZE	components\libraries\hci\hci_transport.c	27;"	d	file:
PKT_TYPE_ACK	components\libraries\hci\hci_transport.c	30;"	d	file:
PKT_TYPE_VENDOR_SPECIFIC	components\libraries\hci\hci_transport.c	29;"	d	file:
RELIABLE_PKT_MASK	components\libraries\hci\hci_transport.c	32;"	d	file:
RETRANSMISSION_TIMEOUT_IN_MS	components\libraries\hci\hci_transport.c	37;"	d	file:
RETRANSMISSION_TIMEOUT_IN_TICKS	components\libraries\hci\hci_transport.c	39;"	d	file:
TX_EVENT_SLIP_TX_DONE	components\libraries\hci\hci_transport.c	/^    TX_EVENT_SLIP_TX_DONE,                                           \/**< Event for: HCI_SLIP_TX_DONE event use case. *\/$/;"	e	enum:__anon405	file:
TX_EVENT_STATE_ENTRY	components\libraries\hci\hci_transport.c	/^    TX_EVENT_STATE_ENTRY,                                            \/**< Event for: state entry use case. *\/                                                                                             $/;"	e	enum:__anon405	file:
TX_EVENT_TIMEOUT	components\libraries\hci\hci_transport.c	/^    TX_EVENT_TIMEOUT,                                                \/**< Event for: retransmission timeout use case. *\/$/;"	e	enum:__anon405	file:
TX_EVENT_VALID_RX_ACK	components\libraries\hci\hci_transport.c	/^    TX_EVENT_VALID_RX_ACK                                            \/**< Event for: valid acknowledgement received for TX packet use case. *\/$/;"	e	enum:__anon405	file:
TX_STATE_ACTIVE	components\libraries\hci\hci_transport.c	/^    TX_STATE_ACTIVE                                                  \/**< State for: application packet has been delivered to slip for transmission and peer transport entity acknowledgement packet is waited for. *\/$/;"	e	enum:__anon404	file:
TX_STATE_IDLE	components\libraries\hci\hci_transport.c	/^    TX_STATE_IDLE,                                                   \/**< State for: no application transmission packet processing in progress. *\/                                                                                             $/;"	e	enum:__anon404	file:
TX_STATE_PENDING	components\libraries\hci\hci_transport.c	/^    TX_STATE_PENDING,                                                \/**< State for: TX in progress in slip layer and TX-done event is waited for to signal the end of transmission. *\/$/;"	e	enum:__anon404	file:
ack_transmit	components\libraries\hci\hci_transport.c	/^static void ack_transmit(void)$/;"	f	file:
expected_ack_number_get	components\libraries\hci\hci_transport.c	/^static __INLINE uint8_t expected_ack_number_get(void)$/;"	f	file:
hci_transport_close	components\libraries\hci\hci_transport.c	/^uint32_t hci_transport_close(void)$/;"	f
hci_transport_evt_handler_reg	components\libraries\hci\hci_transport.c	/^uint32_t hci_transport_evt_handler_reg(hci_transport_event_handler_t event_handler)$/;"	f
hci_transport_open	components\libraries\hci\hci_transport.c	/^uint32_t hci_transport_open(void)$/;"	f
hci_transport_pkt_write	components\libraries\hci\hci_transport.c	/^uint32_t hci_transport_pkt_write(const uint8_t * p_buffer, uint16_t length)$/;"	f
hci_transport_rx_pkt_consume	components\libraries\hci\hci_transport.c	/^uint32_t hci_transport_rx_pkt_consume(uint8_t * p_buffer)$/;"	f
hci_transport_rx_pkt_extract	components\libraries\hci\hci_transport.c	/^uint32_t hci_transport_rx_pkt_extract(uint8_t ** pp_buffer, uint16_t * p_length)$/;"	f
hci_transport_timeout_handle	components\libraries\hci\hci_transport.c	/^void hci_transport_timeout_handle(void * p_context)$/;"	f
hci_transport_tx_alloc	components\libraries\hci\hci_transport.c	/^uint32_t hci_transport_tx_alloc(uint8_t ** pp_memory)$/;"	f
hci_transport_tx_done_register	components\libraries\hci\hci_transport.c	/^uint32_t hci_transport_tx_done_register(hci_transport_tx_done_handler_t event_handler)$/;"	f
hci_transport_tx_free	components\libraries\hci\hci_transport.c	/^uint32_t hci_transport_tx_free(void)$/;"	f
header_checksum_calculate	components\libraries\hci\hci_transport.c	/^static uint8_t header_checksum_calculate(const uint8_t * p_hdr)$/;"	f	file:
is_rx_pkt_valid	components\libraries\hci\hci_transport.c	/^static bool is_rx_pkt_valid(const uint8_t * p_buffer, uint32_t length)$/;"	f	file:
m_app_timer_id	components\libraries\hci\hci_transport.c	/^static app_timer_id_t                  m_app_timer_id;               \/**< Application timer id. *\/$/;"	v	file:
m_is_slip_decode_ready	components\libraries\hci\hci_transport.c	/^static bool                            m_is_slip_decode_ready;       \/**< Boolean to determine has slip decode been completed or not. *\/$/;"	v	file:
m_packet_expected_seq_number	components\libraries\hci\hci_transport.c	/^static uint32_t                        m_packet_expected_seq_number; \/**< Sequence number counter of the packet expected to be received . *\/ $/;"	v	file:
m_packet_transmit_seq_number	components\libraries\hci\hci_transport.c	/^static uint32_t                        m_packet_transmit_seq_number; \/**< Sequence number counter of the transmitted packet for which acknowledgement packet is waited for. *\/ $/;"	v	file:
m_rx_ack_buffer	components\libraries\hci\hci_transport.c	/^static uint8_t                         m_rx_ack_buffer[ACK_BUF_SIZE];\/**< RX buffer big enough to hold an acknowledgement packet and which is taken in use upon receiving  HCI_SLIP_RX_OVERFLOW event. *\/$/;"	v	file:
m_transport_event_handle	components\libraries\hci\hci_transport.c	/^static hci_transport_event_handler_t   m_transport_event_handle;     \/**< Event handler callback function. *\/$/;"	v	file:
m_transport_tx_done_handle	components\libraries\hci\hci_transport.c	/^static hci_transport_tx_done_handler_t m_transport_tx_done_handle;   \/**< TX done event callback function. *\/$/;"	v	file:
m_tx_buffer_length	components\libraries\hci\hci_transport.c	/^static uint32_t                        m_tx_buffer_length;           \/**< Length of application TX packet data to be transmitted in bytes. *\/$/;"	v	file:
m_tx_done_result_code	components\libraries\hci\hci_transport.c	/^static hci_transport_tx_done_result_t  m_tx_done_result_code;        \/**< TX done event callback function result code. *\/$/;"	v	file:
m_tx_retry_counter	components\libraries\hci\hci_transport.c	/^static uint32_t                        m_tx_retry_counter;           \/**< Application packet retransmission counter. *\/$/;"	v	file:
m_tx_state	components\libraries\hci\hci_transport.c	/^static tx_state_t                      m_tx_state;                   \/**< Current TX state. *\/$/;"	v	file:
mp_slip_used_rx_buffer	components\libraries\hci\hci_transport.c	/^static uint8_t *                       mp_slip_used_rx_buffer;       \/**< Reference to RX buffer used by the slip layer. *\/$/;"	v	file:
mp_tx_buffer	components\libraries\hci\hci_transport.c	/^static uint8_t *                       mp_tx_buffer;                 \/**< Pointer to TX application buffer to be transmitted. *\/$/;"	v	file:
packet_number_expected_get	components\libraries\hci\hci_transport.c	/^static __INLINE uint8_t packet_number_expected_get(void)$/;"	f	file:
packet_number_expected_inc	components\libraries\hci\hci_transport.c	/^static __INLINE void packet_number_expected_inc(void)$/;"	f	file:
packet_number_to_transmit_get	components\libraries\hci\hci_transport.c	/^static __INLINE uint8_t packet_number_to_transmit_get(void)$/;"	f	file:
packet_number_tx_inc	components\libraries\hci\hci_transport.c	/^static __INLINE void packet_number_tx_inc(void)$/;"	f	file:
packet_seq_nmbr_extract	components\libraries\hci\hci_transport.c	/^static __INLINE uint8_t packet_seq_nmbr_extract(const uint8_t * p_buffer)$/;"	f	file:
packet_type_decode	components\libraries\hci\hci_transport.c	/^static __INLINE uint32_t packet_type_decode(const uint8_t * p_buffer, uint32_t length)$/;"	f	file:
pkt_write_handle	components\libraries\hci\hci_transport.c	/^static uint32_t pkt_write_handle(void)$/;"	f	file:
rx_ack_pkt_type_handle	components\libraries\hci\hci_transport.c	/^static __INLINE bool rx_ack_pkt_type_handle(const uint8_t * p_buffer)$/;"	f	file:
rx_vendor_specific_pkt_type_handle	components\libraries\hci\hci_transport.c	/^static void rx_vendor_specific_pkt_type_handle(const uint8_t * p_buffer, uint32_t length)$/;"	f	file:
slip_event_handle	components\libraries\hci\hci_transport.c	/^void slip_event_handle(hci_slip_evt_t event)$/;"	f
tx_event_t	components\libraries\hci\hci_transport.c	/^} tx_event_t;$/;"	t	typeref:enum:__anon405	file:
tx_packet_byte_zero_construct	components\libraries\hci\hci_transport.c	/^static __INLINE uint8_t tx_packet_byte_zero_construct(void)$/;"	f	file:
tx_sm_event_handle	components\libraries\hci\hci_transport.c	/^static void tx_sm_event_handle(tx_event_t event)$/;"	f	file:
tx_sm_state_change	components\libraries\hci\hci_transport.c	/^static void tx_sm_state_change(tx_state_t new_state)$/;"	f	file:
tx_state_t	components\libraries\hci\hci_transport.c	/^} tx_state_t;$/;"	t	typeref:enum:__anon404	file:
HCI_TRANSPORT_EVT_TYPE_MAX	components\libraries\hci\hci_transport.h	/^    HCI_TRANSPORT_EVT_TYPE_MAX          \/**< Enumeration upper bound. *\/  $/;"	e	enum:__anon406
HCI_TRANSPORT_H__	components\libraries\hci\hci_transport.h	76;"	d
HCI_TRANSPORT_RX_RDY	components\libraries\hci\hci_transport.h	/^    HCI_TRANSPORT_RX_RDY,               \/**< An event indicating that RX packet is ready for read. *\/$/;"	e	enum:__anon406
HCI_TRANSPORT_TX_DONE_FAILURE	components\libraries\hci\hci_transport.h	/^    HCI_TRANSPORT_TX_DONE_FAILURE       \/**< Transmission failure. *\/    $/;"	e	enum:__anon408
HCI_TRANSPORT_TX_DONE_SUCCESS	components\libraries\hci\hci_transport.h	/^    HCI_TRANSPORT_TX_DONE_SUCCESS,      \/**< Transmission success, peer transport entity has acknowledged the transmission. *\/$/;"	e	enum:__anon408
evt_type	components\libraries\hci\hci_transport.h	/^    hci_transport_evt_type_t evt_type;  \/**< Type of event. *\/$/;"	m	struct:__anon407
hci_transport_event_handler_t	components\libraries\hci\hci_transport.h	/^typedef void (*hci_transport_event_handler_t)(hci_transport_evt_t event);$/;"	t
hci_transport_evt_t	components\libraries\hci\hci_transport.h	/^} hci_transport_evt_t;$/;"	t	typeref:struct:__anon407
hci_transport_evt_type_t	components\libraries\hci\hci_transport.h	/^} hci_transport_evt_type_t;$/;"	t	typeref:enum:__anon406
hci_transport_tx_done_handler_t	components\libraries\hci\hci_transport.h	/^typedef void (*hci_transport_tx_done_handler_t)(hci_transport_tx_done_result_t result);$/;"	t
hci_transport_tx_done_result_t	components\libraries\hci\hci_transport.h	/^} hci_transport_tx_done_result_t;$/;"	t	typeref:enum:__anon408
APP_SCHED_QUEUE_EMPTY	components\libraries\scheduler\app_scheduler.c	67;"	d	file:
APP_SCHED_QUEUE_FULL	components\libraries\scheduler\app_scheduler.c	57;"	d	file:
app_sched_event_get	components\libraries\scheduler\app_scheduler.c	/^static uint32_t app_sched_event_get(void                     ** pp_event_data,$/;"	f	file:
app_sched_event_put	components\libraries\scheduler\app_scheduler.c	/^uint32_t app_sched_event_put(void                    * p_event_data,$/;"	f
app_sched_execute	components\libraries\scheduler\app_scheduler.c	/^void app_sched_execute(void)$/;"	f
app_sched_init	components\libraries\scheduler\app_scheduler.c	/^uint32_t app_sched_init(uint16_t event_size, uint16_t queue_size, void * p_event_buffer)$/;"	f
app_sched_queue_empty	components\libraries\scheduler\app_scheduler.c	/^static __INLINE uint8_t app_sched_queue_empty()$/;"	f	file:
app_sched_queue_full	components\libraries\scheduler\app_scheduler.c	/^static __INLINE uint8_t app_sched_queue_full()$/;"	f	file:
event_data_size	components\libraries\scheduler\app_scheduler.c	/^    uint16_t                  event_data_size;  \/**< Size of event data. *\/$/;"	m	struct:__anon409	file:
event_header_t	components\libraries\scheduler\app_scheduler.c	/^} event_header_t;$/;"	t	typeref:struct:__anon409	file:
handler	components\libraries\scheduler\app_scheduler.c	/^    app_sched_event_handler_t handler;          \/**< Pointer to event handler to receive the event. *\/$/;"	m	struct:__anon409	file:
m_queue_end_index	components\libraries\scheduler\app_scheduler.c	/^static volatile uint8_t m_queue_end_index;      \/**< Index of queue entry at the end of the queue. *\/$/;"	v	file:
m_queue_event_data	components\libraries\scheduler\app_scheduler.c	/^static uint8_t        * m_queue_event_data;     \/**< Array for holding the queue event data. *\/$/;"	v	file:
m_queue_event_headers	components\libraries\scheduler\app_scheduler.c	/^static event_header_t * m_queue_event_headers;  \/**< Array for holding the queue event headers. *\/$/;"	v	file:
m_queue_event_size	components\libraries\scheduler\app_scheduler.c	/^static uint16_t         m_queue_event_size;     \/**< Maximum event size in queue. *\/$/;"	v	file:
m_queue_size	components\libraries\scheduler\app_scheduler.c	/^static uint16_t         m_queue_size;           \/**< Number of queue entries. *\/$/;"	v	file:
m_queue_start_index	components\libraries\scheduler\app_scheduler.c	/^static volatile uint8_t m_queue_start_index;    \/**< Index of queue entry at the start of the queue. *\/$/;"	v	file:
next_index	components\libraries\scheduler\app_scheduler.c	/^static __INLINE uint8_t next_index(uint8_t index)$/;"	f	file:
APP_SCHEDULER_H__	components\libraries\scheduler\app_scheduler.h	51;"	d
APP_SCHED_BUF_SIZE	components\libraries\scheduler\app_scheduler.h	66;"	d
APP_SCHED_EVENT_HEADER_SIZE	components\libraries\scheduler\app_scheduler.h	56;"	d
APP_SCHED_INIT	components\libraries\scheduler\app_scheduler.h	84;"	d
app_sched_event_handler_t	components\libraries\scheduler\app_scheduler.h	/^typedef void (*app_sched_event_handler_t)(void * p_event_data, uint16_t event_size);$/;"	t
APP_SCHED_QUEUE_EMPTY	components\libraries\scheduler\app_scheduler_serconn.c	68;"	d	file:
APP_SCHED_QUEUE_FULL	components\libraries\scheduler\app_scheduler_serconn.c	59;"	d	file:
app_sched_event_get	components\libraries\scheduler\app_scheduler_serconn.c	/^static uint32_t app_sched_event_get(void * *                    pp_event_data,$/;"	f	file:
app_sched_event_put	components\libraries\scheduler\app_scheduler_serconn.c	/^uint32_t app_sched_event_put(void *                    p_event_data,$/;"	f
app_sched_execute	components\libraries\scheduler\app_scheduler_serconn.c	/^void app_sched_execute(void)$/;"	f
app_sched_init	components\libraries\scheduler\app_scheduler_serconn.c	/^uint32_t app_sched_init(uint16_t event_size, uint16_t queue_size, void * p_event_buffer)$/;"	f
app_sched_pause	components\libraries\scheduler\app_scheduler_serconn.c	/^void app_sched_pause(void)$/;"	f
app_sched_queue_empty	components\libraries\scheduler\app_scheduler_serconn.c	/^static __INLINE uint8_t app_sched_queue_empty(void)$/;"	f	file:
app_sched_queue_full	components\libraries\scheduler\app_scheduler_serconn.c	/^static __INLINE uint8_t app_sched_queue_full(void)$/;"	f	file:
app_sched_resume	components\libraries\scheduler\app_scheduler_serconn.c	/^void app_sched_resume(void)$/;"	f
event_data_size	components\libraries\scheduler\app_scheduler_serconn.c	/^    uint16_t                  event_data_size; \/**< Size of event data. *\/$/;"	m	struct:__anon410	file:
event_header_t	components\libraries\scheduler\app_scheduler_serconn.c	/^} event_header_t;$/;"	t	typeref:struct:__anon410	file:
handler	components\libraries\scheduler\app_scheduler_serconn.c	/^    app_sched_event_handler_t handler;         \/**< Pointer to event handler to receive the event. *\/$/;"	m	struct:__anon410	file:
is_app_sched_paused	components\libraries\scheduler\app_scheduler_serconn.c	/^static __INLINE bool is_app_sched_paused(void)$/;"	f	file:
m_queue_end_index	components\libraries\scheduler\app_scheduler_serconn.c	/^static volatile uint8_t m_queue_end_index;     \/**< Index of queue entry at the end of the queue. *\/$/;"	v	file:
m_queue_event_data	components\libraries\scheduler\app_scheduler_serconn.c	/^static uint8_t *        m_queue_event_data;    \/**< Array for holding the queue event data. *\/$/;"	v	file:
m_queue_event_headers	components\libraries\scheduler\app_scheduler_serconn.c	/^static event_header_t * m_queue_event_headers; \/**< Array for holding the queue event headers. *\/$/;"	v	file:
m_queue_event_size	components\libraries\scheduler\app_scheduler_serconn.c	/^static uint16_t         m_queue_event_size;    \/**< Maximum event size in queue. *\/$/;"	v	file:
m_queue_size	components\libraries\scheduler\app_scheduler_serconn.c	/^static uint16_t         m_queue_size;          \/**< Number of queue entries. *\/$/;"	v	file:
m_queue_start_index	components\libraries\scheduler\app_scheduler_serconn.c	/^static volatile uint8_t m_queue_start_index;   \/**< Index of queue entry at the start of the queue. *\/$/;"	v	file:
m_scheduler_paused_counter	components\libraries\scheduler\app_scheduler_serconn.c	/^static uint32_t m_scheduler_paused_counter = 0; \/**< Counter storing the difference between pausing$/;"	v	file:
next_index	components\libraries\scheduler\app_scheduler_serconn.c	/^static __INLINE uint8_t next_index(uint8_t index)$/;"	f	file:
sensorsim_init	components\libraries\sensorsim\sensorsim.c	/^void sensorsim_init(sensorsim_state_t     * p_state,$/;"	f
sensorsim_measure	components\libraries\sensorsim\sensorsim.c	/^uint32_t sensorsim_measure(sensorsim_state_t     * p_state,$/;"	f
SENSORSIM_H__	components\libraries\sensorsim\sensorsim.h	24;"	d
current_val	components\libraries\sensorsim\sensorsim.h	/^    uint32_t current_val;               \/**< Current sensor value. *\/$/;"	m	struct:__anon412
incr	components\libraries\sensorsim\sensorsim.h	/^    uint32_t incr;                      \/**< Increment between each measurement. *\/$/;"	m	struct:__anon411
is_increasing	components\libraries\sensorsim\sensorsim.h	/^    bool     is_increasing;             \/**< TRUE if the simulator is in increasing state, FALSE otherwise. *\/$/;"	m	struct:__anon412
max	components\libraries\sensorsim\sensorsim.h	/^    uint32_t max;                       \/**< Maximum simulated value. *\/$/;"	m	struct:__anon411
min	components\libraries\sensorsim\sensorsim.h	/^    uint32_t min;                       \/**< Minimum simulated value. *\/$/;"	m	struct:__anon411
sensorsim_cfg_t	components\libraries\sensorsim\sensorsim.h	/^} sensorsim_cfg_t;$/;"	t	typeref:struct:__anon411
sensorsim_state_t	components\libraries\sensorsim\sensorsim.h	/^} sensorsim_state_t;$/;"	t	typeref:struct:__anon412
start_at_max	components\libraries\sensorsim\sensorsim.h	/^    bool     start_at_max;              \/**< TRUE is measurement is to start at the maximum value, FALSE if it is to start at the minimum. *\/$/;"	m	struct:__anon411
APP_SIMPLE_TIMER_INSTANCE	components\libraries\simple_timer\app_simple_timer.c	38;"	d	file:
SIMPLE_TIMER	components\libraries\simple_timer\app_simple_timer.c	/^    const nrf_drv_timer_t SIMPLE_TIMER = NRF_DRV_TIMER_INSTANCE(0);$/;"	v
SIMPLE_TIMER	components\libraries\simple_timer\app_simple_timer.c	/^    const nrf_drv_timer_t SIMPLE_TIMER = NRF_DRV_TIMER_INSTANCE(1);$/;"	v
SIMPLE_TIMER	components\libraries\simple_timer\app_simple_timer.c	/^    const nrf_drv_timer_t SIMPLE_TIMER = NRF_DRV_TIMER_INSTANCE(2);$/;"	v
SIMPLE_TIMER_STATE_IDLE	components\libraries\simple_timer\app_simple_timer.c	/^    SIMPLE_TIMER_STATE_IDLE = 0,$/;"	e	enum:__anon413	file:
SIMPLE_TIMER_STATE_INITIALIZED	components\libraries\simple_timer\app_simple_timer.c	/^    SIMPLE_TIMER_STATE_INITIALIZED,$/;"	e	enum:__anon413	file:
SIMPLE_TIMER_STATE_STARTED	components\libraries\simple_timer\app_simple_timer.c	/^    SIMPLE_TIMER_STATE_STARTED$/;"	e	enum:__anon413	file:
SIMPLE_TIMER_STATE_STOPPED	components\libraries\simple_timer\app_simple_timer.c	/^    SIMPLE_TIMER_STATE_STOPPED,$/;"	e	enum:__anon413	file:
app_simple_timer_event_handler	components\libraries\simple_timer\app_simple_timer.c	/^static void app_simple_timer_event_handler(nrf_timer_events_t event_type)$/;"	f	file:
app_simple_timer_init	components\libraries\simple_timer\app_simple_timer.c	/^uint32_t app_simple_timer_init(void)$/;"	f
app_simple_timer_start	components\libraries\simple_timer\app_simple_timer.c	/^uint32_t app_simple_timer_start(app_simple_timer_mode_t            mode, $/;"	f
app_simple_timer_stop	components\libraries\simple_timer\app_simple_timer.c	/^uint32_t app_simple_timer_stop(void)$/;"	f
app_simple_timer_uninit	components\libraries\simple_timer\app_simple_timer.c	/^uint32_t app_simple_timer_uninit(void)$/;"	f
m_mode	components\libraries\simple_timer\app_simple_timer.c	/^static app_simple_timer_mode_t            m_mode;                                               \/**< Registered timer mode. *\/$/;"	v	file:
m_simple_timer_state	components\libraries\simple_timer\app_simple_timer.c	/^static simple_timer_states_t              m_simple_timer_state       = SIMPLE_TIMER_STATE_IDLE; \/**< State machine state. *\/$/;"	v	file:
m_timeout_handler	components\libraries\simple_timer\app_simple_timer.c	/^static app_simple_timer_timeout_handler_t m_timeout_handler          = NULL;                    \/**< Registered time-out handler. *\/$/;"	v	file:
mp_timeout_handler_context	components\libraries\simple_timer\app_simple_timer.c	/^static void *                             mp_timeout_handler_context = NULL;                    \/**< Registered time-out handler context. *\/$/;"	v	file:
simple_timer_states_t	components\libraries\simple_timer\app_simple_timer.c	/^}simple_timer_states_t;$/;"	t	typeref:enum:__anon413	file:
APP_SIMPLE_TIMER_MODE_REPEATED	components\libraries\simple_timer\app_simple_timer.h	/^    APP_SIMPLE_TIMER_MODE_REPEATED       \/**< The timer will restart each time it expires. *\/$/;"	e	enum:__anon414
APP_SIMPLE_TIMER_MODE_SINGLE_SHOT	components\libraries\simple_timer\app_simple_timer.h	/^    APP_SIMPLE_TIMER_MODE_SINGLE_SHOT,   \/**< The timer will expire only once. *\/$/;"	e	enum:__anon414
TIMER_H__	components\libraries\simple_timer\app_simple_timer.h	28;"	d
app_simple_timer_mode_t	components\libraries\simple_timer\app_simple_timer.h	/^} app_simple_timer_mode_t;$/;"	t	typeref:enum:__anon414
app_simple_timer_timeout_handler_t	components\libraries\simple_timer\app_simple_timer.h	/^typedef void (*app_simple_timer_timeout_handler_t)(void * p_context);$/;"	t
APP_HIGH_USER_ID	components\libraries\timer\app_timer.c	33;"	d	file:
APP_LOW_USER_ID	components\libraries\timer\app_timer.c	34;"	d	file:
APP_TIMER_USER_SIZE	components\libraries\timer\app_timer.c	/^STATIC_ASSERT(sizeof(timer_user_t) == APP_TIMER_USER_SIZE);$/;"	v
CONTEXT_QUEUE_SIZE_MAX	components\libraries\timer\app_timer.c	127;"	d	file:
MAX_RTC_COUNTER_VAL	components\libraries\timer\app_timer.c	31;"	d	file:
MAX_RTC_TASKS_DELAY	components\libraries\timer\app_timer.c	39;"	d	file:
RTC1_IRQHandler	components\libraries\timer\app_timer.c	/^void RTC1_IRQHandler(void)$/;"	f
RTC1_IRQ_PRI	components\libraries\timer\app_timer.c	23;"	d	file:
RTC_COMPARE_OFFSET_MIN	components\libraries\timer\app_timer.c	37;"	d	file:
STATE_ALLOCATED	components\libraries\timer\app_timer.c	/^    STATE_ALLOCATED                                                         \/**< The timer node has been allocated. *\/$/;"	e	enum:__anon415	file:
STATE_FREE	components\libraries\timer\app_timer.c	/^    STATE_FREE,                                                             \/**< The timer node is available. *\/$/;"	e	enum:__anon415	file:
SWI0_IRQHandler	components\libraries\timer\app_timer.c	/^void SWI0_IRQHandler(void)$/;"	f
SWI0_IRQ_PRI	components\libraries\timer\app_timer.c	24;"	d	file:
THREAD_MODE_USER_ID	components\libraries\timer\app_timer.c	35;"	d	file:
TIMER_NULL	components\libraries\timer\app_timer.c	126;"	d	file:
TIMER_USER_OP_TYPE_NONE	components\libraries\timer\app_timer.c	/^    TIMER_USER_OP_TYPE_NONE,                                                \/**< Invalid timer operation type. *\/$/;"	e	enum:__anon417	file:
TIMER_USER_OP_TYPE_START	components\libraries\timer\app_timer.c	/^    TIMER_USER_OP_TYPE_START,                                               \/**< Timer operation type Start. *\/$/;"	e	enum:__anon417	file:
TIMER_USER_OP_TYPE_STOP	components\libraries\timer\app_timer.c	/^    TIMER_USER_OP_TYPE_STOP,                                                \/**< Timer operation type Stop. *\/$/;"	e	enum:__anon417	file:
TIMER_USER_OP_TYPE_STOP_ALL	components\libraries\timer\app_timer.c	/^    TIMER_USER_OP_TYPE_STOP_ALL                                             \/**< Timer operation type Stop All. *\/$/;"	e	enum:__anon417	file:
app_timer_cnt_diff_compute	components\libraries\timer\app_timer.c	/^uint32_t app_timer_cnt_diff_compute(uint32_t   ticks_to,$/;"	f
app_timer_cnt_get	components\libraries\timer\app_timer.c	/^uint32_t app_timer_cnt_get(uint32_t * p_ticks)$/;"	f
app_timer_create	components\libraries\timer\app_timer.c	/^uint32_t app_timer_create(app_timer_id_t *            p_timer_id,$/;"	f
app_timer_init	components\libraries\timer\app_timer.c	/^uint32_t app_timer_init(uint32_t                      prescaler,$/;"	f
app_timer_start	components\libraries\timer\app_timer.c	/^uint32_t app_timer_start(app_timer_id_t timer_id, uint32_t timeout_ticks, void * p_context)$/;"	f
app_timer_stop	components\libraries\timer\app_timer.c	/^uint32_t app_timer_stop(app_timer_id_t timer_id)$/;"	f
app_timer_stop_all	components\libraries\timer\app_timer.c	/^uint32_t app_timer_stop_all(void)$/;"	f
compare_reg_update	components\libraries\timer\app_timer.c	/^static void compare_reg_update(app_timer_id_t timer_id_head_old)$/;"	f	file:
elapsed_ticks_acquire	components\libraries\timer\app_timer.c	/^static bool elapsed_ticks_acquire(uint32_t * p_ticks_elapsed)$/;"	f	file:
expired_timers_handler	components\libraries\timer\app_timer.c	/^static void expired_timers_handler(uint32_t         ticks_elapsed,$/;"	f	file:
first	components\libraries\timer\app_timer.c	/^    uint8_t           first;                                                    \/**< Index of first entry to have been inserted in the queue (i.e. the next entry to be executed). *\/$/;"	m	struct:__anon421	file:
is_running	components\libraries\timer\app_timer.c	/^    bool                        is_running;                                 \/**< True if timer is running, False otherwise. *\/$/;"	m	struct:__anon416	file:
last	components\libraries\timer\app_timer.c	/^    uint8_t           last;                                                     \/**< Index of last entry to have been inserted in the queue. *\/$/;"	m	struct:__anon421	file:
list_deletions_handler	components\libraries\timer\app_timer.c	/^static bool list_deletions_handler(void)$/;"	f	file:
list_insertions_handler	components\libraries\timer\app_timer.c	/^static bool list_insertions_handler(app_timer_id_t restart_list_head)$/;"	f	file:
m_evt_schedule_func	components\libraries\timer\app_timer.c	/^static app_timer_evt_schedule_func_t m_evt_schedule_func;                       \/**< Pointer to function for propagating timeout events to the scheduler. *\/$/;"	v	file:
m_node_array_size	components\libraries\timer\app_timer.c	/^static uint8_t                       m_node_array_size;                         \/**< Size of timer node array. *\/$/;"	v	file:
m_rtc1_reset	components\libraries\timer\app_timer.c	/^static bool                          m_rtc1_reset;                              \/**< Boolean indicating if RTC1 counter has been reset due to last timer removed from timer list during the timer list handling. *\/$/;"	v	file:
m_rtc1_running	components\libraries\timer\app_timer.c	/^static bool                          m_rtc1_running;                            \/**< Boolean indicating if RTC1 is running. *\/$/;"	v	file:
m_ticks_elapsed	components\libraries\timer\app_timer.c	/^static uint32_t                      m_ticks_elapsed[CONTEXT_QUEUE_SIZE_MAX];   \/**< Timer internal elapsed ticks queue. *\/$/;"	v	file:
m_ticks_elapsed_q_read_ind	components\libraries\timer\app_timer.c	/^static uint8_t                       m_ticks_elapsed_q_read_ind;                \/**< Timer internal elapsed ticks queue read index. *\/$/;"	v	file:
m_ticks_elapsed_q_write_ind	components\libraries\timer\app_timer.c	/^static uint8_t                       m_ticks_elapsed_q_write_ind;               \/**< Timer internal elapsed ticks queue write index. *\/$/;"	v	file:
m_ticks_latest	components\libraries\timer\app_timer.c	/^static uint32_t                      m_ticks_latest;                            \/**< Last known RTC counter value. *\/$/;"	v	file:
m_timer_id_head	components\libraries\timer\app_timer.c	/^static app_timer_id_t                m_timer_id_head;                           \/**< First timer in list of running timers. *\/$/;"	v	file:
m_user_array_size	components\libraries\timer\app_timer.c	/^static uint8_t                       m_user_array_size;                         \/**< Size of timer user array. *\/$/;"	v	file:
mode	components\libraries\timer\app_timer.c	/^    app_timer_mode_t            mode;                                       \/**< Timer mode. *\/$/;"	m	struct:__anon416	file:
mp_nodes	components\libraries\timer\app_timer.c	/^static timer_node_t *                mp_nodes = NULL;                           \/**< Array of timer nodes. *\/$/;"	v	file:
mp_users	components\libraries\timer\app_timer.c	/^static timer_user_t *                mp_users;                                  \/**< Array of timer users. *\/$/;"	v	file:
next	components\libraries\timer\app_timer.c	/^    app_timer_id_t              next;                                       \/**< Id of next timer in list of running timers. *\/$/;"	m	struct:__anon416	file:
op_type	components\libraries\timer\app_timer.c	/^    timer_user_op_type_t op_type;                                           \/**< Timer operation type. *\/$/;"	m	struct:__anon419	file:
p_context	components\libraries\timer\app_timer.c	/^    void *                      p_context;                                  \/**< General purpose pointer. Will be passed to the timeout handler when the timer expires. *\/$/;"	m	struct:__anon416	file:
p_context	components\libraries\timer\app_timer.c	/^    void *   p_context;                                                     \/**< General purpose pointer. Will be passed to the timeout handler when the timer expires. *\/$/;"	m	struct:__anon418	file:
p_timeout_handler	components\libraries\timer\app_timer.c	/^    app_timer_timeout_handler_t p_timeout_handler;                          \/**< Pointer to function to be executed when the timer expires. *\/$/;"	m	struct:__anon416	file:
p_user_op_queue	components\libraries\timer\app_timer.c	/^    timer_user_op_t * p_user_op_queue;                                          \/**< Queue buffer. *\/$/;"	m	struct:__anon421	file:
params	components\libraries\timer\app_timer.c	/^    } params;$/;"	m	struct:__anon419	typeref:union:__anon419::__anon420	file:
rtc1_compare0_set	components\libraries\timer\app_timer.c	/^static __INLINE void rtc1_compare0_set(uint32_t value)$/;"	f	file:
rtc1_counter_get	components\libraries\timer\app_timer.c	/^static __INLINE uint32_t rtc1_counter_get(void)$/;"	f	file:
rtc1_init	components\libraries\timer\app_timer.c	/^static void rtc1_init(uint32_t prescaler)$/;"	f	file:
rtc1_start	components\libraries\timer\app_timer.c	/^static void rtc1_start(void)$/;"	f	file:
rtc1_stop	components\libraries\timer\app_timer.c	/^static void rtc1_stop(void)$/;"	f	file:
start	components\libraries\timer\app_timer.c	/^        timer_user_op_start_t start;                                        \/**< Structure describing a timer start operation. *\/$/;"	m	union:__anon419::__anon420	file:
state	components\libraries\timer\app_timer.c	/^    timer_alloc_state_t         state;                                      \/**< Timer allocation state. *\/$/;"	m	struct:__anon416	file:
ticks_at_start	components\libraries\timer\app_timer.c	/^    uint32_t                    ticks_at_start;                             \/**< Current RTC counter value when the timer was started. *\/$/;"	m	struct:__anon416	file:
ticks_at_start	components\libraries\timer\app_timer.c	/^    uint32_t ticks_at_start;                                                \/**< Current RTC counter value when the timer was started. *\/$/;"	m	struct:__anon418	file:
ticks_diff_get	components\libraries\timer\app_timer.c	/^static __INLINE uint32_t ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)$/;"	f	file:
ticks_first_interval	components\libraries\timer\app_timer.c	/^    uint32_t                    ticks_first_interval;                       \/**< Number of ticks in the first timer interval. *\/$/;"	m	struct:__anon416	file:
ticks_first_interval	components\libraries\timer\app_timer.c	/^    uint32_t ticks_first_interval;                                          \/**< Number of ticks in the first timer interval. *\/$/;"	m	struct:__anon418	file:
ticks_periodic_interval	components\libraries\timer\app_timer.c	/^    uint32_t                    ticks_periodic_interval;                    \/**< Timer period (for repeating timers). *\/$/;"	m	struct:__anon416	file:
ticks_periodic_interval	components\libraries\timer\app_timer.c	/^    uint32_t ticks_periodic_interval;                                       \/**< Timer period (for repeating timers). *\/$/;"	m	struct:__anon418	file:
ticks_to_expire	components\libraries\timer\app_timer.c	/^    uint32_t                    ticks_to_expire;                            \/**< Number of ticks from previous timer interrupt to timer expiry. *\/$/;"	m	struct:__anon416	file:
timeout_handler_exec	components\libraries\timer\app_timer.c	/^static void timeout_handler_exec(timer_node_t * p_timer)$/;"	f	file:
timer_alloc_state_t	components\libraries\timer\app_timer.c	/^} timer_alloc_state_t;$/;"	t	typeref:enum:__anon415	file:
timer_id	components\libraries\timer\app_timer.c	/^    app_timer_id_t       timer_id;                                          \/**< Id of timer on which the operation is to be performed. *\/$/;"	m	struct:__anon419	file:
timer_list_handler	components\libraries\timer\app_timer.c	/^static void timer_list_handler(void)$/;"	f	file:
timer_list_handler_sched	components\libraries\timer\app_timer.c	/^static void timer_list_handler_sched(void)$/;"	f	file:
timer_list_insert	components\libraries\timer\app_timer.c	/^static void timer_list_insert(app_timer_id_t timer_id)$/;"	f	file:
timer_list_remove	components\libraries\timer\app_timer.c	/^static void timer_list_remove(app_timer_id_t timer_id)$/;"	f	file:
timer_node_t	components\libraries\timer\app_timer.c	/^} timer_node_t;$/;"	t	typeref:struct:__anon416	file:
timer_start_op_schedule	components\libraries\timer\app_timer.c	/^static uint32_t timer_start_op_schedule(timer_user_id_t user_id,$/;"	f	file:
timer_stop_all_op_schedule	components\libraries\timer\app_timer.c	/^static uint32_t timer_stop_all_op_schedule(timer_user_id_t user_id)$/;"	f	file:
timer_stop_op_schedule	components\libraries\timer\app_timer.c	/^static uint32_t timer_stop_op_schedule(timer_user_id_t user_id, app_timer_id_t timer_id)$/;"	f	file:
timer_timeouts_check	components\libraries\timer\app_timer.c	/^static void timer_timeouts_check(void)$/;"	f	file:
timer_timeouts_check_sched	components\libraries\timer\app_timer.c	/^static void timer_timeouts_check_sched(void)$/;"	f	file:
timer_user_id_t	components\libraries\timer\app_timer.c	/^typedef uint32_t timer_user_id_t;$/;"	t	file:
timer_user_op_start_t	components\libraries\timer\app_timer.c	/^} timer_user_op_start_t;$/;"	t	typeref:struct:__anon418	file:
timer_user_op_t	components\libraries\timer\app_timer.c	/^} timer_user_op_t;$/;"	t	typeref:struct:__anon419	file:
timer_user_op_type_t	components\libraries\timer\app_timer.c	/^} timer_user_op_type_t;$/;"	t	typeref:enum:__anon417	file:
timer_user_t	components\libraries\timer\app_timer.c	/^} timer_user_t;$/;"	t	typeref:struct:__anon421	file:
user_id_get	components\libraries\timer\app_timer.c	/^static timer_user_id_t user_id_get(void)$/;"	f	file:
user_op_alloc	components\libraries\timer\app_timer.c	/^static timer_user_op_t * user_op_alloc(timer_user_t * p_user, app_timer_id_t * p_last_index)$/;"	f	file:
user_op_enque	components\libraries\timer\app_timer.c	/^static void user_op_enque(timer_user_t * p_user, app_timer_id_t last_index)$/;"	f	file:
user_op_queue_size	components\libraries\timer\app_timer.c	/^    uint8_t           user_op_queue_size;                                       \/**< Queue size. *\/$/;"	m	struct:__anon421	file:
APP_TIMER_BUF_SIZE	components\libraries\timer\app_timer.h	70;"	d
APP_TIMER_CLOCK_FREQ	components\libraries\timer\app_timer.h	53;"	d
APP_TIMER_H__	components\libraries\timer\app_timer.h	42;"	d
APP_TIMER_INIT	components\libraries\timer\app_timer.h	142;"	d
APP_TIMER_INT_LEVELS	components\libraries\timer\app_timer.h	59;"	d
APP_TIMER_MIN_TIMEOUT_TICKS	components\libraries\timer\app_timer.h	54;"	d
APP_TIMER_MODE_REPEATED	components\libraries\timer\app_timer.h	/^    APP_TIMER_MODE_REPEATED                     \/**< The timer will restart each time it expires. *\/$/;"	e	enum:__anon422
APP_TIMER_MODE_SINGLE_SHOT	components\libraries\timer\app_timer.h	/^    APP_TIMER_MODE_SINGLE_SHOT,                 \/**< The timer will expire only once. *\/$/;"	e	enum:__anon422
APP_TIMER_NODE_SIZE	components\libraries\timer\app_timer.h	56;"	d
APP_TIMER_PRESCALER	components\libraries\timer\app_timer.h	51;"	d
APP_TIMER_TICKS	components\libraries\timer\app_timer.h	99;"	d
APP_TIMER_USER_OP_SIZE	components\libraries\timer\app_timer.h	57;"	d
APP_TIMER_USER_SIZE	components\libraries\timer\app_timer.h	58;"	d
app_timer_evt_schedule_func_t	components\libraries\timer\app_timer.h	/^typedef uint32_t (*app_timer_evt_schedule_func_t) (app_timer_timeout_handler_t timeout_handler,$/;"	t
app_timer_id_t	components\libraries\timer\app_timer.h	/^typedef uint32_t app_timer_id_t;$/;"	t
app_timer_mode_t	components\libraries\timer\app_timer.h	/^} app_timer_mode_t;$/;"	t	typeref:enum:__anon422
app_timer_timeout_handler_t	components\libraries\timer\app_timer.h	/^typedef void (*app_timer_timeout_handler_t)(void * p_context);$/;"	t
app_timer_evt_get	components\libraries\timer\app_timer_appsh.c	/^static void app_timer_evt_get(void * p_event_data, uint16_t event_size)$/;"	f	file:
app_timer_evt_schedule	components\libraries\timer\app_timer_appsh.c	/^uint32_t app_timer_evt_schedule(app_timer_timeout_handler_t timeout_handler,$/;"	f
APP_TIMER_APPSH_H	components\libraries\timer\app_timer_appsh.h	14;"	d
APP_TIMER_APPSH_INIT	components\libraries\timer\app_timer_appsh.h	32;"	d
APP_TIMER_SCHED_EVT_SIZE	components\libraries\timer\app_timer_appsh.h	18;"	d
app_timer_event_t	components\libraries\timer\app_timer_appsh.h	/^} app_timer_event_t;$/;"	t	typeref:struct:__anon423
p_context	components\libraries\timer\app_timer_appsh.h	/^    void *                      p_context;$/;"	m	struct:__anon423
timeout_handler	components\libraries\timer\app_timer_appsh.h	/^    app_timer_timeout_handler_t timeout_handler;$/;"	m	struct:__anon423
APP_HIGH_USER_ID	components\libraries\timer\app_timer_ble_gzll.c	33;"	d	file:
APP_LOW_USER_ID	components\libraries\timer\app_timer_ble_gzll.c	34;"	d	file:
APP_TIMER_USER_SIZE	components\libraries\timer\app_timer_ble_gzll.c	/^STATIC_ASSERT(sizeof(timer_user_t) == APP_TIMER_USER_SIZE);$/;"	v
CONTEXT_QUEUE_SIZE_MAX	components\libraries\timer\app_timer_ble_gzll.c	126;"	d	file:
MAX_RTC_CNT	components\libraries\timer\app_timer_ble_gzll.c	31;"	d	file:
MAX_RTC_TASKS_DELAY	components\libraries\timer\app_timer_ble_gzll.c	38;"	d	file:
RTC1_IRQHandler	components\libraries\timer\app_timer_ble_gzll.c	/^void RTC1_IRQHandler(void)$/;"	f
RTC1_IRQ_PRI	components\libraries\timer\app_timer_ble_gzll.c	23;"	d	file:
RTC_COMPARE_OFFSET_MIN	components\libraries\timer\app_timer_ble_gzll.c	37;"	d	file:
STATE_ALLOCATED	components\libraries\timer\app_timer_ble_gzll.c	/^    STATE_ALLOCATED                                                             \/**< The timer node has been allocated. *\/$/;"	e	enum:__anon424	file:
STATE_FREE	components\libraries\timer\app_timer_ble_gzll.c	/^    STATE_FREE,                                                                 \/**< The timer node is available. *\/$/;"	e	enum:__anon424	file:
SWI1_IRQHandler	components\libraries\timer\app_timer_ble_gzll.c	/^void SWI1_IRQHandler(void)$/;"	f
SWI1_IRQ_PRI	components\libraries\timer\app_timer_ble_gzll.c	24;"	d	file:
THREAD_MODE_USER_ID	components\libraries\timer\app_timer_ble_gzll.c	35;"	d	file:
TIMER_NULL	components\libraries\timer\app_timer_ble_gzll.c	125;"	d	file:
TIMER_USER_OP_TYPE_NONE	components\libraries\timer\app_timer_ble_gzll.c	/^    TIMER_USER_OP_TYPE_NONE,                                                    \/**< Invalid timer operation type. *\/$/;"	e	enum:__anon426	file:
TIMER_USER_OP_TYPE_START	components\libraries\timer\app_timer_ble_gzll.c	/^    TIMER_USER_OP_TYPE_START,                                                   \/**< Timer operation type Start. *\/$/;"	e	enum:__anon426	file:
TIMER_USER_OP_TYPE_STOP	components\libraries\timer\app_timer_ble_gzll.c	/^    TIMER_USER_OP_TYPE_STOP,                                                    \/**< Timer operation type Stop. *\/$/;"	e	enum:__anon426	file:
TIMER_USER_OP_TYPE_STOP_ALL	components\libraries\timer\app_timer_ble_gzll.c	/^    TIMER_USER_OP_TYPE_STOP_ALL                                                 \/**< Timer operation type Stop All. *\/$/;"	e	enum:__anon426	file:
app_timer_cnt_diff_compute	components\libraries\timer\app_timer_ble_gzll.c	/^uint32_t app_timer_cnt_diff_compute(uint32_t   ticks_to,$/;"	f
app_timer_cnt_get	components\libraries\timer\app_timer_ble_gzll.c	/^uint32_t app_timer_cnt_get(uint32_t * p_ticks)$/;"	f
app_timer_create	components\libraries\timer\app_timer_ble_gzll.c	/^uint32_t app_timer_create(app_timer_id_t *            p_timer_id,$/;"	f
app_timer_init	components\libraries\timer\app_timer_ble_gzll.c	/^uint32_t app_timer_init(uint32_t                      prescaler,$/;"	f
app_timer_start	components\libraries\timer\app_timer_ble_gzll.c	/^uint32_t app_timer_start(app_timer_id_t timer_id, uint32_t timeout_ticks, void * p_context)$/;"	f
app_timer_stop	components\libraries\timer\app_timer_ble_gzll.c	/^uint32_t app_timer_stop(app_timer_id_t timer_id)$/;"	f
app_timer_stop_all	components\libraries\timer\app_timer_ble_gzll.c	/^uint32_t app_timer_stop_all(void)$/;"	f
compare_reg_update	components\libraries\timer\app_timer_ble_gzll.c	/^static void compare_reg_update(app_timer_id_t timer_id_head_old)$/;"	f	file:
elapsed_ticks_acquire	components\libraries\timer\app_timer_ble_gzll.c	/^static bool elapsed_ticks_acquire(uint32_t * p_ticks_elapsed)$/;"	f	file:
expired_timers_handler	components\libraries\timer\app_timer_ble_gzll.c	/^static void expired_timers_handler(uint32_t         ticks_elapsed,$/;"	f	file:
first	components\libraries\timer\app_timer_ble_gzll.c	/^    uint8_t           first;                                                    \/**< Index of first entry to have been inserted in the queue (i.e. the next entry to be executed). *\/$/;"	m	struct:__anon430	file:
is_running	components\libraries\timer\app_timer_ble_gzll.c	/^    bool                        is_running;                                     \/**< True if timer is running, False otherwise. *\/$/;"	m	struct:__anon425	file:
last	components\libraries\timer\app_timer_ble_gzll.c	/^    uint8_t           last;                                                     \/**< Index of last entry to have been inserted in the queue. *\/$/;"	m	struct:__anon430	file:
list_deletions_handler	components\libraries\timer\app_timer_ble_gzll.c	/^static bool list_deletions_handler(void)$/;"	f	file:
list_insertions_handler	components\libraries\timer\app_timer_ble_gzll.c	/^static bool list_insertions_handler(app_timer_id_t restart_list_head)$/;"	f	file:
m_evt_schedule_func	components\libraries\timer\app_timer_ble_gzll.c	/^static app_timer_evt_schedule_func_t m_evt_schedule_func;                       \/**< Pointer to function for propagating timeout events to the scheduler. *\/$/;"	v	file:
m_node_array_size	components\libraries\timer\app_timer_ble_gzll.c	/^static uint8_t                       m_node_array_size;                         \/**< Size of timer node array. *\/$/;"	v	file:
m_ticks_elapsed	components\libraries\timer\app_timer_ble_gzll.c	/^static uint32_t                      m_ticks_elapsed[CONTEXT_QUEUE_SIZE_MAX];   \/**< Timer internal elapsed ticks queue. *\/$/;"	v	file:
m_ticks_elapsed_first	components\libraries\timer\app_timer_ble_gzll.c	/^static uint8_t                       m_ticks_elapsed_first;                     \/**< Timer internal elapsed ticks queue read index. *\/$/;"	v	file:
m_ticks_elapsed_last	components\libraries\timer\app_timer_ble_gzll.c	/^static uint8_t                       m_ticks_elapsed_last;                      \/**< Timer internal elapsed ticks queue write index. *\/$/;"	v	file:
m_ticks_latest	components\libraries\timer\app_timer_ble_gzll.c	/^static uint32_t                      m_ticks_latest;                            \/**< Last known RTC counter value. *\/$/;"	v	file:
m_timer_id_head	components\libraries\timer\app_timer_ble_gzll.c	/^static app_timer_id_t                m_timer_id_head;                           \/**< First timer in list of running timers. *\/$/;"	v	file:
m_user_array_size	components\libraries\timer\app_timer_ble_gzll.c	/^static uint8_t                       m_user_array_size;                         \/**< Size of timer user array. *\/$/;"	v	file:
mode	components\libraries\timer\app_timer_ble_gzll.c	/^    app_timer_mode_t            mode;                                           \/**< Timer mode. *\/$/;"	m	struct:__anon425	file:
mp_nodes	components\libraries\timer\app_timer_ble_gzll.c	/^static timer_node_t *                mp_nodes = NULL;                           \/**< Array of timer nodes. *\/$/;"	v	file:
mp_users	components\libraries\timer\app_timer_ble_gzll.c	/^static timer_user_t *                mp_users;                                  \/**< Array of timer users. *\/$/;"	v	file:
next	components\libraries\timer\app_timer_ble_gzll.c	/^    app_timer_id_t              next;                                           \/**< Id of next timer in list of running timers. *\/$/;"	m	struct:__anon425	file:
op_type	components\libraries\timer\app_timer_ble_gzll.c	/^    timer_user_op_type_t op_type;                                               \/**< Timer operation type. *\/$/;"	m	struct:__anon428	file:
p_context	components\libraries\timer\app_timer_ble_gzll.c	/^    void *                      p_context;                                      \/**< General purpose pointer. Will be passed to the timeout handler when the timer expires. *\/$/;"	m	struct:__anon425	file:
p_context	components\libraries\timer\app_timer_ble_gzll.c	/^    void *   p_context;                                                         \/**< General purpose pointer. Will be passed to the timeout handler when the timer expires. *\/$/;"	m	struct:__anon427	file:
p_timeout_handler	components\libraries\timer\app_timer_ble_gzll.c	/^    app_timer_timeout_handler_t p_timeout_handler;                              \/**< Pointer to function to be executed when the timer expires. *\/$/;"	m	struct:__anon425	file:
p_user_op_queue	components\libraries\timer\app_timer_ble_gzll.c	/^    timer_user_op_t * p_user_op_queue;                                          \/**< Queue buffer. *\/$/;"	m	struct:__anon430	file:
params	components\libraries\timer\app_timer_ble_gzll.c	/^    } params;$/;"	m	struct:__anon428	typeref:union:__anon428::__anon429	file:
rtc1_compare0_set	components\libraries\timer\app_timer_ble_gzll.c	/^static __INLINE void rtc1_compare0_set(uint32_t value)$/;"	f	file:
rtc1_counter_get	components\libraries\timer\app_timer_ble_gzll.c	/^static __INLINE uint32_t rtc1_counter_get(void)$/;"	f	file:
rtc1_init	components\libraries\timer\app_timer_ble_gzll.c	/^static void rtc1_init(uint32_t prescaler)$/;"	f	file:
rtc1_start	components\libraries\timer\app_timer_ble_gzll.c	/^static void rtc1_start(void)$/;"	f	file:
rtc1_stop	components\libraries\timer\app_timer_ble_gzll.c	/^static void rtc1_stop(void)$/;"	f	file:
start	components\libraries\timer\app_timer_ble_gzll.c	/^        timer_user_op_start_t start;                                            \/**< Structure describing a timer start operation. *\/$/;"	m	union:__anon428::__anon429	file:
state	components\libraries\timer\app_timer_ble_gzll.c	/^    timer_alloc_state_t         state;                                          \/**< Timer allocation state. *\/$/;"	m	struct:__anon425	file:
ticks_at_start	components\libraries\timer\app_timer_ble_gzll.c	/^    uint32_t                    ticks_at_start;                                 \/**< Current RTC counter value when the timer was started. *\/$/;"	m	struct:__anon425	file:
ticks_at_start	components\libraries\timer\app_timer_ble_gzll.c	/^    uint32_t ticks_at_start;                                                    \/**< Current RTC counter value when the timer was started. *\/$/;"	m	struct:__anon427	file:
ticks_diff_get	components\libraries\timer\app_timer_ble_gzll.c	/^static __INLINE uint32_t ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)$/;"	f	file:
ticks_first_interval	components\libraries\timer\app_timer_ble_gzll.c	/^    uint32_t                    ticks_first_interval;                           \/**< Number of ticks in the first timer interval. *\/$/;"	m	struct:__anon425	file:
ticks_first_interval	components\libraries\timer\app_timer_ble_gzll.c	/^    uint32_t ticks_first_interval;                                              \/**< Number of ticks in the first timer interval. *\/$/;"	m	struct:__anon427	file:
ticks_periodic_interval	components\libraries\timer\app_timer_ble_gzll.c	/^    uint32_t                    ticks_periodic_interval;                        \/**< Timer period (for repeating timers). *\/$/;"	m	struct:__anon425	file:
ticks_periodic_interval	components\libraries\timer\app_timer_ble_gzll.c	/^    uint32_t ticks_periodic_interval;                                           \/**< Timer period (for repeating timers). *\/$/;"	m	struct:__anon427	file:
ticks_to_expire	components\libraries\timer\app_timer_ble_gzll.c	/^    uint32_t                    ticks_to_expire;                                \/**< Number of ticks from previous timer interrupt to timer expiry. *\/$/;"	m	struct:__anon425	file:
timeout_handler_exec	components\libraries\timer\app_timer_ble_gzll.c	/^static void timeout_handler_exec(timer_node_t * p_timer)$/;"	f	file:
timer_alloc_state_t	components\libraries\timer\app_timer_ble_gzll.c	/^} timer_alloc_state_t;$/;"	t	typeref:enum:__anon424	file:
timer_id	components\libraries\timer\app_timer_ble_gzll.c	/^    app_timer_id_t       timer_id;                                              \/**< Id of timer on which the operation is to be performed. *\/$/;"	m	struct:__anon428	file:
timer_list_handler	components\libraries\timer\app_timer_ble_gzll.c	/^static void timer_list_handler(void)$/;"	f	file:
timer_list_handler_sched	components\libraries\timer\app_timer_ble_gzll.c	/^static void timer_list_handler_sched(void)$/;"	f	file:
timer_list_insert	components\libraries\timer\app_timer_ble_gzll.c	/^static void timer_list_insert(app_timer_id_t timer_id)$/;"	f	file:
timer_list_remove	components\libraries\timer\app_timer_ble_gzll.c	/^static void timer_list_remove(app_timer_id_t timer_id)$/;"	f	file:
timer_node_t	components\libraries\timer\app_timer_ble_gzll.c	/^} timer_node_t;$/;"	t	typeref:struct:__anon425	file:
timer_start_op_schedule	components\libraries\timer\app_timer_ble_gzll.c	/^static uint32_t timer_start_op_schedule(timer_user_id_t user_id,$/;"	f	file:
timer_stop_all_op_schedule	components\libraries\timer\app_timer_ble_gzll.c	/^static uint32_t timer_stop_all_op_schedule(timer_user_id_t user_id)$/;"	f	file:
timer_stop_op_schedule	components\libraries\timer\app_timer_ble_gzll.c	/^static uint32_t timer_stop_op_schedule(timer_user_id_t user_id, app_timer_id_t timer_id)$/;"	f	file:
timer_timeouts_check	components\libraries\timer\app_timer_ble_gzll.c	/^static void timer_timeouts_check(void)$/;"	f	file:
timer_timeouts_check_sched	components\libraries\timer\app_timer_ble_gzll.c	/^static void timer_timeouts_check_sched(void)$/;"	f	file:
timer_user_id_t	components\libraries\timer\app_timer_ble_gzll.c	/^typedef uint32_t timer_user_id_t;$/;"	t	file:
timer_user_op_start_t	components\libraries\timer\app_timer_ble_gzll.c	/^} timer_user_op_start_t;$/;"	t	typeref:struct:__anon427	file:
timer_user_op_t	components\libraries\timer\app_timer_ble_gzll.c	/^} timer_user_op_t;$/;"	t	typeref:struct:__anon428	file:
timer_user_op_type_t	components\libraries\timer\app_timer_ble_gzll.c	/^} timer_user_op_type_t;$/;"	t	typeref:enum:__anon426	file:
timer_user_t	components\libraries\timer\app_timer_ble_gzll.c	/^} timer_user_t;$/;"	t	typeref:struct:__anon430	file:
user_id_get	components\libraries\timer\app_timer_ble_gzll.c	/^static timer_user_id_t user_id_get(void)$/;"	f	file:
user_op_alloc	components\libraries\timer\app_timer_ble_gzll.c	/^static timer_user_op_t * user_op_alloc(timer_user_t * p_user)$/;"	f	file:
user_op_queue_size	components\libraries\timer\app_timer_ble_gzll.c	/^    uint8_t           user_op_queue_size;                                       \/**< Queue size. *\/$/;"	m	struct:__anon430	file:
app_timer_create	components\libraries\timer\app_timer_freertos.c	/^uint32_t app_timer_create(app_timer_id_t            * p_timer_id,$/;"	f
app_timer_start	components\libraries\timer\app_timer_freertos.c	/^uint32_t app_timer_start(TimerHandle_t timer_id, uint32_t timeout_ticks, void * p_context)$/;"	f
app_timer_stop	components\libraries\timer\app_timer_freertos.c	/^uint32_t app_timer_stop(TimerHandle_t timer_id)$/;"	f
xHigherPriorityTaskWoken	components\libraries\timer\app_timer_freertos.c	/^portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;$/;"	v
MAX_RTC_COUNTER_VAL	components\libraries\timer\app_timer_rtx.c	10;"	d	file:
app_timer_cnt_diff_compute	components\libraries\timer\app_timer_rtx.c	/^uint32_t app_timer_cnt_diff_compute(uint32_t   ticks_to,$/;"	f
app_timer_cnt_get	components\libraries\timer\app_timer_rtx.c	/^uint32_t app_timer_cnt_get(uint32_t * p_ticks)$/;"	f
app_timer_control	components\libraries\timer\app_timer_rtx.c	/^app_timer_control_t app_timer_control;$/;"	v
app_timer_control_t	components\libraries\timer\app_timer_rtx.c	/^}app_timer_control_t;$/;"	t	typeref:struct:__anon432	file:
app_timer_create	components\libraries\timer\app_timer_rtx.c	/^uint32_t app_timer_create(app_timer_id_t            * p_timer_id,$/;"	f
app_timer_info_t	components\libraries\timer\app_timer_rtx.c	/^}app_timer_info_t;$/;"	t	typeref:struct:__anon431	file:
app_timer_init	components\libraries\timer\app_timer_rtx.c	/^uint32_t app_timer_init(uint32_t                      prescaler,$/;"	f
app_timer_start	components\libraries\timer\app_timer_rtx.c	/^uint32_t app_timer_start(app_timer_id_t timer_id, uint32_t timeout_ticks, void * p_context)$/;"	f
app_timer_stop	components\libraries\timer\app_timer_rtx.c	/^uint32_t app_timer_stop(app_timer_id_t timer_id)$/;"	f
app_timer_stop_all	components\libraries\timer\app_timer_rtx.c	/^uint32_t app_timer_stop_all(void)$/;"	f
app_timers	components\libraries\timer\app_timer_rtx.c	/^    app_timer_info_t * app_timers; \/**< Pointer to table of timers*\/$/;"	m	struct:__anon432	file:
arg	components\libraries\timer\app_timer_rtx.c	/^    void                * arg;$/;"	m	struct:os_timer_cb_	file:
argument	components\libraries\timer\app_timer_rtx.c	/^    void       * argument;$/;"	m	struct:__anon431	file:
buffer	components\libraries\timer\app_timer_rtx.c	/^    uint32_t     buffer[5];$/;"	m	struct:__anon431	file:
icnt	components\libraries\timer\app_timer_rtx.c	/^    uint16_t              icnt;$/;"	m	struct:os_timer_cb_	file:
id	components\libraries\timer\app_timer_rtx.c	/^    osTimerId    id;$/;"	m	struct:__anon431	file:
max_timers	components\libraries\timer\app_timer_rtx.c	/^    uint8_t            max_timers; \/**< The maximum number of timers*\/$/;"	m	struct:__anon432	file:
next	components\libraries\timer\app_timer_rtx.c	/^    struct os_timer_cb_ * next;$/;"	m	struct:os_timer_cb_	typeref:struct:os_timer_cb_::os_timer_cb_	file:
os_timer_cb	components\libraries\timer\app_timer_rtx.c	/^} os_timer_cb;$/;"	t	typeref:struct:os_timer_cb_	file:
os_timer_cb_	components\libraries\timer\app_timer_rtx.c	/^typedef struct os_timer_cb_$/;"	s	file:
prescaler	components\libraries\timer\app_timer_rtx.c	/^    uint32_t           prescaler;$/;"	m	struct:__anon432	file:
reserved	components\libraries\timer\app_timer_rtx.c	/^    uint16_t              reserved;$/;"	m	struct:os_timer_cb_	file:
rt_id2obj	components\libraries\timer\app_timer_rtx.c	/^static void * rt_id2obj(void *id)                                         \/**< Used in app_timer_start(). This function gives information if osTimerID is valid *\/$/;"	f	file:
state	components\libraries\timer\app_timer_rtx.c	/^    uint8_t               state;$/;"	m	struct:os_timer_cb_	file:
tcnt	components\libraries\timer\app_timer_rtx.c	/^    uint16_t              tcnt;$/;"	m	struct:os_timer_cb_	file:
timer	components\libraries\timer\app_timer_rtx.c	/^    const osTimerDef_t  * timer;$/;"	m	struct:os_timer_cb_	file:
timerDef	components\libraries\timer\app_timer_rtx.c	/^    osTimerDef_t timerDef;$/;"	m	struct:__anon431	file:
type	components\libraries\timer\app_timer_rtx.c	/^    uint8_t               type;$/;"	m	struct:os_timer_cb_	file:
UART_RX_BUF_SIZE	components\libraries\trace\app_trace.c	30;"	d	file:
UART_TX_BUF_SIZE	components\libraries\trace\app_trace.c	27;"	d	file:
app_trace_dump	components\libraries\trace\app_trace.c	/^void app_trace_dump(uint8_t * p_buffer, uint32_t len)$/;"	f
app_trace_init	components\libraries\trace\app_trace.c	/^void app_trace_init(void)$/;"	f
uart_error_handle	components\libraries\trace\app_trace.c	/^__WEAK void uart_error_handle(app_uart_evt_t * p_event)$/;"	f
__DEBUG_H_	components\libraries\trace\app_trace.h	2;"	d
app_trace_dump	components\libraries\trace\app_trace.h	49;"	d
app_trace_init	components\libraries\trace\app_trace.h	47;"	d
app_trace_log	components\libraries\trace\app_trace.h	33;"	d
app_trace_log	components\libraries\trace\app_trace.h	48;"	d
__FILE	components\libraries\uart\retarget.c	/^struct __FILE $/;"	s	file:
__stdin	components\libraries\uart\retarget.c	/^FILE __stdin;$/;"	v
__stdout	components\libraries\uart\retarget.c	/^FILE __stdout;$/;"	v
_read	components\libraries\uart\retarget.c	/^int _read(int file, char * p_char, int len)$/;"	f
_write	components\libraries\uart\retarget.c	/^int _write(int file, const char * p_char, int len)$/;"	f
fgetc	components\libraries\uart\retarget.c	/^int fgetc(FILE * p_file)$/;"	f
fputc	components\libraries\uart\retarget.c	/^int fputc(int ch, FILE * p_file)$/;"	f
handle	components\libraries\uart\retarget.c	/^    int handle;$/;"	m	struct:__FILE	file:
app_error_handler	components\libraries\util\app_error.c	/^__WEAK void app_error_handler(uint32_t error_code, uint32_t line_num, const uint8_t * p_file_name)$/;"	f
m_error_code	components\libraries\util\app_error.c	/^uint32_t m_error_code;$/;"	v
m_line_num	components\libraries\util\app_error.c	/^uint32_t m_line_num;$/;"	v
m_p_file_name	components\libraries\util\app_error.c	/^const uint8_t * m_p_file_name;$/;"	v
APP_ERROR_CHECK	components\libraries\util\app_error.h	58;"	d
APP_ERROR_CHECK_BOOL	components\libraries\util\app_error.h	72;"	d
APP_ERROR_HANDLER	components\libraries\util\app_error.h	42;"	d
APP_ERROR_HANDLER	components\libraries\util\app_error.h	48;"	d
APP_ERROR_H__	components\libraries\util\app_error.h	23;"	d
APP_UTIL_H__	components\libraries\util\app_util.h	23;"	d
CEIL_DIV	components\libraries\util\app_util.h	108;"	d
IS_POWER_OF_TWO	components\libraries\util\app_util.h	89;"	d
MSEC_TO_UNITS	components\libraries\util\app_util.h	95;"	d
ROUNDED_DIV	components\libraries\util\app_util.h	80;"	d
STATIC_ASSERT	components\libraries\util\app_util.h	52;"	d
STATIC_ASSERT	components\libraries\util\app_util.h	54;"	d
STATIC_ASSERT	components\libraries\util\app_util.h	56;"	d
UNIT_0_625_MS	components\libraries\util\app_util.h	/^    UNIT_0_625_MS = 625,                                \/**< Number of microseconds in 0.625 milliseconds. *\/$/;"	e	enum:__anon433
UNIT_10_MS	components\libraries\util\app_util.h	/^    UNIT_10_MS    = 10000                               \/**< Number of microseconds in 10 milliseconds. *\/$/;"	e	enum:__anon433
UNIT_1_25_MS	components\libraries\util\app_util.h	/^    UNIT_1_25_MS  = 1250,                               \/**< Number of microseconds in 1.25 milliseconds. *\/$/;"	e	enum:__anon433
battery_level_in_percent	components\libraries\util\app_util.h	/^static __INLINE uint8_t battery_level_in_percent(const uint16_t mvolts)$/;"	f
is_word_aligned	components\libraries\util\app_util.h	/^static __INLINE bool is_word_aligned(void * p)$/;"	f
p_data	components\libraries\util\app_util.h	/^    uint8_t * p_data;               \/**< Pointer to array entries. *\/$/;"	m	struct:__anon434
size	components\libraries\util\app_util.h	/^    uint16_t  size;                 \/**< Number of array entries. *\/$/;"	m	struct:__anon434
uint16_decode	components\libraries\util\app_util.h	/^static __INLINE uint16_t uint16_decode(const uint8_t * p_encoded_data)$/;"	f
uint16_encode	components\libraries\util\app_util.h	/^static __INLINE uint8_t uint16_encode(uint16_t value, uint8_t * p_encoded_data)$/;"	f
uint16_le_t	components\libraries\util\app_util.h	/^typedef uint8_t uint16_le_t[2];$/;"	t
uint32_decode	components\libraries\util\app_util.h	/^static __INLINE uint32_t uint32_decode(const uint8_t * p_encoded_data)$/;"	f
uint32_encode	components\libraries\util\app_util.h	/^static __INLINE uint8_t uint32_encode(uint32_t value, uint8_t * p_encoded_data)$/;"	f
uint32_le_t	components\libraries\util\app_util.h	/^typedef uint8_t uint32_le_t[4];$/;"	t
uint8_array_t	components\libraries\util\app_util.h	/^} uint8_array_t;$/;"	t	typeref:struct:__anon434
critical_region_enter	components\libraries\util\app_util_platform.c	/^void critical_region_enter(void)$/;"	f
critical_region_exit	components\libraries\util\app_util_platform.c	/^void critical_region_exit(void)$/;"	f
m_in_critical_region	components\libraries\util\app_util_platform.c	/^static uint32_t m_in_critical_region = 0;$/;"	v	file:
APP_IRQ_PRIORITY_HIGH	components\libraries\util\app_util_platform.h	/^    APP_IRQ_PRIORITY_HIGH    = 1,$/;"	e	enum:__anon435
APP_IRQ_PRIORITY_HIGHEST	components\libraries\util\app_util_platform.h	/^    APP_IRQ_PRIORITY_HIGHEST = 0,$/;"	e	enum:__anon435
APP_IRQ_PRIORITY_LOW	components\libraries\util\app_util_platform.h	/^    APP_IRQ_PRIORITY_LOW     = 3$/;"	e	enum:__anon435
APP_IRQ_PRIORITY_MID	components\libraries\util\app_util_platform.h	/^    APP_IRQ_PRIORITY_MID     = 2,$/;"	e	enum:__anon435
APP_UTIL_PLATFORM_H__	components\libraries\util\app_util_platform.h	23;"	d
CRITICAL_REGION_ENTER	components\libraries\util\app_util_platform.h	63;"	d
CRITICAL_REGION_ENTER	components\libraries\util\app_util_platform.h	80;"	d
CRITICAL_REGION_EXIT	components\libraries\util\app_util_platform.h	103;"	d
CRITICAL_REGION_EXIT	components\libraries\util\app_util_platform.h	90;"	d
EXTERNAL_INT_VECTOR_OFFSET	components\libraries\util\app_util_platform.h	48;"	d
NRF_APP_PRIORITY_THREAD	components\libraries\util\app_util_platform.h	45;"	d
PACKED	components\libraries\util\app_util_platform.h	51;"	d
app_irq_priority_t	components\libraries\util\app_util_platform.h	/^} app_irq_priority_t;$/;"	t	typeref:enum:__anon435
current_int_priority_get	components\libraries\util\app_util_platform.h	/^static __INLINE uint8_t current_int_priority_get(void)$/;"	f
COMMON_H	components\libraries\util\common.h	14;"	d
PINCNF	components\libraries\util\common.h	34;"	d
PINOUT	components\libraries\util\common.h	35;"	d
PINX_GLUE	components\libraries\util\common.h	33;"	d
BIT_0	components\libraries\util\nordic_common.h	36;"	d
BIT_1	components\libraries\util\nordic_common.h	37;"	d
BIT_10	components\libraries\util\nordic_common.h	46;"	d
BIT_11	components\libraries\util\nordic_common.h	47;"	d
BIT_12	components\libraries\util\nordic_common.h	48;"	d
BIT_13	components\libraries\util\nordic_common.h	49;"	d
BIT_14	components\libraries\util\nordic_common.h	50;"	d
BIT_15	components\libraries\util\nordic_common.h	51;"	d
BIT_16	components\libraries\util\nordic_common.h	52;"	d
BIT_17	components\libraries\util\nordic_common.h	53;"	d
BIT_18	components\libraries\util\nordic_common.h	54;"	d
BIT_19	components\libraries\util\nordic_common.h	55;"	d
BIT_2	components\libraries\util\nordic_common.h	38;"	d
BIT_20	components\libraries\util\nordic_common.h	56;"	d
BIT_21	components\libraries\util\nordic_common.h	57;"	d
BIT_22	components\libraries\util\nordic_common.h	58;"	d
BIT_23	components\libraries\util\nordic_common.h	59;"	d
BIT_24	components\libraries\util\nordic_common.h	60;"	d
BIT_25	components\libraries\util\nordic_common.h	61;"	d
BIT_26	components\libraries\util\nordic_common.h	62;"	d
BIT_27	components\libraries\util\nordic_common.h	63;"	d
BIT_28	components\libraries\util\nordic_common.h	64;"	d
BIT_29	components\libraries\util\nordic_common.h	65;"	d
BIT_3	components\libraries\util\nordic_common.h	39;"	d
BIT_30	components\libraries\util\nordic_common.h	66;"	d
BIT_31	components\libraries\util\nordic_common.h	67;"	d
BIT_4	components\libraries\util\nordic_common.h	40;"	d
BIT_5	components\libraries\util\nordic_common.h	41;"	d
BIT_6	components\libraries\util\nordic_common.h	42;"	d
BIT_7	components\libraries\util\nordic_common.h	43;"	d
BIT_8	components\libraries\util\nordic_common.h	44;"	d
BIT_9	components\libraries\util\nordic_common.h	45;"	d
LSB	components\libraries\util\nordic_common.h	27;"	d
MAX	components\libraries\util\nordic_common.h	34;"	d
MIN	components\libraries\util\nordic_common.h	31;"	d
MSB	components\libraries\util\nordic_common.h	25;"	d
NORDIC_COMMON_H__	components\libraries\util\nordic_common.h	17;"	d
SWAP	components\libraries\util\nordic_common.h	21;"	d
UNUSED_PARAMETER	components\libraries\util\nordic_common.h	70;"	d
UNUSED_VARIABLE	components\libraries\util\nordic_common.h	69;"	d
assert_nrf_callback	components\libraries\util\nrf_assert.c	/^void assert_nrf_callback(uint16_t line_num, const uint8_t * file_name)$/;"	f
ASSERT	components\libraries\util\nrf_assert.h	46;"	d
ASSERT	components\libraries\util\nrf_assert.h	55;"	d
NRF_ASSERT_H_	components\libraries\util\nrf_assert.h	15;"	d
SDK_COMMON_H__	components\libraries\util\sdk_common.h	24;"	d
API_NOT_IMPLEMENTED	components\libraries\util\sdk_errors.h	71;"	d
DEVICE_MANAGER_ERR_BASE	components\libraries\util\sdk_errors.h	59;"	d
DM_CONTEXT_INFO_LOST	components\libraries\util\sdk_errors.h	82;"	d
DM_DEVICE_CONTEXT_FULL	components\libraries\util\sdk_errors.h	83;"	d
DM_NO_APP_CONTEXT	components\libraries\util\sdk_errors.h	80;"	d
DM_SERVICE_CONTEXT_NOT_APPLIED	components\libraries\util\sdk_errors.h	81;"	d
FEATURE_NOT_ENABLED	components\libraries\util\sdk_errors.h	72;"	d
MODULE_NOT_INITIALZED	components\libraries\util\sdk_errors.h	66;"	d
MUTEX_COND_INIT_FAILED	components\libraries\util\sdk_errors.h	70;"	d
MUTEX_INIT_FAILED	components\libraries\util\sdk_errors.h	67;"	d
MUTEX_LOCK_FAILED	components\libraries\util\sdk_errors.h	68;"	d
MUTEX_UNLOCK_FAILED	components\libraries\util\sdk_errors.h	69;"	d
SDK_COMMON_ERROR_BASE	components\libraries\util\sdk_errors.h	52;"	d
SDK_ERRORS_H__	components\libraries\util\sdk_errors.h	43;"	d
SDK_ERROR_BASE	components\libraries\util\sdk_errors.h	51;"	d
ret_code_t	components\libraries\util\sdk_errors.h	/^typedef uint32_t ret_code_t;$/;"	t
SDK_MUTEX_DEFINE	components\libraries\util\sdk_os.h	28;"	d
SDK_MUTEX_INIT	components\libraries\util\sdk_os.h	29;"	d
SDK_MUTEX_LOCK	components\libraries\util\sdk_os.h	30;"	d
SDK_MUTEX_UNLOCK	components\libraries\util\sdk_os.h	31;"	d
SDK_OS_H__	components\libraries\util\sdk_os.h	26;"	d
NRF_ESB_BASE_ADDRESS_LENGTH_2B	components\properitary_rf\esb\nrf_esb.h	/^    NRF_ESB_BASE_ADDRESS_LENGTH_2B,   \/\/\/< 2 byte address length$/;"	e	enum:__anon438
NRF_ESB_BASE_ADDRESS_LENGTH_3B	components\properitary_rf\esb\nrf_esb.h	/^    NRF_ESB_BASE_ADDRESS_LENGTH_3B,   \/\/\/< 3 byte address length$/;"	e	enum:__anon438
NRF_ESB_BASE_ADDRESS_LENGTH_4B	components\properitary_rf\esb\nrf_esb.h	/^    NRF_ESB_BASE_ADDRESS_LENGTH_4B    \/\/\/< 4 byte address length$/;"	e	enum:__anon438
NRF_ESB_CRC_LENGTH_1_BYTE	components\properitary_rf\esb\nrf_esb.h	/^    NRF_ESB_CRC_LENGTH_1_BYTE,  \/\/\/< CRC check set to 8-bit$/;"	e	enum:__anon441
NRF_ESB_CRC_LENGTH_2_BYTE	components\properitary_rf\esb\nrf_esb.h	/^    NRF_ESB_CRC_LENGTH_2_BYTE   \/\/\/< CRC check set to 16-bit    $/;"	e	enum:__anon441
NRF_ESB_CRC_OFF	components\properitary_rf\esb\nrf_esb.h	/^    NRF_ESB_CRC_OFF,            \/\/\/< CRC check disabled$/;"	e	enum:__anon441
NRF_ESB_DATARATE_1_MBPS	components\properitary_rf\esb\nrf_esb.h	/^    NRF_ESB_DATARATE_1_MBPS,              \/\/\/< 1 Mbps datarate$/;"	e	enum:__anon440
NRF_ESB_DATARATE_250_KBPS	components\properitary_rf\esb\nrf_esb.h	/^    NRF_ESB_DATARATE_250_KBPS,            \/\/\/< 250 Kbps datarate$/;"	e	enum:__anon440
NRF_ESB_DATARATE_2_MBPS	components\properitary_rf\esb\nrf_esb.h	/^    NRF_ESB_DATARATE_2_MBPS,              \/\/\/< 1 Mbps datarate$/;"	e	enum:__anon440
NRF_ESB_H__	components\properitary_rf\esb\nrf_esb.h	21;"	d
NRF_ESB_MODE_PRX	components\properitary_rf\esb\nrf_esb.h	/^  NRF_ESB_MODE_PRX,         \/\/\/< Primary Receiver mode$/;"	e	enum:__anon436
NRF_ESB_MODE_PTX	components\properitary_rf\esb\nrf_esb.h	/^  NRF_ESB_MODE_PTX,         \/\/\/< Primary Transmitter mode$/;"	e	enum:__anon436
NRF_ESB_OUTPUT_POWER_0_DBM	components\properitary_rf\esb\nrf_esb.h	/^    NRF_ESB_OUTPUT_POWER_0_DBM,          \/\/\/<  0 dBm output power.$/;"	e	enum:__anon439
NRF_ESB_OUTPUT_POWER_4_DBM	components\properitary_rf\esb\nrf_esb.h	/^    NRF_ESB_OUTPUT_POWER_4_DBM,          \/\/\/<  4 dBm output power.$/;"	e	enum:__anon439
NRF_ESB_OUTPUT_POWER_N12_DBM	components\properitary_rf\esb\nrf_esb.h	/^    NRF_ESB_OUTPUT_POWER_N12_DBM,        \/\/\/< -12 dBm output power.$/;"	e	enum:__anon439
NRF_ESB_OUTPUT_POWER_N16_DBM	components\properitary_rf\esb\nrf_esb.h	/^    NRF_ESB_OUTPUT_POWER_N16_DBM,        \/\/\/< -16 dBm output power.$/;"	e	enum:__anon439
NRF_ESB_OUTPUT_POWER_N20_DBM	components\properitary_rf\esb\nrf_esb.h	/^    NRF_ESB_OUTPUT_POWER_N20_DBM         \/\/\/< -20 dBm output power.$/;"	e	enum:__anon439
NRF_ESB_OUTPUT_POWER_N4_DBM	components\properitary_rf\esb\nrf_esb.h	/^    NRF_ESB_OUTPUT_POWER_N4_DBM,         \/\/\/< -4 dBm output power.$/;"	e	enum:__anon439
NRF_ESB_OUTPUT_POWER_N8_DBM	components\properitary_rf\esb\nrf_esb.h	/^    NRF_ESB_OUTPUT_POWER_N8_DBM,         \/\/\/< -8 dBm output power.$/;"	e	enum:__anon439
NRF_ESB_PACKET_NO_ACK	components\properitary_rf\esb\nrf_esb.h	/^  NRF_ESB_PACKET_NO_ACK,          \/\/\/< PTX packet does not require ACK.$/;"	e	enum:__anon437
NRF_ESB_PACKET_USE_ACK	components\properitary_rf\esb\nrf_esb.h	/^  NRF_ESB_PACKET_USE_ACK,         \/\/\/< PTX packet requires ACK.$/;"	e	enum:__anon437
NRF_ESB_XOSC_CTL_AUTO	components\properitary_rf\esb\nrf_esb.h	/^    NRF_ESB_XOSC_CTL_AUTO,      \/\/\/< Switch XOSC on\/off automatically$/;"	e	enum:__anon442
NRF_ESB_XOSC_CTL_MANUAL	components\properitary_rf\esb\nrf_esb.h	/^    NRF_ESB_XOSC_CTL_MANUAL     \/\/\/< Switch XOSC on\/off manually$/;"	e	enum:__anon442
nrf_esb_base_address_length_t	components\properitary_rf\esb\nrf_esb.h	/^} nrf_esb_base_address_length_t;$/;"	t	typeref:enum:__anon438
nrf_esb_crc_length_t	components\properitary_rf\esb\nrf_esb.h	/^} nrf_esb_crc_length_t;$/;"	t	typeref:enum:__anon441
nrf_esb_datarate_t	components\properitary_rf\esb\nrf_esb.h	/^} nrf_esb_datarate_t;$/;"	t	typeref:enum:__anon440
nrf_esb_mode_t	components\properitary_rf\esb\nrf_esb.h	/^} nrf_esb_mode_t;$/;"	t	typeref:enum:__anon436
nrf_esb_output_power_t	components\properitary_rf\esb\nrf_esb.h	/^} nrf_esb_output_power_t;$/;"	t	typeref:enum:__anon439
nrf_esb_packet_t	components\properitary_rf\esb\nrf_esb.h	/^} nrf_esb_packet_t ;$/;"	t	typeref:enum:__anon437
nrf_esb_xosc_ctl_t	components\properitary_rf\esb\nrf_esb.h	/^} nrf_esb_xosc_ctl_t;$/;"	t	typeref:enum:__anon442
NRF_ESB_CONSTANTS_H__	components\properitary_rf\esb\nrf_esb_constants.h	23;"	d
NRF_ESB_CONST_CALLBACK_QUEUE_LENGTH	components\properitary_rf\esb\nrf_esb_constants.h	101;"	d
NRF_ESB_CONST_CALLBACK_QUEUE_LENGTH	components\properitary_rf\esb\nrf_esb_constants.h	90;"	d
NRF_ESB_CONST_FIFO_LENGTH	components\properitary_rf\esb\nrf_esb_constants.h	87;"	d
NRF_ESB_CONST_MAX_PAYLOAD_LENGTH	components\properitary_rf\esb\nrf_esb_constants.h	100;"	d
NRF_ESB_CONST_MAX_PAYLOAD_LENGTH	components\properitary_rf\esb\nrf_esb_constants.h	89;"	d
NRF_ESB_CONST_MAX_TOTAL_PACKETS	components\properitary_rf\esb\nrf_esb_constants.h	88;"	d
NRF_ESB_CONST_MAX_TOTAL_PACKETS	components\properitary_rf\esb\nrf_esb_constants.h	99;"	d
NRF_ESB_CONST_PIPE_COUNT	components\properitary_rf\esb\nrf_esb_constants.h	86;"	d
NRF_ESB_CONST_PIPE_COUNT	components\properitary_rf\esb\nrf_esb_constants.h	97;"	d
NRF_ESB_CONST_QUEUE_LENGTH	components\properitary_rf\esb\nrf_esb_constants.h	98;"	d
NRF_ESB_DEFAULT_BASE_ADDRESS_0	components\properitary_rf\esb\nrf_esb_constants.h	117;"	d
NRF_ESB_DEFAULT_BASE_ADDRESS_1	components\properitary_rf\esb\nrf_esb_constants.h	118;"	d
NRF_ESB_DEFAULT_BASE_ADDRESS_LENGTH	components\properitary_rf\esb\nrf_esb_constants.h	127;"	d
NRF_ESB_DEFAULT_CHANNEL	components\properitary_rf\esb\nrf_esb_constants.h	134;"	d
NRF_ESB_DEFAULT_CRC_LENGTH	components\properitary_rf\esb\nrf_esb_constants.h	128;"	d
NRF_ESB_DEFAULT_DATARATE	components\properitary_rf\esb\nrf_esb_constants.h	132;"	d
NRF_ESB_DEFAULT_ENABLED_PRX_PIPES	components\properitary_rf\esb\nrf_esb_constants.h	129;"	d
NRF_ESB_DEFAULT_MAX_NUMBER_OF_RETRANSMITS	components\properitary_rf\esb\nrf_esb_constants.h	130;"	d
NRF_ESB_DEFAULT_OUTPUT_POWER	components\properitary_rf\esb\nrf_esb_constants.h	131;"	d
NRF_ESB_DEFAULT_PREFIX_BYTE_0	components\properitary_rf\esb\nrf_esb_constants.h	119;"	d
NRF_ESB_DEFAULT_PREFIX_BYTE_1	components\properitary_rf\esb\nrf_esb_constants.h	120;"	d
NRF_ESB_DEFAULT_PREFIX_BYTE_2	components\properitary_rf\esb\nrf_esb_constants.h	121;"	d
NRF_ESB_DEFAULT_PREFIX_BYTE_3	components\properitary_rf\esb\nrf_esb_constants.h	122;"	d
NRF_ESB_DEFAULT_PREFIX_BYTE_4	components\properitary_rf\esb\nrf_esb_constants.h	123;"	d
NRF_ESB_DEFAULT_PREFIX_BYTE_5	components\properitary_rf\esb\nrf_esb_constants.h	124;"	d
NRF_ESB_DEFAULT_PREFIX_BYTE_6	components\properitary_rf\esb\nrf_esb_constants.h	125;"	d
NRF_ESB_DEFAULT_PREFIX_BYTE_7	components\properitary_rf\esb\nrf_esb_constants.h	126;"	d
NRF_ESB_DEFAULT_RETRANSMIT_DELAY	components\properitary_rf\esb\nrf_esb_constants.h	133;"	d
NRF_ESB_DEFAULT_XOSC_CTL	components\properitary_rf\esb\nrf_esb_constants.h	135;"	d
NRF_ESB_HIGH_IRQ_PRIORITY	components\properitary_rf\esb\nrf_esb_constants.h	34;"	d
NRF_ESB_LOW_IRQ_PRIORITY	components\properitary_rf\esb\nrf_esb_constants.h	35;"	d
NRF_ESB_PPI_CHEN_MSK_0_AND_1	components\properitary_rf\esb\nrf_esb_constants.h	58;"	d
NRF_ESB_PPI_CHEN_MSK_0_AND_1	components\properitary_rf\esb\nrf_esb_constants.h	81;"	d
NRF_ESB_PPI_CHEN_MSK_2	components\properitary_rf\esb\nrf_esb_constants.h	59;"	d
NRF_ESB_PPI_CHEN_MSK_2	components\properitary_rf\esb\nrf_esb_constants.h	82;"	d
NRF_ESB_PPI_EEP0	components\properitary_rf\esb\nrf_esb_constants.h	51;"	d
NRF_ESB_PPI_EEP0	components\properitary_rf\esb\nrf_esb_constants.h	74;"	d
NRF_ESB_PPI_EEP1	components\properitary_rf\esb\nrf_esb_constants.h	53;"	d
NRF_ESB_PPI_EEP1	components\properitary_rf\esb\nrf_esb_constants.h	76;"	d
NRF_ESB_PPI_EEP2	components\properitary_rf\esb\nrf_esb_constants.h	55;"	d
NRF_ESB_PPI_EEP2	components\properitary_rf\esb\nrf_esb_constants.h	78;"	d
NRF_ESB_PPI_TEP0	components\properitary_rf\esb\nrf_esb_constants.h	52;"	d
NRF_ESB_PPI_TEP0	components\properitary_rf\esb\nrf_esb_constants.h	75;"	d
NRF_ESB_PPI_TEP1	components\properitary_rf\esb\nrf_esb_constants.h	54;"	d
NRF_ESB_PPI_TEP1	components\properitary_rf\esb\nrf_esb_constants.h	77;"	d
NRF_ESB_PPI_TEP2	components\properitary_rf\esb\nrf_esb_constants.h	56;"	d
NRF_ESB_PPI_TEP2	components\properitary_rf\esb\nrf_esb_constants.h	79;"	d
NRF_ESB_SWI_IRQ_HANDLER	components\properitary_rf\esb\nrf_esb_constants.h	39;"	d
NRF_ESB_SWI_IRQ_HANDLER	components\properitary_rf\esb\nrf_esb_constants.h	62;"	d
NRF_ESB_SWI_IRQn	components\properitary_rf\esb\nrf_esb_constants.h	38;"	d
NRF_ESB_SWI_IRQn	components\properitary_rf\esb\nrf_esb_constants.h	61;"	d
NRF_ESB_TIMER	components\properitary_rf\esb\nrf_esb_constants.h	41;"	d
NRF_ESB_TIMER	components\properitary_rf\esb\nrf_esb_constants.h	64;"	d
NRF_ESB_TIMER_IRQ_HANDLER	components\properitary_rf\esb\nrf_esb_constants.h	44;"	d
NRF_ESB_TIMER_IRQ_HANDLER	components\properitary_rf\esb\nrf_esb_constants.h	67;"	d
NRF_ESB_TIMER_IRQn	components\properitary_rf\esb\nrf_esb_constants.h	43;"	d
NRF_ESB_TIMER_IRQn	components\properitary_rf\esb\nrf_esb_constants.h	66;"	d
NRF_ESB_TIMER_PERPOWER_Msk	components\properitary_rf\esb\nrf_esb_constants.h	42;"	d
NRF_ESB_TIMER_PERPOWER_Msk	components\properitary_rf\esb\nrf_esb_constants.h	65;"	d
GZP_ADDRESS	components\properitary_rf\gzll\config\nrf_gzp_config.h	44;"	d
GZP_CHANNEL_HIGH	components\properitary_rf\gzll\config\nrf_gzp_config.h	39;"	d
GZP_CHANNEL_LOW	components\properitary_rf\gzll\config\nrf_gzp_config.h	32;"	d
GZP_CHANNEL_MAX	components\properitary_rf\gzll\config\nrf_gzp_config.h	93;"	d
GZP_CHANNEL_MIN	components\properitary_rf\gzll\config\nrf_gzp_config.h	88;"	d
GZP_CHANNEL_SPACING_MIN	components\properitary_rf\gzll\config\nrf_gzp_config.h	99;"	d
GZP_CLOSE_PROXIMITY_BACKOFF_RX_TIMEOUT	components\properitary_rf\gzll\config\nrf_gzp_config.h	71;"	d
GZP_DEVICE_PARAMS_STORAGE_SIZE	components\properitary_rf\gzll\config\nrf_gzp_config.h	111;"	d
GZP_MAX_ACK_PAYLOAD_LENGTH	components\properitary_rf\gzll\config\nrf_gzp_config.h	121;"	d
GZP_MAX_BACKOFF_PACKETS	components\properitary_rf\gzll\config\nrf_gzp_config.h	59;"	d
GZP_MAX_FW_PAYLOAD_LENGTH	components\properitary_rf\gzll\config\nrf_gzp_config.h	116;"	d
GZP_NOT_PROXIMITY_BACKOFF_RX_TIMEOUT	components\properitary_rf\gzll\config\nrf_gzp_config.h	77;"	d
GZP_PARAMS_STORAGE_ADR	components\properitary_rf\gzll\config\nrf_gzp_config.h	106;"	d
GZP_POWER	components\properitary_rf\gzll\config\nrf_gzp_config.h	49;"	d
GZP_REQ_TX_TIMEOUT	components\properitary_rf\gzll\config\nrf_gzp_config.h	54;"	d
GZP_SECRET_KEY	components\properitary_rf\gzll\config\nrf_gzp_config.h	23;"	d
GZP_STEP1_RX_TIMEOUT	components\properitary_rf\gzll\config\nrf_gzp_config.h	83;"	d
GZP_TX_ACK_WAIT_TIMEOUT	components\properitary_rf\gzll\config\nrf_gzp_config.h	65;"	d
__GZP_CONFIG_H	components\properitary_rf\gzll\config\nrf_gzp_config.h	16;"	d
NRF_GZLL_DATARATE_1MBIT	components\properitary_rf\gzll\nrf_gzll.h	/^  NRF_GZLL_DATARATE_1MBIT,      \/\/\/<  1 Mbps datarate.$/;"	e	enum:__anon446
NRF_GZLL_DATARATE_250KBIT	components\properitary_rf\gzll\nrf_gzll.h	/^  NRF_GZLL_DATARATE_250KBIT,    \/\/\/<  250 Kbps datarate.$/;"	e	enum:__anon446
NRF_GZLL_DATARATE_2MBIT	components\properitary_rf\gzll\nrf_gzll.h	/^  NRF_GZLL_DATARATE_2MBIT       \/\/\/<  2 Mbps datarate.$/;"	e	enum:__anon446
NRF_GZLL_DEVICE_CHANNEL_SELECTION_POLICY_USE_CURRENT	components\properitary_rf\gzll\nrf_gzll.h	/^  NRF_GZLL_DEVICE_CHANNEL_SELECTION_POLICY_USE_CURRENT,    \/\/\/< Start on channel currently monitored by Host$/;"	e	enum:__anon444
NRF_GZLL_DEVICE_CHANNEL_SELECTION_POLICY_USE_SUCCESSFUL	components\properitary_rf\gzll\nrf_gzll.h	/^  NRF_GZLL_DEVICE_CHANNEL_SELECTION_POLICY_USE_SUCCESSFUL, \/\/\/< Start on previous successful channel$/;"	e	enum:__anon444
NRF_GZLL_ERROR_CODE_ATTEMPTED_TO_ADD_TO_FULL_FIFO	components\properitary_rf\gzll\nrf_gzll.h	/^  NRF_GZLL_ERROR_CODE_ATTEMPTED_TO_ADD_TO_FULL_FIFO     =  9,$/;"	e	enum:__anon448
NRF_GZLL_ERROR_CODE_ATTEMPTED_TO_CONFIGURE_WHEN_ENABLED	components\properitary_rf\gzll\nrf_gzll.h	/^  NRF_GZLL_ERROR_CODE_ATTEMPTED_TO_CONFIGURE_WHEN_ENABLED =  2,$/;"	e	enum:__anon448
NRF_GZLL_ERROR_CODE_ATTEMPTED_TO_FETCH_FROM_EMPTY_FIFO	components\properitary_rf\gzll\nrf_gzll.h	/^  NRF_GZLL_ERROR_CODE_ATTEMPTED_TO_FETCH_FROM_EMPTY_FIFO  = 11,$/;"	e	enum:__anon448
NRF_GZLL_ERROR_CODE_ATTEMPTED_TO_FLUSH_WHEN_ENABLED	components\properitary_rf\gzll\nrf_gzll.h	/^  NRF_GZLL_ERROR_CODE_ATTEMPTED_TO_FLUSH_WHEN_ENABLED    = 12,$/;"	e	enum:__anon448
NRF_GZLL_ERROR_CODE_CALLBACK_NOT_IMPLEMENTED	components\properitary_rf\gzll\nrf_gzll.h	/^  NRF_GZLL_ERROR_CODE_CALLBACK_NOT_IMPLEMENTED            = 16,$/;"	e	enum:__anon448
NRF_GZLL_ERROR_CODE_FAILED_TO_INITIALIZE	components\properitary_rf\gzll\nrf_gzll.h	/^  NRF_GZLL_ERROR_CODE_FAILED_TO_INITIALIZE                =  1,$/;"	e	enum:__anon448
NRF_GZLL_ERROR_CODE_INSUFFICIENT_PACKETS_AVAILABLE	components\properitary_rf\gzll\nrf_gzll.h	/^  NRF_GZLL_ERROR_CODE_INSUFFICIENT_PACKETS_AVAILABLE      =  8,$/;"	e	enum:__anon448
NRF_GZLL_ERROR_CODE_INTERNAL_ASSERT_OCCURRED	components\properitary_rf\gzll\nrf_gzll.h	/^  NRF_GZLL_ERROR_CODE_INTERNAL_ASSERT_OCCURRED            = 15,$/;"	e	enum:__anon448
NRF_GZLL_ERROR_CODE_INVALID_CHANNEL_TABLE_SIZE	components\properitary_rf\gzll\nrf_gzll.h	/^  NRF_GZLL_ERROR_CODE_INVALID_CHANNEL_TABLE_SIZE          =  7,$/;"	e	enum:__anon448
NRF_GZLL_ERROR_CODE_INVALID_MODE	components\properitary_rf\gzll\nrf_gzll.h	/^  NRF_GZLL_ERROR_CODE_INVALID_MODE                        =  5,$/;"	e	enum:__anon448
NRF_GZLL_ERROR_CODE_INVALID_PARAMETER	components\properitary_rf\gzll\nrf_gzll.h	/^  NRF_GZLL_ERROR_CODE_INVALID_PARAMETER                   = 14,$/;"	e	enum:__anon448
NRF_GZLL_ERROR_CODE_INVALID_PAYLOAD_LENGTH	components\properitary_rf\gzll\nrf_gzll.h	/^  NRF_GZLL_ERROR_CODE_INVALID_PAYLOAD_LENGTH              =  6,$/;"	e	enum:__anon448
NRF_GZLL_ERROR_CODE_INVALID_PIPE	components\properitary_rf\gzll\nrf_gzll.h	/^  NRF_GZLL_ERROR_CODE_INVALID_PIPE                        =  4,$/;"	e	enum:__anon448
NRF_GZLL_ERROR_CODE_NO_ERROR	components\properitary_rf\gzll\nrf_gzll.h	/^  NRF_GZLL_ERROR_CODE_NO_ERROR                            =  0,$/;"	e	enum:__anon448
NRF_GZLL_ERROR_CODE_NO_SPACE_IN_RX_FIFO_FOR_ACK	components\properitary_rf\gzll\nrf_gzll.h	/^  NRF_GZLL_ERROR_CODE_NO_SPACE_IN_RX_FIFO_FOR_ACK        = 10,$/;"	e	enum:__anon448
NRF_GZLL_ERROR_CODE_NUMBER_OF_ERROR_CODES	components\properitary_rf\gzll\nrf_gzll.h	/^  NRF_GZLL_ERROR_CODE_NUMBER_OF_ERROR_CODES               = 17,$/;"	e	enum:__anon448
NRF_GZLL_ERROR_CODE_POINTER_IS_NULL	components\properitary_rf\gzll\nrf_gzll.h	/^  NRF_GZLL_ERROR_CODE_POINTER_IS_NULL                     =  3,$/;"	e	enum:__anon448
NRF_GZLL_H__	components\properitary_rf\gzll\nrf_gzll.h	21;"	d
NRF_GZLL_MODE_DEVICE	components\properitary_rf\gzll\nrf_gzll.h	/^  NRF_GZLL_MODE_DEVICE,       \/\/\/< Device mode$/;"	e	enum:__anon443
NRF_GZLL_MODE_HOST	components\properitary_rf\gzll\nrf_gzll.h	/^  NRF_GZLL_MODE_HOST,         \/\/\/< Host mode$/;"	e	enum:__anon443
NRF_GZLL_MODE_SUSPEND	components\properitary_rf\gzll\nrf_gzll.h	/^  NRF_GZLL_MODE_SUSPEND,      \/\/\/< Suspend mode ("disabled with timer running")$/;"	e	enum:__anon443
NRF_GZLL_TX_POWER_0_DBM	components\properitary_rf\gzll\nrf_gzll.h	/^  NRF_GZLL_TX_POWER_0_DBM,          \/\/\/<  0 dBm transmit power.$/;"	e	enum:__anon445
NRF_GZLL_TX_POWER_4_DBM	components\properitary_rf\gzll\nrf_gzll.h	/^  NRF_GZLL_TX_POWER_4_DBM,          \/\/\/<  4 dBm transmit power.$/;"	e	enum:__anon445
NRF_GZLL_TX_POWER_N12_DBM	components\properitary_rf\gzll\nrf_gzll.h	/^  NRF_GZLL_TX_POWER_N12_DBM,        \/\/\/< -12 dBm transmit power.$/;"	e	enum:__anon445
NRF_GZLL_TX_POWER_N16_DBM	components\properitary_rf\gzll\nrf_gzll.h	/^  NRF_GZLL_TX_POWER_N16_DBM,        \/\/\/< -16 dBm transmit power.$/;"	e	enum:__anon445
NRF_GZLL_TX_POWER_N20_DBM	components\properitary_rf\gzll\nrf_gzll.h	/^  NRF_GZLL_TX_POWER_N20_DBM         \/\/\/< -20 dBm transmit power.$/;"	e	enum:__anon445
NRF_GZLL_TX_POWER_N4_DBM	components\properitary_rf\gzll\nrf_gzll.h	/^  NRF_GZLL_TX_POWER_N4_DBM,         \/\/\/< -4 dBm transmit power.$/;"	e	enum:__anon445
NRF_GZLL_TX_POWER_N8_DBM	components\properitary_rf\gzll\nrf_gzll.h	/^  NRF_GZLL_TX_POWER_N8_DBM,         \/\/\/< -8 dBm transmit power.$/;"	e	enum:__anon445
NRF_GZLL_XOSC_CTL_AUTO	components\properitary_rf\gzll\nrf_gzll.h	/^  NRF_GZLL_XOSC_CTL_AUTO,   \/\/\/< Switch XOSC on\/off automatically$/;"	e	enum:__anon447
NRF_GZLL_XOSC_CTL_MANUAL	components\properitary_rf\gzll\nrf_gzll.h	/^  NRF_GZLL_XOSC_CTL_MANUAL  \/\/\/< Switch XOSC on\/off manually$/;"	e	enum:__anon447
nrf_gzll_datarate_t	components\properitary_rf\gzll\nrf_gzll.h	/^} nrf_gzll_datarate_t;$/;"	t	typeref:enum:__anon446
nrf_gzll_device_channel_selection_policy_t	components\properitary_rf\gzll\nrf_gzll.h	/^} nrf_gzll_device_channel_selection_policy_t;$/;"	t	typeref:enum:__anon444
nrf_gzll_device_tx_info_t	components\properitary_rf\gzll\nrf_gzll.h	/^} nrf_gzll_device_tx_info_t;$/;"	t	typeref:struct:__anon449
nrf_gzll_error_code_t	components\properitary_rf\gzll\nrf_gzll.h	/^} nrf_gzll_error_code_t;$/;"	t	typeref:enum:__anon448
nrf_gzll_host_rx_info_t	components\properitary_rf\gzll\nrf_gzll.h	/^} nrf_gzll_host_rx_info_t;$/;"	t	typeref:struct:__anon450
nrf_gzll_mode_t	components\properitary_rf\gzll\nrf_gzll.h	/^} nrf_gzll_mode_t;$/;"	t	typeref:enum:__anon443
nrf_gzll_tx_power_t	components\properitary_rf\gzll\nrf_gzll.h	/^} nrf_gzll_tx_power_t;$/;"	t	typeref:enum:__anon445
nrf_gzll_xosc_ctl_t	components\properitary_rf\gzll\nrf_gzll.h	/^} nrf_gzll_xosc_ctl_t;$/;"	t	typeref:enum:__anon447
num_channel_switches	components\properitary_rf\gzll\nrf_gzll.h	/^  uint16_t num_channel_switches;$/;"	m	struct:__anon449
num_tx_attempts	components\properitary_rf\gzll\nrf_gzll.h	/^  uint16_t num_tx_attempts;$/;"	m	struct:__anon449
packet_removed_from_tx_fifo	components\properitary_rf\gzll\nrf_gzll.h	/^  bool packet_removed_from_tx_fifo;$/;"	m	struct:__anon450
payload_received_in_ack	components\properitary_rf\gzll\nrf_gzll.h	/^  bool payload_received_in_ack;   $/;"	m	struct:__anon449
rssi	components\properitary_rf\gzll\nrf_gzll.h	/^  int16_t rssi;$/;"	m	struct:__anon449
rssi	components\properitary_rf\gzll\nrf_gzll.h	/^  int16_t rssi;$/;"	m	struct:__anon450
NRF_GZLL_CONSTANTS_H__	components\properitary_rf\gzll\nrf_gzll_constants.h	23;"	d
NRF_GZLL_CONST_CALLBACK_QUEUE_LENGTH	components\properitary_rf\gzll\nrf_gzll_constants.h	105;"	d
NRF_GZLL_CONST_CALLBACK_QUEUE_LENGTH	components\properitary_rf\gzll\nrf_gzll_constants.h	93;"	d
NRF_GZLL_CONST_FIFO_LENGTH	components\properitary_rf\gzll\nrf_gzll_constants.h	102;"	d
NRF_GZLL_CONST_FIFO_LENGTH	components\properitary_rf\gzll\nrf_gzll_constants.h	90;"	d
NRF_GZLL_CONST_MAX_CHANNEL_TABLE_SIZE	components\properitary_rf\gzll\nrf_gzll_constants.h	117;"	d
NRF_GZLL_CONST_MAX_PAYLOAD_LENGTH	components\properitary_rf\gzll\nrf_gzll_constants.h	104;"	d
NRF_GZLL_CONST_MAX_PAYLOAD_LENGTH	components\properitary_rf\gzll\nrf_gzll_constants.h	92;"	d
NRF_GZLL_CONST_MAX_TOTAL_PACKETS	components\properitary_rf\gzll\nrf_gzll_constants.h	103;"	d
NRF_GZLL_CONST_MAX_TOTAL_PACKETS	components\properitary_rf\gzll\nrf_gzll_constants.h	91;"	d
NRF_GZLL_CONST_PIPE_COUNT	components\properitary_rf\gzll\nrf_gzll_constants.h	101;"	d
NRF_GZLL_CONST_PIPE_COUNT	components\properitary_rf\gzll\nrf_gzll_constants.h	89;"	d
NRF_GZLL_DEFAULT_BASE_ADDRESS_0	components\properitary_rf\gzll\nrf_gzll_constants.h	134;"	d
NRF_GZLL_DEFAULT_BASE_ADDRESS_1	components\properitary_rf\gzll\nrf_gzll_constants.h	135;"	d
NRF_GZLL_DEFAULT_BASE_ADDRESS_LENGTH	components\properitary_rf\gzll\nrf_gzll_constants.h	144;"	d
NRF_GZLL_DEFAULT_CHANNEL_TABLE	components\properitary_rf\gzll\nrf_gzll_constants.h	115;"	d
NRF_GZLL_DEFAULT_CHANNEL_TABLE_SIZE	components\properitary_rf\gzll\nrf_gzll_constants.h	116;"	d
NRF_GZLL_DEFAULT_DATARATE	components\properitary_rf\gzll\nrf_gzll_constants.h	114;"	d
NRF_GZLL_DEFAULT_DEVICE_CHANNEL_SELECTION_POLICY	components\properitary_rf\gzll\nrf_gzll_constants.h	158;"	d
NRF_GZLL_DEFAULT_FULL_ADDRESS_PIPE0	components\properitary_rf\gzll\nrf_gzll_constants.h	133;"	d
NRF_GZLL_DEFAULT_MAX_TX_ATTEMPTS	components\properitary_rf\gzll\nrf_gzll_constants.h	159;"	d
NRF_GZLL_DEFAULT_PREFIX_BYTE_0	components\properitary_rf\gzll\nrf_gzll_constants.h	136;"	d
NRF_GZLL_DEFAULT_PREFIX_BYTE_1	components\properitary_rf\gzll\nrf_gzll_constants.h	137;"	d
NRF_GZLL_DEFAULT_PREFIX_BYTE_2	components\properitary_rf\gzll\nrf_gzll_constants.h	138;"	d
NRF_GZLL_DEFAULT_PREFIX_BYTE_3	components\properitary_rf\gzll\nrf_gzll_constants.h	139;"	d
NRF_GZLL_DEFAULT_PREFIX_BYTE_4	components\properitary_rf\gzll\nrf_gzll_constants.h	140;"	d
NRF_GZLL_DEFAULT_PREFIX_BYTE_5	components\properitary_rf\gzll\nrf_gzll_constants.h	141;"	d
NRF_GZLL_DEFAULT_PREFIX_BYTE_6	components\properitary_rf\gzll\nrf_gzll_constants.h	142;"	d
NRF_GZLL_DEFAULT_PREFIX_BYTE_7	components\properitary_rf\gzll\nrf_gzll_constants.h	143;"	d
NRF_GZLL_DEFAULT_RX_PIPES_ENABLED	components\properitary_rf\gzll\nrf_gzll_constants.h	146;"	d
NRF_GZLL_DEFAULT_SYNC_LIFETIME	components\properitary_rf\gzll\nrf_gzll_constants.h	157;"	d
NRF_GZLL_DEFAULT_TIMESLOTS_PER_CHANNEL	components\properitary_rf\gzll\nrf_gzll_constants.h	155;"	d
NRF_GZLL_DEFAULT_TIMESLOTS_PER_CHANNEL_WHEN_DEVICE_OUT_OF_SYNC	components\properitary_rf\gzll\nrf_gzll_constants.h	156;"	d
NRF_GZLL_DEFAULT_TIMESLOT_PERIOD	components\properitary_rf\gzll\nrf_gzll_constants.h	154;"	d
NRF_GZLL_DEFAULT_TX_POWER	components\properitary_rf\gzll\nrf_gzll_constants.h	113;"	d
NRF_GZLL_DEFAULT_XOSC_CTL	components\properitary_rf\gzll\nrf_gzll_constants.h	160;"	d
NRF_GZLL_HIGH_IRQ_PRIORITY	components\properitary_rf\gzll\nrf_gzll_constants.h	35;"	d
NRF_GZLL_LOW_IRQ_PRIORITY	components\properitary_rf\gzll\nrf_gzll_constants.h	36;"	d
NRF_GZLL_PPI_CHEN_MSK_0_AND_1	components\properitary_rf\gzll\nrf_gzll_constants.h	59;"	d
NRF_GZLL_PPI_CHEN_MSK_0_AND_1	components\properitary_rf\gzll\nrf_gzll_constants.h	84;"	d
NRF_GZLL_PPI_CHEN_MSK_2	components\properitary_rf\gzll\nrf_gzll_constants.h	60;"	d
NRF_GZLL_PPI_CHEN_MSK_2	components\properitary_rf\gzll\nrf_gzll_constants.h	85;"	d
NRF_GZLL_PPI_EEP0	components\properitary_rf\gzll\nrf_gzll_constants.h	52;"	d
NRF_GZLL_PPI_EEP0	components\properitary_rf\gzll\nrf_gzll_constants.h	77;"	d
NRF_GZLL_PPI_EEP1	components\properitary_rf\gzll\nrf_gzll_constants.h	54;"	d
NRF_GZLL_PPI_EEP1	components\properitary_rf\gzll\nrf_gzll_constants.h	79;"	d
NRF_GZLL_PPI_EEP2	components\properitary_rf\gzll\nrf_gzll_constants.h	56;"	d
NRF_GZLL_PPI_EEP2	components\properitary_rf\gzll\nrf_gzll_constants.h	81;"	d
NRF_GZLL_PPI_TEP0	components\properitary_rf\gzll\nrf_gzll_constants.h	53;"	d
NRF_GZLL_PPI_TEP0	components\properitary_rf\gzll\nrf_gzll_constants.h	78;"	d
NRF_GZLL_PPI_TEP1	components\properitary_rf\gzll\nrf_gzll_constants.h	55;"	d
NRF_GZLL_PPI_TEP1	components\properitary_rf\gzll\nrf_gzll_constants.h	80;"	d
NRF_GZLL_PPI_TEP2	components\properitary_rf\gzll\nrf_gzll_constants.h	57;"	d
NRF_GZLL_PPI_TEP2	components\properitary_rf\gzll\nrf_gzll_constants.h	82;"	d
NRF_GZLL_SWI_IRQ_HANDLER	components\properitary_rf\gzll\nrf_gzll_constants.h	40;"	d
NRF_GZLL_SWI_IRQ_HANDLER	components\properitary_rf\gzll\nrf_gzll_constants.h	65;"	d
NRF_GZLL_SWI_IRQn	components\properitary_rf\gzll\nrf_gzll_constants.h	39;"	d
NRF_GZLL_SWI_IRQn	components\properitary_rf\gzll\nrf_gzll_constants.h	64;"	d
NRF_GZLL_TIMER	components\properitary_rf\gzll\nrf_gzll_constants.h	42;"	d
NRF_GZLL_TIMER	components\properitary_rf\gzll\nrf_gzll_constants.h	67;"	d
NRF_GZLL_TIMER_IRQ_HANDLER	components\properitary_rf\gzll\nrf_gzll_constants.h	45;"	d
NRF_GZLL_TIMER_IRQ_HANDLER	components\properitary_rf\gzll\nrf_gzll_constants.h	70;"	d
NRF_GZLL_TIMER_IRQn	components\properitary_rf\gzll\nrf_gzll_constants.h	44;"	d
NRF_GZLL_TIMER_IRQn	components\properitary_rf\gzll\nrf_gzll_constants.h	69;"	d
NRF_GZLL_TIMER_PERPOWER_Msk	components\properitary_rf\gzll\nrf_gzll_constants.h	43;"	d
NRF_GZLL_TIMER_PERPOWER_Msk	components\properitary_rf\gzll\nrf_gzll_constants.h	68;"	d
SOURCE_FILE	components\properitary_rf\gzll\nrf_gzp.c	30;"	d	file:
gzp_add_validation_id	components\properitary_rf\gzll\nrf_gzp.c	/^void gzp_add_validation_id(uint8_t* dst)$/;"	f
gzp_crypt	components\properitary_rf\gzll\nrf_gzp.c	/^void gzp_crypt(uint8_t* dst, const uint8_t* src, uint8_t length)$/;"	f
gzp_crypt_get_dyn_key	components\properitary_rf\gzll\nrf_gzp.c	/^void gzp_crypt_get_dyn_key(uint8_t* dst_key)$/;"	f
gzp_crypt_get_session_token	components\properitary_rf\gzll\nrf_gzp.c	/^void gzp_crypt_get_session_token(uint8_t * dst_token)$/;"	f
gzp_crypt_select_key	components\properitary_rf\gzll\nrf_gzp.c	/^void gzp_crypt_select_key(gzp_key_select_t key_select)$/;"	f
gzp_crypt_set_dyn_key	components\properitary_rf\gzll\nrf_gzp.c	/^void gzp_crypt_set_dyn_key(const uint8_t* key)$/;"	f
gzp_crypt_set_session_token	components\properitary_rf\gzll\nrf_gzp.c	/^void gzp_crypt_set_session_token(const uint8_t * token)$/;"	f
gzp_dyn_key	components\properitary_rf\gzll\nrf_gzp.c	/^static uint8_t gzp_dyn_key[GZP_DYN_KEY_LENGTH];$/;"	v	file:
gzp_generate_channels	components\properitary_rf\gzll\nrf_gzp.c	/^void gzp_generate_channels(uint8_t* ch_dst, const uint8_t* system_address, uint8_t channel_tab_size)$/;"	f
gzp_key_select	components\properitary_rf\gzll\nrf_gzp.c	/^static gzp_key_select_t gzp_key_select;$/;"	v	file:
gzp_random_numbers_generate	components\properitary_rf\gzll\nrf_gzp.c	/^void gzp_random_numbers_generate(uint8_t * dst, uint8_t n)$/;"	f
gzp_secret_key	components\properitary_rf\gzll\nrf_gzp.c	/^static const uint8_t gzp_secret_key[16] = GZP_SECRET_KEY;$/;"	v	file:
gzp_session_token	components\properitary_rf\gzll\nrf_gzp.c	/^static uint8_t gzp_session_token[GZP_SESSION_TOKEN_LENGTH];$/;"	v	file:
gzp_update_radio_params	components\properitary_rf\gzll\nrf_gzp.c	/^bool gzp_update_radio_params(const uint8_t* system_address)$/;"	f
gzp_validate_id	components\properitary_rf\gzll\nrf_gzp.c	/^bool gzp_validate_id(const uint8_t* id)$/;"	f
gzp_validation_id	components\properitary_rf\gzll\nrf_gzp.c	/^static const uint8_t gzp_validation_id[GZP_VALIDATION_ID_LENGTH] = GZP_VALIDATION_ID;$/;"	v	file:
gzp_xor_cipher	components\properitary_rf\gzll\nrf_gzp.c	/^void gzp_xor_cipher(uint8_t* dst, const uint8_t* src, const uint8_t* pad, uint8_t length)$/;"	f
nrf_gzp_disable_gzll	components\properitary_rf\gzll\nrf_gzp.c	/^__INLINE void nrf_gzp_disable_gzll(void)$/;"	f
nrf_gzp_flush_rx_fifo	components\properitary_rf\gzll\nrf_gzp.c	/^void nrf_gzp_flush_rx_fifo(uint32_t pipe)$/;"	f
nrf_gzp_set_primask	components\properitary_rf\gzll\nrf_gzp.c	/^static void nrf_gzp_set_primask(uint32_t primask)$/;"	f	file:
pairing_address_prefix_byte	components\properitary_rf\gzll\nrf_gzp.c	/^static const uint8_t pairing_address_prefix_byte = 0;            $/;"	v	file:
pairing_base_address	components\properitary_rf\gzll\nrf_gzp.c	/^static const uint8_t pairing_base_address[4] = { GZP_ADDRESS }; $/;"	v	file:
GZP_CMD_ENCRYPTED_USER_DATA	components\properitary_rf\gzll\nrf_gzp.h	/^  GZP_CMD_ENCRYPTED_USER_DATA,      \/\/\/< Encrypted user data$/;"	e	enum:__anon452
GZP_CMD_ENCRYPTED_USER_DATA_PAYLOAD	components\properitary_rf\gzll\nrf_gzp.h	94;"	d
GZP_CMD_ENCRYPTED_USER_DATA_RESP	components\properitary_rf\gzll\nrf_gzp.h	/^  GZP_CMD_ENCRYPTED_USER_DATA_RESP, \/\/\/< Encrypted user data response$/;"	e	enum:__anon452
GZP_CMD_ENCRYPTED_USER_DATA_RESP_PAYLOAD_LENGTH	components\properitary_rf\gzll\nrf_gzp.h	141;"	d
GZP_CMD_ENCRYPTED_USER_DATA_RESP_SESSION_TOKEN	components\properitary_rf\gzll\nrf_gzp.h	139;"	d
GZP_CMD_ENCRYPTED_USER_DATA_RESP_VALIDATION_ID	components\properitary_rf\gzll\nrf_gzp.h	140;"	d
GZP_CMD_ENCRYPTED_USER_DATA_VALIDATION_ID	components\properitary_rf\gzll\nrf_gzp.h	93;"	d
GZP_CMD_FETCH_RESP	components\properitary_rf\gzll\nrf_gzp.h	/^  GZP_CMD_FETCH_RESP,               \/\/\/< Fetch response$/;"	e	enum:__anon452
GZP_CMD_FETCH_RESP_PAYLOAD_LENGTH	components\properitary_rf\gzll\nrf_gzp.h	102;"	d
GZP_CMD_HOST_ADDRESS_FETCH	components\properitary_rf\gzll\nrf_gzp.h	/^  GZP_CMD_HOST_ADDRESS_FETCH,       \/\/\/< Host address fetch$/;"	e	enum:__anon452
GZP_CMD_HOST_ADDRESS_FETCH_PAYLOAD_LENGTH	components\properitary_rf\gzll\nrf_gzp.h	65;"	d
GZP_CMD_HOST_ADDRESS_REQ	components\properitary_rf\gzll\nrf_gzp.h	/^  GZP_CMD_HOST_ADDRESS_REQ = 0,     \/\/\/< Host address request$/;"	e	enum:__anon452
GZP_CMD_HOST_ADDRESS_REQ_PAYLOAD_LENGTH	components\properitary_rf\gzll\nrf_gzp.h	63;"	d
GZP_CMD_HOST_ADDRESS_RESP	components\properitary_rf\gzll\nrf_gzp.h	/^  GZP_CMD_HOST_ADDRESS_RESP,        \/\/\/< Host address response$/;"	e	enum:__anon452
GZP_CMD_HOST_ADDRESS_RESP_ADDRESS	components\properitary_rf\gzll\nrf_gzp.h	113;"	d
GZP_CMD_HOST_ADDRESS_RESP_PAYLOAD_LENGTH	components\properitary_rf\gzll\nrf_gzp.h	114;"	d
GZP_CMD_HOST_ID_FETCH	components\properitary_rf\gzll\nrf_gzp.h	/^  GZP_CMD_HOST_ID_FETCH,            \/\/\/< Host ID fetch request$/;"	e	enum:__anon452
GZP_CMD_HOST_ID_FETCH_PAYLOAD_LENGTH	components\properitary_rf\gzll\nrf_gzp.h	76;"	d
GZP_CMD_HOST_ID_FETCH_RESP	components\properitary_rf\gzll\nrf_gzp.h	/^  GZP_CMD_HOST_ID_FETCH_RESP,       \/\/\/< Host ID fetch response$/;"	e	enum:__anon452
GZP_CMD_HOST_ID_FETCH_RESP_HOST_ID	components\properitary_rf\gzll\nrf_gzp.h	123;"	d
GZP_CMD_HOST_ID_FETCH_RESP_PAYLOAD_LENGTH	components\properitary_rf\gzll\nrf_gzp.h	124;"	d
GZP_CMD_HOST_ID_FETCH_RESP_STATUS	components\properitary_rf\gzll\nrf_gzp.h	122;"	d
GZP_CMD_HOST_ID_FETCH_RESP_VALIDATION_ID	components\properitary_rf\gzll\nrf_gzp.h	121;"	d
GZP_CMD_HOST_ID_FETCH_VALIDATION_ID	components\properitary_rf\gzll\nrf_gzp.h	75;"	d
GZP_CMD_HOST_ID_REQ	components\properitary_rf\gzll\nrf_gzp.h	/^  GZP_CMD_HOST_ID_REQ,              \/\/\/< Host ID request$/;"	e	enum:__anon452
GZP_CMD_HOST_ID_REQ_PAYLOAD_LENGTH	components\properitary_rf\gzll\nrf_gzp.h	68;"	d
GZP_CMD_HOST_ID_REQ_SESSION_TOKEN	components\properitary_rf\gzll\nrf_gzp.h	67;"	d
GZP_CMD_KEY_UPDATE	components\properitary_rf\gzll\nrf_gzp.h	/^  GZP_CMD_KEY_UPDATE,               \/\/\/< Key update$/;"	e	enum:__anon452
GZP_CMD_KEY_UPDATE_NEW_KEY	components\properitary_rf\gzll\nrf_gzp.h	85;"	d
GZP_CMD_KEY_UPDATE_PAYLOAD_LENGTH	components\properitary_rf\gzll\nrf_gzp.h	86;"	d
GZP_CMD_KEY_UPDATE_PREPARE	components\properitary_rf\gzll\nrf_gzp.h	/^  GZP_CMD_KEY_UPDATE_PREPARE,       \/\/\/< Key update prepare$/;"	e	enum:__anon452
GZP_CMD_KEY_UPDATE_PREPARE_PAYLOAD_LENGTH	components\properitary_rf\gzll\nrf_gzp.h	82;"	d
GZP_CMD_KEY_UPDATE_PREPARE_RESP	components\properitary_rf\gzll\nrf_gzp.h	/^  GZP_CMD_KEY_UPDATE_PREPARE_RESP,  \/\/\/< Key update prepare $/;"	e	enum:__anon452
GZP_CMD_KEY_UPDATE_PREPARE_RESP_PAYLOAD_LENGTH	components\properitary_rf\gzll\nrf_gzp.h	132;"	d
GZP_CMD_KEY_UPDATE_PREPARE_RESP_SESSION_TOKEN	components\properitary_rf\gzll\nrf_gzp.h	131;"	d
GZP_CMD_KEY_UPDATE_VALIDATION_ID	components\properitary_rf\gzll\nrf_gzp.h	84;"	d
GZP_DATA_EXCHANGE	components\properitary_rf\gzll\nrf_gzp.h	/^  GZP_DATA_EXCHANGE   \/\/\/< "Dynamic key" and "Host ID"$/;"	e	enum:__anon451
GZP_DATA_PIPE	components\properitary_rf\gzll\nrf_gzp.h	42;"	d
GZP_DYN_KEY_LENGTH	components\properitary_rf\gzll\nrf_gzp.h	51;"	d
GZP_ENCRYPTED_USER_DATA_MAX_LENGTH	components\properitary_rf\gzll\nrf_gzp.h	96;"	d
GZP_ENCRYPTED_USER_DATA_PACKET_OVERHEAD	components\properitary_rf\gzll\nrf_gzp.h	95;"	d
GZP_HOST_ID_LENGTH	components\properitary_rf\gzll\nrf_gzp.h	49;"	d
GZP_HOST_RX_POWER_THRESHOLD	components\properitary_rf\gzll\nrf_gzp.h	53;"	d
GZP_ID_EXCHANGE	components\properitary_rf\gzll\nrf_gzp.h	/^  GZP_ID_EXCHANGE,    \/\/\/< "Secret key" only$/;"	e	enum:__anon451
GZP_ID_RESP_FAILED	components\properitary_rf\gzll\nrf_gzp.h	/^  GZP_ID_RESP_FAILED,    \/\/\/< ID response failed$/;"	e	enum:__anon453
GZP_ID_RESP_GRANTED	components\properitary_rf\gzll\nrf_gzp.h	/^  GZP_ID_RESP_GRANTED,   \/\/\/< ID response granted$/;"	e	enum:__anon453
GZP_ID_RESP_NO_REQUEST	components\properitary_rf\gzll\nrf_gzp.h	/^  GZP_ID_RESP_NO_REQUEST \/\/\/< Default value. No ID request has yet been received.$/;"	e	enum:__anon453
GZP_ID_RESP_PENDING	components\properitary_rf\gzll\nrf_gzp.h	/^  GZP_ID_RESP_PENDING,   \/\/\/< ID response pending$/;"	e	enum:__anon453
GZP_ID_RESP_REJECTED	components\properitary_rf\gzll\nrf_gzp.h	/^  GZP_ID_RESP_REJECTED,  \/\/\/< ID response rejected$/;"	e	enum:__anon453
GZP_KEY_EXCHANGE	components\properitary_rf\gzll\nrf_gzp.h	/^  GZP_KEY_EXCHANGE,   \/\/\/< "Secret key" and "Host ID"$/;"	e	enum:__anon451
GZP_PAIRING_PIPE	components\properitary_rf\gzll\nrf_gzp.h	41;"	d
GZP_SESSION_TOKEN_LENGTH	components\properitary_rf\gzll\nrf_gzp.h	50;"	d
GZP_SYSTEM_ADDRESS_WIDTH	components\properitary_rf\gzll\nrf_gzp.h	44;"	d
GZP_TX_RX_TRANS_DELAY	components\properitary_rf\gzll\nrf_gzp.h	43;"	d
GZP_VALIDATION_ID	components\properitary_rf\gzll\nrf_gzp.h	47;"	d
GZP_VALIDATION_ID_LENGTH	components\properitary_rf\gzll\nrf_gzp.h	48;"	d
__GZP_H	components\properitary_rf\gzll\nrf_gzp.h	20;"	d
gzp_cmd_t	components\properitary_rf\gzll\nrf_gzp.h	/^} gzp_cmd_t;$/;"	t	typeref:enum:__anon452
gzp_id_req_res_t	components\properitary_rf\gzll\nrf_gzp.h	/^} gzp_id_req_res_t;$/;"	t	typeref:enum:__anon453
gzp_key_select_t	components\properitary_rf\gzll\nrf_gzp.h	/^} gzp_key_select_t;$/;"	t	typeref:enum:__anon451
GZP_INDEX_DB_ADR	components\properitary_rf\gzll\nrf_gzp_device.c	56;"	d	file:
GZP_INDEX_DB_SIZE	components\properitary_rf\gzll\nrf_gzp_device.c	57;"	d	file:
GZP_PARAMS_DB_ADR	components\properitary_rf\gzll\nrf_gzp_device.c	53;"	d	file:
GZP_PARAMS_DB_ELEMENT_HOST_ID	components\properitary_rf\gzll\nrf_gzp_device.c	41;"	d	file:
GZP_PARAMS_DB_ELEMENT_SIZE	components\properitary_rf\gzll\nrf_gzp_device.c	42;"	d	file:
GZP_PARAMS_DB_ELEMENT_SYSTEM_ADDRESS	components\properitary_rf\gzll\nrf_gzp_device.c	40;"	d	file:
GZP_PARAMS_DB_MAX_ENTRIES	components\properitary_rf\gzll\nrf_gzp_device.c	43;"	d	file:
GZP_PARAMS_DB_SIZE	components\properitary_rf\gzll\nrf_gzp_device.c	54;"	d	file:
GZP_TX_RX_FAILED_TO_SEND	components\properitary_rf\gzll\nrf_gzp_device.c	/^    GZP_TX_RX_FAILED_TO_SEND,  \/\/\/< $/;"	e	enum:__anon454	file:
GZP_TX_RX_NO_RESPONSE	components\properitary_rf\gzll\nrf_gzp_device.c	/^    GZP_TX_RX_NO_RESPONSE      \/\/\/< $/;"	e	enum:__anon454	file:
GZP_TX_RX_SUCCESS	components\properitary_rf\gzll\nrf_gzp_device.c	/^    GZP_TX_RX_SUCCESS,         \/\/\/< ACK received. Transaction successful.$/;"	e	enum:__anon454	file:
SOURCE_FILE	components\properitary_rf\gzll\nrf_gzp_device.c	33;"	d	file:
database	components\properitary_rf\gzll\nrf_gzp_device.c	/^static const uint32_t database[GZP_DEVICE_PARAMS_STORAGE_SIZE\/4] __attribute__((at(GZP_PARAMS_DB_ADR)))$/;"	v	file:
dyn_key	components\properitary_rf\gzll\nrf_gzp_device.c	/^static uint8_t dyn_key[GZP_DYN_KEY_LENGTH];$/;"	v	file:
gzp_address_req_send	components\properitary_rf\gzll\nrf_gzp_device.c	/^bool gzp_address_req_send()$/;"	f
gzp_array_is_set	components\properitary_rf\gzll\nrf_gzp_device.c	/^static bool gzp_array_is_set(const uint8_t* src, uint8_t length)$/;"	f	file:
gzp_crypt_data_send	components\properitary_rf\gzll\nrf_gzp_device.c	/^bool gzp_crypt_data_send(const uint8_t *src, uint8_t length)$/;"	f
gzp_crypt_tx_transaction	components\properitary_rf\gzll\nrf_gzp_device.c	/^static bool gzp_crypt_tx_transaction(const uint8_t *src, uint8_t length)$/;"	f	file:
gzp_delay_rx_periods	components\properitary_rf\gzll\nrf_gzp_device.c	/^void gzp_delay_rx_periods(uint32_t rx_periods)$/;"	f
gzp_erase_pairing_data	components\properitary_rf\gzll\nrf_gzp_device.c	/^void gzp_erase_pairing_data(void)$/;"	f
gzp_get_host_id	components\properitary_rf\gzll\nrf_gzp_device.c	/^void gzp_get_host_id(uint8_t * dst_id)$/;"	f
gzp_get_pairing_status	components\properitary_rf\gzll\nrf_gzp_device.c	/^int8_t gzp_get_pairing_status(void)$/;"	f
gzp_host_id	components\properitary_rf\gzll\nrf_gzp_device.c	/^static uint8_t gzp_host_id[GZP_HOST_ID_LENGTH];              \/\/\/<$/;"	v	file:
gzp_id_req_cancel	components\properitary_rf\gzll\nrf_gzp_device.c	/^void gzp_id_req_cancel()$/;"	f
gzp_id_req_pending	components\properitary_rf\gzll\nrf_gzp_device.c	/^static bool gzp_id_req_pending = false;$/;"	v	file:
gzp_id_req_send	components\properitary_rf\gzll\nrf_gzp_device.c	/^gzp_id_req_res_t gzp_id_req_send()$/;"	f
gzp_index_db_add	components\properitary_rf\gzll\nrf_gzp_device.c	/^static void gzp_index_db_add(uint8_t val)$/;"	f	file:
gzp_index_db_empty	components\properitary_rf\gzll\nrf_gzp_device.c	/^static bool gzp_index_db_empty()$/;"	f	file:
gzp_index_db_full	components\properitary_rf\gzll\nrf_gzp_device.c	/^static bool gzp_index_db_full()$/;"	f	file:
gzp_index_db_read	components\properitary_rf\gzll\nrf_gzp_device.c	/^static uint8_t gzp_index_db_read()$/;"	f	file:
gzp_init	components\properitary_rf\gzll\nrf_gzp_device.c	/^void gzp_init()$/;"	f
gzp_key_update	components\properitary_rf\gzll\nrf_gzp_device.c	/^static bool gzp_key_update(void)$/;"	f	file:
gzp_params_db_add	components\properitary_rf\gzll\nrf_gzp_device.c	/^static void gzp_params_db_add(const uint8_t* src_element, uint8_t index)$/;"	f	file:
gzp_params_db_read	components\properitary_rf\gzll\nrf_gzp_device.c	/^static void gzp_params_db_read(uint8_t* dst_element, uint8_t index)$/;"	f	file:
gzp_params_restore	components\properitary_rf\gzll\nrf_gzp_device.c	/^static bool gzp_params_restore(void)$/;"	f	file:
gzp_params_store	components\properitary_rf\gzll\nrf_gzp_device.c	/^static bool gzp_params_store(bool store_all)$/;"	f	file:
gzp_set_host_id	components\properitary_rf\gzll\nrf_gzp_device.c	/^void gzp_set_host_id(const uint8_t * id)$/;"	f
gzp_system_address	components\properitary_rf\gzll\nrf_gzp_device.c	/^static uint8_t gzp_system_address[GZP_SYSTEM_ADDRESS_WIDTH]; \/\/\/<$/;"	v	file:
gzp_tick_sleep_rx_periods	components\properitary_rf\gzll\nrf_gzp_device.c	/^void gzp_tick_sleep_rx_periods(uint32_t rx_periods)$/;"	f
gzp_tx_packet	components\properitary_rf\gzll\nrf_gzp_device.c	/^static bool gzp_tx_packet(const uint8_t* tx_packet, uint8_t length, uint8_t pipe)$/;"	f	file:
gzp_tx_rx_trans_result_t	components\properitary_rf\gzll\nrf_gzp_device.c	/^} gzp_tx_rx_trans_result_t;$/;"	t	typeref:enum:__anon454	file:
gzp_tx_rx_transaction	components\properitary_rf\gzll\nrf_gzp_device.c	/^static gzp_tx_rx_trans_result_t gzp_tx_rx_transaction(const uint8_t *tx_packet, uint8_t tx_length, uint8_t *rx_dst, uint32_t *rx_length, uint8_t pipe)$/;"	f	file:
latest_tx_info	components\properitary_rf\gzll\nrf_gzp_device.c	/^static nrf_gzll_device_tx_info_t latest_tx_info;  \/\/\/< Information about the last TX attempt, e.g. RSSI of ACK.$/;"	v	file:
nrf_gzll_device_tx_failed	components\properitary_rf\gzll\nrf_gzp_device.c	/^void nrf_gzll_device_tx_failed(uint32_t pipe, nrf_gzll_device_tx_info_t tx_info)$/;"	f
nrf_gzll_device_tx_success	components\properitary_rf\gzll\nrf_gzp_device.c	/^void nrf_gzll_device_tx_success(uint32_t pipe, nrf_gzll_device_tx_info_t tx_info)$/;"	f
nrf_gzll_disabled	components\properitary_rf\gzll\nrf_gzp_device.c	/^void nrf_gzll_disabled(void)$/;"	f
nrf_gzll_host_rx_data_ready	components\properitary_rf\gzll\nrf_gzp_device.c	/^void nrf_gzll_host_rx_data_ready(uint32_t pipe, nrf_gzll_host_rx_info_t rx_info)$/;"	f
nrf_gzp_reset_tx_complete	components\properitary_rf\gzll\nrf_gzp_device.c	/^void nrf_gzp_reset_tx_complete()$/;"	f
nrf_gzp_reset_tx_success	components\properitary_rf\gzll\nrf_gzp_device.c	/^void nrf_gzp_reset_tx_success()$/;"	f
nrf_gzp_tx_complete	components\properitary_rf\gzll\nrf_gzp_device.c	/^bool nrf_gzp_tx_complete(void)$/;"	f
nrf_gzp_tx_success	components\properitary_rf\gzll\nrf_gzp_device.c	/^bool nrf_gzp_tx_success(void)$/;"	f
tx_complete	components\properitary_rf\gzll\nrf_gzp_device.c	/^static bool tx_complete; \/\/\/< Flag to indicate whether a GZLL TX attempt has completed.$/;"	v	file:
tx_success	components\properitary_rf\gzll\nrf_gzp_device.c	/^static bool tx_success;  \/\/\/< Flag to indicate whether a GZLL TX attempt was successful.$/;"	v	file:
GZP_ID_REQ_IDLE	components\properitary_rf\gzll\nrf_gzp_host.c	/^  GZP_ID_REQ_IDLE,                 \/\/\/< No Host ID request received from Device.$/;"	e	enum:__anon455	file:
GZP_ID_REQ_PENDING	components\properitary_rf\gzll\nrf_gzp_host.c	/^  GZP_ID_REQ_PENDING,              \/\/\/< Host ID request received and waiting on application to grant\/reject.$/;"	e	enum:__anon455	file:
GZP_ID_REQ_PENDING_AND_GRANTED	components\properitary_rf\gzll\nrf_gzp_host.c	/^  GZP_ID_REQ_PENDING_AND_GRANTED,  \/\/\/< Host ID request received and granted by application.$/;"	e	enum:__anon455	file:
GZP_ID_REQ_PENDING_AND_REJECTED	components\properitary_rf\gzll\nrf_gzp_host.c	/^  GZP_ID_REQ_PENDING_AND_REJECTED, \/\/\/< Host ID request received and rejected by application.$/;"	e	enum:__anon455	file:
gzll_goto_idle	components\properitary_rf\gzll\nrf_gzp_host.c	/^static void gzll_goto_idle()$/;"	f	file:
gzll_rx_fifo_flush	components\properitary_rf\gzll\nrf_gzp_host.c	/^static void gzll_rx_fifo_flush(void)$/;"	f	file:
gzll_rx_start	components\properitary_rf\gzll\nrf_gzp_host.c	/^void gzll_rx_start(void)$/;"	f
gzll_set_rx_timeout	components\properitary_rf\gzll\nrf_gzp_host.c	/^static void gzll_set_rx_timeout(uint32_t timeout)$/;"	f	file:
gzll_tx_fifo_flush	components\properitary_rf\gzll\nrf_gzp_host.c	/^static void gzll_tx_fifo_flush(void)$/;"	f	file:
gzp_address_exchanged	components\properitary_rf\gzll\nrf_gzp_host.c	/^bool gzp_address_exchanged()$/;"	f
gzp_address_exchanged_f	components\properitary_rf\gzll\nrf_gzp_host.c	/^static bool gzp_address_exchanged_f;      \/\/\/< True if Host has exchanged a system address with a device and thus pairing has begun.$/;"	v	file:
gzp_crypt_user_data_read	components\properitary_rf\gzll\nrf_gzp_host.c	/^bool gzp_crypt_user_data_read(uint8_t* dst, uint8_t* length)$/;"	f
gzp_crypt_user_data_received	components\properitary_rf\gzll\nrf_gzp_host.c	/^bool gzp_crypt_user_data_received()$/;"	f
gzp_encrypted_user_data	components\properitary_rf\gzll\nrf_gzp_host.c	/^static bool gzp_encrypted_user_data[GZP_ENCRYPTED_USER_DATA_MAX_LENGTH]; \/\/\/< Placeholder for encrypted data from Device.$/;"	v	file:
gzp_encrypted_user_data_length	components\properitary_rf\gzll\nrf_gzp_host.c	/^static uint8_t gzp_encrypted_user_data_length;                           \/\/\/< Length of gzp_encrypted_user_data. Zero implies no data received.$/;"	v	file:
gzp_get_host_id	components\properitary_rf\gzll\nrf_gzp_host.c	/^void gzp_get_host_id(uint8_t *dst)$/;"	f
gzp_get_session_counter	components\properitary_rf\gzll\nrf_gzp_host.c	/^static void gzp_get_session_counter(uint8_t* dst)$/;"	f	file:
gzp_host_execute	components\properitary_rf\gzll\nrf_gzp_host.c	/^void gzp_host_execute()$/;"	f
gzp_id_req_cancel	components\properitary_rf\gzll\nrf_gzp_host.c	/^void gzp_id_req_cancel()$/;"	f
gzp_id_req_grant	components\properitary_rf\gzll\nrf_gzp_host.c	/^void gzp_id_req_grant()$/;"	f
gzp_id_req_received	components\properitary_rf\gzll\nrf_gzp_host.c	/^bool gzp_id_req_received()$/;"	f
gzp_id_req_reject	components\properitary_rf\gzll\nrf_gzp_host.c	/^void gzp_id_req_reject()$/;"	f
gzp_id_req_stat	components\properitary_rf\gzll\nrf_gzp_host.c	/^static gzp_id_req_stat_t gzp_id_req_stat; \/\/\/< Current state of Host ID request.$/;"	v	file:
gzp_id_req_stat_t	components\properitary_rf\gzll\nrf_gzp_host.c	/^} gzp_id_req_stat_t;$/;"	t	typeref:enum:__anon455	file:
gzp_init	components\properitary_rf\gzll\nrf_gzp_host.c	/^void gzp_init()$/;"	f
gzp_pairing_enable	components\properitary_rf\gzll\nrf_gzp_host.c	/^void gzp_pairing_enable(bool enable)$/;"	f
gzp_pairing_enabled_f	components\properitary_rf\gzll\nrf_gzp_host.c	/^static bool gzp_pairing_enabled_f;        \/\/\/< True if Host is paired with a device.$/;"	v	file:
gzp_preload_ack	components\properitary_rf\gzll\nrf_gzp_host.c	/^static void gzp_preload_ack(uint8_t* src, uint8_t length, uint8_t pipe)$/;"	f	file:
gzp_process_address_req	components\properitary_rf\gzll\nrf_gzp_host.c	/^static void gzp_process_address_req(uint8_t* gzp_req)$/;"	f	file:
gzp_process_encrypted_user_data	components\properitary_rf\gzll\nrf_gzp_host.c	/^static void gzp_process_encrypted_user_data(uint8_t* rx_payload, uint8_t length)$/;"	f	file:
gzp_process_id_fetch	components\properitary_rf\gzll\nrf_gzp_host.c	/^static void gzp_process_id_fetch(uint8_t* rx_payload)$/;"	f	file:
gzp_process_id_req	components\properitary_rf\gzll\nrf_gzp_host.c	/^static void gzp_process_id_req(uint8_t* rx_payload)$/;"	f	file:
gzp_process_key_update	components\properitary_rf\gzll\nrf_gzp_host.c	/^static void gzp_process_key_update(uint8_t* rx_payload)$/;"	f	file:
gzp_process_key_update_prepare	components\properitary_rf\gzll\nrf_gzp_host.c	/^static void gzp_process_key_update_prepare()$/;"	f	file:
gzp_session_counter	components\properitary_rf\gzll\nrf_gzp_host.c	/^static uint8_t gzp_session_counter[GZP_SESSION_TOKEN_LENGTH]; \/\/\/< Session counter used for key generation and update.$/;"	v	file:
gzp_session_counter_inc	components\properitary_rf\gzll\nrf_gzp_host.c	/^static void gzp_session_counter_inc()$/;"	f	file:
gzp_set_host_id	components\properitary_rf\gzll\nrf_gzp_host.c	/^static void gzp_set_host_id(const uint8_t* src)$/;"	f	file:
nrf_gzll_device_tx_failed	components\properitary_rf\gzll\nrf_gzp_host.c	/^void nrf_gzll_device_tx_failed(uint32_t pipe, nrf_gzll_device_tx_info_t tx_info)$/;"	f
nrf_gzll_device_tx_success	components\properitary_rf\gzll\nrf_gzp_host.c	/^void nrf_gzll_device_tx_success(uint32_t pipe, nrf_gzll_device_tx_info_t tx_info)$/;"	f
nrf_gzll_disabled	components\properitary_rf\gzll\nrf_gzp_host.c	/^void nrf_gzll_disabled(void)$/;"	f
nrf_gzll_host_rx_data_ready	components\properitary_rf\gzll\nrf_gzp_host.c	/^void nrf_gzll_host_rx_data_ready(uint32_t pipe, nrf_gzll_host_rx_info_t rx_info)$/;"	f
prev_gzp_rx_info	components\properitary_rf\gzll\nrf_gzp_host.c	/^static nrf_gzll_host_rx_info_t prev_gzp_rx_info = {0, 0};                \/\/\/< RSSI and status of ACK payload transmission of previous Gazell packet.$/;"	v	file:
gzp_host_chip_id_read	components\properitary_rf\gzll\nrf_gzp_host_nrf51.c	/^void gzp_host_chip_id_read(uint8_t *dst, uint8_t n)$/;"	f
ANT_STACK_EVT_MSG_BUF_SIZE	components\softdevice\common\softdevice_handler\ant_stack_handler_types.h	29;"	d
ANT_STACK_EVT_STRUCT_SIZE	components\softdevice\common\softdevice_handler\ant_stack_handler_types.h	30;"	d
ANT_STACK_EVT_STRUCT_SIZE	components\softdevice\common\softdevice_handler\ant_stack_handler_types.h	63;"	d
ANT_STACK_HANDLER_TYPES_H__	components\softdevice\common\softdevice_handler\ant_stack_handler_types.h	23;"	d
ant_evt_handler_t	components\softdevice\common\softdevice_handler\ant_stack_handler_types.h	/^typedef void (*ant_evt_handler_t) (ant_evt_t * p_ant_evt);$/;"	t
ant_evt_t	components\softdevice\common\softdevice_handler\ant_stack_handler_types.h	/^} ant_evt_t;$/;"	t	typeref:struct:__anon456
channel	components\softdevice\common\softdevice_handler\ant_stack_handler_types.h	/^    uint8_t channel;                                                                      \/**< Channel number. *\/$/;"	m	struct:__anon456
event	components\softdevice\common\softdevice_handler\ant_stack_handler_types.h	/^    uint8_t event;                                                                        \/**< Event code. *\/$/;"	m	struct:__anon456
evt_buffer	components\softdevice\common\softdevice_handler\ant_stack_handler_types.h	/^    uint8_t evt_buffer[ANT_STACK_EVT_MSG_BUF_SIZE];                                       \/**< Event message buffer. *\/$/;"	m	struct:__anon456
BLE_STACK_EVT_MSG_BUF_SIZE	components\softdevice\common\softdevice_handler\ble_stack_handler_types.h	33;"	d
BLE_STACK_EVT_MSG_BUF_SIZE	components\softdevice\common\softdevice_handler\ble_stack_handler_types.h	57;"	d
BLE_STACK_HANDLER_SCHED_EVT_SIZE	components\softdevice\common\softdevice_handler\ble_stack_handler_types.h	34;"	d
BLE_STACK_HANDLER_SCHED_EVT_SIZE	components\softdevice\common\softdevice_handler\ble_stack_handler_types.h	58;"	d
BLE_STACK_HANDLER_TYPES_H__	components\softdevice\common\softdevice_handler\ble_stack_handler_types.h	23;"	d
ble_evt_handler_t	components\softdevice\common\softdevice_handler\ble_stack_handler_types.h	/^typedef void (*ble_evt_handler_t) (ble_evt_t * p_ble_evt);$/;"	t
SWI2_IRQHandler	components\softdevice\common\softdevice_handler\softdevice_handler.c	/^void SWI2_IRQHandler(void)$/;"	f
intern_softdevice_events_execute	components\softdevice\common\softdevice_handler\softdevice_handler.c	/^void intern_softdevice_events_execute(void)$/;"	f
m_ant_evt_buffer	components\softdevice\common\softdevice_handler\softdevice_handler.c	/^static ant_evt_t                      m_ant_evt_buffer;                 \/**< Buffer for receiving ANT events from the SoftDevice. *\/$/;"	v	file:
m_ant_evt_handler	components\softdevice\common\softdevice_handler\softdevice_handler.c	/^static ant_evt_handler_t              m_ant_evt_handler;                \/**< Application event handler for handling ANT events.  *\/$/;"	v	file:
m_ble_evt_buffer_size	components\softdevice\common\softdevice_handler\softdevice_handler.c	/^static uint16_t                       m_ble_evt_buffer_size;            \/**< Size of BLE event buffer. *\/$/;"	v	file:
m_ble_evt_handler	components\softdevice\common\softdevice_handler\softdevice_handler.c	/^static ble_evt_handler_t              m_ble_evt_handler;                \/**< Application event handler for handling BLE events. *\/$/;"	v	file:
m_evt_schedule_func	components\softdevice\common\softdevice_handler\softdevice_handler.c	/^static softdevice_evt_schedule_func_t m_evt_schedule_func;              \/**< Pointer to function for propagating SoftDevice events to the scheduler. *\/$/;"	v	file:
m_softdevice_enabled	components\softdevice\common\softdevice_handler\softdevice_handler.c	/^static volatile bool                  m_softdevice_enabled = false;     \/**< Variable to indicate whether the SoftDevice is enabled. *\/$/;"	v	file:
m_sys_evt_handler	components\softdevice\common\softdevice_handler\softdevice_handler.c	/^static sys_evt_handler_t              m_sys_evt_handler;                \/**< Application event handler for handling System (SOC) events.  *\/$/;"	v	file:
mp_ble_evt_buffer	components\softdevice\common\softdevice_handler\softdevice_handler.c	/^static uint8_t                      * mp_ble_evt_buffer;                \/**< Buffer for receiving BLE events from the SoftDevice. *\/$/;"	v	file:
softdevice_ant_evt_handler_set	components\softdevice\common\softdevice_handler\softdevice_handler.c	/^uint32_t softdevice_ant_evt_handler_set(ant_evt_handler_t ant_evt_handler)$/;"	f
softdevice_assertion_handler	components\softdevice\common\softdevice_handler\softdevice_handler.c	/^void softdevice_assertion_handler(uint32_t pc, uint16_t line_num, const uint8_t * file_name)$/;"	f
softdevice_ble_evt_handler_set	components\softdevice\common\softdevice_handler\softdevice_handler.c	/^uint32_t softdevice_ble_evt_handler_set(ble_evt_handler_t ble_evt_handler)$/;"	f
softdevice_handler_init	components\softdevice\common\softdevice_handler\softdevice_handler.c	/^uint32_t softdevice_handler_init(nrf_clock_lfclksrc_t           clock_source,$/;"	f
softdevice_handler_sd_disable	components\softdevice\common\softdevice_handler\softdevice_handler.c	/^uint32_t softdevice_handler_sd_disable(void)$/;"	f
softdevice_sys_evt_handler_set	components\softdevice\common\softdevice_handler\softdevice_handler.c	/^uint32_t softdevice_sys_evt_handler_set(sys_evt_handler_t sys_evt_handler)$/;"	f
SOFTDEVICE_HANDLER_H__	components\softdevice\common\softdevice_handler\softdevice_handler.h	33;"	d
SOFTDEVICE_HANDLER_INIT	components\softdevice\common\softdevice_handler\softdevice_handler.h	68;"	d
SOFTDEVICE_SCHED_EVT_SIZE	components\softdevice\common\softdevice_handler\softdevice_handler.h	43;"	d
SYS_EVT_MSG_BUF_SIZE	components\softdevice\common\softdevice_handler\softdevice_handler.h	44;"	d
softdevice_evt_schedule_func_t	components\softdevice\common\softdevice_handler\softdevice_handler.h	/^typedef uint32_t (*softdevice_evt_schedule_func_t) (void);$/;"	t
sys_evt_handler_t	components\softdevice\common\softdevice_handler\softdevice_handler.h	/^typedef void (*sys_evt_handler_t) (uint32_t evt_id);$/;"	t
softdevice_evt_get	components\softdevice\common\softdevice_handler\softdevice_handler_appsh.c	/^void softdevice_evt_get(void * p_event_data, uint16_t event_size)$/;"	f
softdevice_evt_schedule	components\softdevice\common\softdevice_handler\softdevice_handler_appsh.c	/^uint32_t softdevice_evt_schedule(void)$/;"	f
SOFTDEVICE_HANDLER_APPSH_H	components\softdevice\common\softdevice_handler\softdevice_handler_appsh.h	14;"	d
SOFTDEVICE_HANDLER_APPSH_INIT	components\softdevice\common\softdevice_handler\softdevice_handler_appsh.h	19;"	d
BLE_COMMON_EVTS	components\softdevice\s110\headers\ble.h	/^enum BLE_COMMON_EVTS$/;"	g
BLE_COMMON_OPTS	components\softdevice\s110\headers\ble.h	/^enum BLE_COMMON_OPTS$/;"	g
BLE_COMMON_OPT_RADIO_CPU_MUTEX	components\softdevice\s110\headers\ble.h	/^  BLE_COMMON_OPT_RADIO_CPU_MUTEX = BLE_OPT_BASE    \/**< Radio CPU mutex option. @ref ble_common_opt_radio_cpu_mutex_t *\/$/;"	e	enum:BLE_COMMON_OPTS
BLE_COMMON_SVCS	components\softdevice\s110\headers\ble.h	/^enum BLE_COMMON_SVCS$/;"	g
BLE_EVTS_PTR_ALIGNMENT	components\softdevice\s110\headers\ble.h	102;"	d
BLE_EVT_TX_COMPLETE	components\softdevice\s110\headers\ble.h	/^  BLE_EVT_TX_COMPLETE  = BLE_EVT_BASE,  \/**< Transmission Complete. @ref ble_evt_tx_complete_t *\/$/;"	e	enum:BLE_COMMON_EVTS
BLE_EVT_USER_MEM_RELEASE	components\softdevice\s110\headers\ble.h	/^  BLE_EVT_USER_MEM_RELEASE              \/**< User Memory release. @ref ble_evt_user_mem_release_t *\/$/;"	e	enum:BLE_COMMON_EVTS
BLE_EVT_USER_MEM_REQUEST	components\softdevice\s110\headers\ble.h	/^  BLE_EVT_USER_MEM_REQUEST,             \/**< User Memory request. @ref ble_evt_user_mem_request_t *\/$/;"	e	enum:BLE_COMMON_EVTS
BLE_H__	components\softdevice\s110\headers\ble.h	48;"	d
BLE_USER_MEM_TYPE_GATTS_QUEUED_WRITES	components\softdevice\s110\headers\ble.h	107;"	d
BLE_USER_MEM_TYPE_INVALID	components\softdevice\s110\headers\ble.h	106;"	d
BLE_UUID_VS_MAX_COUNT	components\softdevice\s110\headers\ble.h	112;"	d
SD_BLE_ENABLE	components\softdevice\s110\headers\ble.h	/^  SD_BLE_ENABLE = BLE_SVC_BASE,         \/**< Enable and initialize the BLE stack *\/$/;"	e	enum:BLE_COMMON_SVCS
SD_BLE_EVT_GET	components\softdevice\s110\headers\ble.h	/^  SD_BLE_EVT_GET,                       \/**< Get an event from the pending events queue. *\/$/;"	e	enum:BLE_COMMON_SVCS
SD_BLE_OPT_GET	components\softdevice\s110\headers\ble.h	/^  SD_BLE_OPT_GET,                       \/**< Get a BLE option. *\/$/;"	e	enum:BLE_COMMON_SVCS
SD_BLE_OPT_SET	components\softdevice\s110\headers\ble.h	/^  SD_BLE_OPT_SET,                       \/**< Set a BLE option. *\/$/;"	e	enum:BLE_COMMON_SVCS
SD_BLE_TX_BUFFER_COUNT_GET	components\softdevice\s110\headers\ble.h	/^  SD_BLE_TX_BUFFER_COUNT_GET,           \/**< Get the total number of available application transmission buffers from the BLE stack. *\/$/;"	e	enum:BLE_COMMON_SVCS
SD_BLE_USER_MEM_REPLY	components\softdevice\s110\headers\ble.h	/^  SD_BLE_USER_MEM_REPLY,                \/**< User Memory Reply. *\/$/;"	e	enum:BLE_COMMON_SVCS
SD_BLE_UUID_DECODE	components\softdevice\s110\headers\ble.h	/^  SD_BLE_UUID_DECODE,                   \/**< Decode UUID bytes. *\/$/;"	e	enum:BLE_COMMON_SVCS
SD_BLE_UUID_ENCODE	components\softdevice\s110\headers\ble.h	/^  SD_BLE_UUID_ENCODE,                   \/**< Encode UUID bytes. *\/$/;"	e	enum:BLE_COMMON_SVCS
SD_BLE_UUID_VS_ADD	components\softdevice\s110\headers\ble.h	/^  SD_BLE_UUID_VS_ADD,                   \/**< Add a Vendor Specific UUID. *\/$/;"	e	enum:BLE_COMMON_SVCS
SD_BLE_VERSION_GET	components\softdevice\s110\headers\ble.h	/^  SD_BLE_VERSION_GET,                   \/**< Get the local version information (company id, Link Layer Version, Link Layer Subversion). *\/$/;"	e	enum:BLE_COMMON_SVCS
ble_common_evt_t	components\softdevice\s110\headers\ble.h	/^} ble_common_evt_t;$/;"	t	typeref:struct:__anon461
ble_common_opt_radio_cpu_mutex_t	components\softdevice\s110\headers\ble.h	/^} ble_common_opt_radio_cpu_mutex_t;$/;"	t	typeref:struct:__anon467
ble_common_opt_t	components\softdevice\s110\headers\ble.h	/^} ble_common_opt_t;$/;"	t	typeref:union:__anon468
ble_enable_params_t	components\softdevice\s110\headers\ble.h	/^} ble_enable_params_t;$/;"	t	typeref:struct:__anon470
ble_evt_hdr_t	components\softdevice\s110\headers\ble.h	/^} ble_evt_hdr_t;$/;"	t	typeref:struct:__anon463
ble_evt_t	components\softdevice\s110\headers\ble.h	/^} ble_evt_t;$/;"	t	typeref:struct:__anon464
ble_evt_tx_complete_t	components\softdevice\s110\headers\ble.h	/^} ble_evt_tx_complete_t;$/;"	t	typeref:struct:__anon458
ble_evt_user_mem_release_t	components\softdevice\s110\headers\ble.h	/^} ble_evt_user_mem_release_t;$/;"	t	typeref:struct:__anon460
ble_evt_user_mem_request_t	components\softdevice\s110\headers\ble.h	/^} ble_evt_user_mem_request_t;$/;"	t	typeref:struct:__anon459
ble_opt_t	components\softdevice\s110\headers\ble.h	/^} ble_opt_t;$/;"	t	typeref:union:__anon469
ble_user_mem_block_t	components\softdevice\s110\headers\ble.h	/^} ble_user_mem_block_t;$/;"	t	typeref:struct:__anon457
ble_version_t	components\softdevice\s110\headers\ble.h	/^} ble_version_t;$/;"	t	typeref:struct:__anon466
common_evt	components\softdevice\s110\headers\ble.h	/^    ble_common_evt_t  common_evt;         \/**< Common Event, evt_id in BLE_EVT_* series. *\/$/;"	m	union:__anon464::__anon465
common_opt	components\softdevice\s110\headers\ble.h	/^  ble_common_opt_t  common_opt;         \/**< Common option, opt_id in BLE_COMMON_OPT_* series. *\/$/;"	m	union:__anon469
company_id	components\softdevice\s110\headers\ble.h	/^  uint16_t  company_id;                 \/**< Company ID, Nordic Semiconductor's company ID is 89 (0x0059) (https:\/\/www.bluetooth.org\/apps\/content\/Default.aspx?doc_id=49708). *\/$/;"	m	struct:__anon466
conn_handle	components\softdevice\s110\headers\ble.h	/^  uint16_t conn_handle;                 \/**< Connection Handle on which this event occurred. *\/$/;"	m	struct:__anon461
count	components\softdevice\s110\headers\ble.h	/^  uint8_t count;                        \/**< Number of packets transmitted. *\/$/;"	m	struct:__anon458
enable	components\softdevice\s110\headers\ble.h	/^  uint8_t enable : 1;                          \/**< Enable mutual exclusion of radio activity and the CPU execution. *\/$/;"	m	struct:__anon467
evt	components\softdevice\s110\headers\ble.h	/^  } evt;$/;"	m	struct:__anon464	typeref:union:__anon464::__anon465
evt_id	components\softdevice\s110\headers\ble.h	/^  uint16_t evt_id;                      \/**< Value from a BLE_<module>_EVT series. *\/$/;"	m	struct:__anon463
evt_len	components\softdevice\s110\headers\ble.h	/^  uint16_t evt_len;                     \/**< Length in octets excluding this header. *\/$/;"	m	struct:__anon463
gap_evt	components\softdevice\s110\headers\ble.h	/^    ble_gap_evt_t     gap_evt;            \/**< GAP originated event, evt_id in BLE_GAP_EVT_* series. *\/$/;"	m	union:__anon464::__anon465
gap_opt	components\softdevice\s110\headers\ble.h	/^  ble_gap_opt_t     gap_opt;            \/**< GAP option, opt_id in BLE_GAP_OPT_* series. *\/$/;"	m	union:__anon469
gattc_evt	components\softdevice\s110\headers\ble.h	/^    ble_gattc_evt_t   gattc_evt;          \/**< GATT client originated event, evt_id in BLE_GATTC_EVT* series. *\/$/;"	m	union:__anon464::__anon465
gatts_enable_params	components\softdevice\s110\headers\ble.h	/^  ble_gatts_enable_params_t  gatts_enable_params; \/**< GATTS init options @ref ble_gatts_enable_params_t. *\/$/;"	m	struct:__anon470
gatts_evt	components\softdevice\s110\headers\ble.h	/^    ble_gatts_evt_t   gatts_evt;          \/**< GATT server originated event, evt_id in BLE_GATTS_EVT* series. *\/$/;"	m	union:__anon464::__anon465
header	components\softdevice\s110\headers\ble.h	/^  ble_evt_hdr_t header;                 \/**< Event header. *\/$/;"	m	struct:__anon464
l2cap_evt	components\softdevice\s110\headers\ble.h	/^    ble_l2cap_evt_t   l2cap_evt;          \/**< L2CAP originated event, evt_id in BLE_L2CAP_EVT* series. *\/$/;"	m	union:__anon464::__anon465
len	components\softdevice\s110\headers\ble.h	/^  uint16_t          len;        \/**< Length in bytes of the user memory block. *\/$/;"	m	struct:__anon457
mem_block	components\softdevice\s110\headers\ble.h	/^  ble_user_mem_block_t        mem_block;  \/**< User memory block *\/$/;"	m	struct:__anon460
p_mem	components\softdevice\s110\headers\ble.h	/^  uint8_t          *p_mem;      \/**< Pointer to the start of the user memory block. *\/$/;"	m	struct:__anon457
params	components\softdevice\s110\headers\ble.h	/^  } params;$/;"	m	struct:__anon461	typeref:union:__anon461::__anon462
radio_cpu_mutex	components\softdevice\s110\headers\ble.h	/^  ble_common_opt_radio_cpu_mutex_t  radio_cpu_mutex;        \/**< Parameters for the option for the mutual exclusion of radio activity and CPU execution. *\/$/;"	m	union:__anon468
subversion_number	components\softdevice\s110\headers\ble.h	/^  uint16_t  subversion_number;          \/**< Link Layer Sub Version number, corresponds to the SoftDevice Config ID or Firmware ID (FWID). *\/$/;"	m	struct:__anon466
tx_complete	components\softdevice\s110\headers\ble.h	/^    ble_evt_tx_complete_t           tx_complete;        \/**< Transmission Complete. *\/$/;"	m	union:__anon461::__anon462
type	components\softdevice\s110\headers\ble.h	/^  uint8_t                     type;       \/**< User memory type, see @ref BLE_USER_MEM_TYPES. *\/$/;"	m	struct:__anon460
type	components\softdevice\s110\headers\ble.h	/^  uint8_t                     type;     \/**< User memory type, see @ref BLE_USER_MEM_TYPES. *\/$/;"	m	struct:__anon459
user_mem_release	components\softdevice\s110\headers\ble.h	/^    ble_evt_user_mem_release_t      user_mem_release;   \/**< User Memory Release Event Parameters. *\/$/;"	m	union:__anon461::__anon462
user_mem_request	components\softdevice\s110\headers\ble.h	/^    ble_evt_user_mem_request_t      user_mem_request;   \/**< User Memory Request Event Parameters. *\/$/;"	m	union:__anon461::__anon462
version_number	components\softdevice\s110\headers\ble.h	/^  uint8_t   version_number;             \/**< Link Layer Version number for BT 4.1 spec is 7 (https:\/\/www.bluetooth.org\/en-us\/specification\/assigned-numbers\/link-layer). *\/$/;"	m	struct:__anon466
BLE_ERROR_INVALID_ATTR_HANDLE	components\softdevice\s110\headers\ble_err.h	61;"	d
BLE_ERROR_INVALID_CONN_HANDLE	components\softdevice\s110\headers\ble_err.h	60;"	d
BLE_ERROR_INVALID_ROLE	components\softdevice\s110\headers\ble_err.h	63;"	d
BLE_ERROR_NOT_ENABLED	components\softdevice\s110\headers\ble_err.h	59;"	d
BLE_ERROR_NO_TX_BUFFERS	components\softdevice\s110\headers\ble_err.h	62;"	d
NRF_BLE_ERR_H__	components\softdevice\s110\headers\ble_err.h	53;"	d
NRF_GAP_ERR_BASE	components\softdevice\s110\headers\ble_err.h	72;"	d
NRF_GATTC_ERR_BASE	components\softdevice\s110\headers\ble_err.h	73;"	d
NRF_GATTS_ERR_BASE	components\softdevice\s110\headers\ble_err.h	74;"	d
NRF_L2CAP_ERR_BASE	components\softdevice\s110\headers\ble_err.h	71;"	d
BLE_ERROR_GAP_DISCOVERABLE_WITH_WHITELIST	components\softdevice\s110\headers\ble_gap.h	128;"	d
BLE_ERROR_GAP_INVALID_BLE_ADDR	components\softdevice\s110\headers\ble_gap.h	129;"	d
BLE_ERROR_GAP_UUID_LIST_MISMATCH	components\softdevice\s110\headers\ble_gap.h	127;"	d
BLE_GAP_ADDR_CYCLE_MODE_AUTO	components\softdevice\s110\headers\ble_gap.h	162;"	d
BLE_GAP_ADDR_CYCLE_MODE_NONE	components\softdevice\s110\headers\ble_gap.h	161;"	d
BLE_GAP_ADDR_LEN	components\softdevice\s110\headers\ble_gap.h	169;"	d
BLE_GAP_ADDR_TYPE_PUBLIC	components\softdevice\s110\headers\ble_gap.h	153;"	d
BLE_GAP_ADDR_TYPE_RANDOM_PRIVATE_NON_RESOLVABLE	components\softdevice\s110\headers\ble_gap.h	156;"	d
BLE_GAP_ADDR_TYPE_RANDOM_PRIVATE_RESOLVABLE	components\softdevice\s110\headers\ble_gap.h	155;"	d
BLE_GAP_ADDR_TYPE_RANDOM_STATIC	components\softdevice\s110\headers\ble_gap.h	154;"	d
BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE	components\softdevice\s110\headers\ble_gap.h	217;"	d
BLE_GAP_ADV_FLAGS_LE_ONLY_LIMITED_DISC_MODE	components\softdevice\s110\headers\ble_gap.h	216;"	d
BLE_GAP_ADV_FLAG_BR_EDR_NOT_SUPPORTED	components\softdevice\s110\headers\ble_gap.h	213;"	d
BLE_GAP_ADV_FLAG_LE_BR_EDR_CONTROLLER	components\softdevice\s110\headers\ble_gap.h	214;"	d
BLE_GAP_ADV_FLAG_LE_BR_EDR_HOST	components\softdevice\s110\headers\ble_gap.h	215;"	d
BLE_GAP_ADV_FLAG_LE_GENERAL_DISC_MODE	components\softdevice\s110\headers\ble_gap.h	212;"	d
BLE_GAP_ADV_FLAG_LE_LIMITED_DISC_MODE	components\softdevice\s110\headers\ble_gap.h	211;"	d
BLE_GAP_ADV_FP_ANY	components\softdevice\s110\headers\ble_gap.h	265;"	d
BLE_GAP_ADV_FP_FILTER_BOTH	components\softdevice\s110\headers\ble_gap.h	268;"	d
BLE_GAP_ADV_FP_FILTER_CONNREQ	components\softdevice\s110\headers\ble_gap.h	267;"	d
BLE_GAP_ADV_FP_FILTER_SCANREQ	components\softdevice\s110\headers\ble_gap.h	266;"	d
BLE_GAP_ADV_INTERVAL_MAX	components\softdevice\s110\headers\ble_gap.h	225;"	d
BLE_GAP_ADV_INTERVAL_MIN	components\softdevice\s110\headers\ble_gap.h	223;"	d
BLE_GAP_ADV_MAX_SIZE	components\softdevice\s110\headers\ble_gap.h	251;"	d
BLE_GAP_ADV_NONCON_INTERVAL_MIN	components\softdevice\s110\headers\ble_gap.h	224;"	d
BLE_GAP_ADV_TIMEOUT_GENERAL_UNLIMITED	components\softdevice\s110\headers\ble_gap.h	275;"	d
BLE_GAP_ADV_TIMEOUT_LIMITED_MAX	components\softdevice\s110\headers\ble_gap.h	274;"	d
BLE_GAP_ADV_TYPE_ADV_DIRECT_IND	components\softdevice\s110\headers\ble_gap.h	257;"	d
BLE_GAP_ADV_TYPE_ADV_IND	components\softdevice\s110\headers\ble_gap.h	256;"	d
BLE_GAP_ADV_TYPE_ADV_NONCONN_IND	components\softdevice\s110\headers\ble_gap.h	259;"	d
BLE_GAP_ADV_TYPE_ADV_SCAN_IND	components\softdevice\s110\headers\ble_gap.h	258;"	d
BLE_GAP_AD_TYPE_128BIT_SERVICE_UUID_COMPLETE	components\softdevice\s110\headers\ble_gap.h	181;"	d
BLE_GAP_AD_TYPE_128BIT_SERVICE_UUID_MORE_AVAILABLE	components\softdevice\s110\headers\ble_gap.h	180;"	d
BLE_GAP_AD_TYPE_16BIT_SERVICE_UUID_COMPLETE	components\softdevice\s110\headers\ble_gap.h	177;"	d
BLE_GAP_AD_TYPE_16BIT_SERVICE_UUID_MORE_AVAILABLE	components\softdevice\s110\headers\ble_gap.h	176;"	d
BLE_GAP_AD_TYPE_32BIT_SERVICE_UUID_COMPLETE	components\softdevice\s110\headers\ble_gap.h	179;"	d
BLE_GAP_AD_TYPE_32BIT_SERVICE_UUID_MORE_AVAILABLE	components\softdevice\s110\headers\ble_gap.h	178;"	d
BLE_GAP_AD_TYPE_3D_INFORMATION_DATA	components\softdevice\s110\headers\ble_gap.h	204;"	d
BLE_GAP_AD_TYPE_ADVERTISING_INTERVAL	components\softdevice\s110\headers\ble_gap.h	197;"	d
BLE_GAP_AD_TYPE_APPEARANCE	components\softdevice\s110\headers\ble_gap.h	196;"	d
BLE_GAP_AD_TYPE_CLASS_OF_DEVICE	components\softdevice\s110\headers\ble_gap.h	185;"	d
BLE_GAP_AD_TYPE_COMPLETE_LOCAL_NAME	components\softdevice\s110\headers\ble_gap.h	183;"	d
BLE_GAP_AD_TYPE_FLAGS	components\softdevice\s110\headers\ble_gap.h	175;"	d
BLE_GAP_AD_TYPE_LE_BLUETOOTH_DEVICE_ADDRESS	components\softdevice\s110\headers\ble_gap.h	198;"	d
BLE_GAP_AD_TYPE_LE_ROLE	components\softdevice\s110\headers\ble_gap.h	199;"	d
BLE_GAP_AD_TYPE_MANUFACTURER_SPECIFIC_DATA	components\softdevice\s110\headers\ble_gap.h	205;"	d
BLE_GAP_AD_TYPE_PUBLIC_TARGET_ADDRESS	components\softdevice\s110\headers\ble_gap.h	194;"	d
BLE_GAP_AD_TYPE_RANDOM_TARGET_ADDRESS	components\softdevice\s110\headers\ble_gap.h	195;"	d
BLE_GAP_AD_TYPE_SECURITY_MANAGER_OOB_FLAGS	components\softdevice\s110\headers\ble_gap.h	189;"	d
BLE_GAP_AD_TYPE_SECURITY_MANAGER_TK_VALUE	components\softdevice\s110\headers\ble_gap.h	188;"	d
BLE_GAP_AD_TYPE_SERVICE_DATA	components\softdevice\s110\headers\ble_gap.h	193;"	d
BLE_GAP_AD_TYPE_SERVICE_DATA_128BIT_UUID	components\softdevice\s110\headers\ble_gap.h	203;"	d
BLE_GAP_AD_TYPE_SERVICE_DATA_32BIT_UUID	components\softdevice\s110\headers\ble_gap.h	202;"	d
BLE_GAP_AD_TYPE_SHORT_LOCAL_NAME	components\softdevice\s110\headers\ble_gap.h	182;"	d
BLE_GAP_AD_TYPE_SIMPLE_PAIRING_HASH_C	components\softdevice\s110\headers\ble_gap.h	186;"	d
BLE_GAP_AD_TYPE_SIMPLE_PAIRING_HASH_C256	components\softdevice\s110\headers\ble_gap.h	200;"	d
BLE_GAP_AD_TYPE_SIMPLE_PAIRING_RANDOMIZER_R	components\softdevice\s110\headers\ble_gap.h	187;"	d
BLE_GAP_AD_TYPE_SIMPLE_PAIRING_RANDOMIZER_R256	components\softdevice\s110\headers\ble_gap.h	201;"	d
BLE_GAP_AD_TYPE_SLAVE_CONNECTION_INTERVAL_RANGE	components\softdevice\s110\headers\ble_gap.h	190;"	d
BLE_GAP_AD_TYPE_SOLICITED_SERVICE_UUIDS_128BIT	components\softdevice\s110\headers\ble_gap.h	192;"	d
BLE_GAP_AD_TYPE_SOLICITED_SERVICE_UUIDS_16BIT	components\softdevice\s110\headers\ble_gap.h	191;"	d
BLE_GAP_AD_TYPE_TX_POWER_LEVEL	components\softdevice\s110\headers\ble_gap.h	184;"	d
BLE_GAP_AUTH_KEY_TYPE_NONE	components\softdevice\s110\headers\ble_gap.h	298;"	d
BLE_GAP_AUTH_KEY_TYPE_OOB	components\softdevice\s110\headers\ble_gap.h	300;"	d
BLE_GAP_AUTH_KEY_TYPE_PASSKEY	components\softdevice\s110\headers\ble_gap.h	299;"	d
BLE_GAP_CONN_SEC_MODE_SET_ENC_NO_MITM	components\softdevice\s110\headers\ble_gap.h	356;"	d
BLE_GAP_CONN_SEC_MODE_SET_ENC_WITH_MITM	components\softdevice\s110\headers\ble_gap.h	358;"	d
BLE_GAP_CONN_SEC_MODE_SET_NO_ACCESS	components\softdevice\s110\headers\ble_gap.h	352;"	d
BLE_GAP_CONN_SEC_MODE_SET_OPEN	components\softdevice\s110\headers\ble_gap.h	354;"	d
BLE_GAP_CONN_SEC_MODE_SET_SIGNED_NO_MITM	components\softdevice\s110\headers\ble_gap.h	360;"	d
BLE_GAP_CONN_SEC_MODE_SET_SIGNED_WITH_MITM	components\softdevice\s110\headers\ble_gap.h	362;"	d
BLE_GAP_CP_CONN_SUP_TIMEOUT_MAX	components\softdevice\s110\headers\ble_gap.h	337;"	d
BLE_GAP_CP_CONN_SUP_TIMEOUT_MIN	components\softdevice\s110\headers\ble_gap.h	336;"	d
BLE_GAP_CP_CONN_SUP_TIMEOUT_NONE	components\softdevice\s110\headers\ble_gap.h	335;"	d
BLE_GAP_CP_MAX_CONN_INTVL_MAX	components\softdevice\s110\headers\ble_gap.h	333;"	d
BLE_GAP_CP_MAX_CONN_INTVL_MIN	components\softdevice\s110\headers\ble_gap.h	332;"	d
BLE_GAP_CP_MAX_CONN_INTVL_NONE	components\softdevice\s110\headers\ble_gap.h	331;"	d
BLE_GAP_CP_MIN_CONN_INTVL_MAX	components\softdevice\s110\headers\ble_gap.h	330;"	d
BLE_GAP_CP_MIN_CONN_INTVL_MIN	components\softdevice\s110\headers\ble_gap.h	329;"	d
BLE_GAP_CP_MIN_CONN_INTVL_NONE	components\softdevice\s110\headers\ble_gap.h	328;"	d
BLE_GAP_CP_SLAVE_LATENCY_MAX	components\softdevice\s110\headers\ble_gap.h	334;"	d
BLE_GAP_DEFAULT_PRIVATE_ADDR_CYCLE_INTERVAL_S	components\softdevice\s110\headers\ble_gap.h	166;"	d
BLE_GAP_DEVNAME_MAX_LEN	components\softdevice\s110\headers\ble_gap.h	342;"	d
BLE_GAP_DISC_MODE_GENERAL	components\softdevice\s110\headers\ble_gap.h	283;"	d
BLE_GAP_DISC_MODE_LIMITED	components\softdevice\s110\headers\ble_gap.h	282;"	d
BLE_GAP_DISC_MODE_NOT_DISCOVERABLE	components\softdevice\s110\headers\ble_gap.h	281;"	d
BLE_GAP_EVTS	components\softdevice\s110\headers\ble_gap.h	/^enum BLE_GAP_EVTS$/;"	g
BLE_GAP_EVT_ADV_REPORT	components\softdevice\s110\headers\ble_gap.h	/^  BLE_GAP_EVT_ADV_REPORT,                       \/**< Advertising report. @ref ble_gap_evt_adv_report_t *\/$/;"	e	enum:BLE_GAP_EVTS
BLE_GAP_EVT_AUTH_KEY_REQUEST	components\softdevice\s110\headers\ble_gap.h	/^  BLE_GAP_EVT_AUTH_KEY_REQUEST,                 \/**< Request to provide an authentication key. @ref ble_gap_evt_auth_key_request_t *\/$/;"	e	enum:BLE_GAP_EVTS
BLE_GAP_EVT_AUTH_STATUS	components\softdevice\s110\headers\ble_gap.h	/^  BLE_GAP_EVT_AUTH_STATUS,                      \/**< Authentication procedure completed with status. @ref ble_gap_evt_auth_status_t *\/$/;"	e	enum:BLE_GAP_EVTS
BLE_GAP_EVT_CONNECTED	components\softdevice\s110\headers\ble_gap.h	/^  BLE_GAP_EVT_CONNECTED  = BLE_GAP_EVT_BASE,    \/**< Connection established. @ref ble_gap_evt_connected_t *\/$/;"	e	enum:BLE_GAP_EVTS
BLE_GAP_EVT_CONN_PARAM_UPDATE	components\softdevice\s110\headers\ble_gap.h	/^  BLE_GAP_EVT_CONN_PARAM_UPDATE,                \/**< Connection Parameters updated. ble_gap_evt_conn_param_update_t *\/$/;"	e	enum:BLE_GAP_EVTS
BLE_GAP_EVT_CONN_PARAM_UPDATE_REQUEST	components\softdevice\s110\headers\ble_gap.h	/^  BLE_GAP_EVT_CONN_PARAM_UPDATE_REQUEST,        \/**< Connection Parameter Update Request. @ref ble_gap_evt_conn_param_update_request_t *\/$/;"	e	enum:BLE_GAP_EVTS
BLE_GAP_EVT_CONN_SEC_UPDATE	components\softdevice\s110\headers\ble_gap.h	/^  BLE_GAP_EVT_CONN_SEC_UPDATE,                  \/**< Connection security updated. @ref ble_gap_evt_conn_sec_update_t *\/$/;"	e	enum:BLE_GAP_EVTS
BLE_GAP_EVT_DISCONNECTED	components\softdevice\s110\headers\ble_gap.h	/^  BLE_GAP_EVT_DISCONNECTED,                     \/**< Disconnected from peer. @ref ble_gap_evt_disconnected_t *\/$/;"	e	enum:BLE_GAP_EVTS
BLE_GAP_EVT_PASSKEY_DISPLAY	components\softdevice\s110\headers\ble_gap.h	/^  BLE_GAP_EVT_PASSKEY_DISPLAY,                  \/**< Request to display a passkey to the user. @ref ble_gap_evt_passkey_display_t *\/$/;"	e	enum:BLE_GAP_EVTS
BLE_GAP_EVT_RSSI_CHANGED	components\softdevice\s110\headers\ble_gap.h	/^  BLE_GAP_EVT_RSSI_CHANGED,                     \/**< RSSI report. @ref ble_gap_evt_rssi_changed_t *\/$/;"	e	enum:BLE_GAP_EVTS
BLE_GAP_EVT_SCAN_REQ_REPORT	components\softdevice\s110\headers\ble_gap.h	/^  BLE_GAP_EVT_SCAN_REQ_REPORT,                  \/**< Scan request report. @ref ble_gap_evt_scan_req_report_t *\/$/;"	e	enum:BLE_GAP_EVTS
BLE_GAP_EVT_SEC_INFO_REQUEST	components\softdevice\s110\headers\ble_gap.h	/^  BLE_GAP_EVT_SEC_INFO_REQUEST,                 \/**< Request to provide security information. @ref ble_gap_evt_sec_info_request_t *\/$/;"	e	enum:BLE_GAP_EVTS
BLE_GAP_EVT_SEC_PARAMS_REQUEST	components\softdevice\s110\headers\ble_gap.h	/^  BLE_GAP_EVT_SEC_PARAMS_REQUEST,               \/**< Request to provide security parameters. @ref ble_gap_evt_sec_params_request_t *\/$/;"	e	enum:BLE_GAP_EVTS
BLE_GAP_EVT_SEC_REQUEST	components\softdevice\s110\headers\ble_gap.h	/^  BLE_GAP_EVT_SEC_REQUEST,                      \/**< Security Request. @ref ble_gap_evt_sec_request_t *\/$/;"	e	enum:BLE_GAP_EVTS
BLE_GAP_EVT_TIMEOUT	components\softdevice\s110\headers\ble_gap.h	/^  BLE_GAP_EVT_TIMEOUT,                          \/**< Timeout expired. @ref ble_gap_evt_timeout_t *\/$/;"	e	enum:BLE_GAP_EVTS
BLE_GAP_H__	components\softdevice\s110\headers\ble_gap.h	44;"	d
BLE_GAP_IO_CAPS_DISPLAY_ONLY	components\softdevice\s110\headers\ble_gap.h	288;"	d
BLE_GAP_IO_CAPS_DISPLAY_YESNO	components\softdevice\s110\headers\ble_gap.h	289;"	d
BLE_GAP_IO_CAPS_KEYBOARD_DISPLAY	components\softdevice\s110\headers\ble_gap.h	292;"	d
BLE_GAP_IO_CAPS_KEYBOARD_ONLY	components\softdevice\s110\headers\ble_gap.h	290;"	d
BLE_GAP_IO_CAPS_NONE	components\softdevice\s110\headers\ble_gap.h	291;"	d
BLE_GAP_OPTS	components\softdevice\s110\headers\ble_gap.h	/^enum BLE_GAP_OPTS$/;"	g
BLE_GAP_OPT_CH_MAP	components\softdevice\s110\headers\ble_gap.h	/^  BLE_GAP_OPT_CH_MAP  = BLE_GAP_OPT_BASE,       \/**< Channel Map. @ref ble_gap_opt_ch_map_t  *\/$/;"	e	enum:BLE_GAP_OPTS
BLE_GAP_OPT_COMPAT_MODE	components\softdevice\s110\headers\ble_gap.h	/^  BLE_GAP_OPT_COMPAT_MODE                       \/**< Compatibility mode. @ref ble_gap_opt_compat_mode_t *\/$/;"	e	enum:BLE_GAP_OPTS
BLE_GAP_OPT_LOCAL_CONN_LATENCY	components\softdevice\s110\headers\ble_gap.h	/^  BLE_GAP_OPT_LOCAL_CONN_LATENCY,               \/**< Local connection latency. @ref ble_gap_opt_local_conn_latency_t *\/$/;"	e	enum:BLE_GAP_OPTS
BLE_GAP_OPT_PASSKEY	components\softdevice\s110\headers\ble_gap.h	/^  BLE_GAP_OPT_PASSKEY,                          \/**< Set passkey. @ref ble_gap_opt_passkey_t *\/$/;"	e	enum:BLE_GAP_OPTS
BLE_GAP_OPT_PRIVACY	components\softdevice\s110\headers\ble_gap.h	/^  BLE_GAP_OPT_PRIVACY,                          \/**< Custom privacy. @ref ble_gap_opt_privacy_t *\/$/;"	e	enum:BLE_GAP_OPTS
BLE_GAP_OPT_SCAN_REQ_REPORT	components\softdevice\s110\headers\ble_gap.h	/^  BLE_GAP_OPT_SCAN_REQ_REPORT,                  \/**< Scan request report. @ref ble_gap_opt_scan_req_report_t *\/$/;"	e	enum:BLE_GAP_OPTS
BLE_GAP_PASSKEY_LEN	components\softdevice\s110\headers\ble_gap.h	373;"	d
BLE_GAP_ROLE_CENTRAL	components\softdevice\s110\headers\ble_gap.h	138;"	d
BLE_GAP_ROLE_INVALID	components\softdevice\s110\headers\ble_gap.h	136;"	d
BLE_GAP_ROLE_PERIPH	components\softdevice\s110\headers\ble_gap.h	137;"	d
BLE_GAP_RSSI_THRESHOLD_INVALID	components\softdevice\s110\headers\ble_gap.h	345;"	d
BLE_GAP_SCAN_INTERVAL_MAX	components\softdevice\s110\headers\ble_gap.h	232;"	d
BLE_GAP_SCAN_INTERVAL_MIN	components\softdevice\s110\headers\ble_gap.h	231;"	d
BLE_GAP_SCAN_TIMEOUT_MAX	components\softdevice\s110\headers\ble_gap.h	246;"	d
BLE_GAP_SCAN_TIMEOUT_MIN	components\softdevice\s110\headers\ble_gap.h	245;"	d
BLE_GAP_SCAN_WINDOW_MAX	components\softdevice\s110\headers\ble_gap.h	239;"	d
BLE_GAP_SCAN_WINDOW_MIN	components\softdevice\s110\headers\ble_gap.h	238;"	d
BLE_GAP_SEC_KEY_LEN	components\softdevice\s110\headers\ble_gap.h	370;"	d
BLE_GAP_SEC_MODE	components\softdevice\s110\headers\ble_gap.h	385;"	d
BLE_GAP_SEC_RAND_LEN	components\softdevice\s110\headers\ble_gap.h	367;"	d
BLE_GAP_SEC_STATUS_AUTH_REQ	components\softdevice\s110\headers\ble_gap.h	310;"	d
BLE_GAP_SEC_STATUS_CONFIRM_VALUE	components\softdevice\s110\headers\ble_gap.h	311;"	d
BLE_GAP_SEC_STATUS_ENC_KEY_SIZE	components\softdevice\s110\headers\ble_gap.h	313;"	d
BLE_GAP_SEC_STATUS_INVALID_PARAMS	components\softdevice\s110\headers\ble_gap.h	317;"	d
BLE_GAP_SEC_STATUS_OOB_NOT_AVAILABLE	components\softdevice\s110\headers\ble_gap.h	309;"	d
BLE_GAP_SEC_STATUS_PAIRING_NOT_SUPP	components\softdevice\s110\headers\ble_gap.h	312;"	d
BLE_GAP_SEC_STATUS_PASSKEY_ENTRY_FAILED	components\softdevice\s110\headers\ble_gap.h	308;"	d
BLE_GAP_SEC_STATUS_PDU_INVALID	components\softdevice\s110\headers\ble_gap.h	307;"	d
BLE_GAP_SEC_STATUS_REPEATED_ATTEMPTS	components\softdevice\s110\headers\ble_gap.h	316;"	d
BLE_GAP_SEC_STATUS_SMP_CMD_UNSUPPORTED	components\softdevice\s110\headers\ble_gap.h	314;"	d
BLE_GAP_SEC_STATUS_SOURCE_LOCAL	components\softdevice\s110\headers\ble_gap.h	322;"	d
BLE_GAP_SEC_STATUS_SOURCE_REMOTE	components\softdevice\s110\headers\ble_gap.h	323;"	d
BLE_GAP_SEC_STATUS_SUCCESS	components\softdevice\s110\headers\ble_gap.h	305;"	d
BLE_GAP_SEC_STATUS_TIMEOUT	components\softdevice\s110\headers\ble_gap.h	306;"	d
BLE_GAP_SEC_STATUS_UNSPECIFIED	components\softdevice\s110\headers\ble_gap.h	315;"	d
BLE_GAP_SVCS	components\softdevice\s110\headers\ble_gap.h	/^enum BLE_GAP_SVCS$/;"	g
BLE_GAP_TIMEOUT_SRC_ADVERTISING	components\softdevice\s110\headers\ble_gap.h	144;"	d
BLE_GAP_TIMEOUT_SRC_CONN	components\softdevice\s110\headers\ble_gap.h	147;"	d
BLE_GAP_TIMEOUT_SRC_SCAN	components\softdevice\s110\headers\ble_gap.h	146;"	d
BLE_GAP_TIMEOUT_SRC_SECURITY_REQUEST	components\softdevice\s110\headers\ble_gap.h	145;"	d
BLE_GAP_WHITELIST_ADDR_MAX_COUNT	components\softdevice\s110\headers\ble_gap.h	376;"	d
BLE_GAP_WHITELIST_IRK_MAX_COUNT	components\softdevice\s110\headers\ble_gap.h	381;"	d
SD_BLE_GAP_ADDRESS_GET	components\softdevice\s110\headers\ble_gap.h	/^  SD_BLE_GAP_ADDRESS_GET,                      \/**< Get own Bluetooth Address. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_ADDRESS_SET	components\softdevice\s110\headers\ble_gap.h	/^  SD_BLE_GAP_ADDRESS_SET  = BLE_GAP_SVC_BASE,  \/**< Set own Bluetooth Address. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_ADV_DATA_SET	components\softdevice\s110\headers\ble_gap.h	/^  SD_BLE_GAP_ADV_DATA_SET,                     \/**< Set Advertising Data. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_ADV_START	components\softdevice\s110\headers\ble_gap.h	/^  SD_BLE_GAP_ADV_START,                        \/**< Start Advertising. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_ADV_STOP	components\softdevice\s110\headers\ble_gap.h	/^  SD_BLE_GAP_ADV_STOP,                         \/**< Stop Advertising. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_APPEARANCE_GET	components\softdevice\s110\headers\ble_gap.h	/^  SD_BLE_GAP_APPEARANCE_GET,                   \/**< Get Appearance. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_APPEARANCE_SET	components\softdevice\s110\headers\ble_gap.h	/^  SD_BLE_GAP_APPEARANCE_SET,                   \/**< Set Appearance. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_AUTHENTICATE	components\softdevice\s110\headers\ble_gap.h	/^  SD_BLE_GAP_AUTHENTICATE,                     \/**< Initiate Pairing\/Bonding. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_AUTH_KEY_REPLY	components\softdevice\s110\headers\ble_gap.h	/^  SD_BLE_GAP_AUTH_KEY_REPLY,                   \/**< Reply with an authentication key. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_CONNECT	components\softdevice\s110\headers\ble_gap.h	/^  SD_BLE_GAP_CONNECT,                          \/**< Connect. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_CONNECT_CANCEL	components\softdevice\s110\headers\ble_gap.h	/^  SD_BLE_GAP_CONNECT_CANCEL,                   \/**< Cancel ongoing connection procedure. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_CONN_PARAM_UPDATE	components\softdevice\s110\headers\ble_gap.h	/^  SD_BLE_GAP_CONN_PARAM_UPDATE,                \/**< Connection Parameter Update. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_CONN_SEC_GET	components\softdevice\s110\headers\ble_gap.h	/^  SD_BLE_GAP_CONN_SEC_GET,                     \/**< Obtain connection security level. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_DEVICE_NAME_GET	components\softdevice\s110\headers\ble_gap.h	/^  SD_BLE_GAP_DEVICE_NAME_GET,                  \/**< Get Device Name. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_DEVICE_NAME_SET	components\softdevice\s110\headers\ble_gap.h	/^  SD_BLE_GAP_DEVICE_NAME_SET,                  \/**< Set Device Name. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_DISCONNECT	components\softdevice\s110\headers\ble_gap.h	/^  SD_BLE_GAP_DISCONNECT,                       \/**< Disconnect. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_ENCRYPT	components\softdevice\s110\headers\ble_gap.h	/^  SD_BLE_GAP_ENCRYPT,                          \/**< Initiate encryption procedure. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_PPCP_GET	components\softdevice\s110\headers\ble_gap.h	/^  SD_BLE_GAP_PPCP_GET,                         \/**< Get PPCP. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_PPCP_SET	components\softdevice\s110\headers\ble_gap.h	/^  SD_BLE_GAP_PPCP_SET,                         \/**< Set PPCP. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_RSSI_GET	components\softdevice\s110\headers\ble_gap.h	/^  SD_BLE_GAP_RSSI_GET,                         \/**< Get the last RSSI sample. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_RSSI_START	components\softdevice\s110\headers\ble_gap.h	/^  SD_BLE_GAP_RSSI_START,                       \/**< Start reporting of changes in RSSI. *\/ $/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_RSSI_STOP	components\softdevice\s110\headers\ble_gap.h	/^  SD_BLE_GAP_RSSI_STOP,                        \/**< Stop reporting of changes in RSSI. *\/ $/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_SCAN_START	components\softdevice\s110\headers\ble_gap.h	/^  SD_BLE_GAP_SCAN_START,                       \/**< Start Scanning. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_SCAN_STOP	components\softdevice\s110\headers\ble_gap.h	/^  SD_BLE_GAP_SCAN_STOP,                        \/**< Stop Scanning. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_SEC_INFO_REPLY	components\softdevice\s110\headers\ble_gap.h	/^  SD_BLE_GAP_SEC_INFO_REPLY,                   \/**< Reply with Security Information. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_SEC_PARAMS_REPLY	components\softdevice\s110\headers\ble_gap.h	/^  SD_BLE_GAP_SEC_PARAMS_REPLY,                 \/**< Reply with Security Parameters. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_TX_POWER_SET	components\softdevice\s110\headers\ble_gap.h	/^  SD_BLE_GAP_TX_POWER_SET,                     \/**< Set TX Power. *\/$/;"	e	enum:BLE_GAP_SVCS
active	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t                 active    : 1;        \/**< If 1, perform active scanning (scan requests). *\/$/;"	m	struct:__anon479
addr	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t addr[BLE_GAP_ADDR_LEN];       \/**< 48-bit address, LSB format. *\/$/;"	m	struct:__anon471
addr_count	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t             addr_count;      \/**< Count of device addresses in array, up to @ref BLE_GAP_WHITELIST_ADDR_MAX_COUNT. *\/$/;"	m	struct:__anon476
addr_type	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t addr_type;                    \/**< See @ref BLE_GAP_ADDR_TYPES. *\/$/;"	m	struct:__anon471
adv_report	components\softdevice\s110\headers\ble_gap.h	/^    ble_gap_evt_adv_report_t                  adv_report;                   \/**< Advertising Report Event Parameters. *\/$/;"	m	union:__anon505::__anon506
auth	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t   auth : 1;                   \/**< Authenticated Key. *\/$/;"	m	struct:__anon482
auth_key_request	components\softdevice\s110\headers\ble_gap.h	/^    ble_gap_evt_auth_key_request_t            auth_key_request;             \/**< Authentication Key Request Event Parameters. *\/$/;"	m	union:__anon505::__anon506
auth_status	components\softdevice\s110\headers\ble_gap.h	/^    ble_gap_evt_auth_status_t                 auth_status;                  \/**< Authentication Status Event Parameters. *\/$/;"	m	union:__anon505::__anon506
auth_status	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t               auth_status;            \/**< Authentication status, see @ref BLE_GAP_SEC_STATUS. *\/$/;"	m	struct:__anon497
ble_gap_addr_t	components\softdevice\s110\headers\ble_gap.h	/^} ble_gap_addr_t;$/;"	t	typeref:struct:__anon471
ble_gap_adv_ch_mask_t	components\softdevice\s110\headers\ble_gap.h	/^} ble_gap_adv_ch_mask_t;$/;"	t	typeref:struct:__anon477
ble_gap_adv_params_t	components\softdevice\s110\headers\ble_gap.h	/^} ble_gap_adv_params_t;$/;"	t	typeref:struct:__anon478
ble_gap_conn_params_t	components\softdevice\s110\headers\ble_gap.h	/^} ble_gap_conn_params_t;$/;"	t	typeref:struct:__anon472
ble_gap_conn_sec_mode_t	components\softdevice\s110\headers\ble_gap.h	/^} ble_gap_conn_sec_mode_t;$/;"	t	typeref:struct:__anon473
ble_gap_conn_sec_t	components\softdevice\s110\headers\ble_gap.h	/^} ble_gap_conn_sec_t;$/;"	t	typeref:struct:__anon474
ble_gap_enc_info_t	components\softdevice\s110\headers\ble_gap.h	/^} ble_gap_enc_info_t;$/;"	t	typeref:struct:__anon482
ble_gap_enc_key_t	components\softdevice\s110\headers\ble_gap.h	/^} ble_gap_enc_key_t;$/;"	t	typeref:struct:__anon493
ble_gap_evt_adv_report_t	components\softdevice\s110\headers\ble_gap.h	/^} ble_gap_evt_adv_report_t;$/;"	t	typeref:struct:__anon501
ble_gap_evt_auth_key_request_t	components\softdevice\s110\headers\ble_gap.h	/^} ble_gap_evt_auth_key_request_t;$/;"	t	typeref:struct:__anon491
ble_gap_evt_auth_status_t	components\softdevice\s110\headers\ble_gap.h	/^} ble_gap_evt_auth_status_t;$/;"	t	typeref:struct:__anon497
ble_gap_evt_conn_param_update_request_t	components\softdevice\s110\headers\ble_gap.h	/^} ble_gap_evt_conn_param_update_request_t;$/;"	t	typeref:struct:__anon503
ble_gap_evt_conn_param_update_t	components\softdevice\s110\headers\ble_gap.h	/^} ble_gap_evt_conn_param_update_t;$/;"	t	typeref:struct:__anon487
ble_gap_evt_conn_sec_update_t	components\softdevice\s110\headers\ble_gap.h	/^} ble_gap_evt_conn_sec_update_t;$/;"	t	typeref:struct:__anon498
ble_gap_evt_connected_t	components\softdevice\s110\headers\ble_gap.h	/^} ble_gap_evt_connected_t;$/;"	t	typeref:struct:__anon485
ble_gap_evt_disconnected_t	components\softdevice\s110\headers\ble_gap.h	/^} ble_gap_evt_disconnected_t;$/;"	t	typeref:struct:__anon486
ble_gap_evt_passkey_display_t	components\softdevice\s110\headers\ble_gap.h	/^} ble_gap_evt_passkey_display_t;$/;"	t	typeref:struct:__anon490
ble_gap_evt_rssi_changed_t	components\softdevice\s110\headers\ble_gap.h	/^} ble_gap_evt_rssi_changed_t;$/;"	t	typeref:struct:__anon500
ble_gap_evt_scan_req_report_t	components\softdevice\s110\headers\ble_gap.h	/^} ble_gap_evt_scan_req_report_t;$/;"	t	typeref:struct:__anon504
ble_gap_evt_sec_info_request_t	components\softdevice\s110\headers\ble_gap.h	/^} ble_gap_evt_sec_info_request_t;$/;"	t	typeref:struct:__anon489
ble_gap_evt_sec_params_request_t	components\softdevice\s110\headers\ble_gap.h	/^} ble_gap_evt_sec_params_request_t;$/;"	t	typeref:struct:__anon488
ble_gap_evt_sec_request_t	components\softdevice\s110\headers\ble_gap.h	/^} ble_gap_evt_sec_request_t;$/;"	t	typeref:struct:__anon502
ble_gap_evt_t	components\softdevice\s110\headers\ble_gap.h	/^} ble_gap_evt_t;$/;"	t	typeref:struct:__anon505
ble_gap_evt_timeout_t	components\softdevice\s110\headers\ble_gap.h	/^} ble_gap_evt_timeout_t;$/;"	t	typeref:struct:__anon499
ble_gap_id_key_t	components\softdevice\s110\headers\ble_gap.h	/^} ble_gap_id_key_t;$/;"	t	typeref:struct:__anon494
ble_gap_irk_t	components\softdevice\s110\headers\ble_gap.h	/^} ble_gap_irk_t;$/;"	t	typeref:struct:__anon475
ble_gap_master_id_t	components\softdevice\s110\headers\ble_gap.h	/^} ble_gap_master_id_t;$/;"	t	typeref:struct:__anon483
ble_gap_opt_ch_map_t	components\softdevice\s110\headers\ble_gap.h	/^} ble_gap_opt_ch_map_t;$/;"	t	typeref:struct:__anon507
ble_gap_opt_compat_mode_t	components\softdevice\s110\headers\ble_gap.h	/^} ble_gap_opt_compat_mode_t;$/;"	t	typeref:struct:__anon512
ble_gap_opt_local_conn_latency_t	components\softdevice\s110\headers\ble_gap.h	/^} ble_gap_opt_local_conn_latency_t;$/;"	t	typeref:struct:__anon508
ble_gap_opt_passkey_t	components\softdevice\s110\headers\ble_gap.h	/^} ble_gap_opt_passkey_t;$/;"	t	typeref:struct:__anon509
ble_gap_opt_privacy_t	components\softdevice\s110\headers\ble_gap.h	/^} ble_gap_opt_privacy_t;$/;"	t	typeref:struct:__anon510
ble_gap_opt_scan_req_report_t	components\softdevice\s110\headers\ble_gap.h	/^} ble_gap_opt_scan_req_report_t;$/;"	t	typeref:struct:__anon511
ble_gap_opt_t	components\softdevice\s110\headers\ble_gap.h	/^} ble_gap_opt_t;$/;"	t	typeref:union:__anon513
ble_gap_scan_params_t	components\softdevice\s110\headers\ble_gap.h	/^} ble_gap_scan_params_t;$/;"	t	typeref:struct:__anon479
ble_gap_sec_kdist_t	components\softdevice\s110\headers\ble_gap.h	/^} ble_gap_sec_kdist_t;$/;"	t	typeref:struct:__anon480
ble_gap_sec_keys_t	components\softdevice\s110\headers\ble_gap.h	/^} ble_gap_sec_keys_t;$/;"	t	typeref:struct:__anon495
ble_gap_sec_keyset_t	components\softdevice\s110\headers\ble_gap.h	/^} ble_gap_sec_keyset_t;$/;"	t	typeref:struct:__anon496
ble_gap_sec_levels_t	components\softdevice\s110\headers\ble_gap.h	/^} ble_gap_sec_levels_t;$/;"	t	typeref:struct:__anon492
ble_gap_sec_params_t	components\softdevice\s110\headers\ble_gap.h	/^} ble_gap_sec_params_t;$/;"	t	typeref:struct:__anon481
ble_gap_sign_info_t	components\softdevice\s110\headers\ble_gap.h	/^} ble_gap_sign_info_t;$/;"	t	typeref:struct:__anon484
ble_gap_whitelist_t	components\softdevice\s110\headers\ble_gap.h	/^} ble_gap_whitelist_t;$/;"	t	typeref:struct:__anon476
bond	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t               bond    : 1;               \/**< Perform bonding. *\/$/;"	m	struct:__anon481
bond	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t    bond    : 1;                       \/**< Perform bonding. *\/$/;"	m	struct:__anon502
bonded	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t               bonded : 1;             \/**< Procedure resulted in a bond. *\/$/;"	m	struct:__anon497
ch_37_off	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t ch_37_off : 1;  \/**< Setting this bit to 1 will turn off advertising on channel 37 *\/$/;"	m	struct:__anon477
ch_38_off	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t ch_38_off : 1;  \/**< Setting this bit to 1 will turn off advertising on channel 38 *\/$/;"	m	struct:__anon477
ch_39_off	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t ch_39_off : 1;  \/**< Setting this bit to 1 will turn off advertising on channel 39 *\/$/;"	m	struct:__anon477
ch_map	components\softdevice\s110\headers\ble_gap.h	/^  ble_gap_opt_ch_map_t                  ch_map;                    \/**< Parameters for the Channel Map option. *\/$/;"	m	union:__anon513
ch_map	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t ch_map[5];                      \/**< Channel Map (37-bit). *\/$/;"	m	struct:__anon507
channel_mask	components\softdevice\s110\headers\ble_gap.h	/^  ble_gap_adv_ch_mask_t channel_mask;         \/**< Advertising channel mask. @see ble_gap_channel_mask_t for documentation. *\/$/;"	m	struct:__anon478
compat_mode	components\softdevice\s110\headers\ble_gap.h	/^  ble_gap_opt_compat_mode_t             compat_mode;               \/**< Parameters for the compatibility mode option.*\/$/;"	m	union:__anon513
conn_handle	components\softdevice\s110\headers\ble_gap.h	/^  uint16_t   conn_handle;                       \/**< Connection Handle *\/$/;"	m	struct:__anon508
conn_handle	components\softdevice\s110\headers\ble_gap.h	/^  uint16_t conn_handle;                                     \/**< Connection Handle on which event occured. *\/$/;"	m	struct:__anon505
conn_handle	components\softdevice\s110\headers\ble_gap.h	/^  uint16_t conn_handle;                   \/**< Connection Handle (only applicable for get) *\/$/;"	m	struct:__anon507
conn_param_update	components\softdevice\s110\headers\ble_gap.h	/^    ble_gap_evt_conn_param_update_t           conn_param_update;            \/**< Connection Parameter Update Parameters. *\/$/;"	m	union:__anon505::__anon506
conn_param_update_request	components\softdevice\s110\headers\ble_gap.h	/^    ble_gap_evt_conn_param_update_request_t   conn_param_update_request;    \/**< Connection Parameter Update Parameters. *\/$/;"	m	union:__anon505::__anon506
conn_params	components\softdevice\s110\headers\ble_gap.h	/^  ble_gap_conn_params_t conn_params;            \/**<  GAP Connection Parameters. *\/$/;"	m	struct:__anon487
conn_params	components\softdevice\s110\headers\ble_gap.h	/^  ble_gap_conn_params_t conn_params;            \/**<  GAP Connection Parameters. *\/$/;"	m	struct:__anon503
conn_params	components\softdevice\s110\headers\ble_gap.h	/^  ble_gap_conn_params_t conn_params;            \/**< GAP Connection Parameters. *\/$/;"	m	struct:__anon485
conn_sec	components\softdevice\s110\headers\ble_gap.h	/^  ble_gap_conn_sec_t conn_sec;                  \/**< Connection security level. *\/$/;"	m	struct:__anon498
conn_sec_update	components\softdevice\s110\headers\ble_gap.h	/^    ble_gap_evt_conn_sec_update_t             conn_sec_update;              \/**< Connection Security Update Event Parameters. *\/$/;"	m	union:__anon505::__anon506
conn_sup_timeout	components\softdevice\s110\headers\ble_gap.h	/^  uint16_t conn_sup_timeout;          \/**< Connection Supervision Timeout in 10 ms units, see @ref BLE_GAP_CP_LIMITS.*\/$/;"	m	struct:__anon472
connected	components\softdevice\s110\headers\ble_gap.h	/^    ble_gap_evt_connected_t                   connected;                    \/**< Connected Event Parameters. *\/$/;"	m	union:__anon505::__anon506
csrk	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t   csrk[BLE_GAP_SEC_KEY_LEN];        \/**< Connection Signature Resolving Key. *\/$/;"	m	struct:__anon484
data	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t        data[BLE_GAP_ADV_MAX_SIZE];    \/**< Advertising or scan response data. *\/$/;"	m	struct:__anon501
disconnected	components\softdevice\s110\headers\ble_gap.h	/^    ble_gap_evt_disconnected_t                disconnected;                 \/**< Disconnected Event Parameters. *\/$/;"	m	union:__anon505::__anon506
dlen	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t        dlen     : 5;                  \/**< Advertising or scan response data length. *\/$/;"	m	struct:__anon501
ediv	components\softdevice\s110\headers\ble_gap.h	/^  uint16_t  ediv;                       \/**< Encrypted Diversifier. *\/$/;"	m	struct:__anon483
enable	components\softdevice\s110\headers\ble_gap.h	/^   uint8_t enable : 1;                           \/**< Enable scan request reports. *\/$/;"	m	struct:__anon511
enc	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t enc     : 1;                        \/**< Long Term Key and Master Identification. *\/$/;"	m	struct:__anon480
enc_info	components\softdevice\s110\headers\ble_gap.h	/^  ble_gap_enc_info_t    enc_info;             \/**< Encryption Information. *\/$/;"	m	struct:__anon493
enc_info	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t             enc_info  : 1;                 \/**< If 1, Encryption Information required. *\/$/;"	m	struct:__anon489
encr_key_size	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t                 encr_key_size;      \/**< Length of currently active encryption key, 7 to 16 octets (only applicable for bonding procedures). *\/$/;"	m	struct:__anon474
error_src	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t               error_src : 2;          \/**< On error, source that caused the failure, see @ref BLE_GAP_SEC_STATUS_SOURCES. *\/$/;"	m	struct:__anon497
fp	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t               fp;                   \/**< Filter Policy, see @ref BLE_GAP_ADV_FILTER_POLICIES. *\/$/;"	m	struct:__anon478
id	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t id      : 1;                        \/**< Identity Resolving Key and Identity Address Information. *\/$/;"	m	struct:__anon480
id_addr_info	components\softdevice\s110\headers\ble_gap.h	/^  ble_gap_addr_t        id_addr_info;         \/**< Identity Address Information. *\/$/;"	m	struct:__anon494
id_info	components\softdevice\s110\headers\ble_gap.h	/^  ble_gap_irk_t         id_info;              \/**< Identity Information. *\/$/;"	m	struct:__anon494
id_info	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t             id_info   : 1;                 \/**< If 1, Identity Information required. *\/$/;"	m	struct:__anon489
interval	components\softdevice\s110\headers\ble_gap.h	/^  uint16_t                interval;             \/**< Scan interval between 0x0004 and 0x4000 in 0.625ms units (2.5ms to 10.24s). *\/$/;"	m	struct:__anon479
interval	components\softdevice\s110\headers\ble_gap.h	/^  uint16_t              interval;             \/**< Advertising interval between 0x0020 and 0x4000 in 0.625 ms units (20ms to 10.24s), see @ref BLE_GAP_ADV_INTERVALS.$/;"	m	struct:__anon478
interval_s	components\softdevice\s110\headers\ble_gap.h	/^  uint16_t        interval_s;   \/**< When input: Custom private address cycle interval in seconds. When output: The current private address cycle interval. *\/$/;"	m	struct:__anon510
io_caps	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t               io_caps : 3;               \/**< IO capabilities, see @ref BLE_GAP_IO_CAPS. *\/$/;"	m	struct:__anon481
irk	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t irk[BLE_GAP_SEC_KEY_LEN];   \/**< Array containing IRK. *\/$/;"	m	struct:__anon475
irk_count	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t             irk_count;       \/**< Count of IRKs in array, up to @ref BLE_GAP_WHITELIST_IRK_MAX_COUNT. *\/$/;"	m	struct:__anon476
irk_match	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t               irk_match :1;           \/**< If 1, peer device's address resolved using an IRK. *\/$/;"	m	struct:__anon485
irk_match_idx	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t               irk_match_idx  :7;      \/**< Index in IRK list where the address was matched. *\/$/;"	m	struct:__anon485
kdist_central	components\softdevice\s110\headers\ble_gap.h	/^  ble_gap_sec_kdist_t   kdist_central;             \/**< Key distribution bitmap: keys that the central device will distribute. *\/$/;"	m	struct:__anon481
kdist_central	components\softdevice\s110\headers\ble_gap.h	/^  ble_gap_sec_kdist_t   kdist_central;          \/**< Bitmap stating which keys were exchanged (distributed) by the central. *\/$/;"	m	struct:__anon497
kdist_periph	components\softdevice\s110\headers\ble_gap.h	/^  ble_gap_sec_kdist_t   kdist_periph;              \/**< Key distribution bitmap: keys that the peripheral device will distribute. *\/$/;"	m	struct:__anon481
kdist_periph	components\softdevice\s110\headers\ble_gap.h	/^  ble_gap_sec_kdist_t   kdist_periph;           \/**< Bitmap stating which keys were exchanged (distributed) by the peripheral. *\/$/;"	m	struct:__anon497
key_type	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t key_type;                             \/**< See @ref BLE_GAP_AUTH_KEY_TYPES. *\/$/;"	m	struct:__anon491
keys_central	components\softdevice\s110\headers\ble_gap.h	/^  ble_gap_sec_keys_t keys_central;    \/**< Keys distributed by the device in the Central role. *\/$/;"	m	struct:__anon496
keys_periph	components\softdevice\s110\headers\ble_gap.h	/^  ble_gap_sec_keys_t keys_periph;     \/**< Keys distributed by the device in the Peripheral role. *\/$/;"	m	struct:__anon496
local_conn_latency	components\softdevice\s110\headers\ble_gap.h	/^  ble_gap_opt_local_conn_latency_t      local_conn_latency;        \/**< Parameters for the Local connection latency option *\/$/;"	m	union:__anon513
ltk	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t   ltk[BLE_GAP_SEC_KEY_LEN];   \/**< Long Term Key. *\/$/;"	m	struct:__anon482
ltk_len	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t   ltk_len : 7;                \/**< LTK length in octets. *\/$/;"	m	struct:__anon482
lv	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t lv : 4;                     \/**< Level (1, 2 or 3), 0 for no permissions at all. *\/$/;"	m	struct:__anon473
lv1	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t lv1 : 1;                              \/**< If 1: Level 1 is supported. *\/$/;"	m	struct:__anon492
lv2	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t lv2 : 1;                              \/**< If 1: Level 2 is supported. *\/$/;"	m	struct:__anon492
lv3	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t lv3 : 1;                              \/**< If 1: Level 3 is supported. *\/$/;"	m	struct:__anon492
master_id	components\softdevice\s110\headers\ble_gap.h	/^  ble_gap_master_id_t   master_id;            \/**< Master Identification. *\/$/;"	m	struct:__anon493
master_id	components\softdevice\s110\headers\ble_gap.h	/^  ble_gap_master_id_t master_id;                     \/**< Master Identification for LTK lookup. *\/$/;"	m	struct:__anon489
max_conn_interval	components\softdevice\s110\headers\ble_gap.h	/^  uint16_t max_conn_interval;         \/**< Maximum Connection Interval in 1.25 ms units, see @ref BLE_GAP_CP_LIMITS.*\/$/;"	m	struct:__anon472
max_key_size	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t               max_key_size;              \/**< Maximum encryption key size in octets between min_key_size and 16. *\/$/;"	m	struct:__anon481
min_conn_interval	components\softdevice\s110\headers\ble_gap.h	/^  uint16_t min_conn_interval;         \/**< Minimum Connection Interval in 1.25 ms units, see @ref BLE_GAP_CP_LIMITS.*\/$/;"	m	struct:__anon472
min_key_size	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t               min_key_size;              \/**< Minimum encryption key size in octets between 7 and 16. If 0 then not applicable in this instance. *\/$/;"	m	struct:__anon481
mitm	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t               mitm    : 1;               \/**< Man In The Middle protection required. *\/$/;"	m	struct:__anon481
mitm	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t    mitm    : 1;                       \/**< Man In The Middle protection required. *\/$/;"	m	struct:__anon502
mode_1_enable	components\softdevice\s110\headers\ble_gap.h	/^   uint8_t mode_1_enable : 1;                           \/**< Enable compatibility mode 1.*\/$/;"	m	struct:__anon512
oob	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t               oob     : 1;               \/**< Out Of Band data available. *\/$/;"	m	struct:__anon481
own_addr	components\softdevice\s110\headers\ble_gap.h	/^  ble_gap_addr_t        own_addr;               \/**< Bluetooth address of the local device used during connection setup. *\/$/;"	m	struct:__anon485
p_actual_latency	components\softdevice\s110\headers\ble_gap.h	/^  uint16_t * p_actual_latency;                  \/**< Pointer to storage for the actual local connection latency (can be set to NULL to skip return value). *\/$/;"	m	struct:__anon508
p_enc_key	components\softdevice\s110\headers\ble_gap.h	/^  ble_gap_enc_key_t     *p_enc_key;           \/**< Encryption Key, or NULL. *\/$/;"	m	struct:__anon495
p_id_key	components\softdevice\s110\headers\ble_gap.h	/^  ble_gap_id_key_t      *p_id_key;            \/**< Identity Key, or NULL. *\/$/;"	m	struct:__anon495
p_irk	components\softdevice\s110\headers\ble_gap.h	/^  ble_gap_irk_t * p_irk;        \/**< When input: Pointer to custom IRK, or NULL to use\/reset to the device's default IRK. When output: Pointer to where the current IRK is to be stored, or NULL to not read out the IRK. *\/$/;"	m	struct:__anon510
p_passkey	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t * p_passkey;                          \/**< Pointer to 6-digit ASCII string (digit 0..9 only, no NULL termination) passkey to be used during pairing. If this is NULL, the SoftDevice will generate a random passkey if required.*\/$/;"	m	struct:__anon509
p_peer_addr	components\softdevice\s110\headers\ble_gap.h	/^  ble_gap_addr_t       *p_peer_addr;          \/**< For @ref BLE_GAP_ADV_TYPE_ADV_DIRECT_IND mode only, known peer address. *\/$/;"	m	struct:__anon478
p_sign_key	components\softdevice\s110\headers\ble_gap.h	/^  ble_gap_sign_info_t   *p_sign_key;          \/**< Signing Key, or NULL. *\/$/;"	m	struct:__anon495
p_whitelist	components\softdevice\s110\headers\ble_gap.h	/^  ble_gap_whitelist_t  *p_whitelist;          \/**< Pointer to whitelist, NULL if none is given. *\/$/;"	m	struct:__anon478
p_whitelist	components\softdevice\s110\headers\ble_gap.h	/^  ble_gap_whitelist_t *   p_whitelist;          \/**< Pointer to whitelist, NULL if none is given. *\/$/;"	m	struct:__anon479
params	components\softdevice\s110\headers\ble_gap.h	/^  } params;                                                                 \/**< Event Parameters. *\/$/;"	m	struct:__anon505	typeref:union:__anon505::__anon506
passkey	components\softdevice\s110\headers\ble_gap.h	/^  ble_gap_opt_passkey_t                 passkey;                   \/**< Parameters for the Passkey option.*\/$/;"	m	union:__anon513
passkey	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t passkey[BLE_GAP_PASSKEY_LEN];         \/**< 6-digit passkey in ASCII ('0'-'9' digits only). *\/$/;"	m	struct:__anon490
passkey_display	components\softdevice\s110\headers\ble_gap.h	/^    ble_gap_evt_passkey_display_t             passkey_display;              \/**< Passkey Display Event Parameters. *\/$/;"	m	union:__anon505::__anon506
peer_addr	components\softdevice\s110\headers\ble_gap.h	/^  ble_gap_addr_t          peer_addr;         \/**< Bluetooth address of the peer device. *\/$/;"	m	struct:__anon504
peer_addr	components\softdevice\s110\headers\ble_gap.h	/^  ble_gap_addr_t        peer_addr;              \/**< Bluetooth address of the peer device. *\/$/;"	m	struct:__anon485
peer_addr	components\softdevice\s110\headers\ble_gap.h	/^  ble_gap_addr_t      peer_addr;                     \/**< Bluetooth address of the peer device. *\/$/;"	m	struct:__anon489
peer_addr	components\softdevice\s110\headers\ble_gap.h	/^  ble_gap_addr_t peer_addr;                     \/**< Bluetooth address of the peer device. *\/$/;"	m	struct:__anon501
peer_params	components\softdevice\s110\headers\ble_gap.h	/^  ble_gap_sec_params_t peer_params;             \/**< Initiator Security Parameters. *\/$/;"	m	struct:__anon488
pp_addrs	components\softdevice\s110\headers\ble_gap.h	/^  ble_gap_addr_t    **pp_addrs;        \/**< Pointer to an array of device address pointers, pointing to addresses to be used in whitelist. NULL if none are given. *\/$/;"	m	struct:__anon476
pp_irks	components\softdevice\s110\headers\ble_gap.h	/^  ble_gap_irk_t     **pp_irks;         \/**< Pointer to an array of Identity Resolving Key (IRK) pointers, each pointing to an IRK in the whitelist. NULL if none are given. *\/$/;"	m	struct:__anon476
privacy	components\softdevice\s110\headers\ble_gap.h	/^  ble_gap_opt_privacy_t                 privacy;                   \/**< Parameters for the Custom privacy option. *\/$/;"	m	union:__anon513
rand	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t   rand[BLE_GAP_SEC_RAND_LEN]; \/**< Random Number. *\/$/;"	m	struct:__anon483
reason	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t reason;                               \/**< HCI error code, see @ref BLE_HCI_STATUS_CODES. *\/$/;"	m	struct:__anon486
requested_latency	components\softdevice\s110\headers\ble_gap.h	/^  uint16_t   requested_latency;                 \/**< Requested local connection latency. *\/$/;"	m	struct:__anon508
rssi	components\softdevice\s110\headers\ble_gap.h	/^  int8_t                  rssi;              \/**< Received Signal Strength Indication in dBm. *\/$/;"	m	struct:__anon504
rssi	components\softdevice\s110\headers\ble_gap.h	/^  int8_t         rssi;                          \/**< Received Signal Strength Indication in dBm. *\/$/;"	m	struct:__anon501
rssi	components\softdevice\s110\headers\ble_gap.h	/^  int8_t  rssi;                               \/**< Received Signal Strength Indication in dBm. *\/$/;"	m	struct:__anon500
rssi_changed	components\softdevice\s110\headers\ble_gap.h	/^    ble_gap_evt_rssi_changed_t                rssi_changed;                 \/**< RSSI Event parameters. *\/$/;"	m	union:__anon505::__anon506
scan_req_report	components\softdevice\s110\headers\ble_gap.h	/^    ble_gap_evt_scan_req_report_t             scan_req_report;              \/**< Scan Request Report parameters. *\/$/;"	m	union:__anon505::__anon506
scan_req_report	components\softdevice\s110\headers\ble_gap.h	/^  ble_gap_opt_scan_req_report_t         scan_req_report;           \/**< Parameters for the scan request report option.*\/$/;"	m	union:__anon513
scan_rsp	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t        scan_rsp : 1;                  \/**< If 1, the report corresponds to a scan response and the type field may be ignored. *\/$/;"	m	struct:__anon501
sec_info_request	components\softdevice\s110\headers\ble_gap.h	/^    ble_gap_evt_sec_info_request_t            sec_info_request;             \/**< Security Information Request Event Parameters. *\/$/;"	m	union:__anon505::__anon506
sec_mode	components\softdevice\s110\headers\ble_gap.h	/^  ble_gap_conn_sec_mode_t sec_mode;           \/**< Currently active security mode for this connection.*\/$/;"	m	struct:__anon474
sec_params_request	components\softdevice\s110\headers\ble_gap.h	/^    ble_gap_evt_sec_params_request_t          sec_params_request;           \/**< Security Parameters Request Event Parameters. *\/$/;"	m	union:__anon505::__anon506
sec_request	components\softdevice\s110\headers\ble_gap.h	/^    ble_gap_evt_sec_request_t                 sec_request;                  \/**< Security Request Event Parameters. *\/$/;"	m	union:__anon505::__anon506
selective	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t                 selective : 1;        \/**< If 1, ignore unknown devices (non whitelisted). *\/$/;"	m	struct:__anon479
sign	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t sign    : 1;                        \/**< Connection Signature Resolving Key. *\/$/;"	m	struct:__anon480
sign_info	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t             sign_info : 1;                 \/**< If 1, Signing Information required. *\/$/;"	m	struct:__anon489
slave_latency	components\softdevice\s110\headers\ble_gap.h	/^  uint16_t slave_latency;             \/**< Slave Latency in number of connection events, see @ref BLE_GAP_CP_LIMITS.*\/$/;"	m	struct:__anon472
sm	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t sm : 4;                     \/**< Security Mode (1 or 2), 0 for no permissions at all. *\/$/;"	m	struct:__anon473
sm1_levels	components\softdevice\s110\headers\ble_gap.h	/^  ble_gap_sec_levels_t  sm1_levels;             \/**< Levels supported in Security Mode 1. *\/$/;"	m	struct:__anon497
sm2_levels	components\softdevice\s110\headers\ble_gap.h	/^  ble_gap_sec_levels_t  sm2_levels;             \/**< Levels supported in Security Mode 2. *\/$/;"	m	struct:__anon497
src	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t src;                                  \/**< Source of timeout event, see @ref BLE_GAP_TIMEOUT_SOURCES. *\/$/;"	m	struct:__anon499
timeout	components\softdevice\s110\headers\ble_gap.h	/^    ble_gap_evt_timeout_t                     timeout;                      \/**< Timeout Event Parameters. *\/$/;"	m	union:__anon505::__anon506
timeout	components\softdevice\s110\headers\ble_gap.h	/^  uint16_t                timeout;              \/**< Scan timeout between 0x0001 and 0xFFFF in seconds, 0x0000 disables timeout. *\/$/;"	m	struct:__anon479
timeout	components\softdevice\s110\headers\ble_gap.h	/^  uint16_t              timeout;              \/**< Advertising timeout between 0x0001 and 0x3FFF in seconds, 0x0000 disables timeout. See also @ref BLE_GAP_ADV_TIMEOUT_VALUES. If type equals @ref BLE_GAP_ADV_TYPE_ADV_DIRECT_IND, this parameter must be set to 0 for High duty cycle directed advertising. *\/$/;"	m	struct:__anon478
type	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t               type;                 \/**< See @ref BLE_GAP_ADV_TYPES. *\/$/;"	m	struct:__anon478
type	components\softdevice\s110\headers\ble_gap.h	/^  uint8_t        type     : 2;                  \/**< See @ref BLE_GAP_ADV_TYPES. Only valid if the scan_rsp field is 0. *\/$/;"	m	struct:__anon501
window	components\softdevice\s110\headers\ble_gap.h	/^  uint16_t                window;               \/**< Scan window between 0x0004 and 0x4000 in 0.625ms units (2.5ms to 10.24s). *\/$/;"	m	struct:__anon479
BLE_GATT_CPF_FORMAT_2BIT	components\softdevice\s110\headers\ble_gatt.h	132;"	d
BLE_GATT_CPF_FORMAT_BOOLEAN	components\softdevice\s110\headers\ble_gatt.h	131;"	d
BLE_GATT_CPF_FORMAT_DUINT16	components\softdevice\s110\headers\ble_gatt.h	154;"	d
BLE_GATT_CPF_FORMAT_FLOAT	components\softdevice\s110\headers\ble_gatt.h	153;"	d
BLE_GATT_CPF_FORMAT_FLOAT32	components\softdevice\s110\headers\ble_gatt.h	150;"	d
BLE_GATT_CPF_FORMAT_FLOAT64	components\softdevice\s110\headers\ble_gatt.h	151;"	d
BLE_GATT_CPF_FORMAT_NIBBLE	components\softdevice\s110\headers\ble_gatt.h	133;"	d
BLE_GATT_CPF_FORMAT_RFU	components\softdevice\s110\headers\ble_gatt.h	130;"	d
BLE_GATT_CPF_FORMAT_SFLOAT	components\softdevice\s110\headers\ble_gatt.h	152;"	d
BLE_GATT_CPF_FORMAT_SINT12	components\softdevice\s110\headers\ble_gatt.h	143;"	d
BLE_GATT_CPF_FORMAT_SINT128	components\softdevice\s110\headers\ble_gatt.h	149;"	d
BLE_GATT_CPF_FORMAT_SINT16	components\softdevice\s110\headers\ble_gatt.h	144;"	d
BLE_GATT_CPF_FORMAT_SINT24	components\softdevice\s110\headers\ble_gatt.h	145;"	d
BLE_GATT_CPF_FORMAT_SINT32	components\softdevice\s110\headers\ble_gatt.h	146;"	d
BLE_GATT_CPF_FORMAT_SINT48	components\softdevice\s110\headers\ble_gatt.h	147;"	d
BLE_GATT_CPF_FORMAT_SINT64	components\softdevice\s110\headers\ble_gatt.h	148;"	d
BLE_GATT_CPF_FORMAT_SINT8	components\softdevice\s110\headers\ble_gatt.h	142;"	d
BLE_GATT_CPF_FORMAT_STRUCT	components\softdevice\s110\headers\ble_gatt.h	157;"	d
BLE_GATT_CPF_FORMAT_UINT12	components\softdevice\s110\headers\ble_gatt.h	135;"	d
BLE_GATT_CPF_FORMAT_UINT128	components\softdevice\s110\headers\ble_gatt.h	141;"	d
BLE_GATT_CPF_FORMAT_UINT16	components\softdevice\s110\headers\ble_gatt.h	136;"	d
BLE_GATT_CPF_FORMAT_UINT24	components\softdevice\s110\headers\ble_gatt.h	137;"	d
BLE_GATT_CPF_FORMAT_UINT32	components\softdevice\s110\headers\ble_gatt.h	138;"	d
BLE_GATT_CPF_FORMAT_UINT48	components\softdevice\s110\headers\ble_gatt.h	139;"	d
BLE_GATT_CPF_FORMAT_UINT64	components\softdevice\s110\headers\ble_gatt.h	140;"	d
BLE_GATT_CPF_FORMAT_UINT8	components\softdevice\s110\headers\ble_gatt.h	134;"	d
BLE_GATT_CPF_FORMAT_UTF16S	components\softdevice\s110\headers\ble_gatt.h	156;"	d
BLE_GATT_CPF_FORMAT_UTF8S	components\softdevice\s110\headers\ble_gatt.h	155;"	d
BLE_GATT_CPF_NAMESPACE_BTSIG	components\softdevice\s110\headers\ble_gatt.h	163;"	d
BLE_GATT_CPF_NAMESPACE_DESCRIPTION_UNKNOWN	components\softdevice\s110\headers\ble_gatt.h	164;"	d
BLE_GATT_EXEC_WRITE_FLAG_PREPARED_CANCEL	components\softdevice\s110\headers\ble_gatt.h	80;"	d
BLE_GATT_EXEC_WRITE_FLAG_PREPARED_WRITE	components\softdevice\s110\headers\ble_gatt.h	81;"	d
BLE_GATT_HANDLE_INVALID	components\softdevice\s110\headers\ble_gatt.h	61;"	d
BLE_GATT_HVX_INDICATION	components\softdevice\s110\headers\ble_gatt.h	88;"	d
BLE_GATT_HVX_INVALID	components\softdevice\s110\headers\ble_gatt.h	86;"	d
BLE_GATT_HVX_NOTIFICATION	components\softdevice\s110\headers\ble_gatt.h	87;"	d
BLE_GATT_H__	components\softdevice\s110\headers\ble_gatt.h	44;"	d
BLE_GATT_OP_EXEC_WRITE_REQ	components\softdevice\s110\headers\ble_gatt.h	75;"	d
BLE_GATT_OP_INVALID	components\softdevice\s110\headers\ble_gatt.h	70;"	d
BLE_GATT_OP_PREP_WRITE_REQ	components\softdevice\s110\headers\ble_gatt.h	74;"	d
BLE_GATT_OP_SIGN_WRITE_CMD	components\softdevice\s110\headers\ble_gatt.h	73;"	d
BLE_GATT_OP_WRITE_CMD	components\softdevice\s110\headers\ble_gatt.h	72;"	d
BLE_GATT_OP_WRITE_REQ	components\softdevice\s110\headers\ble_gatt.h	71;"	d
BLE_GATT_STATUS_ATTERR_APP_BEGIN	components\softdevice\s110\headers\ble_gatt.h	115;"	d
BLE_GATT_STATUS_ATTERR_APP_END	components\softdevice\s110\headers\ble_gatt.h	116;"	d
BLE_GATT_STATUS_ATTERR_ATTRIBUTE_NOT_FOUND	components\softdevice\s110\headers\ble_gatt.h	105;"	d
BLE_GATT_STATUS_ATTERR_ATTRIBUTE_NOT_LONG	components\softdevice\s110\headers\ble_gatt.h	106;"	d
BLE_GATT_STATUS_ATTERR_CPS_CCCD_CONFIG_ERROR	components\softdevice\s110\headers\ble_gatt.h	121;"	d
BLE_GATT_STATUS_ATTERR_CPS_OUT_OF_RANGE	components\softdevice\s110\headers\ble_gatt.h	123;"	d
BLE_GATT_STATUS_ATTERR_CPS_PROC_ALR_IN_PROG	components\softdevice\s110\headers\ble_gatt.h	122;"	d
BLE_GATT_STATUS_ATTERR_INSUF_AUTHENTICATION	components\softdevice\s110\headers\ble_gatt.h	100;"	d
BLE_GATT_STATUS_ATTERR_INSUF_AUTHORIZATION	components\softdevice\s110\headers\ble_gatt.h	103;"	d
BLE_GATT_STATUS_ATTERR_INSUF_ENCRYPTION	components\softdevice\s110\headers\ble_gatt.h	110;"	d
BLE_GATT_STATUS_ATTERR_INSUF_ENC_KEY_SIZE	components\softdevice\s110\headers\ble_gatt.h	107;"	d
BLE_GATT_STATUS_ATTERR_INSUF_RESOURCES	components\softdevice\s110\headers\ble_gatt.h	112;"	d
BLE_GATT_STATUS_ATTERR_INVALID	components\softdevice\s110\headers\ble_gatt.h	95;"	d
BLE_GATT_STATUS_ATTERR_INVALID_ATT_VAL_LENGTH	components\softdevice\s110\headers\ble_gatt.h	108;"	d
BLE_GATT_STATUS_ATTERR_INVALID_HANDLE	components\softdevice\s110\headers\ble_gatt.h	96;"	d
BLE_GATT_STATUS_ATTERR_INVALID_OFFSET	components\softdevice\s110\headers\ble_gatt.h	102;"	d
BLE_GATT_STATUS_ATTERR_INVALID_PDU	components\softdevice\s110\headers\ble_gatt.h	99;"	d
BLE_GATT_STATUS_ATTERR_PREPARE_QUEUE_FULL	components\softdevice\s110\headers\ble_gatt.h	104;"	d
BLE_GATT_STATUS_ATTERR_READ_NOT_PERMITTED	components\softdevice\s110\headers\ble_gatt.h	97;"	d
BLE_GATT_STATUS_ATTERR_REQUEST_NOT_SUPPORTED	components\softdevice\s110\headers\ble_gatt.h	101;"	d
BLE_GATT_STATUS_ATTERR_RFU_RANGE1_BEGIN	components\softdevice\s110\headers\ble_gatt.h	113;"	d
BLE_GATT_STATUS_ATTERR_RFU_RANGE1_END	components\softdevice\s110\headers\ble_gatt.h	114;"	d
BLE_GATT_STATUS_ATTERR_RFU_RANGE2_BEGIN	components\softdevice\s110\headers\ble_gatt.h	117;"	d
BLE_GATT_STATUS_ATTERR_RFU_RANGE2_END	components\softdevice\s110\headers\ble_gatt.h	118;"	d
BLE_GATT_STATUS_ATTERR_RFU_RANGE3_BEGIN	components\softdevice\s110\headers\ble_gatt.h	119;"	d
BLE_GATT_STATUS_ATTERR_RFU_RANGE3_END	components\softdevice\s110\headers\ble_gatt.h	120;"	d
BLE_GATT_STATUS_ATTERR_UNLIKELY_ERROR	components\softdevice\s110\headers\ble_gatt.h	109;"	d
BLE_GATT_STATUS_ATTERR_UNSUPPORTED_GROUP_TYPE	components\softdevice\s110\headers\ble_gatt.h	111;"	d
BLE_GATT_STATUS_ATTERR_WRITE_NOT_PERMITTED	components\softdevice\s110\headers\ble_gatt.h	98;"	d
BLE_GATT_STATUS_SUCCESS	components\softdevice\s110\headers\ble_gatt.h	93;"	d
BLE_GATT_STATUS_UNKNOWN	components\softdevice\s110\headers\ble_gatt.h	94;"	d
BLE_GATT_TIMEOUT_SRC_PROTOCOL	components\softdevice\s110\headers\ble_gatt.h	65;"	d
GATT_MTU_SIZE_DEFAULT	components\softdevice\s110\headers\ble_gatt.h	54;"	d
GATT_RX_MTU	components\softdevice\s110\headers\ble_gatt.h	57;"	d
auth_signed_wr	components\softdevice\s110\headers\ble_gatt.h	/^  uint8_t auth_signed_wr  :1; \/**< Writing the value with Signed Write Command permitted. *\/$/;"	m	struct:__anon514
ble_gatt_char_ext_props_t	components\softdevice\s110\headers\ble_gatt.h	/^} ble_gatt_char_ext_props_t;$/;"	t	typeref:struct:__anon515
ble_gatt_char_props_t	components\softdevice\s110\headers\ble_gatt.h	/^} ble_gatt_char_props_t;$/;"	t	typeref:struct:__anon514
broadcast	components\softdevice\s110\headers\ble_gatt.h	/^  uint8_t broadcast       :1; \/**< Broadcasting of the value permitted. *\/$/;"	m	struct:__anon514
indicate	components\softdevice\s110\headers\ble_gatt.h	/^  uint8_t indicate        :1; \/**< Indications of the value permitted. *\/$/;"	m	struct:__anon514
notify	components\softdevice\s110\headers\ble_gatt.h	/^  uint8_t notify          :1; \/**< Notications of the value permitted. *\/$/;"	m	struct:__anon514
read	components\softdevice\s110\headers\ble_gatt.h	/^  uint8_t read            :1; \/**< Reading the value permitted. *\/$/;"	m	struct:__anon514
reliable_wr	components\softdevice\s110\headers\ble_gatt.h	/^  uint8_t reliable_wr     :1; \/**< Writing the value with Queued Write operations permitted. *\/$/;"	m	struct:__anon515
wr_aux	components\softdevice\s110\headers\ble_gatt.h	/^  uint8_t wr_aux          :1; \/**< Writing the Characteristic User Description descriptor permitted. *\/$/;"	m	struct:__anon515
write	components\softdevice\s110\headers\ble_gatt.h	/^  uint8_t write           :1; \/**< Writing the value with Write Request permitted. *\/$/;"	m	struct:__anon514
write_wo_resp	components\softdevice\s110\headers\ble_gatt.h	/^  uint8_t write_wo_resp   :1; \/**< Writing the value with Write Command permitted. *\/$/;"	m	struct:__anon514
BLE_ERROR_GATTC_PROC_NOT_PERMITTED	components\softdevice\s110\headers\ble_gattc.h	92;"	d
BLE_GATTC_EVTS	components\softdevice\s110\headers\ble_gattc.h	/^enum BLE_GATTC_EVTS$/;"	g
BLE_GATTC_EVT_CHAR_DISC_RSP	components\softdevice\s110\headers\ble_gattc.h	/^  BLE_GATTC_EVT_CHAR_DISC_RSP,                            \/**< Characteristic Discovery Response event. @ref ble_gattc_evt_char_disc_rsp_t *\/$/;"	e	enum:BLE_GATTC_EVTS
BLE_GATTC_EVT_CHAR_VALS_READ_RSP	components\softdevice\s110\headers\ble_gattc.h	/^  BLE_GATTC_EVT_CHAR_VALS_READ_RSP,                       \/**< Read multiple Response event. @ref ble_gattc_evt_char_vals_read_rsp_t *\/$/;"	e	enum:BLE_GATTC_EVTS
BLE_GATTC_EVT_CHAR_VAL_BY_UUID_READ_RSP	components\softdevice\s110\headers\ble_gattc.h	/^  BLE_GATTC_EVT_CHAR_VAL_BY_UUID_READ_RSP,                \/**< Read By UUID Response event. @ref ble_gattc_evt_char_val_by_uuid_read_rsp_t *\/$/;"	e	enum:BLE_GATTC_EVTS
BLE_GATTC_EVT_DESC_DISC_RSP	components\softdevice\s110\headers\ble_gattc.h	/^  BLE_GATTC_EVT_DESC_DISC_RSP,                            \/**< Descriptor Discovery Response event. @ref ble_gattc_evt_desc_disc_rsp_t *\/$/;"	e	enum:BLE_GATTC_EVTS
BLE_GATTC_EVT_HVX	components\softdevice\s110\headers\ble_gattc.h	/^  BLE_GATTC_EVT_HVX,                                      \/**< Handle Value Notification or Indication event. @ref ble_gattc_evt_hvx_t *\/$/;"	e	enum:BLE_GATTC_EVTS
BLE_GATTC_EVT_PRIM_SRVC_DISC_RSP	components\softdevice\s110\headers\ble_gattc.h	/^  BLE_GATTC_EVT_PRIM_SRVC_DISC_RSP = BLE_GATTC_EVT_BASE,  \/**< Primary Service Discovery Response event. @ref ble_gattc_evt_prim_srvc_disc_rsp_t *\/$/;"	e	enum:BLE_GATTC_EVTS
BLE_GATTC_EVT_READ_RSP	components\softdevice\s110\headers\ble_gattc.h	/^  BLE_GATTC_EVT_READ_RSP,                                 \/**< Read Response event. @ref ble_gattc_evt_read_rsp_t *\/$/;"	e	enum:BLE_GATTC_EVTS
BLE_GATTC_EVT_REL_DISC_RSP	components\softdevice\s110\headers\ble_gattc.h	/^  BLE_GATTC_EVT_REL_DISC_RSP,                             \/**< Relationship Discovery Response event. @ref ble_gattc_evt_rel_disc_rsp_t *\/$/;"	e	enum:BLE_GATTC_EVTS
BLE_GATTC_EVT_TIMEOUT	components\softdevice\s110\headers\ble_gattc.h	/^  BLE_GATTC_EVT_TIMEOUT                                   \/**< Timeout event. @ref ble_gattc_evt_timeout_t *\/$/;"	e	enum:BLE_GATTC_EVTS
BLE_GATTC_EVT_WRITE_RSP	components\softdevice\s110\headers\ble_gattc.h	/^  BLE_GATTC_EVT_WRITE_RSP,                                \/**< Write Response event. @ref ble_gattc_evt_write_rsp_t *\/$/;"	e	enum:BLE_GATTC_EVTS
BLE_GATTC_HANDLE_END	components\softdevice\s110\headers\ble_gattc.h	96;"	d
BLE_GATTC_H__	components\softdevice\s110\headers\ble_gattc.h	44;"	d
BLE_GATTC_SVCS	components\softdevice\s110\headers\ble_gattc.h	/^enum BLE_GATTC_SVCS$/;"	g
SD_BLE_GATTC_CHARACTERISTICS_DISCOVER	components\softdevice\s110\headers\ble_gattc.h	/^  SD_BLE_GATTC_CHARACTERISTICS_DISCOVER,                       \/**< Characteristic Discovery. *\/$/;"	e	enum:BLE_GATTC_SVCS
SD_BLE_GATTC_CHAR_VALUES_READ	components\softdevice\s110\headers\ble_gattc.h	/^  SD_BLE_GATTC_CHAR_VALUES_READ,                               \/**< Read multiple Characteristic Values. *\/$/;"	e	enum:BLE_GATTC_SVCS
SD_BLE_GATTC_CHAR_VALUE_BY_UUID_READ	components\softdevice\s110\headers\ble_gattc.h	/^  SD_BLE_GATTC_CHAR_VALUE_BY_UUID_READ,                        \/**< Read Characteristic Value by UUID. *\/$/;"	e	enum:BLE_GATTC_SVCS
SD_BLE_GATTC_DESCRIPTORS_DISCOVER	components\softdevice\s110\headers\ble_gattc.h	/^  SD_BLE_GATTC_DESCRIPTORS_DISCOVER,                           \/**< Characteristic Descriptor Discovery. *\/$/;"	e	enum:BLE_GATTC_SVCS
SD_BLE_GATTC_HV_CONFIRM	components\softdevice\s110\headers\ble_gattc.h	/^  SD_BLE_GATTC_HV_CONFIRM                                      \/**< Handle Value Confirmation. *\/$/;"	e	enum:BLE_GATTC_SVCS
SD_BLE_GATTC_PRIMARY_SERVICES_DISCOVER	components\softdevice\s110\headers\ble_gattc.h	/^  SD_BLE_GATTC_PRIMARY_SERVICES_DISCOVER = BLE_GATTC_SVC_BASE, \/**< Primary Service Discovery. *\/$/;"	e	enum:BLE_GATTC_SVCS
SD_BLE_GATTC_READ	components\softdevice\s110\headers\ble_gattc.h	/^  SD_BLE_GATTC_READ,                                           \/**< Generic read. *\/$/;"	e	enum:BLE_GATTC_SVCS
SD_BLE_GATTC_RELATIONSHIPS_DISCOVER	components\softdevice\s110\headers\ble_gattc.h	/^  SD_BLE_GATTC_RELATIONSHIPS_DISCOVER,                         \/**< Relationship Discovery. *\/$/;"	e	enum:BLE_GATTC_SVCS
SD_BLE_GATTC_WRITE	components\softdevice\s110\headers\ble_gattc.h	/^  SD_BLE_GATTC_WRITE,                                          \/**< Generic write. *\/$/;"	e	enum:BLE_GATTC_SVCS
ble_gattc_char_t	components\softdevice\s110\headers\ble_gattc.h	/^} ble_gattc_char_t;$/;"	t	typeref:struct:__anon519
ble_gattc_desc_t	components\softdevice\s110\headers\ble_gattc.h	/^} ble_gattc_desc_t;$/;"	t	typeref:struct:__anon520
ble_gattc_evt_char_disc_rsp_t	components\softdevice\s110\headers\ble_gattc.h	/^} ble_gattc_evt_char_disc_rsp_t;$/;"	t	typeref:struct:__anon524
ble_gattc_evt_char_val_by_uuid_read_rsp_t	components\softdevice\s110\headers\ble_gattc.h	/^} ble_gattc_evt_char_val_by_uuid_read_rsp_t;$/;"	t	typeref:struct:__anon527
ble_gattc_evt_char_vals_read_rsp_t	components\softdevice\s110\headers\ble_gattc.h	/^} ble_gattc_evt_char_vals_read_rsp_t;$/;"	t	typeref:struct:__anon529
ble_gattc_evt_desc_disc_rsp_t	components\softdevice\s110\headers\ble_gattc.h	/^} ble_gattc_evt_desc_disc_rsp_t;$/;"	t	typeref:struct:__anon525
ble_gattc_evt_hvx_t	components\softdevice\s110\headers\ble_gattc.h	/^} ble_gattc_evt_hvx_t;$/;"	t	typeref:struct:__anon531
ble_gattc_evt_prim_srvc_disc_rsp_t	components\softdevice\s110\headers\ble_gattc.h	/^} ble_gattc_evt_prim_srvc_disc_rsp_t;$/;"	t	typeref:struct:__anon522
ble_gattc_evt_read_rsp_t	components\softdevice\s110\headers\ble_gattc.h	/^} ble_gattc_evt_read_rsp_t;$/;"	t	typeref:struct:__anon528
ble_gattc_evt_rel_disc_rsp_t	components\softdevice\s110\headers\ble_gattc.h	/^} ble_gattc_evt_rel_disc_rsp_t;$/;"	t	typeref:struct:__anon523
ble_gattc_evt_t	components\softdevice\s110\headers\ble_gattc.h	/^} ble_gattc_evt_t;$/;"	t	typeref:struct:__anon533
ble_gattc_evt_timeout_t	components\softdevice\s110\headers\ble_gattc.h	/^} ble_gattc_evt_timeout_t;$/;"	t	typeref:struct:__anon532
ble_gattc_evt_write_rsp_t	components\softdevice\s110\headers\ble_gattc.h	/^} ble_gattc_evt_write_rsp_t;$/;"	t	typeref:struct:__anon530
ble_gattc_handle_range_t	components\softdevice\s110\headers\ble_gattc.h	/^} ble_gattc_handle_range_t;$/;"	t	typeref:struct:__anon516
ble_gattc_handle_value_t	components\softdevice\s110\headers\ble_gattc.h	/^} ble_gattc_handle_value_t;$/;"	t	typeref:struct:__anon526
ble_gattc_include_t	components\softdevice\s110\headers\ble_gattc.h	/^} ble_gattc_include_t;$/;"	t	typeref:struct:__anon518
ble_gattc_service_t	components\softdevice\s110\headers\ble_gattc.h	/^} ble_gattc_service_t;$/;"	t	typeref:struct:__anon517
ble_gattc_write_params_t	components\softdevice\s110\headers\ble_gattc.h	/^} ble_gattc_write_params_t;$/;"	t	typeref:struct:__anon521
char_disc_rsp	components\softdevice\s110\headers\ble_gattc.h	/^    ble_gattc_evt_char_disc_rsp_t               char_disc_rsp;              \/**< Characteristic Discovery Response Event Parameters. *\/$/;"	m	union:__anon533::__anon534
char_ext_props	components\softdevice\s110\headers\ble_gattc.h	/^  uint8_t                 char_ext_props : 1;   \/**< Extended properties present. *\/$/;"	m	struct:__anon519
char_props	components\softdevice\s110\headers\ble_gattc.h	/^  ble_gatt_char_props_t   char_props;           \/**< Characteristic Properties. *\/$/;"	m	struct:__anon519
char_val_by_uuid_read_rsp	components\softdevice\s110\headers\ble_gattc.h	/^    ble_gattc_evt_char_val_by_uuid_read_rsp_t   char_val_by_uuid_read_rsp;  \/**< Characteristic Value Read by UUID Response Event Parameters. *\/$/;"	m	union:__anon533::__anon534
char_vals_read_rsp	components\softdevice\s110\headers\ble_gattc.h	/^    ble_gattc_evt_char_vals_read_rsp_t          char_vals_read_rsp;         \/**< Characteristic Values Read Response Event Parameters. *\/$/;"	m	union:__anon533::__anon534
chars	components\softdevice\s110\headers\ble_gattc.h	/^  ble_gattc_char_t    chars[1];       \/**< Characteristic data, variable length. *\/$/;"	m	struct:__anon524
conn_handle	components\softdevice\s110\headers\ble_gattc.h	/^  uint16_t            conn_handle;                \/**< Connection Handle on which event occured. *\/$/;"	m	struct:__anon533
count	components\softdevice\s110\headers\ble_gattc.h	/^  uint16_t                  count;            \/**< Handle-Value Pair Count. *\/$/;"	m	struct:__anon527
count	components\softdevice\s110\headers\ble_gattc.h	/^  uint16_t             count;           \/**< Include count. *\/$/;"	m	struct:__anon523
count	components\softdevice\s110\headers\ble_gattc.h	/^  uint16_t             count;           \/**< Service count. *\/$/;"	m	struct:__anon522
count	components\softdevice\s110\headers\ble_gattc.h	/^  uint16_t            count;          \/**< Characteristic count. *\/$/;"	m	struct:__anon524
count	components\softdevice\s110\headers\ble_gattc.h	/^  uint16_t            count;          \/**< Descriptor count. *\/$/;"	m	struct:__anon525
data	components\softdevice\s110\headers\ble_gattc.h	/^  uint8_t             data[1];          \/**< Data, variable length. *\/$/;"	m	struct:__anon530
data	components\softdevice\s110\headers\ble_gattc.h	/^  uint8_t             data[1];        \/**< Attribute data, variable length. *\/$/;"	m	struct:__anon528
data	components\softdevice\s110\headers\ble_gattc.h	/^  uint8_t             data[1];        \/**< Attribute data, variable length. *\/$/;"	m	struct:__anon531
desc_disc_rsp	components\softdevice\s110\headers\ble_gattc.h	/^    ble_gattc_evt_desc_disc_rsp_t               desc_disc_rsp;              \/**< Descriptor Discovery Response Event Parameters. *\/$/;"	m	union:__anon533::__anon534
descs	components\softdevice\s110\headers\ble_gattc.h	/^  ble_gattc_desc_t    descs[1];       \/**< Descriptor data, variable length. *\/$/;"	m	struct:__anon525
end_handle	components\softdevice\s110\headers\ble_gattc.h	/^  uint16_t          end_handle;   \/**< End Handle. *\/$/;"	m	struct:__anon516
error_handle	components\softdevice\s110\headers\ble_gattc.h	/^  uint16_t            error_handle;               \/**< In case of error: The handle causing the error. In all other cases @ref BLE_GATT_HANDLE_INVALID. *\/$/;"	m	struct:__anon533
flags	components\softdevice\s110\headers\ble_gattc.h	/^  uint8_t    flags;                    \/**< Flags, see @ref BLE_GATT_EXEC_WRITE_FLAGS. *\/$/;"	m	struct:__anon521
gatt_status	components\softdevice\s110\headers\ble_gattc.h	/^  uint16_t            gatt_status;                \/**< GATT status code for the operation, see @ref BLE_GATT_STATUS_CODES. *\/$/;"	m	struct:__anon533
handle	components\softdevice\s110\headers\ble_gattc.h	/^  uint16_t            handle;           \/**< Attribute Handle. *\/$/;"	m	struct:__anon530
handle	components\softdevice\s110\headers\ble_gattc.h	/^  uint16_t            handle;           \/**< Include Handle. *\/$/;"	m	struct:__anon518
handle	components\softdevice\s110\headers\ble_gattc.h	/^  uint16_t            handle;          \/**< Attribute Handle. *\/$/;"	m	struct:__anon526
handle	components\softdevice\s110\headers\ble_gattc.h	/^  uint16_t            handle;         \/**< Attribute Handle. *\/$/;"	m	struct:__anon528
handle	components\softdevice\s110\headers\ble_gattc.h	/^  uint16_t            handle;         \/**< Handle to which the HVx operation applies. *\/$/;"	m	struct:__anon531
handle	components\softdevice\s110\headers\ble_gattc.h	/^  uint16_t          handle;         \/**< Descriptor Handle. *\/$/;"	m	struct:__anon520
handle	components\softdevice\s110\headers\ble_gattc.h	/^  uint16_t   handle;                   \/**< Handle to the attribute to be written. *\/$/;"	m	struct:__anon521
handle_decl	components\softdevice\s110\headers\ble_gattc.h	/^  uint16_t                handle_decl;          \/**< Handle of the Characteristic Declaration. *\/$/;"	m	struct:__anon519
handle_range	components\softdevice\s110\headers\ble_gattc.h	/^  ble_gattc_handle_range_t handle_range;  \/**< Service Handle Range. *\/$/;"	m	struct:__anon517
handle_value	components\softdevice\s110\headers\ble_gattc.h	/^  ble_gattc_handle_value_t  handle_value[1];  \/**< Handle-Value(s) list, variable length. *\/$/;"	m	struct:__anon527
handle_value	components\softdevice\s110\headers\ble_gattc.h	/^  uint16_t                handle_value;         \/**< Handle of the Characteristic Value. *\/$/;"	m	struct:__anon519
hvx	components\softdevice\s110\headers\ble_gattc.h	/^    ble_gattc_evt_hvx_t                         hvx;                        \/**< Handle Value Notification\/Indication Event Parameters. *\/$/;"	m	union:__anon533::__anon534
included_srvc	components\softdevice\s110\headers\ble_gattc.h	/^  ble_gattc_service_t included_srvc;    \/**< Handle of the included service. *\/$/;"	m	struct:__anon518
includes	components\softdevice\s110\headers\ble_gattc.h	/^  ble_gattc_include_t includes[1];      \/**< Include data, variable length. *\/$/;"	m	struct:__anon523
len	components\softdevice\s110\headers\ble_gattc.h	/^  uint16_t            len;              \/**< Data length. *\/$/;"	m	struct:__anon530
len	components\softdevice\s110\headers\ble_gattc.h	/^  uint16_t            len;            \/**< Attribute data length. *\/$/;"	m	struct:__anon528
len	components\softdevice\s110\headers\ble_gattc.h	/^  uint16_t            len;            \/**< Attribute data length. *\/$/;"	m	struct:__anon531
len	components\softdevice\s110\headers\ble_gattc.h	/^  uint16_t            len;            \/**< Concatenated Attribute values length. *\/$/;"	m	struct:__anon529
len	components\softdevice\s110\headers\ble_gattc.h	/^  uint16_t   len;                      \/**< Length of data in bytes. *\/$/;"	m	struct:__anon521
offset	components\softdevice\s110\headers\ble_gattc.h	/^  uint16_t            offset;           \/**< Data offset. *\/$/;"	m	struct:__anon530
offset	components\softdevice\s110\headers\ble_gattc.h	/^  uint16_t            offset;         \/**< Offset of the attribute data. *\/$/;"	m	struct:__anon528
offset	components\softdevice\s110\headers\ble_gattc.h	/^  uint16_t   offset;                   \/**< Offset in bytes. @note For WRITE_CMD and WRITE_REQ, offset must be 0. *\/$/;"	m	struct:__anon521
p_value	components\softdevice\s110\headers\ble_gattc.h	/^  uint8_t             *p_value;        \/**< Pointer to value, variable length (length available as value_len in @ref ble_gattc_evt_char_val_by_uuid_read_rsp_t). $/;"	m	struct:__anon526
p_value	components\softdevice\s110\headers\ble_gattc.h	/^  uint8_t   *p_value;                  \/**< Pointer to the value data. *\/$/;"	m	struct:__anon521
params	components\softdevice\s110\headers\ble_gattc.h	/^  } params;                                                                 \/**< Event Parameters. @note Only valid if @ref gatt_status == @ref BLE_GATT_STATUS_SUCCESS. *\/$/;"	m	struct:__anon533	typeref:union:__anon533::__anon534
prim_srvc_disc_rsp	components\softdevice\s110\headers\ble_gattc.h	/^    ble_gattc_evt_prim_srvc_disc_rsp_t          prim_srvc_disc_rsp;         \/**< Primary Service Discovery Response Event Parameters. *\/$/;"	m	union:__anon533::__anon534
read_rsp	components\softdevice\s110\headers\ble_gattc.h	/^    ble_gattc_evt_read_rsp_t                    read_rsp;                   \/**< Read Response Event Parameters. *\/$/;"	m	union:__anon533::__anon534
rel_disc_rsp	components\softdevice\s110\headers\ble_gattc.h	/^    ble_gattc_evt_rel_disc_rsp_t                rel_disc_rsp;               \/**< Relationship Discovery Response Event Parameters. *\/$/;"	m	union:__anon533::__anon534
services	components\softdevice\s110\headers\ble_gattc.h	/^  ble_gattc_service_t services[1];      \/**< Service data, variable length. *\/$/;"	m	struct:__anon522
src	components\softdevice\s110\headers\ble_gattc.h	/^  uint8_t          src;                       \/**< Timeout source, see @ref BLE_GATT_TIMEOUT_SOURCES. *\/$/;"	m	struct:__anon532
start_handle	components\softdevice\s110\headers\ble_gattc.h	/^  uint16_t          start_handle; \/**< Start Handle. *\/$/;"	m	struct:__anon516
timeout	components\softdevice\s110\headers\ble_gattc.h	/^    ble_gattc_evt_timeout_t                     timeout;                    \/**< Timeout Event Parameters. *\/$/;"	m	union:__anon533::__anon534
type	components\softdevice\s110\headers\ble_gattc.h	/^  uint8_t             type;           \/**< Indication or Notification, see @ref BLE_GATT_HVX_TYPES. *\/$/;"	m	struct:__anon531
uuid	components\softdevice\s110\headers\ble_gattc.h	/^  ble_uuid_t               uuid;          \/**< Service UUID. *\/$/;"	m	struct:__anon517
uuid	components\softdevice\s110\headers\ble_gattc.h	/^  ble_uuid_t              uuid;                 \/**< Characteristic UUID. *\/$/;"	m	struct:__anon519
uuid	components\softdevice\s110\headers\ble_gattc.h	/^  ble_uuid_t        uuid;           \/**< Descriptor UUID. *\/$/;"	m	struct:__anon520
value_len	components\softdevice\s110\headers\ble_gattc.h	/^  uint16_t                  value_len;        \/**< Length of the value in Handle-Value(s) list. *\/$/;"	m	struct:__anon527
values	components\softdevice\s110\headers\ble_gattc.h	/^  uint8_t             values[1];      \/**< Attribute values, variable length. *\/$/;"	m	struct:__anon529
write_op	components\softdevice\s110\headers\ble_gattc.h	/^  uint8_t             write_op;         \/**< Type of write operation, see @ref BLE_GATT_WRITE_OPS. *\/$/;"	m	struct:__anon530
write_op	components\softdevice\s110\headers\ble_gattc.h	/^  uint8_t    write_op;                 \/**< Write Operation to be performed, see @ref BLE_GATT_WRITE_OPS. *\/$/;"	m	struct:__anon521
write_rsp	components\softdevice\s110\headers\ble_gattc.h	/^    ble_gattc_evt_write_rsp_t                   write_rsp;                  \/**< Write Response Event Parameters. *\/$/;"	m	union:__anon533::__anon534
BLE_ERROR_GATTS_INVALID_ATTR_TYPE	components\softdevice\s110\headers\ble_gatts.h	93;"	d
BLE_ERROR_GATTS_SYS_ATTR_MISSING	components\softdevice\s110\headers\ble_gatts.h	94;"	d
BLE_GATTS_ATTR_TAB_SIZE_DEFAULT	components\softdevice\s110\headers\ble_gatts.h	160;"	d
BLE_GATTS_ATTR_TAB_SIZE_MIN	components\softdevice\s110\headers\ble_gatts.h	159;"	d
BLE_GATTS_ATTR_TYPE_CHAR_DECL	components\softdevice\s110\headers\ble_gatts.h	117;"	d
BLE_GATTS_ATTR_TYPE_CHAR_VAL	components\softdevice\s110\headers\ble_gatts.h	118;"	d
BLE_GATTS_ATTR_TYPE_DESC	components\softdevice\s110\headers\ble_gatts.h	119;"	d
BLE_GATTS_ATTR_TYPE_INC_DECL	components\softdevice\s110\headers\ble_gatts.h	116;"	d
BLE_GATTS_ATTR_TYPE_INVALID	components\softdevice\s110\headers\ble_gatts.h	113;"	d
BLE_GATTS_ATTR_TYPE_OTHER	components\softdevice\s110\headers\ble_gatts.h	120;"	d
BLE_GATTS_ATTR_TYPE_PRIM_SRVC_DECL	components\softdevice\s110\headers\ble_gatts.h	114;"	d
BLE_GATTS_ATTR_TYPE_SEC_SRVC_DECL	components\softdevice\s110\headers\ble_gatts.h	115;"	d
BLE_GATTS_AUTHORIZE_TYPE_INVALID	components\softdevice\s110\headers\ble_gatts.h	145;"	d
BLE_GATTS_AUTHORIZE_TYPE_READ	components\softdevice\s110\headers\ble_gatts.h	146;"	d
BLE_GATTS_AUTHORIZE_TYPE_WRITE	components\softdevice\s110\headers\ble_gatts.h	147;"	d
BLE_GATTS_EVTS	components\softdevice\s110\headers\ble_gatts.h	/^enum BLE_GATTS_EVTS$/;"	g
BLE_GATTS_EVT_HVC	components\softdevice\s110\headers\ble_gatts.h	/^  BLE_GATTS_EVT_HVC,                              \/**< Handle Value Confirmation. @ref ble_gatts_evt_hvc_t *\/$/;"	e	enum:BLE_GATTS_EVTS
BLE_GATTS_EVT_RW_AUTHORIZE_REQUEST	components\softdevice\s110\headers\ble_gatts.h	/^  BLE_GATTS_EVT_RW_AUTHORIZE_REQUEST,             \/**< Read\/Write Authorization request.@ref ble_gatts_evt_rw_authorize_request_t *\/$/;"	e	enum:BLE_GATTS_EVTS
BLE_GATTS_EVT_SC_CONFIRM	components\softdevice\s110\headers\ble_gatts.h	/^  BLE_GATTS_EVT_SC_CONFIRM,                       \/**< Service Changed Confirmation. No additional event structure applies. *\/$/;"	e	enum:BLE_GATTS_EVTS
BLE_GATTS_EVT_SYS_ATTR_MISSING	components\softdevice\s110\headers\ble_gatts.h	/^  BLE_GATTS_EVT_SYS_ATTR_MISSING,                 \/**< A persistent system attribute access is pending, awaiting a sd_ble_gatts_sys_attr_set(). @ref ble_gatts_evt_sys_attr_missing_t *\/$/;"	e	enum:BLE_GATTS_EVTS
BLE_GATTS_EVT_TIMEOUT	components\softdevice\s110\headers\ble_gatts.h	/^  BLE_GATTS_EVT_TIMEOUT                           \/**< Timeout. @ref ble_gatts_evt_timeout_t *\/$/;"	e	enum:BLE_GATTS_EVTS
BLE_GATTS_EVT_WRITE	components\softdevice\s110\headers\ble_gatts.h	/^  BLE_GATTS_EVT_WRITE = BLE_GATTS_EVT_BASE,       \/**< Write operation performed. @ref ble_gatts_evt_write_t *\/$/;"	e	enum:BLE_GATTS_EVTS
BLE_GATTS_FIX_ATTR_LEN_MAX	components\softdevice\s110\headers\ble_gatts.h	99;"	d
BLE_GATTS_H__	components\softdevice\s110\headers\ble_gatts.h	44;"	d
BLE_GATTS_OP_EXEC_WRITE_REQ_CANCEL	components\softdevice\s110\headers\ble_gatts.h	131;"	d
BLE_GATTS_OP_EXEC_WRITE_REQ_NOW	components\softdevice\s110\headers\ble_gatts.h	132;"	d
BLE_GATTS_OP_INVALID	components\softdevice\s110\headers\ble_gatts.h	126;"	d
BLE_GATTS_OP_PREP_WRITE_REQ	components\softdevice\s110\headers\ble_gatts.h	130;"	d
BLE_GATTS_OP_SIGN_WRITE_CMD	components\softdevice\s110\headers\ble_gatts.h	129;"	d
BLE_GATTS_OP_WRITE_CMD	components\softdevice\s110\headers\ble_gatts.h	128;"	d
BLE_GATTS_OP_WRITE_REQ	components\softdevice\s110\headers\ble_gatts.h	127;"	d
BLE_GATTS_SRVC_TYPE_INVALID	components\softdevice\s110\headers\ble_gatts.h	105;"	d
BLE_GATTS_SRVC_TYPE_PRIMARY	components\softdevice\s110\headers\ble_gatts.h	106;"	d
BLE_GATTS_SRVC_TYPE_SECONDARY	components\softdevice\s110\headers\ble_gatts.h	107;"	d
BLE_GATTS_SVCS	components\softdevice\s110\headers\ble_gatts.h	/^enum BLE_GATTS_SVCS$/;"	g
BLE_GATTS_SYS_ATTR_FLAG_SYS_SRVCS	components\softdevice\s110\headers\ble_gatts.h	152;"	d
BLE_GATTS_SYS_ATTR_FLAG_USR_SRVCS	components\softdevice\s110\headers\ble_gatts.h	153;"	d
BLE_GATTS_VAR_ATTR_LEN_MAX	components\softdevice\s110\headers\ble_gatts.h	100;"	d
BLE_GATTS_VLOC_INVALID	components\softdevice\s110\headers\ble_gatts.h	137;"	d
BLE_GATTS_VLOC_STACK	components\softdevice\s110\headers\ble_gatts.h	138;"	d
BLE_GATTS_VLOC_USER	components\softdevice\s110\headers\ble_gatts.h	139;"	d
SD_BLE_GATTS_CHARACTERISTIC_ADD	components\softdevice\s110\headers\ble_gatts.h	/^  SD_BLE_GATTS_CHARACTERISTIC_ADD,               \/**< Add a characteristic. *\/$/;"	e	enum:BLE_GATTS_SVCS
SD_BLE_GATTS_DESCRIPTOR_ADD	components\softdevice\s110\headers\ble_gatts.h	/^  SD_BLE_GATTS_DESCRIPTOR_ADD,                   \/**< Add a generic attribute. *\/$/;"	e	enum:BLE_GATTS_SVCS
SD_BLE_GATTS_HVX	components\softdevice\s110\headers\ble_gatts.h	/^  SD_BLE_GATTS_HVX,                              \/**< Handle Value Notification or Indication. *\/$/;"	e	enum:BLE_GATTS_SVCS
SD_BLE_GATTS_INCLUDE_ADD	components\softdevice\s110\headers\ble_gatts.h	/^  SD_BLE_GATTS_INCLUDE_ADD,                      \/**< Add an included service. *\/$/;"	e	enum:BLE_GATTS_SVCS
SD_BLE_GATTS_RW_AUTHORIZE_REPLY	components\softdevice\s110\headers\ble_gatts.h	/^  SD_BLE_GATTS_RW_AUTHORIZE_REPLY,               \/**< Reply to an authorization request for a read or write operation on one or more attributes. *\/ $/;"	e	enum:BLE_GATTS_SVCS
SD_BLE_GATTS_SERVICE_ADD	components\softdevice\s110\headers\ble_gatts.h	/^  SD_BLE_GATTS_SERVICE_ADD = BLE_GATTS_SVC_BASE, \/**< Add a service. *\/$/;"	e	enum:BLE_GATTS_SVCS
SD_BLE_GATTS_SERVICE_CHANGED	components\softdevice\s110\headers\ble_gatts.h	/^  SD_BLE_GATTS_SERVICE_CHANGED,                  \/**< Perform a Service Changed Indication to one or more peers. *\/$/;"	e	enum:BLE_GATTS_SVCS
SD_BLE_GATTS_SYS_ATTR_GET	components\softdevice\s110\headers\ble_gatts.h	/^  SD_BLE_GATTS_SYS_ATTR_GET,                     \/**< Retrieve the persistent system attributes. *\/$/;"	e	enum:BLE_GATTS_SVCS
SD_BLE_GATTS_SYS_ATTR_SET	components\softdevice\s110\headers\ble_gatts.h	/^  SD_BLE_GATTS_SYS_ATTR_SET,                     \/**< Set the persistent system attributes for a connection. *\/  $/;"	e	enum:BLE_GATTS_SVCS
SD_BLE_GATTS_VALUE_GET	components\softdevice\s110\headers\ble_gatts.h	/^  SD_BLE_GATTS_VALUE_GET,                        \/**< Get an attribute value. *\/$/;"	e	enum:BLE_GATTS_SVCS
SD_BLE_GATTS_VALUE_SET	components\softdevice\s110\headers\ble_gatts.h	/^  SD_BLE_GATTS_VALUE_SET,                        \/**< Set an attribute value. *\/$/;"	e	enum:BLE_GATTS_SVCS
attr_tab_size	components\softdevice\s110\headers\ble_gatts.h	/^  uint32_t  attr_tab_size;                 \/**< Attribute Table size in bytes. The size must be a multiple of 4. @ref BLE_GATTS_ATTR_TAB_SIZE_DEFAULT is used to set the default size. *\/$/;"	m	struct:__anon535
authorize_request	components\softdevice\s110\headers\ble_gatts.h	/^    ble_gatts_evt_rw_authorize_request_t  authorize_request;  \/**< Read or Write Authorize Request Parameters. *\/$/;"	m	union:__anon555::__anon556
ble_gatts_attr_context_t	components\softdevice\s110\headers\ble_gatts.h	/^} ble_gatts_attr_context_t;$/;"	t	typeref:struct:__anon539
ble_gatts_attr_md_t	components\softdevice\s110\headers\ble_gatts.h	/^} ble_gatts_attr_md_t;$/;"	t	typeref:struct:__anon536
ble_gatts_attr_t	components\softdevice\s110\headers\ble_gatts.h	/^} ble_gatts_attr_t;$/;"	t	typeref:struct:__anon537
ble_gatts_char_handles_t	components\softdevice\s110\headers\ble_gatts.h	/^} ble_gatts_char_handles_t;$/;"	t	typeref:struct:__anon542
ble_gatts_char_md_t	components\softdevice\s110\headers\ble_gatts.h	/^} ble_gatts_char_md_t;$/;"	t	typeref:struct:__anon541
ble_gatts_char_pf_t	components\softdevice\s110\headers\ble_gatts.h	/^} ble_gatts_char_pf_t;$/;"	t	typeref:struct:__anon540
ble_gatts_enable_params_t	components\softdevice\s110\headers\ble_gatts.h	/^} ble_gatts_enable_params_t;$/;"	t	typeref:struct:__anon535
ble_gatts_evt_hvc_t	components\softdevice\s110\headers\ble_gatts.h	/^} ble_gatts_evt_hvc_t;$/;"	t	typeref:struct:__anon553
ble_gatts_evt_read_t	components\softdevice\s110\headers\ble_gatts.h	/^} ble_gatts_evt_read_t;$/;"	t	typeref:struct:__anon549
ble_gatts_evt_rw_authorize_request_t	components\softdevice\s110\headers\ble_gatts.h	/^} ble_gatts_evt_rw_authorize_request_t;$/;"	t	typeref:struct:__anon550
ble_gatts_evt_sys_attr_missing_t	components\softdevice\s110\headers\ble_gatts.h	/^} ble_gatts_evt_sys_attr_missing_t;$/;"	t	typeref:struct:__anon552
ble_gatts_evt_t	components\softdevice\s110\headers\ble_gatts.h	/^} ble_gatts_evt_t;$/;"	t	typeref:struct:__anon555
ble_gatts_evt_timeout_t	components\softdevice\s110\headers\ble_gatts.h	/^} ble_gatts_evt_timeout_t;$/;"	t	typeref:struct:__anon554
ble_gatts_evt_write_t	components\softdevice\s110\headers\ble_gatts.h	/^} ble_gatts_evt_write_t;$/;"	t	typeref:struct:__anon548
ble_gatts_hvx_params_t	components\softdevice\s110\headers\ble_gatts.h	/^} ble_gatts_hvx_params_t;$/;"	t	typeref:struct:__anon543
ble_gatts_read_authorize_params_t	components\softdevice\s110\headers\ble_gatts.h	/^} ble_gatts_read_authorize_params_t;$/;"	t	typeref:struct:__anon544
ble_gatts_rw_authorize_reply_params_t	components\softdevice\s110\headers\ble_gatts.h	/^} ble_gatts_rw_authorize_reply_params_t;$/;"	t	typeref:struct:__anon546
ble_gatts_value_t	components\softdevice\s110\headers\ble_gatts.h	/^} ble_gatts_value_t;$/;"	t	typeref:struct:__anon538
ble_gatts_write_authorize_params_t	components\softdevice\s110\headers\ble_gatts.h	/^} ble_gatts_write_authorize_params_t;$/;"	t	typeref:struct:__anon545
cccd_handle	components\softdevice\s110\headers\ble_gatts.h	/^  uint16_t          cccd_handle;        \/**< Handle to the Client Characteristic Configuration Descriptor, or @ref BLE_GATT_HANDLE_INVALID if not present. *\/$/;"	m	struct:__anon542
char_ext_props	components\softdevice\s110\headers\ble_gatts.h	/^  ble_gatt_char_ext_props_t   char_ext_props;           \/**< Characteristic Extended Properties. *\/$/;"	m	struct:__anon541
char_props	components\softdevice\s110\headers\ble_gatts.h	/^  ble_gatt_char_props_t       char_props;               \/**< Characteristic Properties. *\/$/;"	m	struct:__anon541
char_user_desc_max_size	components\softdevice\s110\headers\ble_gatts.h	/^  uint16_t                    char_user_desc_max_size;  \/**< The maximum size in bytes of the user description descriptor. *\/$/;"	m	struct:__anon541
char_user_desc_size	components\softdevice\s110\headers\ble_gatts.h	/^  uint16_t                    char_user_desc_size;      \/**< The size of the user description, must be smaller or equal to char_user_desc_max_size. *\/ $/;"	m	struct:__anon541
char_uuid	components\softdevice\s110\headers\ble_gatts.h	/^  ble_uuid_t           char_uuid;       \/**< Characteristic UUID if applicable (BLE_UUID_TYPE_UNKNOWN otherwise). *\/$/;"	m	struct:__anon539
conn_handle	components\softdevice\s110\headers\ble_gatts.h	/^  uint16_t conn_handle;                                       \/**< Connection Handle on which the event occurred. *\/$/;"	m	struct:__anon555
context	components\softdevice\s110\headers\ble_gatts.h	/^  ble_gatts_attr_context_t    context;            \/**< Attribute Context. *\/$/;"	m	struct:__anon548
context	components\softdevice\s110\headers\ble_gatts.h	/^  ble_gatts_attr_context_t    context;            \/**< Attribute Context. *\/$/;"	m	struct:__anon549
data	components\softdevice\s110\headers\ble_gatts.h	/^  uint8_t                     data[1];            \/**< Received data, variable length. *\/$/;"	m	struct:__anon548
desc	components\softdevice\s110\headers\ble_gatts.h	/^  uint16_t         desc;        \/**< Namespace description from Bluetooth Assigned Numbers, see @ref BLE_GATT_CPF_NAMESPACES. *\/$/;"	m	struct:__anon540
desc_uuid	components\softdevice\s110\headers\ble_gatts.h	/^  ble_uuid_t           desc_uuid;       \/**< Descriptor UUID if applicable (BLE_UUID_TYPE_UNKNOWN otherwise). *\/$/;"	m	struct:__anon539
exponent	components\softdevice\s110\headers\ble_gatts.h	/^  int8_t           exponent;    \/**< Exponent for integer data types. *\/$/;"	m	struct:__anon540
format	components\softdevice\s110\headers\ble_gatts.h	/^  uint8_t          format;      \/**< Format of the value, see @ref BLE_GATT_CPF_FORMATS. *\/$/;"	m	struct:__anon540
gatt_status	components\softdevice\s110\headers\ble_gatts.h	/^  uint16_t          gatt_status;        \/**< GATT status code for the operation, see @ref BLE_GATT_STATUS_CODES. *\/$/;"	m	struct:__anon544
gatt_status	components\softdevice\s110\headers\ble_gatts.h	/^  uint16_t          gatt_status;        \/**< GATT status code for the operation, see @ref BLE_GATT_STATUS_CODES. *\/$/;"	m	struct:__anon545
handle	components\softdevice\s110\headers\ble_gatts.h	/^  uint16_t                    handle;             \/**< Attribute Handle. *\/$/;"	m	struct:__anon548
handle	components\softdevice\s110\headers\ble_gatts.h	/^  uint16_t                    handle;             \/**< Attribute Handle. *\/$/;"	m	struct:__anon549
handle	components\softdevice\s110\headers\ble_gatts.h	/^  uint16_t          handle;                       \/**< Attribute Handle. *\/$/;"	m	struct:__anon553
handle	components\softdevice\s110\headers\ble_gatts.h	/^  uint16_t          handle;             \/**< Characteristic Value Handle. *\/$/;"	m	struct:__anon543
hint	components\softdevice\s110\headers\ble_gatts.h	/^  uint8_t hint;                                 \/**< Hint (currently unused). *\/$/;"	m	struct:__anon552
hvc	components\softdevice\s110\headers\ble_gatts.h	/^    ble_gatts_evt_hvc_t                   hvc;                \/**< Handle Value Confirmation Event Parameters. *\/$/;"	m	union:__anon555::__anon556
init_len	components\softdevice\s110\headers\ble_gatts.h	/^  uint16_t             init_len;        \/**< Initial attribute value length in bytes. *\/$/;"	m	struct:__anon537
init_offs	components\softdevice\s110\headers\ble_gatts.h	/^  uint16_t             init_offs;       \/**< Initial attribute value offset in bytes. If different from zero, the first init_offs bytes of the attribute value will be left uninitialized. *\/$/;"	m	struct:__anon537
len	components\softdevice\s110\headers\ble_gatts.h	/^  uint16_t                    len;                \/**< Length of the received data. *\/$/;"	m	struct:__anon548
len	components\softdevice\s110\headers\ble_gatts.h	/^  uint16_t          len;                \/**< Length in bytes of the value in p_data pointer, see @ref BLE_GATTS_ATTR_LENS_MAX. *\/$/;"	m	struct:__anon544
len	components\softdevice\s110\headers\ble_gatts.h	/^  uint16_t  len;        \/**< Length in bytes to be written or read. Length in bytes written or read after successful return.*\/$/;"	m	struct:__anon538
max_len	components\softdevice\s110\headers\ble_gatts.h	/^  uint16_t             max_len;         \/**< Maximum attribute value length in bytes, see @ref BLE_GATTS_ATTR_LENS_MAX for maximum values. *\/$/;"	m	struct:__anon537
name_space	components\softdevice\s110\headers\ble_gatts.h	/^  uint8_t          name_space;  \/**< Namespace from Bluetooth Assigned Numbers, see @ref BLE_GATT_CPF_NAMESPACES. *\/$/;"	m	struct:__anon540
offset	components\softdevice\s110\headers\ble_gatts.h	/^  uint16_t                    offset;             \/**< Offset for the read operation. *\/$/;"	m	struct:__anon549
offset	components\softdevice\s110\headers\ble_gatts.h	/^  uint16_t                    offset;             \/**< Offset for the write operation. *\/$/;"	m	struct:__anon548
offset	components\softdevice\s110\headers\ble_gatts.h	/^  uint16_t          offset;             \/**< Offset of the attribute value being updated. *\/$/;"	m	struct:__anon544
offset	components\softdevice\s110\headers\ble_gatts.h	/^  uint16_t          offset;             \/**< Offset within the attribute value. *\/$/;"	m	struct:__anon543
offset	components\softdevice\s110\headers\ble_gatts.h	/^  uint16_t  offset;     \/**< Attribute value offset. *\/$/;"	m	struct:__anon538
op	components\softdevice\s110\headers\ble_gatts.h	/^  uint8_t                     op;                 \/**< Type of write operation, see @ref BLE_GATTS_OPS. *\/$/;"	m	struct:__anon548
p_attr_md	components\softdevice\s110\headers\ble_gatts.h	/^  ble_gatts_attr_md_t *p_attr_md;       \/**< Pointer to the attribute metadata structure. *\/$/;"	m	struct:__anon537
p_cccd_md	components\softdevice\s110\headers\ble_gatts.h	/^  ble_gatts_attr_md_t*        p_cccd_md;                \/**< Attribute metadata for the Client Characteristic Configuration Descriptor, or NULL for default values. *\/$/;"	m	struct:__anon541
p_char_pf	components\softdevice\s110\headers\ble_gatts.h	/^  ble_gatts_char_pf_t*        p_char_pf;                \/**< Pointer to a presentation format structure or NULL if the CPF descriptor is not required. *\/$/;"	m	struct:__anon541
p_char_user_desc	components\softdevice\s110\headers\ble_gatts.h	/^  uint8_t                    *p_char_user_desc;         \/**< Pointer to a UTF-8 encoded string (non-NULL terminated), NULL if the descriptor is not required. *\/$/;"	m	struct:__anon541
p_data	components\softdevice\s110\headers\ble_gatts.h	/^  uint8_t          *p_data;             \/**< Actual data content, use NULL to use the current attribute value. *\/$/;"	m	struct:__anon543
p_data	components\softdevice\s110\headers\ble_gatts.h	/^  uint8_t          *p_data;             \/**< Pointer to new value used to update the attribute value. *\/$/;"	m	struct:__anon544
p_len	components\softdevice\s110\headers\ble_gatts.h	/^  uint16_t         *p_len;              \/**< Length in bytes to be written, length in bytes written after successful return. *\/$/;"	m	struct:__anon543
p_sccd_md	components\softdevice\s110\headers\ble_gatts.h	/^  ble_gatts_attr_md_t*        p_sccd_md;                \/**< Attribute metadata for the Server Characteristic Configuration Descriptor, or NULL for default values. *\/$/;"	m	struct:__anon541
p_user_desc_md	components\softdevice\s110\headers\ble_gatts.h	/^  ble_gatts_attr_md_t*        p_user_desc_md;           \/**< Attribute metadata for the User Description descriptor, or NULL for default values. *\/$/;"	m	struct:__anon541
p_uuid	components\softdevice\s110\headers\ble_gatts.h	/^  ble_uuid_t          *p_uuid;          \/**< Pointer to the attribute UUID. *\/$/;"	m	struct:__anon537
p_value	components\softdevice\s110\headers\ble_gatts.h	/^  uint8_t   *p_value;   \/**< Pointer to where value is stored or will be stored. $/;"	m	struct:__anon538
p_value	components\softdevice\s110\headers\ble_gatts.h	/^  uint8_t*             p_value;         \/**< Pointer to the attribute data. Please note that if the @ref BLE_GATTS_VLOC_USER value location is selected in the attribute metadata, this will have to point to a buffer$/;"	m	struct:__anon537
params	components\softdevice\s110\headers\ble_gatts.h	/^  } params;                                                   \/**< Event Parameters. *\/$/;"	m	struct:__anon555	typeref:union:__anon555::__anon556
params	components\softdevice\s110\headers\ble_gatts.h	/^  } params;                                     \/**< Reply Parameters. *\/$/;"	m	struct:__anon546	typeref:union:__anon546::__anon547
rd_auth	components\softdevice\s110\headers\ble_gatts.h	/^  uint8_t                 rd_auth    :1;   \/**< Read authorization and value will be requested from the application on every read operation. *\/ $/;"	m	struct:__anon536
read	components\softdevice\s110\headers\ble_gatts.h	/^    ble_gatts_evt_read_t      read;             \/**< Attribute Read Parameters. *\/$/;"	m	union:__anon550::__anon551
read	components\softdevice\s110\headers\ble_gatts.h	/^    ble_gatts_read_authorize_params_t   read;   \/**< Read authorization parameters. *\/$/;"	m	union:__anon546::__anon547
read_perm	components\softdevice\s110\headers\ble_gatts.h	/^  ble_gap_conn_sec_mode_t read_perm;       \/**< Read permissions. *\/$/;"	m	struct:__anon536
request	components\softdevice\s110\headers\ble_gatts.h	/^  } request;                                    \/**< Request Parameters. *\/$/;"	m	struct:__anon550	typeref:union:__anon550::__anon551
sccd_handle	components\softdevice\s110\headers\ble_gatts.h	/^  uint16_t          sccd_handle;        \/**< Handle to the Server Characteristic Configuration Descriptor, or @ref BLE_GATT_HANDLE_INVALID if not present. *\/$/;"	m	struct:__anon542
service_changed	components\softdevice\s110\headers\ble_gatts.h	/^  uint8_t   service_changed:1;             \/**< Include the Service Changed characteristic in the Attribute Table. *\/$/;"	m	struct:__anon535
src	components\softdevice\s110\headers\ble_gatts.h	/^  uint8_t          src;                       \/**< Timeout source, see @ref BLE_GATT_TIMEOUT_SOURCES. *\/$/;"	m	struct:__anon554
srvc_handle	components\softdevice\s110\headers\ble_gatts.h	/^  uint16_t             srvc_handle;     \/**< Service Handle. *\/$/;"	m	struct:__anon539
srvc_uuid	components\softdevice\s110\headers\ble_gatts.h	/^  ble_uuid_t           srvc_uuid;       \/**< Service UUID. *\/$/;"	m	struct:__anon539
sys_attr_missing	components\softdevice\s110\headers\ble_gatts.h	/^    ble_gatts_evt_sys_attr_missing_t      sys_attr_missing;   \/**< System attributes missing. *\/$/;"	m	union:__anon555::__anon556
timeout	components\softdevice\s110\headers\ble_gatts.h	/^    ble_gatts_evt_timeout_t               timeout;            \/**< Timeout Event. *\/$/;"	m	union:__anon555::__anon556
type	components\softdevice\s110\headers\ble_gatts.h	/^  uint8_t                               type;   \/**< Type of authorize operation, see @ref BLE_GATTS_AUTHORIZE_TYPES. *\/$/;"	m	struct:__anon546
type	components\softdevice\s110\headers\ble_gatts.h	/^  uint8_t                     type;             \/**< Type of authorize operation, see @ref BLE_GATTS_AUTHORIZE_TYPES. *\/$/;"	m	struct:__anon550
type	components\softdevice\s110\headers\ble_gatts.h	/^  uint8_t              type;            \/**< Attribute Type, see @ref BLE_GATTS_ATTR_TYPES. *\/$/;"	m	struct:__anon539
type	components\softdevice\s110\headers\ble_gatts.h	/^  uint8_t           type;               \/**< Indication or Notification, see @ref BLE_GATT_HVX_TYPES. *\/$/;"	m	struct:__anon543
unit	components\softdevice\s110\headers\ble_gatts.h	/^  uint16_t         unit;        \/**< Unit from Bluetooth Assigned Numbers. *\/$/;"	m	struct:__anon540
update	components\softdevice\s110\headers\ble_gatts.h	/^  uint8_t           update : 1;         \/**< If set, data supplied in p_data will be used in the ATT response. *\/$/;"	m	struct:__anon544
user_desc_handle	components\softdevice\s110\headers\ble_gatts.h	/^  uint16_t          user_desc_handle;   \/**< Handle to the User Description descriptor, or @ref BLE_GATT_HANDLE_INVALID if not present. *\/$/;"	m	struct:__anon542
value_handle	components\softdevice\s110\headers\ble_gatts.h	/^  uint16_t             value_handle;    \/**< Characteristic Value Handle if applicable (BLE_GATT_HANDLE_INVALID otherwise). *\/$/;"	m	struct:__anon539
value_handle	components\softdevice\s110\headers\ble_gatts.h	/^  uint16_t          value_handle;       \/**< Handle to the characteristic value. *\/$/;"	m	struct:__anon542
vlen	components\softdevice\s110\headers\ble_gatts.h	/^  uint8_t                 vlen       :1;   \/**< Variable length attribute. *\/$/;"	m	struct:__anon536
vloc	components\softdevice\s110\headers\ble_gatts.h	/^  uint8_t                 vloc       :2;   \/**< Value location, see @ref BLE_GATTS_VLOCS.*\/$/;"	m	struct:__anon536
wr_auth	components\softdevice\s110\headers\ble_gatts.h	/^  uint8_t                 wr_auth    :1;   \/**< Write authorization will be requested from the application on every Write Request operation (but not Write Command). *\/$/;"	m	struct:__anon536
write	components\softdevice\s110\headers\ble_gatts.h	/^    ble_gatts_evt_write_t                 write;              \/**< Write Event Parameters. *\/$/;"	m	union:__anon555::__anon556
write	components\softdevice\s110\headers\ble_gatts.h	/^    ble_gatts_evt_write_t     write;            \/**< Attribute Write Parameters. *\/$/;"	m	union:__anon550::__anon551
write	components\softdevice\s110\headers\ble_gatts.h	/^    ble_gatts_write_authorize_params_t  write;  \/**< Write authorization parameters. *\/$/;"	m	union:__anon546::__anon547
write_perm	components\softdevice\s110\headers\ble_gatts.h	/^  ble_gap_conn_sec_mode_t write_perm;      \/**< Write permissions. *\/$/;"	m	struct:__anon536
BLE_HCI_AUTHENTICATION_FAILURE	components\softdevice\s110\headers\ble_hci.h	55;"	d
BLE_HCI_CONNECTION_TIMEOUT	components\softdevice\s110\headers\ble_hci.h	58;"	d
BLE_HCI_CONN_FAILED_TO_BE_ESTABLISHED	components\softdevice\s110\headers\ble_hci.h	118;"	d
BLE_HCI_CONN_INTERVAL_UNACCEPTABLE	components\softdevice\s110\headers\ble_hci.h	115;"	d
BLE_HCI_CONN_TERMINATED_DUE_TO_MIC_FAILURE	components\softdevice\s110\headers\ble_hci.h	117;"	d
BLE_HCI_CONTROLLER_BUSY	components\softdevice\s110\headers\ble_hci.h	114;"	d
BLE_HCI_DIFFERENT_TRANSACTION_COLLISION	components\softdevice\s110\headers\ble_hci.h	97;"	d
BLE_HCI_DIRECTED_ADVERTISER_TIMEOUT	components\softdevice\s110\headers\ble_hci.h	116;"	d
BLE_HCI_H__	components\softdevice\s110\headers\ble_hci.h	44;"	d
BLE_HCI_INSTANT_PASSED	components\softdevice\s110\headers\ble_hci.h	95;"	d
BLE_HCI_LOCAL_HOST_TERMINATED_CONNECTION	components\softdevice\s110\headers\ble_hci.h	72;"	d
BLE_HCI_MEMORY_CAPACITY_EXCEEDED	components\softdevice\s110\headers\ble_hci.h	57;"	d
BLE_HCI_PAIRING_WITH_UNIT_KEY_UNSUPPORTED	components\softdevice\s110\headers\ble_hci.h	96;"	d
BLE_HCI_REMOTE_DEV_TERMINATION_DUE_TO_LOW_RESOURCES	components\softdevice\s110\headers\ble_hci.h	70;"	d
BLE_HCI_REMOTE_DEV_TERMINATION_DUE_TO_POWER_OFF	components\softdevice\s110\headers\ble_hci.h	71;"	d
BLE_HCI_REMOTE_USER_TERMINATED_CONNECTION	components\softdevice\s110\headers\ble_hci.h	69;"	d
BLE_HCI_STATUS_CODE_COMMAND_DISALLOWED	components\softdevice\s110\headers\ble_hci.h	62;"	d
BLE_HCI_STATUS_CODE_INVALID_BTLE_COMMAND_PARAMETERS	components\softdevice\s110\headers\ble_hci.h	68;"	d
BLE_HCI_STATUS_CODE_INVALID_LMP_PARAMETERS	components\softdevice\s110\headers\ble_hci.h	83;"	d
BLE_HCI_STATUS_CODE_LMP_PDU_NOT_ALLOWED	components\softdevice\s110\headers\ble_hci.h	90;"	d
BLE_HCI_STATUS_CODE_LMP_RESPONSE_TIMEOUT	components\softdevice\s110\headers\ble_hci.h	88;"	d
BLE_HCI_STATUS_CODE_PIN_OR_KEY_MISSING	components\softdevice\s110\headers\ble_hci.h	56;"	d
BLE_HCI_STATUS_CODE_SUCCESS	components\softdevice\s110\headers\ble_hci.h	49;"	d
BLE_HCI_STATUS_CODE_UNKNOWN_BTLE_COMMAND	components\softdevice\s110\headers\ble_hci.h	50;"	d
BLE_HCI_STATUS_CODE_UNKNOWN_CONNECTION_IDENTIFIER	components\softdevice\s110\headers\ble_hci.h	51;"	d
BLE_HCI_STATUS_CODE_UNSPECIFIED_ERROR	components\softdevice\s110\headers\ble_hci.h	84;"	d
BLE_HCI_UNSUPPORTED_REMOTE_FEATURE	components\softdevice\s110\headers\ble_hci.h	78;"	d
BLE_ERROR_L2CAP_CID_IN_USE	components\softdevice\s110\headers\ble_l2cap.h	75;"	d
BLE_L2CAP_CID_DYN_BASE	components\softdevice\s110\headers\ble_l2cap.h	85;"	d
BLE_L2CAP_CID_DYN_MAX	components\softdevice\s110\headers\ble_l2cap.h	88;"	d
BLE_L2CAP_CID_INVALID	components\softdevice\s110\headers\ble_l2cap.h	82;"	d
BLE_L2CAP_EVTS	components\softdevice\s110\headers\ble_l2cap.h	/^enum BLE_L2CAP_EVTS $/;"	g
BLE_L2CAP_EVT_RX	components\softdevice\s110\headers\ble_l2cap.h	/^  BLE_L2CAP_EVT_RX  = BLE_L2CAP_EVT_BASE          \/**< L2CAP packet received. *\/$/;"	e	enum:BLE_L2CAP_EVTS
BLE_L2CAP_H__	components\softdevice\s110\headers\ble_l2cap.h	44;"	d
BLE_L2CAP_MTU_DEF	components\softdevice\s110\headers\ble_l2cap.h	79;"	d
BLE_L2CAP_SVCS	components\softdevice\s110\headers\ble_l2cap.h	/^enum BLE_L2CAP_SVCS $/;"	g
SD_BLE_L2CAP_CID_REGISTER	components\softdevice\s110\headers\ble_l2cap.h	/^  SD_BLE_L2CAP_CID_REGISTER = BLE_L2CAP_SVC_BASE,  \/**< Register a CID. *\/$/;"	e	enum:BLE_L2CAP_SVCS
SD_BLE_L2CAP_CID_UNREGISTER	components\softdevice\s110\headers\ble_l2cap.h	/^  SD_BLE_L2CAP_CID_UNREGISTER,                     \/**< Unregister a CID. *\/$/;"	e	enum:BLE_L2CAP_SVCS
SD_BLE_L2CAP_TX	components\softdevice\s110\headers\ble_l2cap.h	/^  SD_BLE_L2CAP_TX                                  \/**< Transmit a packet. *\/$/;"	e	enum:BLE_L2CAP_SVCS
ble_l2cap_evt_rx_t	components\softdevice\s110\headers\ble_l2cap.h	/^} ble_l2cap_evt_rx_t;$/;"	t	typeref:struct:__anon558
ble_l2cap_evt_t	components\softdevice\s110\headers\ble_l2cap.h	/^} ble_l2cap_evt_t;$/;"	t	typeref:struct:__anon559
ble_l2cap_header_t	components\softdevice\s110\headers\ble_l2cap.h	/^} ble_l2cap_header_t;$/;"	t	typeref:struct:__anon557
cid	components\softdevice\s110\headers\ble_l2cap.h	/^  uint16_t   cid;                                 \/**< Channel ID on which packet is transmitted. *\/$/;"	m	struct:__anon557
conn_handle	components\softdevice\s110\headers\ble_l2cap.h	/^  uint16_t conn_handle;                           \/**< Connection Handle on which event occured. *\/$/;"	m	struct:__anon559
data	components\softdevice\s110\headers\ble_l2cap.h	/^  uint8_t    data[1];                             \/**< Packet data, variable length. *\/$/;"	m	struct:__anon558
header	components\softdevice\s110\headers\ble_l2cap.h	/^  ble_l2cap_header_t header;                      \/**< L2CAP packet header. *\/$/;"	m	struct:__anon558
len	components\softdevice\s110\headers\ble_l2cap.h	/^  uint16_t   len;                                 \/**< Length of valid info in data member. *\/$/;"	m	struct:__anon557
params	components\softdevice\s110\headers\ble_l2cap.h	/^  } params;                                       \/**< Event Parameters. *\/$/;"	m	struct:__anon559	typeref:union:__anon559::__anon560
rx	components\softdevice\s110\headers\ble_l2cap.h	/^    ble_l2cap_evt_rx_t rx;                        \/**< RX Event parameters. *\/$/;"	m	union:__anon559::__anon560
BLE_EVT_BASE	components\softdevice\s110\headers\ble_ranges.h	81;"	d
BLE_EVT_INVALID	components\softdevice\s110\headers\ble_ranges.h	79;"	d
BLE_EVT_LAST	components\softdevice\s110\headers\ble_ranges.h	82;"	d
BLE_GAP_EVT_BASE	components\softdevice\s110\headers\ble_ranges.h	84;"	d
BLE_GAP_EVT_LAST	components\softdevice\s110\headers\ble_ranges.h	85;"	d
BLE_GAP_OPT_BASE	components\softdevice\s110\headers\ble_ranges.h	102;"	d
BLE_GAP_OPT_LAST	components\softdevice\s110\headers\ble_ranges.h	103;"	d
BLE_GAP_SVC_BASE	components\softdevice\s110\headers\ble_ranges.h	66;"	d
BLE_GAP_SVC_LAST	components\softdevice\s110\headers\ble_ranges.h	67;"	d
BLE_GATTC_EVT_BASE	components\softdevice\s110\headers\ble_ranges.h	87;"	d
BLE_GATTC_EVT_LAST	components\softdevice\s110\headers\ble_ranges.h	88;"	d
BLE_GATTC_OPT_BASE	components\softdevice\s110\headers\ble_ranges.h	105;"	d
BLE_GATTC_OPT_LAST	components\softdevice\s110\headers\ble_ranges.h	106;"	d
BLE_GATTC_SVC_BASE	components\softdevice\s110\headers\ble_ranges.h	69;"	d
BLE_GATTC_SVC_LAST	components\softdevice\s110\headers\ble_ranges.h	70;"	d
BLE_GATTS_EVT_BASE	components\softdevice\s110\headers\ble_ranges.h	90;"	d
BLE_GATTS_EVT_LAST	components\softdevice\s110\headers\ble_ranges.h	91;"	d
BLE_GATTS_OPT_BASE	components\softdevice\s110\headers\ble_ranges.h	108;"	d
BLE_GATTS_OPT_LAST	components\softdevice\s110\headers\ble_ranges.h	109;"	d
BLE_GATTS_SVC_BASE	components\softdevice\s110\headers\ble_ranges.h	72;"	d
BLE_GATTS_SVC_LAST	components\softdevice\s110\headers\ble_ranges.h	73;"	d
BLE_L2CAP_EVT_BASE	components\softdevice\s110\headers\ble_ranges.h	93;"	d
BLE_L2CAP_EVT_LAST	components\softdevice\s110\headers\ble_ranges.h	94;"	d
BLE_L2CAP_OPT_BASE	components\softdevice\s110\headers\ble_ranges.h	111;"	d
BLE_L2CAP_OPT_LAST	components\softdevice\s110\headers\ble_ranges.h	112;"	d
BLE_L2CAP_SVC_BASE	components\softdevice\s110\headers\ble_ranges.h	75;"	d
BLE_L2CAP_SVC_LAST	components\softdevice\s110\headers\ble_ranges.h	76;"	d
BLE_OPT_BASE	components\softdevice\s110\headers\ble_ranges.h	99;"	d
BLE_OPT_INVALID	components\softdevice\s110\headers\ble_ranges.h	97;"	d
BLE_OPT_LAST	components\softdevice\s110\headers\ble_ranges.h	100;"	d
BLE_RANGES_H__	components\softdevice\s110\headers\ble_ranges.h	58;"	d
BLE_RESERVED_SVC_BASE	components\softdevice\s110\headers\ble_ranges.h	63;"	d
BLE_RESERVED_SVC_LAST	components\softdevice\s110\headers\ble_ranges.h	64;"	d
BLE_SVC_BASE	components\softdevice\s110\headers\ble_ranges.h	60;"	d
BLE_SVC_LAST	components\softdevice\s110\headers\ble_ranges.h	61;"	d
BLE_APPEARANCE_BLOOD_PRESSURE_ARM	components\softdevice\s110\headers\ble_types.h	117;"	d
BLE_APPEARANCE_BLOOD_PRESSURE_WRIST	components\softdevice\s110\headers\ble_types.h	118;"	d
BLE_APPEARANCE_CYCLING_CADENCE_SENSOR	components\softdevice\s110\headers\ble_types.h	136;"	d
BLE_APPEARANCE_CYCLING_CYCLING_COMPUTER	components\softdevice\s110\headers\ble_types.h	134;"	d
BLE_APPEARANCE_CYCLING_POWER_SENSOR	components\softdevice\s110\headers\ble_types.h	137;"	d
BLE_APPEARANCE_CYCLING_SPEED_CADENCE_SENSOR	components\softdevice\s110\headers\ble_types.h	138;"	d
BLE_APPEARANCE_CYCLING_SPEED_SENSOR	components\softdevice\s110\headers\ble_types.h	135;"	d
BLE_APPEARANCE_GENERIC_BARCODE_SCANNER	components\softdevice\s110\headers\ble_types.h	111;"	d
BLE_APPEARANCE_GENERIC_BLOOD_PRESSURE	components\softdevice\s110\headers\ble_types.h	116;"	d
BLE_APPEARANCE_GENERIC_CLOCK	components\softdevice\s110\headers\ble_types.h	104;"	d
BLE_APPEARANCE_GENERIC_COMPUTER	components\softdevice\s110\headers\ble_types.h	101;"	d
BLE_APPEARANCE_GENERIC_CYCLING	components\softdevice\s110\headers\ble_types.h	133;"	d
BLE_APPEARANCE_GENERIC_DISPLAY	components\softdevice\s110\headers\ble_types.h	105;"	d
BLE_APPEARANCE_GENERIC_EYE_GLASSES	components\softdevice\s110\headers\ble_types.h	107;"	d
BLE_APPEARANCE_GENERIC_GLUCOSE_METER	components\softdevice\s110\headers\ble_types.h	128;"	d
BLE_APPEARANCE_GENERIC_HEART_RATE_SENSOR	components\softdevice\s110\headers\ble_types.h	114;"	d
BLE_APPEARANCE_GENERIC_HID	components\softdevice\s110\headers\ble_types.h	119;"	d
BLE_APPEARANCE_GENERIC_KEYRING	components\softdevice\s110\headers\ble_types.h	109;"	d
BLE_APPEARANCE_GENERIC_MEDIA_PLAYER	components\softdevice\s110\headers\ble_types.h	110;"	d
BLE_APPEARANCE_GENERIC_OUTDOOR_SPORTS_ACT	components\softdevice\s110\headers\ble_types.h	143;"	d
BLE_APPEARANCE_GENERIC_PHONE	components\softdevice\s110\headers\ble_types.h	100;"	d
BLE_APPEARANCE_GENERIC_PULSE_OXIMETER	components\softdevice\s110\headers\ble_types.h	139;"	d
BLE_APPEARANCE_GENERIC_REMOTE_CONTROL	components\softdevice\s110\headers\ble_types.h	106;"	d
BLE_APPEARANCE_GENERIC_RUNNING_WALKING_SENSOR	components\softdevice\s110\headers\ble_types.h	129;"	d
BLE_APPEARANCE_GENERIC_TAG	components\softdevice\s110\headers\ble_types.h	108;"	d
BLE_APPEARANCE_GENERIC_THERMOMETER	components\softdevice\s110\headers\ble_types.h	112;"	d
BLE_APPEARANCE_GENERIC_WATCH	components\softdevice\s110\headers\ble_types.h	102;"	d
BLE_APPEARANCE_GENERIC_WEIGHT_SCALE	components\softdevice\s110\headers\ble_types.h	142;"	d
BLE_APPEARANCE_HEART_RATE_SENSOR_HEART_RATE_BELT	components\softdevice\s110\headers\ble_types.h	115;"	d
BLE_APPEARANCE_HID_BARCODE	components\softdevice\s110\headers\ble_types.h	127;"	d
BLE_APPEARANCE_HID_CARD_READER	components\softdevice\s110\headers\ble_types.h	125;"	d
BLE_APPEARANCE_HID_DIGITAL_PEN	components\softdevice\s110\headers\ble_types.h	126;"	d
BLE_APPEARANCE_HID_DIGITIZERSUBTYPE	components\softdevice\s110\headers\ble_types.h	124;"	d
BLE_APPEARANCE_HID_GAMEPAD	components\softdevice\s110\headers\ble_types.h	123;"	d
BLE_APPEARANCE_HID_JOYSTICK	components\softdevice\s110\headers\ble_types.h	122;"	d
BLE_APPEARANCE_HID_KEYBOARD	components\softdevice\s110\headers\ble_types.h	120;"	d
BLE_APPEARANCE_HID_MOUSE	components\softdevice\s110\headers\ble_types.h	121;"	d
BLE_APPEARANCE_OUTDOOR_SPORTS_ACT_LOC_AND_NAV_DISP	components\softdevice\s110\headers\ble_types.h	145;"	d
BLE_APPEARANCE_OUTDOOR_SPORTS_ACT_LOC_AND_NAV_POD	components\softdevice\s110\headers\ble_types.h	147;"	d
BLE_APPEARANCE_OUTDOOR_SPORTS_ACT_LOC_DISP	components\softdevice\s110\headers\ble_types.h	144;"	d
BLE_APPEARANCE_OUTDOOR_SPORTS_ACT_LOC_POD	components\softdevice\s110\headers\ble_types.h	146;"	d
BLE_APPEARANCE_PULSE_OXIMETER_FINGERTIP	components\softdevice\s110\headers\ble_types.h	140;"	d
BLE_APPEARANCE_PULSE_OXIMETER_WRIST_WORN	components\softdevice\s110\headers\ble_types.h	141;"	d
BLE_APPEARANCE_RUNNING_WALKING_SENSOR_IN_SHOE	components\softdevice\s110\headers\ble_types.h	130;"	d
BLE_APPEARANCE_RUNNING_WALKING_SENSOR_ON_HIP	components\softdevice\s110\headers\ble_types.h	132;"	d
BLE_APPEARANCE_RUNNING_WALKING_SENSOR_ON_SHOE	components\softdevice\s110\headers\ble_types.h	131;"	d
BLE_APPEARANCE_THERMOMETER_EAR	components\softdevice\s110\headers\ble_types.h	113;"	d
BLE_APPEARANCE_UNKNOWN	components\softdevice\s110\headers\ble_types.h	99;"	d
BLE_APPEARANCE_WATCH_SPORTS_WATCH	components\softdevice\s110\headers\ble_types.h	103;"	d
BLE_CONN_HANDLE_ALL	components\softdevice\s110\headers\ble_types.h	57;"	d
BLE_CONN_HANDLE_INVALID	components\softdevice\s110\headers\ble_types.h	56;"	d
BLE_TYPES_H__	components\softdevice\s110\headers\ble_types.h	47;"	d
BLE_UUID_BLE_ASSIGN	components\softdevice\s110\headers\ble_types.h	151;"	d
BLE_UUID_CHARACTERISTIC	components\softdevice\s110\headers\ble_types.h	68;"	d
BLE_UUID_COPY_INST	components\softdevice\s110\headers\ble_types.h	161;"	d
BLE_UUID_COPY_PTR	components\softdevice\s110\headers\ble_types.h	156;"	d
BLE_UUID_DESCRIPTOR_CHAR_AGGREGATE_FORMAT	components\softdevice\s110\headers\ble_types.h	74;"	d
BLE_UUID_DESCRIPTOR_CHAR_EXT_PROP	components\softdevice\s110\headers\ble_types.h	69;"	d
BLE_UUID_DESCRIPTOR_CHAR_PRESENTATION_FORMAT	components\softdevice\s110\headers\ble_types.h	73;"	d
BLE_UUID_DESCRIPTOR_CHAR_USER_DESC	components\softdevice\s110\headers\ble_types.h	70;"	d
BLE_UUID_DESCRIPTOR_CLIENT_CHAR_CONFIG	components\softdevice\s110\headers\ble_types.h	71;"	d
BLE_UUID_DESCRIPTOR_SERVER_CHAR_CONFIG	components\softdevice\s110\headers\ble_types.h	72;"	d
BLE_UUID_EQ	components\softdevice\s110\headers\ble_types.h	166;"	d
BLE_UUID_GAP	components\softdevice\s110\headers\ble_types.h	79;"	d
BLE_UUID_GAP_CHARACTERISTIC_APPEARANCE	components\softdevice\s110\headers\ble_types.h	81;"	d
BLE_UUID_GAP_CHARACTERISTIC_DEVICE_NAME	components\softdevice\s110\headers\ble_types.h	80;"	d
BLE_UUID_GAP_CHARACTERISTIC_PPCP	components\softdevice\s110\headers\ble_types.h	84;"	d
BLE_UUID_GAP_CHARACTERISTIC_PPF	components\softdevice\s110\headers\ble_types.h	82;"	d
BLE_UUID_GAP_CHARACTERISTIC_RECONN_ADDR	components\softdevice\s110\headers\ble_types.h	83;"	d
BLE_UUID_GATT	components\softdevice\s110\headers\ble_types.h	76;"	d
BLE_UUID_GATT_CHARACTERISTIC_SERVICE_CHANGED	components\softdevice\s110\headers\ble_types.h	77;"	d
BLE_UUID_NEQ	components\softdevice\s110\headers\ble_types.h	170;"	d
BLE_UUID_SERVICE_INCLUDE	components\softdevice\s110\headers\ble_types.h	67;"	d
BLE_UUID_SERVICE_PRIMARY	components\softdevice\s110\headers\ble_types.h	65;"	d
BLE_UUID_SERVICE_SECONDARY	components\softdevice\s110\headers\ble_types.h	66;"	d
BLE_UUID_TYPE_BLE	components\softdevice\s110\headers\ble_types.h	91;"	d
BLE_UUID_TYPE_UNKNOWN	components\softdevice\s110\headers\ble_types.h	90;"	d
BLE_UUID_TYPE_VENDOR_BEGIN	components\softdevice\s110\headers\ble_types.h	92;"	d
BLE_UUID_UNKNOWN	components\softdevice\s110\headers\ble_types.h	64;"	d
ble_uuid128_t	components\softdevice\s110\headers\ble_types.h	/^} ble_uuid128_t;$/;"	t	typeref:struct:__anon561
ble_uuid_t	components\softdevice\s110\headers\ble_types.h	/^} ble_uuid_t;$/;"	t	typeref:struct:__anon562
type	components\softdevice\s110\headers\ble_types.h	/^    uint8_t     type; \/**< UUID type, see @ref BLE_UUID_TYPES. If type is @ref BLE_UUID_TYPE_UNKNOWN, the value of uuid is undefined. *\/$/;"	m	struct:__anon562
uuid	components\softdevice\s110\headers\ble_types.h	/^    uint16_t    uuid; \/**< 16-bit UUID value or octets 12-13 of 128-bit UUID. *\/$/;"	m	struct:__anon562
uuid128	components\softdevice\s110\headers\ble_types.h	/^    unsigned char uuid128[16]; \/**< Little-Endian UUID bytes. *\/$/;"	m	struct:__anon561
NRF_ERROR_BASE_NUM	components\softdevice\s110\headers\nrf_error.h	49;"	d
NRF_ERROR_BUSY	components\softdevice\s110\headers\nrf_error.h	72;"	d
NRF_ERROR_DATA_SIZE	components\softdevice\s110\headers\nrf_error.h	67;"	d
NRF_ERROR_FORBIDDEN	components\softdevice\s110\headers\nrf_error.h	70;"	d
NRF_ERROR_H__	components\softdevice\s110\headers\nrf_error.h	45;"	d
NRF_ERROR_INTERNAL	components\softdevice\s110\headers\nrf_error.h	58;"	d
NRF_ERROR_INVALID_ADDR	components\softdevice\s110\headers\nrf_error.h	71;"	d
NRF_ERROR_INVALID_DATA	components\softdevice\s110\headers\nrf_error.h	66;"	d
NRF_ERROR_INVALID_FLAGS	components\softdevice\s110\headers\nrf_error.h	65;"	d
NRF_ERROR_INVALID_LENGTH	components\softdevice\s110\headers\nrf_error.h	64;"	d
NRF_ERROR_INVALID_PARAM	components\softdevice\s110\headers\nrf_error.h	62;"	d
NRF_ERROR_INVALID_STATE	components\softdevice\s110\headers\nrf_error.h	63;"	d
NRF_ERROR_NOT_FOUND	components\softdevice\s110\headers\nrf_error.h	60;"	d
NRF_ERROR_NOT_SUPPORTED	components\softdevice\s110\headers\nrf_error.h	61;"	d
NRF_ERROR_NO_MEM	components\softdevice\s110\headers\nrf_error.h	59;"	d
NRF_ERROR_NULL	components\softdevice\s110\headers\nrf_error.h	69;"	d
NRF_ERROR_SDM_BASE_NUM	components\softdevice\s110\headers\nrf_error.h	50;"	d
NRF_ERROR_SOC_BASE_NUM	components\softdevice\s110\headers\nrf_error.h	51;"	d
NRF_ERROR_SOFTDEVICE_NOT_ENABLED	components\softdevice\s110\headers\nrf_error.h	57;"	d
NRF_ERROR_STK_BASE_NUM	components\softdevice\s110\headers\nrf_error.h	52;"	d
NRF_ERROR_SVC_HANDLER_MISSING	components\softdevice\s110\headers\nrf_error.h	56;"	d
NRF_ERROR_TIMEOUT	components\softdevice\s110\headers\nrf_error.h	68;"	d
NRF_SUCCESS	components\softdevice\s110\headers\nrf_error.h	55;"	d
NRF_ERROR_SDM_H__	components\softdevice\s110\headers\nrf_error_sdm.h	47;"	d
NRF_ERROR_SDM_INCORRECT_CLENR0	components\softdevice\s110\headers\nrf_error_sdm.h	53;"	d
NRF_ERROR_SDM_INCORRECT_INTERRUPT_CONFIGURATION	components\softdevice\s110\headers\nrf_error_sdm.h	52;"	d
NRF_ERROR_SDM_LFCLK_SOURCE_UNKNOWN	components\softdevice\s110\headers\nrf_error_sdm.h	51;"	d
NRF_ERROR_SOC_H__	components\softdevice\s110\headers\nrf_error_soc.h	48;"	d
NRF_ERROR_SOC_MUTEX_ALREADY_TAKEN	components\softdevice\s110\headers\nrf_error_soc.h	53;"	d
NRF_ERROR_SOC_NVIC_INTERRUPT_NOT_AVAILABLE	components\softdevice\s110\headers\nrf_error_soc.h	56;"	d
NRF_ERROR_SOC_NVIC_INTERRUPT_PRIORITY_NOT_ALLOWED	components\softdevice\s110\headers\nrf_error_soc.h	57;"	d
NRF_ERROR_SOC_NVIC_SHOULD_NOT_RETURN	components\softdevice\s110\headers\nrf_error_soc.h	58;"	d
NRF_ERROR_SOC_POWER_MODE_UNKNOWN	components\softdevice\s110\headers\nrf_error_soc.h	61;"	d
NRF_ERROR_SOC_POWER_OFF_SHOULD_NOT_RETURN	components\softdevice\s110\headers\nrf_error_soc.h	63;"	d
NRF_ERROR_SOC_POWER_POF_THRESHOLD_UNKNOWN	components\softdevice\s110\headers\nrf_error_soc.h	62;"	d
NRF_ERROR_SOC_PPI_INVALID_CHANNEL	components\softdevice\s110\headers\nrf_error_soc.h	69;"	d
NRF_ERROR_SOC_PPI_INVALID_GROUP	components\softdevice\s110\headers\nrf_error_soc.h	70;"	d
NRF_ERROR_SOC_RAND_NOT_ENOUGH_VALUES	components\softdevice\s110\headers\nrf_error_soc.h	66;"	d
MBR_SVC_BASE	components\softdevice\s110\headers\nrf_mbr.h	56;"	d
NRF_MBR_COMMANDS	components\softdevice\s110\headers\nrf_mbr.h	/^enum NRF_MBR_COMMANDS$/;"	g
NRF_MBR_H__	components\softdevice\s110\headers\nrf_mbr.h	46;"	d
NRF_MBR_SVCS	components\softdevice\s110\headers\nrf_mbr.h	/^enum NRF_MBR_SVCS$/;"	g
SD_MBR_COMMAND	components\softdevice\s110\headers\nrf_mbr.h	/^  SD_MBR_COMMAND = MBR_SVC_BASE, \/**< ::sd_mbr_command *\/$/;"	e	enum:NRF_MBR_SVCS
SD_MBR_COMMAND_COMPARE	components\softdevice\s110\headers\nrf_mbr.h	/^  SD_MBR_COMMAND_COMPARE,               \/**< This command works like memcmp. @see ::sd_mbr_command_compare_t*\/$/;"	e	enum:NRF_MBR_COMMANDS
SD_MBR_COMMAND_COPY_BL	components\softdevice\s110\headers\nrf_mbr.h	/^  SD_MBR_COMMAND_COPY_BL,               \/**< Copy a new BootLoader. @see sd_mbr_command_copy_bl_t *\/$/;"	e	enum:NRF_MBR_COMMANDS
SD_MBR_COMMAND_COPY_SD	components\softdevice\s110\headers\nrf_mbr.h	/^  SD_MBR_COMMAND_COPY_SD,               \/**< Copy a new SoftDevice. @see ::sd_mbr_command_copy_sd_t*\/$/;"	e	enum:NRF_MBR_COMMANDS
SD_MBR_COMMAND_INIT_SD	components\softdevice\s110\headers\nrf_mbr.h	/^  SD_MBR_COMMAND_INIT_SD,               \/**< Init forwarding interrupts to SD, and run reset function in SD*\/$/;"	e	enum:NRF_MBR_COMMANDS
SD_MBR_COMMAND_VECTOR_TABLE_BASE_SET	components\softdevice\s110\headers\nrf_mbr.h	/^  SD_MBR_COMMAND_VECTOR_TABLE_BASE_SET, \/**< Start forwarding all exception to this address @see ::sd_mbr_command_vector_table_base_set_t*\/$/;"	e	enum:NRF_MBR_COMMANDS
address	components\softdevice\s110\headers\nrf_mbr.h	/^  uint32_t address; \/**< The base address of the interrupt vector table for forwarded interrupts.*\/$/;"	m	struct:__anon566
base_set	components\softdevice\s110\headers\nrf_mbr.h	/^    sd_mbr_command_vector_table_base_set_t base_set; \/**< Parameters for vector table base set.*\/$/;"	m	union:__anon567::__anon568
bl_len	components\softdevice\s110\headers\nrf_mbr.h	/^  uint32_t bl_len;   \/**< Number of 32 bit words to copy for BootLoader. *\/$/;"	m	struct:__anon565
bl_src	components\softdevice\s110\headers\nrf_mbr.h	/^  uint32_t *bl_src;  \/**< Pointer to the source of the Bootloader to be be copied.*\/$/;"	m	struct:__anon565
command	components\softdevice\s110\headers\nrf_mbr.h	/^  uint32_t command;  \/**< type of command to be issued see @ref NRF_MBR_COMMANDS. *\/$/;"	m	struct:__anon567
compare	components\softdevice\s110\headers\nrf_mbr.h	/^    sd_mbr_command_compare_t compare;  \/**< Parameters for verify.*\/$/;"	m	union:__anon567::__anon568
copy_bl	components\softdevice\s110\headers\nrf_mbr.h	/^    sd_mbr_command_copy_bl_t copy_bl;  \/**< Parameters for copy BootLoader.*\/$/;"	m	union:__anon567::__anon568
copy_sd	components\softdevice\s110\headers\nrf_mbr.h	/^    sd_mbr_command_copy_sd_t copy_sd;  \/**< Parameters for copy SoftDevice.*\/$/;"	m	union:__anon567::__anon568
dst	components\softdevice\s110\headers\nrf_mbr.h	/^  uint32_t *dst;  \/**< Pointer to the destination where the content is to be copied.*\/$/;"	m	struct:__anon563
len	components\softdevice\s110\headers\nrf_mbr.h	/^  uint32_t len;   \/**< Number of 32 bit words to compare.*\/$/;"	m	struct:__anon564
len	components\softdevice\s110\headers\nrf_mbr.h	/^  uint32_t len;   \/**< Number of 32 bit words to copy. Must be a multiple of PAGE_SIZE_IN_WORDS words.*\/$/;"	m	struct:__anon563
params	components\softdevice\s110\headers\nrf_mbr.h	/^  } params;$/;"	m	struct:__anon567	typeref:union:__anon567::__anon568
ptr1	components\softdevice\s110\headers\nrf_mbr.h	/^  uint32_t *ptr1; \/**< Pointer to block of memory. *\/$/;"	m	struct:__anon564
ptr2	components\softdevice\s110\headers\nrf_mbr.h	/^  uint32_t *ptr2; \/**< Pointer to block of memory. *\/$/;"	m	struct:__anon564
sd_mbr_command_compare_t	components\softdevice\s110\headers\nrf_mbr.h	/^} sd_mbr_command_compare_t;$/;"	t	typeref:struct:__anon564
sd_mbr_command_copy_bl_t	components\softdevice\s110\headers\nrf_mbr.h	/^} sd_mbr_command_copy_bl_t;$/;"	t	typeref:struct:__anon565
sd_mbr_command_copy_sd_t	components\softdevice\s110\headers\nrf_mbr.h	/^} sd_mbr_command_copy_sd_t;$/;"	t	typeref:struct:__anon563
sd_mbr_command_t	components\softdevice\s110\headers\nrf_mbr.h	/^} sd_mbr_command_t;$/;"	t	typeref:struct:__anon567
sd_mbr_command_vector_table_base_set_t	components\softdevice\s110\headers\nrf_mbr.h	/^} sd_mbr_command_vector_table_base_set_t;$/;"	t	typeref:struct:__anon566
src	components\softdevice\s110\headers\nrf_mbr.h	/^  uint32_t *src;  \/**< Pointer to the source of data to be copied.*\/$/;"	m	struct:__anon563
NRF_PPI_ALL_APP_CHANNELS_MASK	components\softdevice\s110\headers\nrf_sd_def.h	19;"	d
NRF_PPI_ALL_APP_GROUPS_MASK	components\softdevice\s110\headers\nrf_sd_def.h	21;"	d
NRF_PPI_PROG_APP_CHANNELS_MASK	components\softdevice\s110\headers\nrf_sd_def.h	20;"	d
NRF_PPI_RESTRICTED	components\softdevice\s110\headers\nrf_sd_def.h	18;"	d
NRF_SD_DEF_H__	components\softdevice\s110\headers\nrf_sd_def.h	14;"	d
MBR_SIZE	components\softdevice\s110\headers\nrf_sdm.h	67;"	d
NRF_CLOCK_LFCLKSRCS	components\softdevice\s110\headers\nrf_sdm.h	/^enum NRF_CLOCK_LFCLKSRCS$/;"	g
NRF_CLOCK_LFCLKSRC_RC_250_PPM_1000MS_CALIBRATION	components\softdevice\s110\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_RC_250_PPM_1000MS_CALIBRATION,       \/**< LFCLK RC oscillator, 1000ms calibration interval.*\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_RC_250_PPM_2000MS_CALIBRATION	components\softdevice\s110\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_RC_250_PPM_2000MS_CALIBRATION,       \/**< LFCLK RC oscillator, 2000ms calibration interval.*\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_RC_250_PPM_250MS_CALIBRATION	components\softdevice\s110\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_RC_250_PPM_250MS_CALIBRATION,        \/**< LFCLK RC oscillator, 250ms  calibration interval.*\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_RC_250_PPM_4000MS_CALIBRATION	components\softdevice\s110\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_RC_250_PPM_4000MS_CALIBRATION,       \/**< LFCLK RC oscillator, 4000ms calibration interval.*\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_RC_250_PPM_500MS_CALIBRATION	components\softdevice\s110\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_RC_250_PPM_500MS_CALIBRATION,        \/**< LFCLK RC oscillator, 500ms  calibration interval.*\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_RC_250_PPM_8000MS_CALIBRATION	components\softdevice\s110\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_RC_250_PPM_8000MS_CALIBRATION,       \/**< LFCLK RC oscillator, 8000ms calibration interval.*\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_1000MS_CALIBRATION	components\softdevice\s110\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_1000MS_CALIBRATION,  \/**< LFCLK RC oscillator. Temperature checked every 1000ms, if changed above a threshold, a calibration is done.*\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_16000MS_CALIBRATION	components\softdevice\s110\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_16000MS_CALIBRATION, \/**< LFCLK RC oscillator. Temperature checked every 16000ms, if changed above a threshold, a calibration is done.*\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_2000MS_CALIBRATION	components\softdevice\s110\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_2000MS_CALIBRATION,  \/**< LFCLK RC oscillator. Temperature checked every 2000ms, if changed above a threshold, a calibration is done.*\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_4000MS_CALIBRATION	components\softdevice\s110\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_4000MS_CALIBRATION,  \/**< LFCLK RC oscillator. Temperature checked every 4000ms, if changed above a threshold, a calibration is done.*\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_8000MS_CALIBRATION	components\softdevice\s110\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_8000MS_CALIBRATION,  \/**< LFCLK RC oscillator. Temperature checked every 8000ms, if changed above a threshold, a calibration is done.*\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_SYNTH_250_PPM	components\softdevice\s110\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_SYNTH_250_PPM,                       \/**< LFCLK Synthesized from HFCLK.                    *\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_XTAL_100_PPM	components\softdevice\s110\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_XTAL_100_PPM,                        \/**< LFCLK crystal oscillator 100 PPM accuracy.       *\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_XTAL_150_PPM	components\softdevice\s110\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_XTAL_150_PPM,                        \/**< LFCLK crystal oscillator 150 PPM accuracy.       *\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_XTAL_20_PPM	components\softdevice\s110\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_XTAL_20_PPM,                         \/**< LFCLK crystal oscillator 20 PPM accuracy.        *\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_XTAL_250_PPM	components\softdevice\s110\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_XTAL_250_PPM,                        \/**< LFCLK crystal oscillator 250 PPM accuracy.       *\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_XTAL_30_PPM	components\softdevice\s110\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_XTAL_30_PPM,                         \/**< LFCLK crystal oscillator 30 PPM accuracy.        *\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_XTAL_500_PPM	components\softdevice\s110\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_XTAL_500_PPM,                        \/**< LFCLK crystal oscillator 500 PPM accuracy.       *\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_XTAL_50_PPM	components\softdevice\s110\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_XTAL_50_PPM,                         \/**< LFCLK crystal oscillator 50 PPM accuracy.        *\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_XTAL_75_PPM	components\softdevice\s110\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_XTAL_75_PPM,                         \/**< LFCLK crystal oscillator 75 PPM accuracy.        *\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_SDM_H__	components\softdevice\s110\headers\nrf_sdm.h	46;"	d
NRF_SD_SVCS	components\softdevice\s110\headers\nrf_sdm.h	/^enum NRF_SD_SVCS$/;"	g
SDM_SVC_BASE	components\softdevice\s110\headers\nrf_sdm.h	57;"	d
SD_FWID_GET	components\softdevice\s110\headers\nrf_sdm.h	84;"	d
SD_FWID_OFFSET	components\softdevice\s110\headers\nrf_sdm.h	76;"	d
SD_SIZE_GET	components\softdevice\s110\headers\nrf_sdm.h	80;"	d
SD_SIZE_OFFSET	components\softdevice\s110\headers\nrf_sdm.h	73;"	d
SD_SOFTDEVICE_DISABLE	components\softdevice\s110\headers\nrf_sdm.h	/^  SD_SOFTDEVICE_DISABLE,               \/**< ::sd_softdevice_disable *\/$/;"	e	enum:NRF_SD_SVCS
SD_SOFTDEVICE_ENABLE	components\softdevice\s110\headers\nrf_sdm.h	/^  SD_SOFTDEVICE_ENABLE = SDM_SVC_BASE, \/**< ::sd_softdevice_enable *\/$/;"	e	enum:NRF_SD_SVCS
SD_SOFTDEVICE_IS_ENABLED	components\softdevice\s110\headers\nrf_sdm.h	/^  SD_SOFTDEVICE_IS_ENABLED,            \/**< ::sd_softdevice_is_enabled *\/$/;"	e	enum:NRF_SD_SVCS
SD_SOFTDEVICE_VECTOR_TABLE_BASE_SET	components\softdevice\s110\headers\nrf_sdm.h	/^  SD_SOFTDEVICE_VECTOR_TABLE_BASE_SET, \/**< ::sd_softdevice_vector_table_base_set *\/$/;"	e	enum:NRF_SD_SVCS
SOFTDEVICE_INFO_STRUCT_ADDRESS	components\softdevice\s110\headers\nrf_sdm.h	70;"	d
SOFTDEVICE_INFO_STRUCT_OFFSET	components\softdevice\s110\headers\nrf_sdm.h	63;"	d
SVC_SDM_LAST	components\softdevice\s110\headers\nrf_sdm.h	/^  SVC_SDM_LAST                         \/**< Placeholder for last SDM SVC *\/$/;"	e	enum:NRF_SD_SVCS
nrf_clock_lfclksrc_t	components\softdevice\s110\headers\nrf_sdm.h	/^typedef uint32_t nrf_clock_lfclksrc_t;$/;"	t
softdevice_assertion_handler_t	components\softdevice\s110\headers\nrf_sdm.h	/^typedef void (*softdevice_assertion_handler_t)(uint32_t pc, uint16_t line_number, const uint8_t * p_file_name);$/;"	t
NRF_APP_PRIORITIES	components\softdevice\s110\headers\nrf_soc.h	/^enum NRF_APP_PRIORITIES$/;"	g
NRF_APP_PRIORITY_HIGH	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_APP_PRIORITY_HIGH = 1,$/;"	e	enum:NRF_APP_PRIORITIES
NRF_APP_PRIORITY_LOW	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_APP_PRIORITY_LOW = 3$/;"	e	enum:NRF_APP_PRIORITIES
NRF_EVT_FLASH_OPERATION_ERROR	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_EVT_FLASH_OPERATION_ERROR,                \/**< Event indicating that the ongoing flash operation has timed out with an error. *\/$/;"	e	enum:NRF_SOC_EVTS
NRF_EVT_FLASH_OPERATION_SUCCESS	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_EVT_FLASH_OPERATION_SUCCESS,              \/**< Event indicating that the ongoing flash operation has completed successfully. *\/$/;"	e	enum:NRF_SOC_EVTS
NRF_EVT_HFCLKSTARTED	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_EVT_HFCLKSTARTED,                         \/**< Event indicating that the HFCLK has started. *\/$/;"	e	enum:NRF_SOC_EVTS
NRF_EVT_NUMBER_OF_EVTS	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_EVT_NUMBER_OF_EVTS$/;"	e	enum:NRF_SOC_EVTS
NRF_EVT_POWER_FAILURE_WARNING	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_EVT_POWER_FAILURE_WARNING,                \/**< Event indicating that a power failure warning has occurred. *\/$/;"	e	enum:NRF_SOC_EVTS
NRF_EVT_RADIO_BLOCKED	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_EVT_RADIO_BLOCKED,                        \/**< Event indicating that a radio timeslot was blocked. *\/$/;"	e	enum:NRF_SOC_EVTS
NRF_EVT_RADIO_CANCELED	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_EVT_RADIO_CANCELED,                       \/**< Event indicating that a radio timeslot was canceled by SoftDevice. *\/$/;"	e	enum:NRF_SOC_EVTS
NRF_EVT_RADIO_SESSION_CLOSED	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_EVT_RADIO_SESSION_CLOSED,                 \/**< Event indicating that a radio session is closed. *\/$/;"	e	enum:NRF_SOC_EVTS
NRF_EVT_RADIO_SESSION_IDLE	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_EVT_RADIO_SESSION_IDLE,                   \/**< Event indicating that a radio session is idle. *\/$/;"	e	enum:NRF_SOC_EVTS
NRF_EVT_RADIO_SIGNAL_CALLBACK_INVALID_RETURN	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_EVT_RADIO_SIGNAL_CALLBACK_INVALID_RETURN, \/**< Event indicating that a radio signal callback handler return was invalid. *\/$/;"	e	enum:NRF_SOC_EVTS
NRF_MUTEX_FREE	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_MUTEX_FREE,$/;"	e	enum:NRF_MUTEX_VALUES
NRF_MUTEX_TAKEN	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_MUTEX_TAKEN$/;"	e	enum:NRF_MUTEX_VALUES
NRF_MUTEX_VALUES	components\softdevice\s110\headers\nrf_soc.h	/^enum NRF_MUTEX_VALUES$/;"	g
NRF_POWER_DCDC_DISABLE	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_POWER_DCDC_DISABLE,          \/**< The DCDC is disabled. *\/$/;"	e	enum:NRF_POWER_DCDC_MODES
NRF_POWER_DCDC_ENABLE	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_POWER_DCDC_ENABLE            \/**< The DCDC is enabled.  *\/$/;"	e	enum:NRF_POWER_DCDC_MODES
NRF_POWER_DCDC_MODES	components\softdevice\s110\headers\nrf_soc.h	/^enum NRF_POWER_DCDC_MODES$/;"	g
NRF_POWER_MODES	components\softdevice\s110\headers\nrf_soc.h	/^enum NRF_POWER_MODES$/;"	g
NRF_POWER_MODE_CONSTLAT	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_POWER_MODE_CONSTLAT,  \/**< Constant latency mode. See power management in the reference manual. *\/$/;"	e	enum:NRF_POWER_MODES
NRF_POWER_MODE_LOWPWR	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_POWER_MODE_LOWPWR     \/**< Low power mode. See power management in the reference manual. *\/$/;"	e	enum:NRF_POWER_MODES
NRF_POWER_THRESHOLDS	components\softdevice\s110\headers\nrf_soc.h	/^enum NRF_POWER_THRESHOLDS$/;"	g
NRF_POWER_THRESHOLD_V21	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_POWER_THRESHOLD_V21,  \/**< 2.1 Volts power failure threshold. *\/$/;"	e	enum:NRF_POWER_THRESHOLDS
NRF_POWER_THRESHOLD_V23	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_POWER_THRESHOLD_V23,  \/**< 2.3 Volts power failure threshold. *\/$/;"	e	enum:NRF_POWER_THRESHOLDS
NRF_POWER_THRESHOLD_V25	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_POWER_THRESHOLD_V25,  \/**< 2.5 Volts power failure threshold. *\/ $/;"	e	enum:NRF_POWER_THRESHOLDS
NRF_POWER_THRESHOLD_V27	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_POWER_THRESHOLD_V27   \/**< 2.7 Volts power failure threshold. *\/$/;"	e	enum:NRF_POWER_THRESHOLDS
NRF_RADIO_CALLBACK_SIGNAL_TYPE	components\softdevice\s110\headers\nrf_soc.h	/^enum NRF_RADIO_CALLBACK_SIGNAL_TYPE$/;"	g
NRF_RADIO_CALLBACK_SIGNAL_TYPE_EXTEND_FAILED	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_RADIO_CALLBACK_SIGNAL_TYPE_EXTEND_FAILED,     \/**< This signal indicates extend action failed. *\/$/;"	e	enum:NRF_RADIO_CALLBACK_SIGNAL_TYPE
NRF_RADIO_CALLBACK_SIGNAL_TYPE_EXTEND_SUCCEEDED	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_RADIO_CALLBACK_SIGNAL_TYPE_EXTEND_SUCCEEDED   \/**< This signal indicates extend action succeeded. *\/$/;"	e	enum:NRF_RADIO_CALLBACK_SIGNAL_TYPE
NRF_RADIO_CALLBACK_SIGNAL_TYPE_RADIO	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_RADIO_CALLBACK_SIGNAL_TYPE_RADIO,             \/**< This signal indicates the NRF_RADIO interrupt. *\/$/;"	e	enum:NRF_RADIO_CALLBACK_SIGNAL_TYPE
NRF_RADIO_CALLBACK_SIGNAL_TYPE_START	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_RADIO_CALLBACK_SIGNAL_TYPE_START,             \/**< This signal indicates the start of the radio timeslot. *\/$/;"	e	enum:NRF_RADIO_CALLBACK_SIGNAL_TYPE
NRF_RADIO_CALLBACK_SIGNAL_TYPE_TIMER0	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_RADIO_CALLBACK_SIGNAL_TYPE_TIMER0,            \/**< This signal indicates the NRF_TIMER0 interrupt. *\/$/;"	e	enum:NRF_RADIO_CALLBACK_SIGNAL_TYPE
NRF_RADIO_DISTANCE_MAX_US	components\softdevice\s110\headers\nrf_soc.h	79;"	d
NRF_RADIO_EARLIEST_TIMEOUT_MAX_US	components\softdevice\s110\headers\nrf_soc.h	81;"	d
NRF_RADIO_HFCLK_CFG	components\softdevice\s110\headers\nrf_soc.h	/^enum NRF_RADIO_HFCLK_CFG$/;"	g
NRF_RADIO_HFCLK_CFG_DEFAULT	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_RADIO_HFCLK_CFG_DEFAULT,                      \/**< Use the currently selected oscillator as HF clock source during the timeslot (i.e. the source is not specified). *\/$/;"	e	enum:NRF_RADIO_HFCLK_CFG
NRF_RADIO_HFCLK_CFG_FORCE_XTAL	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_RADIO_HFCLK_CFG_FORCE_XTAL,                   \/**< Force external crystal to be used as HF clock source during whole the timeslot. *\/$/;"	e	enum:NRF_RADIO_HFCLK_CFG
NRF_RADIO_LENGTH_MAX_US	components\softdevice\s110\headers\nrf_soc.h	77;"	d
NRF_RADIO_LENGTH_MIN_US	components\softdevice\s110\headers\nrf_soc.h	76;"	d
NRF_RADIO_MINIMUM_TIMESLOT_LENGTH_EXTENSION_TIME_US	components\softdevice\s110\headers\nrf_soc.h	65;"	d
NRF_RADIO_NOTIFICATION_DISTANCES	components\softdevice\s110\headers\nrf_soc.h	/^enum NRF_RADIO_NOTIFICATION_DISTANCES$/;"	g
NRF_RADIO_NOTIFICATION_DISTANCE_1740US	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_RADIO_NOTIFICATION_DISTANCE_1740US,   \/**< The distance from the active notification to start of radio activity. *\/$/;"	e	enum:NRF_RADIO_NOTIFICATION_DISTANCES
NRF_RADIO_NOTIFICATION_DISTANCE_2680US	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_RADIO_NOTIFICATION_DISTANCE_2680US,   \/**< The distance from the active notification to start of radio activity. *\/$/;"	e	enum:NRF_RADIO_NOTIFICATION_DISTANCES
NRF_RADIO_NOTIFICATION_DISTANCE_3620US	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_RADIO_NOTIFICATION_DISTANCE_3620US,   \/**< The distance from the active notification to start of radio activity. *\/$/;"	e	enum:NRF_RADIO_NOTIFICATION_DISTANCES
NRF_RADIO_NOTIFICATION_DISTANCE_4560US	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_RADIO_NOTIFICATION_DISTANCE_4560US,   \/**< The distance from the active notification to start of radio activity. *\/$/;"	e	enum:NRF_RADIO_NOTIFICATION_DISTANCES
NRF_RADIO_NOTIFICATION_DISTANCE_5500US	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_RADIO_NOTIFICATION_DISTANCE_5500US    \/**< The distance from the active notification to start of radio activity. *\/$/;"	e	enum:NRF_RADIO_NOTIFICATION_DISTANCES
NRF_RADIO_NOTIFICATION_DISTANCE_800US	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_RADIO_NOTIFICATION_DISTANCE_800US,    \/**< The distance from the active notification to start of radio activity. *\/$/;"	e	enum:NRF_RADIO_NOTIFICATION_DISTANCES
NRF_RADIO_NOTIFICATION_DISTANCE_NONE	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_RADIO_NOTIFICATION_DISTANCE_NONE = 0, \/**< The event does not have a notification. *\/$/;"	e	enum:NRF_RADIO_NOTIFICATION_DISTANCES
NRF_RADIO_NOTIFICATION_INACTIVE_GUARANTEED_TIME_US	components\softdevice\s110\headers\nrf_soc.h	62;"	d
NRF_RADIO_NOTIFICATION_TYPES	components\softdevice\s110\headers\nrf_soc.h	/^enum NRF_RADIO_NOTIFICATION_TYPES$/;"	g
NRF_RADIO_NOTIFICATION_TYPE_INT_ON_ACTIVE	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_RADIO_NOTIFICATION_TYPE_INT_ON_ACTIVE,   \/**< Using interrupt for notification when the radio will be enabled. *\/$/;"	e	enum:NRF_RADIO_NOTIFICATION_TYPES
NRF_RADIO_NOTIFICATION_TYPE_INT_ON_BOTH	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_RADIO_NOTIFICATION_TYPE_INT_ON_BOTH,     \/**< Using interrupt for notification both when the radio will be enabled and disabled. *\/$/;"	e	enum:NRF_RADIO_NOTIFICATION_TYPES
NRF_RADIO_NOTIFICATION_TYPE_INT_ON_INACTIVE	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_RADIO_NOTIFICATION_TYPE_INT_ON_INACTIVE, \/**< Using interrupt for notification when the radio has been disabled. *\/$/;"	e	enum:NRF_RADIO_NOTIFICATION_TYPES
NRF_RADIO_NOTIFICATION_TYPE_NONE	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_RADIO_NOTIFICATION_TYPE_NONE = 0,        \/**< The event does not have a radio notification signal. *\/$/;"	e	enum:NRF_RADIO_NOTIFICATION_TYPES
NRF_RADIO_PRIORITY	components\softdevice\s110\headers\nrf_soc.h	/^enum NRF_RADIO_PRIORITY$/;"	g
NRF_RADIO_PRIORITY_HIGH	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_RADIO_PRIORITY_HIGH,                          \/**< High (equal priority as the normal connection priority of the SoftDevice stack(s)). *\/$/;"	e	enum:NRF_RADIO_PRIORITY
NRF_RADIO_PRIORITY_NORMAL	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_RADIO_PRIORITY_NORMAL,                        \/**< Normal (equal priority as the priority of secondary activites of the SoftDevice stack(s)). *\/$/;"	e	enum:NRF_RADIO_PRIORITY
NRF_RADIO_REQUEST_TYPE	components\softdevice\s110\headers\nrf_soc.h	/^enum NRF_RADIO_REQUEST_TYPE$/;"	g
NRF_RADIO_REQ_TYPE_EARLIEST	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_RADIO_REQ_TYPE_EARLIEST,                      \/**< Request timeslot as early as possible. This should always be used for the first request in a session. *\/$/;"	e	enum:NRF_RADIO_REQUEST_TYPE
NRF_RADIO_REQ_TYPE_NORMAL	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_RADIO_REQ_TYPE_NORMAL                         \/**< Normal timeslot request. *\/$/;"	e	enum:NRF_RADIO_REQUEST_TYPE
NRF_RADIO_SIGNAL_CALLBACK_ACTION	components\softdevice\s110\headers\nrf_soc.h	/^enum NRF_RADIO_SIGNAL_CALLBACK_ACTION$/;"	g
NRF_RADIO_SIGNAL_CALLBACK_ACTION_END	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_RADIO_SIGNAL_CALLBACK_ACTION_END,             \/**< End the current radio timeslot. *\/$/;"	e	enum:NRF_RADIO_SIGNAL_CALLBACK_ACTION
NRF_RADIO_SIGNAL_CALLBACK_ACTION_EXTEND	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_RADIO_SIGNAL_CALLBACK_ACTION_EXTEND,          \/**< Request an extension of the current timeslot (maximum execution time for this action is when the extension succeeded). *\/$/;"	e	enum:NRF_RADIO_SIGNAL_CALLBACK_ACTION
NRF_RADIO_SIGNAL_CALLBACK_ACTION_NONE	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_RADIO_SIGNAL_CALLBACK_ACTION_NONE,            \/**< Return without action. *\/$/;"	e	enum:NRF_RADIO_SIGNAL_CALLBACK_ACTION
NRF_RADIO_SIGNAL_CALLBACK_ACTION_REQUEST_AND_END	components\softdevice\s110\headers\nrf_soc.h	/^  NRF_RADIO_SIGNAL_CALLBACK_ACTION_REQUEST_AND_END  \/**< Request a new radio timeslot and end the current timeslot. *\/$/;"	e	enum:NRF_RADIO_SIGNAL_CALLBACK_ACTION
NRF_RADIO_START_JITTER_US	components\softdevice\s110\headers\nrf_soc.h	83;"	d
NRF_SOC_EVTS	components\softdevice\s110\headers\nrf_soc.h	/^enum NRF_SOC_EVTS$/;"	g
NRF_SOC_H__	components\softdevice\s110\headers\nrf_soc.h	45;"	d
NRF_SOC_SVCS	components\softdevice\s110\headers\nrf_soc.h	/^enum NRF_SOC_SVCS$/;"	g
RADIO_NOTIFICATION_IRQHandler	components\softdevice\s110\headers\nrf_soc.h	74;"	d
RADIO_NOTIFICATION_IRQn	components\softdevice\s110\headers\nrf_soc.h	73;"	d
SD_APP_EVT_WAIT	components\softdevice\s110\headers\nrf_soc.h	/^  SD_APP_EVT_WAIT,$/;"	e	enum:NRF_SOC_SVCS
SD_CLOCK_HFCLK_IS_RUNNING	components\softdevice\s110\headers\nrf_soc.h	/^  SD_CLOCK_HFCLK_IS_RUNNING,$/;"	e	enum:NRF_SOC_SVCS
SD_CLOCK_HFCLK_RELEASE	components\softdevice\s110\headers\nrf_soc.h	/^  SD_CLOCK_HFCLK_RELEASE,$/;"	e	enum:NRF_SOC_SVCS
SD_CLOCK_HFCLK_REQUEST	components\softdevice\s110\headers\nrf_soc.h	/^  SD_CLOCK_HFCLK_REQUEST,$/;"	e	enum:NRF_SOC_SVCS
SD_ECB_BLOCK_ENCRYPT	components\softdevice\s110\headers\nrf_soc.h	/^  SD_ECB_BLOCK_ENCRYPT,$/;"	e	enum:NRF_SOC_SVCS
SD_EVT_GET	components\softdevice\s110\headers\nrf_soc.h	/^  SD_EVT_GET,$/;"	e	enum:NRF_SOC_SVCS
SD_EVT_IRQHandler	components\softdevice\s110\headers\nrf_soc.h	72;"	d
SD_EVT_IRQn	components\softdevice\s110\headers\nrf_soc.h	71;"	d
SD_FLASH_PAGE_ERASE	components\softdevice\s110\headers\nrf_soc.h	/^  SD_FLASH_PAGE_ERASE,$/;"	e	enum:NRF_SOC_SVCS
SD_FLASH_PROTECT	components\softdevice\s110\headers\nrf_soc.h	/^  SD_FLASH_PROTECT,$/;"	e	enum:NRF_SOC_SVCS
SD_FLASH_WRITE	components\softdevice\s110\headers\nrf_soc.h	/^  SD_FLASH_WRITE,$/;"	e	enum:NRF_SOC_SVCS
SD_MUTEX_ACQUIRE	components\softdevice\s110\headers\nrf_soc.h	/^  SD_MUTEX_ACQUIRE,$/;"	e	enum:NRF_SOC_SVCS
SD_MUTEX_NEW	components\softdevice\s110\headers\nrf_soc.h	/^  SD_MUTEX_NEW = SOC_SVC_BASE_NOT_AVAILABLE,$/;"	e	enum:NRF_SOC_SVCS
SD_MUTEX_RELEASE	components\softdevice\s110\headers\nrf_soc.h	/^  SD_MUTEX_RELEASE,$/;"	e	enum:NRF_SOC_SVCS
SD_NVIC_CLEARPENDINGIRQ	components\softdevice\s110\headers\nrf_soc.h	/^  SD_NVIC_CLEARPENDINGIRQ,$/;"	e	enum:NRF_SOC_SVCS
SD_NVIC_CRITICAL_REGION_ENTER	components\softdevice\s110\headers\nrf_soc.h	/^  SD_NVIC_CRITICAL_REGION_ENTER,$/;"	e	enum:NRF_SOC_SVCS
SD_NVIC_CRITICAL_REGION_EXIT	components\softdevice\s110\headers\nrf_soc.h	/^  SD_NVIC_CRITICAL_REGION_EXIT,$/;"	e	enum:NRF_SOC_SVCS
SD_NVIC_DISABLEIRQ	components\softdevice\s110\headers\nrf_soc.h	/^  SD_NVIC_DISABLEIRQ,$/;"	e	enum:NRF_SOC_SVCS
SD_NVIC_ENABLEIRQ	components\softdevice\s110\headers\nrf_soc.h	/^  SD_NVIC_ENABLEIRQ,$/;"	e	enum:NRF_SOC_SVCS
SD_NVIC_GETPENDINGIRQ	components\softdevice\s110\headers\nrf_soc.h	/^  SD_NVIC_GETPENDINGIRQ,$/;"	e	enum:NRF_SOC_SVCS
SD_NVIC_GETPRIORITY	components\softdevice\s110\headers\nrf_soc.h	/^  SD_NVIC_GETPRIORITY,$/;"	e	enum:NRF_SOC_SVCS
SD_NVIC_SETPENDINGIRQ	components\softdevice\s110\headers\nrf_soc.h	/^  SD_NVIC_SETPENDINGIRQ,$/;"	e	enum:NRF_SOC_SVCS
SD_NVIC_SETPRIORITY	components\softdevice\s110\headers\nrf_soc.h	/^  SD_NVIC_SETPRIORITY,$/;"	e	enum:NRF_SOC_SVCS
SD_NVIC_SYSTEMRESET	components\softdevice\s110\headers\nrf_soc.h	/^  SD_NVIC_SYSTEMRESET,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_DCDC_MODE_SET	components\softdevice\s110\headers\nrf_soc.h	/^  SD_POWER_DCDC_MODE_SET,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_GPREGRET_CLR	components\softdevice\s110\headers\nrf_soc.h	/^  SD_POWER_GPREGRET_CLR,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_GPREGRET_GET	components\softdevice\s110\headers\nrf_soc.h	/^  SD_POWER_GPREGRET_GET,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_GPREGRET_SET	components\softdevice\s110\headers\nrf_soc.h	/^  SD_POWER_GPREGRET_SET,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_MODE_SET	components\softdevice\s110\headers\nrf_soc.h	/^  SD_POWER_MODE_SET,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_POF_ENABLE	components\softdevice\s110\headers\nrf_soc.h	/^  SD_POWER_POF_ENABLE,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_POF_THRESHOLD_SET	components\softdevice\s110\headers\nrf_soc.h	/^  SD_POWER_POF_THRESHOLD_SET,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_RAMON_CLR	components\softdevice\s110\headers\nrf_soc.h	/^  SD_POWER_RAMON_CLR,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_RAMON_GET	components\softdevice\s110\headers\nrf_soc.h	/^  SD_POWER_RAMON_GET,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_RAMON_SET	components\softdevice\s110\headers\nrf_soc.h	/^  SD_POWER_RAMON_SET,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_RESET_REASON_CLR	components\softdevice\s110\headers\nrf_soc.h	/^  SD_POWER_RESET_REASON_CLR,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_RESET_REASON_GET	components\softdevice\s110\headers\nrf_soc.h	/^  SD_POWER_RESET_REASON_GET,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_SYSTEM_OFF	components\softdevice\s110\headers\nrf_soc.h	/^  SD_POWER_SYSTEM_OFF,$/;"	e	enum:NRF_SOC_SVCS
SD_PPI_CHANNEL_ASSIGN	components\softdevice\s110\headers\nrf_soc.h	/^  SD_PPI_CHANNEL_ASSIGN,$/;"	e	enum:NRF_SOC_SVCS
SD_PPI_CHANNEL_ENABLE_CLR	components\softdevice\s110\headers\nrf_soc.h	/^  SD_PPI_CHANNEL_ENABLE_CLR,$/;"	e	enum:NRF_SOC_SVCS
SD_PPI_CHANNEL_ENABLE_GET	components\softdevice\s110\headers\nrf_soc.h	/^  SD_PPI_CHANNEL_ENABLE_GET = SOC_SVC_BASE,$/;"	e	enum:NRF_SOC_SVCS
SD_PPI_CHANNEL_ENABLE_SET	components\softdevice\s110\headers\nrf_soc.h	/^  SD_PPI_CHANNEL_ENABLE_SET,$/;"	e	enum:NRF_SOC_SVCS
SD_PPI_GROUP_ASSIGN	components\softdevice\s110\headers\nrf_soc.h	/^  SD_PPI_GROUP_ASSIGN,$/;"	e	enum:NRF_SOC_SVCS
SD_PPI_GROUP_GET	components\softdevice\s110\headers\nrf_soc.h	/^  SD_PPI_GROUP_GET,$/;"	e	enum:NRF_SOC_SVCS
SD_PPI_GROUP_TASK_DISABLE	components\softdevice\s110\headers\nrf_soc.h	/^  SD_PPI_GROUP_TASK_DISABLE,$/;"	e	enum:NRF_SOC_SVCS
SD_PPI_GROUP_TASK_ENABLE	components\softdevice\s110\headers\nrf_soc.h	/^  SD_PPI_GROUP_TASK_ENABLE,$/;"	e	enum:NRF_SOC_SVCS
SD_RADIO_NOTIFICATION_CFG_SET	components\softdevice\s110\headers\nrf_soc.h	/^  SD_RADIO_NOTIFICATION_CFG_SET,$/;"	e	enum:NRF_SOC_SVCS
SD_RADIO_REQUEST	components\softdevice\s110\headers\nrf_soc.h	/^  SD_RADIO_REQUEST,$/;"	e	enum:NRF_SOC_SVCS
SD_RADIO_SESSION_CLOSE	components\softdevice\s110\headers\nrf_soc.h	/^  SD_RADIO_SESSION_CLOSE,$/;"	e	enum:NRF_SOC_SVCS
SD_RADIO_SESSION_OPEN	components\softdevice\s110\headers\nrf_soc.h	/^  SD_RADIO_SESSION_OPEN,$/;"	e	enum:NRF_SOC_SVCS
SD_RAND_APPLICATION_BYTES_AVAILABLE	components\softdevice\s110\headers\nrf_soc.h	/^  SD_RAND_APPLICATION_BYTES_AVAILABLE,$/;"	e	enum:NRF_SOC_SVCS
SD_RAND_APPLICATION_GET_VECTOR	components\softdevice\s110\headers\nrf_soc.h	/^  SD_RAND_APPLICATION_GET_VECTOR,$/;"	e	enum:NRF_SOC_SVCS
SD_RAND_APPLICATION_POOL_CAPACITY	components\softdevice\s110\headers\nrf_soc.h	/^  SD_RAND_APPLICATION_POOL_CAPACITY,$/;"	e	enum:NRF_SOC_SVCS
SD_TEMP_GET	components\softdevice\s110\headers\nrf_soc.h	/^  SD_TEMP_GET,$/;"	e	enum:NRF_SOC_SVCS
SOC_ECB_CIPHERTEXT_LENGTH	components\softdevice\s110\headers\nrf_soc.h	69;"	d
SOC_ECB_CLEARTEXT_LENGTH	components\softdevice\s110\headers\nrf_soc.h	68;"	d
SOC_ECB_KEY_LENGTH	components\softdevice\s110\headers\nrf_soc.h	67;"	d
SOC_SVC_BASE	components\softdevice\s110\headers\nrf_soc.h	58;"	d
SOC_SVC_BASE_NOT_AVAILABLE	components\softdevice\s110\headers\nrf_soc.h	59;"	d
SVC_SOC_LAST	components\softdevice\s110\headers\nrf_soc.h	/^  SVC_SOC_LAST$/;"	e	enum:NRF_SOC_SVCS
callback_action	components\softdevice\s110\headers\nrf_soc.h	/^  uint8_t               callback_action;            \/**< The action requested by the application when returning from the signal callback, see @ref NRF_RADIO_SIGNAL_CALLBACK_ACTION. *\/$/;"	m	struct:__anon573
ciphertext	components\softdevice\s110\headers\nrf_soc.h	/^  uint8_t ciphertext[SOC_ECB_CIPHERTEXT_LENGTH];    \/**< Cipher Text data. *\/$/;"	m	struct:__anon577
cleartext	components\softdevice\s110\headers\nrf_soc.h	/^  uint8_t cleartext[SOC_ECB_CLEARTEXT_LENGTH];      \/**< Clear Text data. *\/$/;"	m	struct:__anon577
distance_us	components\softdevice\s110\headers\nrf_soc.h	/^  uint32_t      distance_us;                        \/**< Distance from the start of the previous radio timeslot (up to @ref NRF_RADIO_DISTANCE_MAX_US microseconds). *\/$/;"	m	struct:__anon570
earliest	components\softdevice\s110\headers\nrf_soc.h	/^    nrf_radio_request_earliest_t  earliest;         \/**< Parameters for a request for a timeslot as early as possible. *\/$/;"	m	union:__anon571::__anon572
extend	components\softdevice\s110\headers\nrf_soc.h	/^    } extend;                                       \/**< Additional parameters for return_code @ref NRF_RADIO_SIGNAL_CALLBACK_ACTION_EXTEND. *\/$/;"	m	union:__anon573::__anon574	typeref:struct:__anon573::__anon574::__anon576
hfclk	components\softdevice\s110\headers\nrf_soc.h	/^  uint8_t       hfclk;                              \/**< High frequency clock source, see @ref NRF_RADIO_HFCLK_CFG. *\/$/;"	m	struct:__anon569
hfclk	components\softdevice\s110\headers\nrf_soc.h	/^  uint8_t       hfclk;                              \/**< High frequency clock source, see @ref NRF_RADIO_HFCLK_CFG. *\/$/;"	m	struct:__anon570
key	components\softdevice\s110\headers\nrf_soc.h	/^  uint8_t key[SOC_ECB_KEY_LENGTH];                  \/**< Encryption key. *\/$/;"	m	struct:__anon577
length_us	components\softdevice\s110\headers\nrf_soc.h	/^      uint32_t              length_us;              \/**< Requested extension of the timeslot duration (microseconds) (for minimum time see @ref NRF_RADIO_MINIMUM_TIMESLOT_LENGTH_EXTENSION_TIME_US). *\/$/;"	m	struct:__anon573::__anon574::__anon576
length_us	components\softdevice\s110\headers\nrf_soc.h	/^  uint32_t      length_us;                          \/**< The radio timeslot length (in the range 100 to 100,000] microseconds). *\/$/;"	m	struct:__anon569
length_us	components\softdevice\s110\headers\nrf_soc.h	/^  uint32_t      length_us;                          \/**< The radio timeslot length (in the range [100..100,000] microseconds). *\/$/;"	m	struct:__anon570
normal	components\softdevice\s110\headers\nrf_soc.h	/^    nrf_radio_request_normal_t    normal;           \/**< Parameters for a normal radio request. *\/$/;"	m	union:__anon571::__anon572
nrf_app_irq_priority_t	components\softdevice\s110\headers\nrf_soc.h	/^typedef uint8_t nrf_app_irq_priority_t;$/;"	t
nrf_ecb_hal_data_t	components\softdevice\s110\headers\nrf_soc.h	/^} nrf_ecb_hal_data_t;$/;"	t	typeref:struct:__anon577
nrf_mutex_t	components\softdevice\s110\headers\nrf_soc.h	/^typedef volatile uint8_t nrf_mutex_t;$/;"	t
nrf_power_dcdc_mode_t	components\softdevice\s110\headers\nrf_soc.h	/^typedef uint32_t nrf_power_dcdc_mode_t;$/;"	t
nrf_power_failure_threshold_t	components\softdevice\s110\headers\nrf_soc.h	/^typedef uint8_t nrf_power_failure_threshold_t;$/;"	t
nrf_power_mode_t	components\softdevice\s110\headers\nrf_soc.h	/^typedef uint8_t nrf_power_mode_t;$/;"	t
nrf_radio_notification_distance_t	components\softdevice\s110\headers\nrf_soc.h	/^typedef uint8_t nrf_radio_notification_distance_t;$/;"	t
nrf_radio_notification_type_t	components\softdevice\s110\headers\nrf_soc.h	/^typedef uint8_t nrf_radio_notification_type_t;$/;"	t
nrf_radio_request_earliest_t	components\softdevice\s110\headers\nrf_soc.h	/^} nrf_radio_request_earliest_t;$/;"	t	typeref:struct:__anon569
nrf_radio_request_normal_t	components\softdevice\s110\headers\nrf_soc.h	/^} nrf_radio_request_normal_t;$/;"	t	typeref:struct:__anon570
nrf_radio_request_t	components\softdevice\s110\headers\nrf_soc.h	/^} nrf_radio_request_t;$/;"	t	typeref:struct:__anon571
nrf_radio_signal_callback_return_param_t	components\softdevice\s110\headers\nrf_soc.h	/^} nrf_radio_signal_callback_return_param_t;$/;"	t	typeref:struct:__anon573
nrf_radio_signal_callback_t	components\softdevice\s110\headers\nrf_soc.h	/^typedef nrf_radio_signal_callback_return_param_t * (*nrf_radio_signal_callback_t) (uint8_t signal_type);$/;"	t
p_next	components\softdevice\s110\headers\nrf_soc.h	/^      nrf_radio_request_t * p_next;                 \/**< The request parameters for the next radio timeslot. *\/$/;"	m	struct:__anon573::__anon574::__anon575
params	components\softdevice\s110\headers\nrf_soc.h	/^  } params;$/;"	m	struct:__anon571	typeref:union:__anon571::__anon572
params	components\softdevice\s110\headers\nrf_soc.h	/^  } params;$/;"	m	struct:__anon573	typeref:union:__anon573::__anon574
priority	components\softdevice\s110\headers\nrf_soc.h	/^  uint8_t       priority;                           \/**< The radio timeslot priority, see @ref NRF_RADIO_PRIORITY. *\/$/;"	m	struct:__anon569
priority	components\softdevice\s110\headers\nrf_soc.h	/^  uint8_t       priority;                           \/**< The radio timeslot priority, see @ref NRF_RADIO_PRIORITY. *\/$/;"	m	struct:__anon570
request	components\softdevice\s110\headers\nrf_soc.h	/^    } request;                                      \/**< Additional parameters for return_code @ref NRF_RADIO_SIGNAL_CALLBACK_ACTION_REQUEST_AND_END. *\/$/;"	m	union:__anon573::__anon574	typeref:struct:__anon573::__anon574::__anon575
request_type	components\softdevice\s110\headers\nrf_soc.h	/^  uint8_t                         request_type;     \/**< Type of request, see @ref NRF_RADIO_REQUEST_TYPE. *\/$/;"	m	struct:__anon571
timeout_us	components\softdevice\s110\headers\nrf_soc.h	/^  uint32_t      timeout_us;                         \/**< Longest acceptable delay until the start of the requested timeslot (up to @ref NRF_RADIO_EARLIEST_TIMEOUT_MAX_US microseconds). *\/$/;"	m	struct:__anon569
NRF_SVC__	components\softdevice\s110\headers\nrf_svc.h	38;"	d
PRAGMA	components\softdevice\s110\headers\nrf_svc.h	61;"	d
SVCALL	components\softdevice\s110\headers\nrf_svc.h	41;"	d
SVCALL	components\softdevice\s110\headers\nrf_svc.h	46;"	d
SVCALL	components\softdevice\s110\headers\nrf_svc.h	48;"	d
SVCALL	components\softdevice\s110\headers\nrf_svc.h	62;"	d
SVCALL	components\softdevice\s110\headers\nrf_svc.h	66;"	d
ASSERT	components\softdevice\s110\headers\softdevice_assert.h	63;"	d
SOFTDEVICE_ASSERT_H_	components\softdevice\s110\headers\softdevice_assert.h	41;"	d
BLE_COMMON_EVTS	components\softdevice\s120\headers\ble.h	/^enum BLE_COMMON_EVTS$/;"	g
BLE_COMMON_OPTS	components\softdevice\s120\headers\ble.h	/^enum BLE_COMMON_OPTS$/;"	g
BLE_COMMON_OPT_RADIO_CPU_MUTEX	components\softdevice\s120\headers\ble.h	/^  BLE_COMMON_OPT_RADIO_CPU_MUTEX = BLE_OPT_BASE    \/**< Radio CPU mutex option. @ref ble_common_opt_radio_cpu_mutex_t *\/$/;"	e	enum:BLE_COMMON_OPTS
BLE_COMMON_SVCS	components\softdevice\s120\headers\ble.h	/^enum BLE_COMMON_SVCS$/;"	g
BLE_EVTS_PTR_ALIGNMENT	components\softdevice\s120\headers\ble.h	102;"	d
BLE_EVT_TX_COMPLETE	components\softdevice\s120\headers\ble.h	/^  BLE_EVT_TX_COMPLETE  = BLE_EVT_BASE,  \/**< Transmission Complete. *\/$/;"	e	enum:BLE_COMMON_EVTS
BLE_EVT_USER_MEM_RELEASE	components\softdevice\s120\headers\ble.h	/^  BLE_EVT_USER_MEM_RELEASE              \/**< User Memory release. *\/$/;"	e	enum:BLE_COMMON_EVTS
BLE_EVT_USER_MEM_REQUEST	components\softdevice\s120\headers\ble.h	/^  BLE_EVT_USER_MEM_REQUEST,             \/**< User Memory request. *\/$/;"	e	enum:BLE_COMMON_EVTS
BLE_H__	components\softdevice\s120\headers\ble.h	48;"	d
BLE_USER_MEM_TYPE_GATTS_QUEUED_WRITES	components\softdevice\s120\headers\ble.h	107;"	d
BLE_USER_MEM_TYPE_INVALID	components\softdevice\s120\headers\ble.h	106;"	d
BLE_UUID_VS_MAX_COUNT	components\softdevice\s120\headers\ble.h	112;"	d
SD_BLE_ENABLE	components\softdevice\s120\headers\ble.h	/^  SD_BLE_ENABLE = BLE_SVC_BASE,         \/**< Enable and initialize the BLE stack *\/$/;"	e	enum:BLE_COMMON_SVCS
SD_BLE_EVT_GET	components\softdevice\s120\headers\ble.h	/^  SD_BLE_EVT_GET,                       \/**< Get an event from the pending events queue. *\/$/;"	e	enum:BLE_COMMON_SVCS
SD_BLE_OPT_GET	components\softdevice\s120\headers\ble.h	/^  SD_BLE_OPT_GET,                       \/**< Get a BLE option. *\/$/;"	e	enum:BLE_COMMON_SVCS
SD_BLE_OPT_SET	components\softdevice\s120\headers\ble.h	/^  SD_BLE_OPT_SET,                       \/**< Set a BLE option. *\/$/;"	e	enum:BLE_COMMON_SVCS
SD_BLE_TX_BUFFER_COUNT_GET	components\softdevice\s120\headers\ble.h	/^  SD_BLE_TX_BUFFER_COUNT_GET,           \/**< Get the total number of available application transmission buffers from the stack. *\/$/;"	e	enum:BLE_COMMON_SVCS
SD_BLE_USER_MEM_REPLY	components\softdevice\s120\headers\ble.h	/^  SD_BLE_USER_MEM_REPLY,                \/**< User Memory Reply. *\/$/;"	e	enum:BLE_COMMON_SVCS
SD_BLE_UUID_DECODE	components\softdevice\s120\headers\ble.h	/^  SD_BLE_UUID_DECODE,                   \/**< Decode UUID bytes. *\/$/;"	e	enum:BLE_COMMON_SVCS
SD_BLE_UUID_ENCODE	components\softdevice\s120\headers\ble.h	/^  SD_BLE_UUID_ENCODE,                   \/**< Encode UUID bytes. *\/$/;"	e	enum:BLE_COMMON_SVCS
SD_BLE_UUID_VS_ADD	components\softdevice\s120\headers\ble.h	/^  SD_BLE_UUID_VS_ADD,                   \/**< Add a Vendor Specific UUID. *\/$/;"	e	enum:BLE_COMMON_SVCS
SD_BLE_VERSION_GET	components\softdevice\s120\headers\ble.h	/^  SD_BLE_VERSION_GET,                   \/**< Get the local version information (company id, Link Layer Version, Link Layer Subversion). *\/$/;"	e	enum:BLE_COMMON_SVCS
ble_common_evt_t	components\softdevice\s120\headers\ble.h	/^} ble_common_evt_t;$/;"	t	typeref:struct:__anon582
ble_common_opt_radio_cpu_mutex_t	components\softdevice\s120\headers\ble.h	/^} ble_common_opt_radio_cpu_mutex_t;$/;"	t	typeref:struct:__anon588
ble_common_opt_t	components\softdevice\s120\headers\ble.h	/^} ble_common_opt_t;$/;"	t	typeref:union:__anon589
ble_enable_params_t	components\softdevice\s120\headers\ble.h	/^} ble_enable_params_t;$/;"	t	typeref:struct:__anon591
ble_evt_hdr_t	components\softdevice\s120\headers\ble.h	/^} ble_evt_hdr_t;$/;"	t	typeref:struct:__anon584
ble_evt_t	components\softdevice\s120\headers\ble.h	/^} ble_evt_t;$/;"	t	typeref:struct:__anon585
ble_evt_tx_complete_t	components\softdevice\s120\headers\ble.h	/^} ble_evt_tx_complete_t;$/;"	t	typeref:struct:__anon579
ble_evt_user_mem_release_t	components\softdevice\s120\headers\ble.h	/^} ble_evt_user_mem_release_t;$/;"	t	typeref:struct:__anon581
ble_evt_user_mem_request_t	components\softdevice\s120\headers\ble.h	/^} ble_evt_user_mem_request_t;$/;"	t	typeref:struct:__anon580
ble_opt_t	components\softdevice\s120\headers\ble.h	/^} ble_opt_t;$/;"	t	typeref:union:__anon590
ble_user_mem_block_t	components\softdevice\s120\headers\ble.h	/^} ble_user_mem_block_t;$/;"	t	typeref:struct:__anon578
ble_version_t	components\softdevice\s120\headers\ble.h	/^} ble_version_t;$/;"	t	typeref:struct:__anon587
common_evt	components\softdevice\s120\headers\ble.h	/^    ble_common_evt_t  common_evt;         \/**< Common Event, evt_id in BLE_EVT_* series. *\/$/;"	m	union:__anon585::__anon586
common_opt	components\softdevice\s120\headers\ble.h	/^  ble_common_opt_t  common_opt;         \/**< Common option, opt_id in BLE_COMMON_OPT_* series. *\/$/;"	m	union:__anon590
company_id	components\softdevice\s120\headers\ble.h	/^  uint16_t  company_id;                 \/**< Company ID, Nordic Semiconductor's company ID is 89 (0x0059) (https:\/\/www.bluetooth.org\/apps\/content\/Default.aspx?doc_id=49708). *\/$/;"	m	struct:__anon587
conn_handle	components\softdevice\s120\headers\ble.h	/^  uint16_t conn_handle;                 \/**< Connection Handle on which this event occurred. *\/$/;"	m	struct:__anon582
count	components\softdevice\s120\headers\ble.h	/^  uint8_t count;                        \/**< Number of packets transmitted. *\/$/;"	m	struct:__anon579
enable	components\softdevice\s120\headers\ble.h	/^  uint8_t enable : 1;                          \/**< Enable mutual exclusion of radio activity and the CPU execution. *\/$/;"	m	struct:__anon588
evt	components\softdevice\s120\headers\ble.h	/^  } evt;$/;"	m	struct:__anon585	typeref:union:__anon585::__anon586
evt_id	components\softdevice\s120\headers\ble.h	/^  uint16_t evt_id;                      \/**< Value from a BLE_<module>_EVT series. *\/$/;"	m	struct:__anon584
evt_len	components\softdevice\s120\headers\ble.h	/^  uint16_t evt_len;                     \/**< Length in octets excluding this header. *\/$/;"	m	struct:__anon584
gap_enable_params	components\softdevice\s120\headers\ble.h	/^  ble_gap_enable_params_t    gap_enable_params;   \/**< GAP init options @ref ble_gap_enable_params_t *\/$/;"	m	struct:__anon591
gap_evt	components\softdevice\s120\headers\ble.h	/^    ble_gap_evt_t     gap_evt;            \/**< GAP originated event, evt_id in BLE_GAP_EVT_* series. *\/$/;"	m	union:__anon585::__anon586
gap_opt	components\softdevice\s120\headers\ble.h	/^  ble_gap_opt_t     gap_opt;            \/**< GAP option, opt_id in BLE_GAP_OPT_* series. *\/$/;"	m	union:__anon590
gattc_evt	components\softdevice\s120\headers\ble.h	/^    ble_gattc_evt_t   gattc_evt;          \/**< GATT client originated event, evt_id in BLE_GATTC_EVT* series. *\/$/;"	m	union:__anon585::__anon586
gatts_enable_params	components\softdevice\s120\headers\ble.h	/^  ble_gatts_enable_params_t  gatts_enable_params; \/**< GATTS init options @ref ble_gatts_enable_params_t. *\/  $/;"	m	struct:__anon591
gatts_evt	components\softdevice\s120\headers\ble.h	/^    ble_gatts_evt_t   gatts_evt;          \/**< GATT server originated event, evt_id in BLE_GATTS_EVT* series. *\/$/;"	m	union:__anon585::__anon586
header	components\softdevice\s120\headers\ble.h	/^  ble_evt_hdr_t header;                 \/**< Event header. *\/$/;"	m	struct:__anon585
l2cap_evt	components\softdevice\s120\headers\ble.h	/^    ble_l2cap_evt_t   l2cap_evt;          \/**< L2CAP originated event, evt_id in BLE_L2CAP_EVT* series. *\/$/;"	m	union:__anon585::__anon586
len	components\softdevice\s120\headers\ble.h	/^  uint16_t          len;        \/**< Length in bytes of the user memory block. *\/$/;"	m	struct:__anon578
mem_block	components\softdevice\s120\headers\ble.h	/^  ble_user_mem_block_t        mem_block;  \/**< User memory block *\/$/;"	m	struct:__anon581
p_mem	components\softdevice\s120\headers\ble.h	/^  uint8_t          *p_mem;      \/**< Pointer to the start of the user memory block. *\/$/;"	m	struct:__anon578
params	components\softdevice\s120\headers\ble.h	/^  } params;$/;"	m	struct:__anon582	typeref:union:__anon582::__anon583
radio_cpu_mutex	components\softdevice\s120\headers\ble.h	/^  ble_common_opt_radio_cpu_mutex_t  radio_cpu_mutex;        \/**< Parameters for the option for the mutual exclusion of radio activity and CPU execution. *\/$/;"	m	union:__anon589
subversion_number	components\softdevice\s120\headers\ble.h	/^  uint16_t  subversion_number;          \/**< Link Layer Sub Version number, corresponds to the SoftDevice Config ID or Firmware ID (FWID). *\/$/;"	m	struct:__anon587
tx_complete	components\softdevice\s120\headers\ble.h	/^    ble_evt_tx_complete_t           tx_complete;        \/**< Transmission Complete. *\/$/;"	m	union:__anon582::__anon583
type	components\softdevice\s120\headers\ble.h	/^  uint8_t                     type;       \/**< User memory type, see @ref BLE_USER_MEM_TYPES. *\/$/;"	m	struct:__anon581
type	components\softdevice\s120\headers\ble.h	/^  uint8_t                     type;     \/**< User memory type, see @ref BLE_USER_MEM_TYPES. *\/$/;"	m	struct:__anon580
user_mem_release	components\softdevice\s120\headers\ble.h	/^    ble_evt_user_mem_release_t      user_mem_release;   \/**< User Memory Release Event Parameters. *\/$/;"	m	union:__anon582::__anon583
user_mem_request	components\softdevice\s120\headers\ble.h	/^    ble_evt_user_mem_request_t      user_mem_request;   \/**< User Memory Request Event Parameters. *\/$/;"	m	union:__anon582::__anon583
version_number	components\softdevice\s120\headers\ble.h	/^  uint8_t   version_number;             \/**< Link Layer Version number for BT 4.1 spec is 7 (https:\/\/www.bluetooth.org\/en-us\/specification\/assigned-numbers\/link-layer). *\/$/;"	m	struct:__anon587
BLE_ERROR_INVALID_ATTR_HANDLE	components\softdevice\s120\headers\ble_err.h	61;"	d
BLE_ERROR_INVALID_CONN_HANDLE	components\softdevice\s120\headers\ble_err.h	60;"	d
BLE_ERROR_INVALID_ROLE	components\softdevice\s120\headers\ble_err.h	63;"	d
BLE_ERROR_NOT_ENABLED	components\softdevice\s120\headers\ble_err.h	59;"	d
BLE_ERROR_NO_TX_BUFFERS	components\softdevice\s120\headers\ble_err.h	62;"	d
NRF_BLE_ERR_H__	components\softdevice\s120\headers\ble_err.h	53;"	d
NRF_GAP_ERR_BASE	components\softdevice\s120\headers\ble_err.h	72;"	d
NRF_GATTC_ERR_BASE	components\softdevice\s120\headers\ble_err.h	73;"	d
NRF_GATTS_ERR_BASE	components\softdevice\s120\headers\ble_err.h	74;"	d
NRF_L2CAP_ERR_BASE	components\softdevice\s120\headers\ble_err.h	71;"	d
BLE_ERROR_GAP_DISCOVERABLE_WITH_WHITELIST	components\softdevice\s120\headers\ble_gap.h	128;"	d
BLE_ERROR_GAP_INVALID_BLE_ADDR	components\softdevice\s120\headers\ble_gap.h	129;"	d
BLE_ERROR_GAP_UUID_LIST_MISMATCH	components\softdevice\s120\headers\ble_gap.h	127;"	d
BLE_GAP_ADDR_CYCLE_MODE_AUTO	components\softdevice\s120\headers\ble_gap.h	161;"	d
BLE_GAP_ADDR_CYCLE_MODE_NONE	components\softdevice\s120\headers\ble_gap.h	160;"	d
BLE_GAP_ADDR_LEN	components\softdevice\s120\headers\ble_gap.h	168;"	d
BLE_GAP_ADDR_TYPE_PUBLIC	components\softdevice\s120\headers\ble_gap.h	152;"	d
BLE_GAP_ADDR_TYPE_RANDOM_PRIVATE_NON_RESOLVABLE	components\softdevice\s120\headers\ble_gap.h	155;"	d
BLE_GAP_ADDR_TYPE_RANDOM_PRIVATE_RESOLVABLE	components\softdevice\s120\headers\ble_gap.h	154;"	d
BLE_GAP_ADDR_TYPE_RANDOM_STATIC	components\softdevice\s120\headers\ble_gap.h	153;"	d
BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE	components\softdevice\s120\headers\ble_gap.h	216;"	d
BLE_GAP_ADV_FLAGS_LE_ONLY_LIMITED_DISC_MODE	components\softdevice\s120\headers\ble_gap.h	215;"	d
BLE_GAP_ADV_FLAG_BR_EDR_NOT_SUPPORTED	components\softdevice\s120\headers\ble_gap.h	212;"	d
BLE_GAP_ADV_FLAG_LE_BR_EDR_CONTROLLER	components\softdevice\s120\headers\ble_gap.h	213;"	d
BLE_GAP_ADV_FLAG_LE_BR_EDR_HOST	components\softdevice\s120\headers\ble_gap.h	214;"	d
BLE_GAP_ADV_FLAG_LE_GENERAL_DISC_MODE	components\softdevice\s120\headers\ble_gap.h	211;"	d
BLE_GAP_ADV_FLAG_LE_LIMITED_DISC_MODE	components\softdevice\s120\headers\ble_gap.h	210;"	d
BLE_GAP_ADV_FP_ANY	components\softdevice\s120\headers\ble_gap.h	264;"	d
BLE_GAP_ADV_FP_FILTER_BOTH	components\softdevice\s120\headers\ble_gap.h	267;"	d
BLE_GAP_ADV_FP_FILTER_CONNREQ	components\softdevice\s120\headers\ble_gap.h	266;"	d
BLE_GAP_ADV_FP_FILTER_SCANREQ	components\softdevice\s120\headers\ble_gap.h	265;"	d
BLE_GAP_ADV_INTERVAL_MAX	components\softdevice\s120\headers\ble_gap.h	224;"	d
BLE_GAP_ADV_INTERVAL_MIN	components\softdevice\s120\headers\ble_gap.h	222;"	d
BLE_GAP_ADV_MAX_SIZE	components\softdevice\s120\headers\ble_gap.h	250;"	d
BLE_GAP_ADV_NONCON_INTERVAL_MIN	components\softdevice\s120\headers\ble_gap.h	223;"	d
BLE_GAP_ADV_TIMEOUT_GENERAL_UNLIMITED	components\softdevice\s120\headers\ble_gap.h	274;"	d
BLE_GAP_ADV_TIMEOUT_LIMITED_MAX	components\softdevice\s120\headers\ble_gap.h	273;"	d
BLE_GAP_ADV_TYPE_ADV_DIRECT_IND	components\softdevice\s120\headers\ble_gap.h	256;"	d
BLE_GAP_ADV_TYPE_ADV_IND	components\softdevice\s120\headers\ble_gap.h	255;"	d
BLE_GAP_ADV_TYPE_ADV_NONCONN_IND	components\softdevice\s120\headers\ble_gap.h	258;"	d
BLE_GAP_ADV_TYPE_ADV_SCAN_IND	components\softdevice\s120\headers\ble_gap.h	257;"	d
BLE_GAP_AD_TYPE_128BIT_SERVICE_UUID_COMPLETE	components\softdevice\s120\headers\ble_gap.h	180;"	d
BLE_GAP_AD_TYPE_128BIT_SERVICE_UUID_MORE_AVAILABLE	components\softdevice\s120\headers\ble_gap.h	179;"	d
BLE_GAP_AD_TYPE_16BIT_SERVICE_UUID_COMPLETE	components\softdevice\s120\headers\ble_gap.h	176;"	d
BLE_GAP_AD_TYPE_16BIT_SERVICE_UUID_MORE_AVAILABLE	components\softdevice\s120\headers\ble_gap.h	175;"	d
BLE_GAP_AD_TYPE_32BIT_SERVICE_UUID_COMPLETE	components\softdevice\s120\headers\ble_gap.h	178;"	d
BLE_GAP_AD_TYPE_32BIT_SERVICE_UUID_MORE_AVAILABLE	components\softdevice\s120\headers\ble_gap.h	177;"	d
BLE_GAP_AD_TYPE_3D_INFORMATION_DATA	components\softdevice\s120\headers\ble_gap.h	203;"	d
BLE_GAP_AD_TYPE_ADVERTISING_INTERVAL	components\softdevice\s120\headers\ble_gap.h	196;"	d
BLE_GAP_AD_TYPE_APPEARANCE	components\softdevice\s120\headers\ble_gap.h	195;"	d
BLE_GAP_AD_TYPE_CLASS_OF_DEVICE	components\softdevice\s120\headers\ble_gap.h	184;"	d
BLE_GAP_AD_TYPE_COMPLETE_LOCAL_NAME	components\softdevice\s120\headers\ble_gap.h	182;"	d
BLE_GAP_AD_TYPE_FLAGS	components\softdevice\s120\headers\ble_gap.h	174;"	d
BLE_GAP_AD_TYPE_LE_BLUETOOTH_DEVICE_ADDRESS	components\softdevice\s120\headers\ble_gap.h	197;"	d
BLE_GAP_AD_TYPE_LE_ROLE	components\softdevice\s120\headers\ble_gap.h	198;"	d
BLE_GAP_AD_TYPE_MANUFACTURER_SPECIFIC_DATA	components\softdevice\s120\headers\ble_gap.h	204;"	d
BLE_GAP_AD_TYPE_PUBLIC_TARGET_ADDRESS	components\softdevice\s120\headers\ble_gap.h	193;"	d
BLE_GAP_AD_TYPE_RANDOM_TARGET_ADDRESS	components\softdevice\s120\headers\ble_gap.h	194;"	d
BLE_GAP_AD_TYPE_SECURITY_MANAGER_OOB_FLAGS	components\softdevice\s120\headers\ble_gap.h	188;"	d
BLE_GAP_AD_TYPE_SECURITY_MANAGER_TK_VALUE	components\softdevice\s120\headers\ble_gap.h	187;"	d
BLE_GAP_AD_TYPE_SERVICE_DATA	components\softdevice\s120\headers\ble_gap.h	192;"	d
BLE_GAP_AD_TYPE_SERVICE_DATA_128BIT_UUID	components\softdevice\s120\headers\ble_gap.h	202;"	d
BLE_GAP_AD_TYPE_SERVICE_DATA_32BIT_UUID	components\softdevice\s120\headers\ble_gap.h	201;"	d
BLE_GAP_AD_TYPE_SHORT_LOCAL_NAME	components\softdevice\s120\headers\ble_gap.h	181;"	d
BLE_GAP_AD_TYPE_SIMPLE_PAIRING_HASH_C	components\softdevice\s120\headers\ble_gap.h	185;"	d
BLE_GAP_AD_TYPE_SIMPLE_PAIRING_HASH_C256	components\softdevice\s120\headers\ble_gap.h	199;"	d
BLE_GAP_AD_TYPE_SIMPLE_PAIRING_RANDOMIZER_R	components\softdevice\s120\headers\ble_gap.h	186;"	d
BLE_GAP_AD_TYPE_SIMPLE_PAIRING_RANDOMIZER_R256	components\softdevice\s120\headers\ble_gap.h	200;"	d
BLE_GAP_AD_TYPE_SLAVE_CONNECTION_INTERVAL_RANGE	components\softdevice\s120\headers\ble_gap.h	189;"	d
BLE_GAP_AD_TYPE_SOLICITED_SERVICE_UUIDS_128BIT	components\softdevice\s120\headers\ble_gap.h	191;"	d
BLE_GAP_AD_TYPE_SOLICITED_SERVICE_UUIDS_16BIT	components\softdevice\s120\headers\ble_gap.h	190;"	d
BLE_GAP_AD_TYPE_TX_POWER_LEVEL	components\softdevice\s120\headers\ble_gap.h	183;"	d
BLE_GAP_AUTH_KEY_TYPE_NONE	components\softdevice\s120\headers\ble_gap.h	297;"	d
BLE_GAP_AUTH_KEY_TYPE_OOB	components\softdevice\s120\headers\ble_gap.h	299;"	d
BLE_GAP_AUTH_KEY_TYPE_PASSKEY	components\softdevice\s120\headers\ble_gap.h	298;"	d
BLE_GAP_CONN_SEC_MODE_SET_ENC_NO_MITM	components\softdevice\s120\headers\ble_gap.h	355;"	d
BLE_GAP_CONN_SEC_MODE_SET_ENC_WITH_MITM	components\softdevice\s120\headers\ble_gap.h	357;"	d
BLE_GAP_CONN_SEC_MODE_SET_NO_ACCESS	components\softdevice\s120\headers\ble_gap.h	351;"	d
BLE_GAP_CONN_SEC_MODE_SET_OPEN	components\softdevice\s120\headers\ble_gap.h	353;"	d
BLE_GAP_CONN_SEC_MODE_SET_SIGNED_NO_MITM	components\softdevice\s120\headers\ble_gap.h	359;"	d
BLE_GAP_CONN_SEC_MODE_SET_SIGNED_WITH_MITM	components\softdevice\s120\headers\ble_gap.h	361;"	d
BLE_GAP_CP_CONN_SUP_TIMEOUT_MAX	components\softdevice\s120\headers\ble_gap.h	336;"	d
BLE_GAP_CP_CONN_SUP_TIMEOUT_MIN	components\softdevice\s120\headers\ble_gap.h	335;"	d
BLE_GAP_CP_CONN_SUP_TIMEOUT_NONE	components\softdevice\s120\headers\ble_gap.h	334;"	d
BLE_GAP_CP_MAX_CONN_INTVL_MAX	components\softdevice\s120\headers\ble_gap.h	332;"	d
BLE_GAP_CP_MAX_CONN_INTVL_MIN	components\softdevice\s120\headers\ble_gap.h	331;"	d
BLE_GAP_CP_MAX_CONN_INTVL_NONE	components\softdevice\s120\headers\ble_gap.h	330;"	d
BLE_GAP_CP_MIN_CONN_INTVL_MAX	components\softdevice\s120\headers\ble_gap.h	329;"	d
BLE_GAP_CP_MIN_CONN_INTVL_MIN	components\softdevice\s120\headers\ble_gap.h	328;"	d
BLE_GAP_CP_MIN_CONN_INTVL_NONE	components\softdevice\s120\headers\ble_gap.h	327;"	d
BLE_GAP_CP_SLAVE_LATENCY_MAX	components\softdevice\s120\headers\ble_gap.h	333;"	d
BLE_GAP_DEFAULT_PRIVATE_ADDR_CYCLE_INTERVAL_S	components\softdevice\s120\headers\ble_gap.h	165;"	d
BLE_GAP_DEVNAME_MAX_LEN	components\softdevice\s120\headers\ble_gap.h	341;"	d
BLE_GAP_DISC_MODE_GENERAL	components\softdevice\s120\headers\ble_gap.h	282;"	d
BLE_GAP_DISC_MODE_LIMITED	components\softdevice\s120\headers\ble_gap.h	281;"	d
BLE_GAP_DISC_MODE_NOT_DISCOVERABLE	components\softdevice\s120\headers\ble_gap.h	280;"	d
BLE_GAP_EVTS	components\softdevice\s120\headers\ble_gap.h	/^enum BLE_GAP_EVTS$/;"	g
BLE_GAP_EVT_ADV_REPORT	components\softdevice\s120\headers\ble_gap.h	/^  BLE_GAP_EVT_ADV_REPORT,                       \/**< Advertising report. *\/$/;"	e	enum:BLE_GAP_EVTS
BLE_GAP_EVT_AUTH_KEY_REQUEST	components\softdevice\s120\headers\ble_gap.h	/^  BLE_GAP_EVT_AUTH_KEY_REQUEST,                 \/**< Request to provide an authentication key. *\/$/;"	e	enum:BLE_GAP_EVTS
BLE_GAP_EVT_AUTH_STATUS	components\softdevice\s120\headers\ble_gap.h	/^  BLE_GAP_EVT_AUTH_STATUS,                      \/**< Authentication procedure completed with status. *\/$/;"	e	enum:BLE_GAP_EVTS
BLE_GAP_EVT_CONNECTED	components\softdevice\s120\headers\ble_gap.h	/^  BLE_GAP_EVT_CONNECTED  = BLE_GAP_EVT_BASE,    \/**< Connection established. *\/$/;"	e	enum:BLE_GAP_EVTS
BLE_GAP_EVT_CONN_PARAM_UPDATE	components\softdevice\s120\headers\ble_gap.h	/^  BLE_GAP_EVT_CONN_PARAM_UPDATE,                \/**< Connection Parameters updated. *\/$/;"	e	enum:BLE_GAP_EVTS
BLE_GAP_EVT_CONN_PARAM_UPDATE_REQUEST	components\softdevice\s120\headers\ble_gap.h	/^  BLE_GAP_EVT_CONN_PARAM_UPDATE_REQUEST,        \/**< Connection Parameter Update Request. *\/$/;"	e	enum:BLE_GAP_EVTS
BLE_GAP_EVT_CONN_SEC_UPDATE	components\softdevice\s120\headers\ble_gap.h	/^  BLE_GAP_EVT_CONN_SEC_UPDATE,                  \/**< Connection security updated. *\/$/;"	e	enum:BLE_GAP_EVTS
BLE_GAP_EVT_DISCONNECTED	components\softdevice\s120\headers\ble_gap.h	/^  BLE_GAP_EVT_DISCONNECTED,                     \/**< Disconnected from peer. *\/$/;"	e	enum:BLE_GAP_EVTS
BLE_GAP_EVT_PASSKEY_DISPLAY	components\softdevice\s120\headers\ble_gap.h	/^  BLE_GAP_EVT_PASSKEY_DISPLAY,                  \/**< Request to display a passkey to the user. *\/$/;"	e	enum:BLE_GAP_EVTS
BLE_GAP_EVT_RSSI_CHANGED	components\softdevice\s120\headers\ble_gap.h	/^  BLE_GAP_EVT_RSSI_CHANGED,                     \/**< Signal strength measurement report. *\/$/;"	e	enum:BLE_GAP_EVTS
BLE_GAP_EVT_SCAN_REQ_REPORT	components\softdevice\s120\headers\ble_gap.h	/^  BLE_GAP_EVT_SCAN_REQ_REPORT,                  \/**< Scan request report. *\/$/;"	e	enum:BLE_GAP_EVTS
BLE_GAP_EVT_SEC_INFO_REQUEST	components\softdevice\s120\headers\ble_gap.h	/^  BLE_GAP_EVT_SEC_INFO_REQUEST,                 \/**< Request to provide security information. *\/$/;"	e	enum:BLE_GAP_EVTS
BLE_GAP_EVT_SEC_PARAMS_REQUEST	components\softdevice\s120\headers\ble_gap.h	/^  BLE_GAP_EVT_SEC_PARAMS_REQUEST,               \/**< Request to provide security parameters. *\/$/;"	e	enum:BLE_GAP_EVTS
BLE_GAP_EVT_SEC_REQUEST	components\softdevice\s120\headers\ble_gap.h	/^  BLE_GAP_EVT_SEC_REQUEST,                      \/**< Security Request. *\/$/;"	e	enum:BLE_GAP_EVTS
BLE_GAP_EVT_TIMEOUT	components\softdevice\s120\headers\ble_gap.h	/^  BLE_GAP_EVT_TIMEOUT,                          \/**< Timeout expired. *\/$/;"	e	enum:BLE_GAP_EVTS
BLE_GAP_H__	components\softdevice\s120\headers\ble_gap.h	44;"	d
BLE_GAP_IO_CAPS_DISPLAY_ONLY	components\softdevice\s120\headers\ble_gap.h	287;"	d
BLE_GAP_IO_CAPS_DISPLAY_YESNO	components\softdevice\s120\headers\ble_gap.h	288;"	d
BLE_GAP_IO_CAPS_KEYBOARD_DISPLAY	components\softdevice\s120\headers\ble_gap.h	291;"	d
BLE_GAP_IO_CAPS_KEYBOARD_ONLY	components\softdevice\s120\headers\ble_gap.h	289;"	d
BLE_GAP_IO_CAPS_NONE	components\softdevice\s120\headers\ble_gap.h	290;"	d
BLE_GAP_OPTS	components\softdevice\s120\headers\ble_gap.h	/^enum BLE_GAP_OPTS$/;"	g
BLE_GAP_OPT_CH_MAP	components\softdevice\s120\headers\ble_gap.h	/^  BLE_GAP_OPT_CH_MAP  = BLE_GAP_OPT_BASE,       \/**< Channel Map. @ref ble_gap_opt_ch_map_t  *\/$/;"	e	enum:BLE_GAP_OPTS
BLE_GAP_OPT_COMPAT_MODE	components\softdevice\s120\headers\ble_gap.h	/^  BLE_GAP_OPT_COMPAT_MODE                       \/**< Compatibility mode. @ref ble_gap_opt_compat_mode_t *\/$/;"	e	enum:BLE_GAP_OPTS
BLE_GAP_OPT_LOCAL_CONN_LATENCY	components\softdevice\s120\headers\ble_gap.h	/^  BLE_GAP_OPT_LOCAL_CONN_LATENCY,               \/**< Local connection latency. @ref ble_gap_opt_local_conn_latency_t *\/$/;"	e	enum:BLE_GAP_OPTS
BLE_GAP_OPT_PASSKEY	components\softdevice\s120\headers\ble_gap.h	/^  BLE_GAP_OPT_PASSKEY,                          \/**< Set passkey. @ref ble_gap_opt_passkey_t *\/$/;"	e	enum:BLE_GAP_OPTS
BLE_GAP_OPT_PRIVACY	components\softdevice\s120\headers\ble_gap.h	/^  BLE_GAP_OPT_PRIVACY,                          \/**< Custom privacy. @ref ble_gap_opt_privacy_t *\/$/;"	e	enum:BLE_GAP_OPTS
BLE_GAP_OPT_SCAN_REQ_REPORT	components\softdevice\s120\headers\ble_gap.h	/^  BLE_GAP_OPT_SCAN_REQ_REPORT,                  \/**< Scan request report. @ref ble_gap_opt_scan_req_report_t *\/$/;"	e	enum:BLE_GAP_OPTS
BLE_GAP_PASSKEY_LEN	components\softdevice\s120\headers\ble_gap.h	372;"	d
BLE_GAP_ROLE_CENTRAL	components\softdevice\s120\headers\ble_gap.h	137;"	d
BLE_GAP_ROLE_INVALID	components\softdevice\s120\headers\ble_gap.h	135;"	d
BLE_GAP_ROLE_PERIPH	components\softdevice\s120\headers\ble_gap.h	136;"	d
BLE_GAP_RSSI_THRESHOLD_INVALID	components\softdevice\s120\headers\ble_gap.h	344;"	d
BLE_GAP_SCAN_INTERVAL_MAX	components\softdevice\s120\headers\ble_gap.h	231;"	d
BLE_GAP_SCAN_INTERVAL_MIN	components\softdevice\s120\headers\ble_gap.h	230;"	d
BLE_GAP_SCAN_TIMEOUT_MAX	components\softdevice\s120\headers\ble_gap.h	245;"	d
BLE_GAP_SCAN_TIMEOUT_MIN	components\softdevice\s120\headers\ble_gap.h	244;"	d
BLE_GAP_SCAN_WINDOW_MAX	components\softdevice\s120\headers\ble_gap.h	238;"	d
BLE_GAP_SCAN_WINDOW_MIN	components\softdevice\s120\headers\ble_gap.h	237;"	d
BLE_GAP_SEC_KEY_LEN	components\softdevice\s120\headers\ble_gap.h	369;"	d
BLE_GAP_SEC_MODE	components\softdevice\s120\headers\ble_gap.h	384;"	d
BLE_GAP_SEC_RAND_LEN	components\softdevice\s120\headers\ble_gap.h	366;"	d
BLE_GAP_SEC_STATUS_AUTH_REQ	components\softdevice\s120\headers\ble_gap.h	309;"	d
BLE_GAP_SEC_STATUS_CONFIRM_VALUE	components\softdevice\s120\headers\ble_gap.h	310;"	d
BLE_GAP_SEC_STATUS_ENC_KEY_SIZE	components\softdevice\s120\headers\ble_gap.h	312;"	d
BLE_GAP_SEC_STATUS_INVALID_PARAMS	components\softdevice\s120\headers\ble_gap.h	316;"	d
BLE_GAP_SEC_STATUS_OOB_NOT_AVAILABLE	components\softdevice\s120\headers\ble_gap.h	308;"	d
BLE_GAP_SEC_STATUS_PAIRING_NOT_SUPP	components\softdevice\s120\headers\ble_gap.h	311;"	d
BLE_GAP_SEC_STATUS_PASSKEY_ENTRY_FAILED	components\softdevice\s120\headers\ble_gap.h	307;"	d
BLE_GAP_SEC_STATUS_PDU_INVALID	components\softdevice\s120\headers\ble_gap.h	306;"	d
BLE_GAP_SEC_STATUS_REPEATED_ATTEMPTS	components\softdevice\s120\headers\ble_gap.h	315;"	d
BLE_GAP_SEC_STATUS_SMP_CMD_UNSUPPORTED	components\softdevice\s120\headers\ble_gap.h	313;"	d
BLE_GAP_SEC_STATUS_SOURCE_LOCAL	components\softdevice\s120\headers\ble_gap.h	321;"	d
BLE_GAP_SEC_STATUS_SOURCE_REMOTE	components\softdevice\s120\headers\ble_gap.h	322;"	d
BLE_GAP_SEC_STATUS_SUCCESS	components\softdevice\s120\headers\ble_gap.h	304;"	d
BLE_GAP_SEC_STATUS_TIMEOUT	components\softdevice\s120\headers\ble_gap.h	305;"	d
BLE_GAP_SEC_STATUS_UNSPECIFIED	components\softdevice\s120\headers\ble_gap.h	314;"	d
BLE_GAP_SVCS	components\softdevice\s120\headers\ble_gap.h	/^enum BLE_GAP_SVCS$/;"	g
BLE_GAP_TIMEOUT_SRC_ADVERTISING	components\softdevice\s120\headers\ble_gap.h	143;"	d
BLE_GAP_TIMEOUT_SRC_CONN	components\softdevice\s120\headers\ble_gap.h	146;"	d
BLE_GAP_TIMEOUT_SRC_SCAN	components\softdevice\s120\headers\ble_gap.h	145;"	d
BLE_GAP_TIMEOUT_SRC_SECURITY_REQUEST	components\softdevice\s120\headers\ble_gap.h	144;"	d
BLE_GAP_WHITELIST_ADDR_MAX_COUNT	components\softdevice\s120\headers\ble_gap.h	375;"	d
BLE_GAP_WHITELIST_IRK_MAX_COUNT	components\softdevice\s120\headers\ble_gap.h	380;"	d
SD_BLE_GAP_ADDRESS_GET	components\softdevice\s120\headers\ble_gap.h	/^  SD_BLE_GAP_ADDRESS_GET,                      \/**< Get own Bluetooth Address. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_ADDRESS_SET	components\softdevice\s120\headers\ble_gap.h	/^  SD_BLE_GAP_ADDRESS_SET  = BLE_GAP_SVC_BASE,  \/**< Set own Bluetooth Address. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_ADV_DATA_SET	components\softdevice\s120\headers\ble_gap.h	/^  SD_BLE_GAP_ADV_DATA_SET,                     \/**< Set Advertising Data. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_ADV_START	components\softdevice\s120\headers\ble_gap.h	/^  SD_BLE_GAP_ADV_START,                        \/**< Start Advertising. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_ADV_STOP	components\softdevice\s120\headers\ble_gap.h	/^  SD_BLE_GAP_ADV_STOP,                         \/**< Stop Advertising. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_APPEARANCE_GET	components\softdevice\s120\headers\ble_gap.h	/^  SD_BLE_GAP_APPEARANCE_GET,                   \/**< Get Appearance. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_APPEARANCE_SET	components\softdevice\s120\headers\ble_gap.h	/^  SD_BLE_GAP_APPEARANCE_SET,                   \/**< Set Appearance. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_AUTHENTICATE	components\softdevice\s120\headers\ble_gap.h	/^  SD_BLE_GAP_AUTHENTICATE,                     \/**< Initiate Pairing\/Bonding. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_AUTH_KEY_REPLY	components\softdevice\s120\headers\ble_gap.h	/^  SD_BLE_GAP_AUTH_KEY_REPLY,                   \/**< Reply with an authentication key. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_CONNECT	components\softdevice\s120\headers\ble_gap.h	/^  SD_BLE_GAP_CONNECT,                          \/**< Connect. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_CONNECT_CANCEL	components\softdevice\s120\headers\ble_gap.h	/^  SD_BLE_GAP_CONNECT_CANCEL,                   \/**< Cancel ongoing connection procedure. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_CONN_PARAM_UPDATE	components\softdevice\s120\headers\ble_gap.h	/^  SD_BLE_GAP_CONN_PARAM_UPDATE,                \/**< Connection Parameter Update. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_CONN_SEC_GET	components\softdevice\s120\headers\ble_gap.h	/^  SD_BLE_GAP_CONN_SEC_GET,                     \/**< Obtain connection security level. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_DEVICE_NAME_GET	components\softdevice\s120\headers\ble_gap.h	/^  SD_BLE_GAP_DEVICE_NAME_GET,                  \/**< Get Device Name. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_DEVICE_NAME_SET	components\softdevice\s120\headers\ble_gap.h	/^  SD_BLE_GAP_DEVICE_NAME_SET,                  \/**< Set Device Name. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_DISCONNECT	components\softdevice\s120\headers\ble_gap.h	/^  SD_BLE_GAP_DISCONNECT,                       \/**< Disconnect. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_ENCRYPT	components\softdevice\s120\headers\ble_gap.h	/^  SD_BLE_GAP_ENCRYPT,                          \/**< Initiate encryption procedure. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_PPCP_GET	components\softdevice\s120\headers\ble_gap.h	/^  SD_BLE_GAP_PPCP_GET,                         \/**< Get PPCP. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_PPCP_SET	components\softdevice\s120\headers\ble_gap.h	/^  SD_BLE_GAP_PPCP_SET,                         \/**< Set PPCP. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_RSSI_GET	components\softdevice\s120\headers\ble_gap.h	/^  SD_BLE_GAP_RSSI_GET,                         \/**< Get the last RSSI sample. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_RSSI_START	components\softdevice\s120\headers\ble_gap.h	/^  SD_BLE_GAP_RSSI_START,                       \/**< Start reporting of changes in RSSI. *\/ $/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_RSSI_STOP	components\softdevice\s120\headers\ble_gap.h	/^  SD_BLE_GAP_RSSI_STOP,                        \/**< Stop reporting of changes in RSSI. *\/ $/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_SCAN_START	components\softdevice\s120\headers\ble_gap.h	/^  SD_BLE_GAP_SCAN_START,                       \/**< Start Scanning. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_SCAN_STOP	components\softdevice\s120\headers\ble_gap.h	/^  SD_BLE_GAP_SCAN_STOP,                        \/**< Stop Scanning. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_SEC_INFO_REPLY	components\softdevice\s120\headers\ble_gap.h	/^  SD_BLE_GAP_SEC_INFO_REPLY,                   \/**< Reply with Security Information. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_SEC_PARAMS_REPLY	components\softdevice\s120\headers\ble_gap.h	/^  SD_BLE_GAP_SEC_PARAMS_REPLY,                 \/**< Reply with Security Parameters. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_TX_POWER_SET	components\softdevice\s120\headers\ble_gap.h	/^  SD_BLE_GAP_TX_POWER_SET,                     \/**< Set TX Power. *\/$/;"	e	enum:BLE_GAP_SVCS
active	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t                 active    : 1;        \/**< If 1, perform active scanning (scan requests). *\/$/;"	m	struct:__anon601
addr	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t addr[BLE_GAP_ADDR_LEN];       \/**< 48-bit address, LSB format. *\/$/;"	m	struct:__anon593
addr_count	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t             addr_count;      \/**< Count of device addresses in array, up to @ref BLE_GAP_WHITELIST_ADDR_MAX_COUNT. *\/$/;"	m	struct:__anon598
addr_type	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t addr_type;                    \/**< See @ref BLE_GAP_ADDR_TYPES. *\/$/;"	m	struct:__anon593
adv_report	components\softdevice\s120\headers\ble_gap.h	/^    ble_gap_evt_adv_report_t                  adv_report;                   \/**< Advertising Report Event Parameters. *\/$/;"	m	union:__anon627::__anon628
auth	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t   auth : 1;                   \/**< Authenticated Key. *\/$/;"	m	struct:__anon604
auth_key_request	components\softdevice\s120\headers\ble_gap.h	/^    ble_gap_evt_auth_key_request_t            auth_key_request;             \/**< Authentication Key Request Event Parameters. *\/$/;"	m	union:__anon627::__anon628
auth_status	components\softdevice\s120\headers\ble_gap.h	/^    ble_gap_evt_auth_status_t                 auth_status;                  \/**< Authentication Status Event Parameters. *\/$/;"	m	union:__anon627::__anon628
auth_status	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t               auth_status;            \/**< Authentication status, see @ref BLE_GAP_SEC_STATUS. *\/$/;"	m	struct:__anon619
ble_gap_addr_t	components\softdevice\s120\headers\ble_gap.h	/^} ble_gap_addr_t;$/;"	t	typeref:struct:__anon593
ble_gap_adv_ch_mask_t	components\softdevice\s120\headers\ble_gap.h	/^} ble_gap_adv_ch_mask_t;$/;"	t	typeref:struct:__anon599
ble_gap_adv_params_t	components\softdevice\s120\headers\ble_gap.h	/^} ble_gap_adv_params_t;$/;"	t	typeref:struct:__anon600
ble_gap_conn_params_t	components\softdevice\s120\headers\ble_gap.h	/^} ble_gap_conn_params_t;$/;"	t	typeref:struct:__anon594
ble_gap_conn_sec_mode_t	components\softdevice\s120\headers\ble_gap.h	/^} ble_gap_conn_sec_mode_t;$/;"	t	typeref:struct:__anon595
ble_gap_conn_sec_t	components\softdevice\s120\headers\ble_gap.h	/^} ble_gap_conn_sec_t;$/;"	t	typeref:struct:__anon596
ble_gap_enable_params_t	components\softdevice\s120\headers\ble_gap.h	/^} ble_gap_enable_params_t;$/;"	t	typeref:struct:__anon592
ble_gap_enc_info_t	components\softdevice\s120\headers\ble_gap.h	/^} ble_gap_enc_info_t;$/;"	t	typeref:struct:__anon604
ble_gap_enc_key_t	components\softdevice\s120\headers\ble_gap.h	/^} ble_gap_enc_key_t;$/;"	t	typeref:struct:__anon615
ble_gap_evt_adv_report_t	components\softdevice\s120\headers\ble_gap.h	/^} ble_gap_evt_adv_report_t;$/;"	t	typeref:struct:__anon623
ble_gap_evt_auth_key_request_t	components\softdevice\s120\headers\ble_gap.h	/^} ble_gap_evt_auth_key_request_t;$/;"	t	typeref:struct:__anon613
ble_gap_evt_auth_status_t	components\softdevice\s120\headers\ble_gap.h	/^} ble_gap_evt_auth_status_t;$/;"	t	typeref:struct:__anon619
ble_gap_evt_conn_param_update_request_t	components\softdevice\s120\headers\ble_gap.h	/^} ble_gap_evt_conn_param_update_request_t;$/;"	t	typeref:struct:__anon626
ble_gap_evt_conn_param_update_t	components\softdevice\s120\headers\ble_gap.h	/^} ble_gap_evt_conn_param_update_t;$/;"	t	typeref:struct:__anon609
ble_gap_evt_conn_sec_update_t	components\softdevice\s120\headers\ble_gap.h	/^} ble_gap_evt_conn_sec_update_t;$/;"	t	typeref:struct:__anon620
ble_gap_evt_connected_t	components\softdevice\s120\headers\ble_gap.h	/^} ble_gap_evt_connected_t;$/;"	t	typeref:struct:__anon607
ble_gap_evt_disconnected_t	components\softdevice\s120\headers\ble_gap.h	/^} ble_gap_evt_disconnected_t;$/;"	t	typeref:struct:__anon608
ble_gap_evt_passkey_display_t	components\softdevice\s120\headers\ble_gap.h	/^} ble_gap_evt_passkey_display_t;$/;"	t	typeref:struct:__anon612
ble_gap_evt_rssi_changed_t	components\softdevice\s120\headers\ble_gap.h	/^} ble_gap_evt_rssi_changed_t;$/;"	t	typeref:struct:__anon622
ble_gap_evt_scan_req_report_t	components\softdevice\s120\headers\ble_gap.h	/^} ble_gap_evt_scan_req_report_t;$/;"	t	typeref:struct:__anon624
ble_gap_evt_sec_info_request_t	components\softdevice\s120\headers\ble_gap.h	/^} ble_gap_evt_sec_info_request_t;$/;"	t	typeref:struct:__anon611
ble_gap_evt_sec_params_request_t	components\softdevice\s120\headers\ble_gap.h	/^} ble_gap_evt_sec_params_request_t;$/;"	t	typeref:struct:__anon610
ble_gap_evt_sec_request_t	components\softdevice\s120\headers\ble_gap.h	/^} ble_gap_evt_sec_request_t;$/;"	t	typeref:struct:__anon625
ble_gap_evt_t	components\softdevice\s120\headers\ble_gap.h	/^} ble_gap_evt_t;$/;"	t	typeref:struct:__anon627
ble_gap_evt_timeout_t	components\softdevice\s120\headers\ble_gap.h	/^} ble_gap_evt_timeout_t;$/;"	t	typeref:struct:__anon621
ble_gap_id_key_t	components\softdevice\s120\headers\ble_gap.h	/^} ble_gap_id_key_t;$/;"	t	typeref:struct:__anon616
ble_gap_irk_t	components\softdevice\s120\headers\ble_gap.h	/^} ble_gap_irk_t;$/;"	t	typeref:struct:__anon597
ble_gap_master_id_t	components\softdevice\s120\headers\ble_gap.h	/^} ble_gap_master_id_t;$/;"	t	typeref:struct:__anon605
ble_gap_opt_ch_map_t	components\softdevice\s120\headers\ble_gap.h	/^} ble_gap_opt_ch_map_t;$/;"	t	typeref:struct:__anon629
ble_gap_opt_compat_mode_t	components\softdevice\s120\headers\ble_gap.h	/^} ble_gap_opt_compat_mode_t;$/;"	t	typeref:struct:__anon634
ble_gap_opt_local_conn_latency_t	components\softdevice\s120\headers\ble_gap.h	/^} ble_gap_opt_local_conn_latency_t;$/;"	t	typeref:struct:__anon630
ble_gap_opt_passkey_t	components\softdevice\s120\headers\ble_gap.h	/^} ble_gap_opt_passkey_t;$/;"	t	typeref:struct:__anon631
ble_gap_opt_privacy_t	components\softdevice\s120\headers\ble_gap.h	/^} ble_gap_opt_privacy_t;$/;"	t	typeref:struct:__anon632
ble_gap_opt_scan_req_report_t	components\softdevice\s120\headers\ble_gap.h	/^} ble_gap_opt_scan_req_report_t;$/;"	t	typeref:struct:__anon633
ble_gap_opt_t	components\softdevice\s120\headers\ble_gap.h	/^} ble_gap_opt_t;$/;"	t	typeref:union:__anon635
ble_gap_scan_params_t	components\softdevice\s120\headers\ble_gap.h	/^} ble_gap_scan_params_t;$/;"	t	typeref:struct:__anon601
ble_gap_sec_kdist_t	components\softdevice\s120\headers\ble_gap.h	/^} ble_gap_sec_kdist_t;$/;"	t	typeref:struct:__anon602
ble_gap_sec_keys_t	components\softdevice\s120\headers\ble_gap.h	/^} ble_gap_sec_keys_t;$/;"	t	typeref:struct:__anon617
ble_gap_sec_keyset_t	components\softdevice\s120\headers\ble_gap.h	/^} ble_gap_sec_keyset_t;$/;"	t	typeref:struct:__anon618
ble_gap_sec_levels_t	components\softdevice\s120\headers\ble_gap.h	/^} ble_gap_sec_levels_t;$/;"	t	typeref:struct:__anon614
ble_gap_sec_params_t	components\softdevice\s120\headers\ble_gap.h	/^} ble_gap_sec_params_t;$/;"	t	typeref:struct:__anon603
ble_gap_sign_info_t	components\softdevice\s120\headers\ble_gap.h	/^} ble_gap_sign_info_t;$/;"	t	typeref:struct:__anon606
ble_gap_whitelist_t	components\softdevice\s120\headers\ble_gap.h	/^} ble_gap_whitelist_t;$/;"	t	typeref:struct:__anon598
bond	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t               bond    : 1;               \/**< Perform bonding. *\/$/;"	m	struct:__anon603
bond	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t    bond    : 1;                       \/**< Perform bonding. *\/$/;"	m	struct:__anon625
bonded	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t               bonded : 1;             \/**< Procedure resulted in a bond. *\/$/;"	m	struct:__anon619
ch_37_off	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t ch_37_off : 1;  \/**< Setting this bit to 1 will turn off advertising on channel 37 *\/$/;"	m	struct:__anon599
ch_38_off	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t ch_38_off : 1;  \/**< Setting this bit to 1 will turn off advertising on channel 38 *\/$/;"	m	struct:__anon599
ch_39_off	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t ch_39_off : 1;  \/**< Setting this bit to 1 will turn off advertising on channel 39 *\/$/;"	m	struct:__anon599
ch_map	components\softdevice\s120\headers\ble_gap.h	/^  ble_gap_opt_ch_map_t                  ch_map;                    \/**< Parameters for the Channel Map option. *\/$/;"	m	union:__anon635
ch_map	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t ch_map[5];                      \/**< Channel Map (37-bit). *\/$/;"	m	struct:__anon629
channel_mask	components\softdevice\s120\headers\ble_gap.h	/^  ble_gap_adv_ch_mask_t channel_mask;         \/**< Advertising channel mask. @see ble_gap_channel_mask_t for documentation. *\/$/;"	m	struct:__anon600
compat_mode	components\softdevice\s120\headers\ble_gap.h	/^  ble_gap_opt_compat_mode_t             compat_mode;               \/**< Parameters for the compatibility mode option.*\/$/;"	m	union:__anon635
conn_handle	components\softdevice\s120\headers\ble_gap.h	/^  uint16_t   conn_handle;                       \/**< Connection Handle *\/$/;"	m	struct:__anon630
conn_handle	components\softdevice\s120\headers\ble_gap.h	/^  uint16_t conn_handle;                                     \/**< Connection Handle on which event occured. *\/$/;"	m	struct:__anon627
conn_handle	components\softdevice\s120\headers\ble_gap.h	/^  uint16_t conn_handle;                   \/**< Connection Handle (only applicable for get) *\/$/;"	m	struct:__anon629
conn_param_update	components\softdevice\s120\headers\ble_gap.h	/^    ble_gap_evt_conn_param_update_t           conn_param_update;            \/**< Connection Parameter Update Parameters. *\/$/;"	m	union:__anon627::__anon628
conn_param_update_request	components\softdevice\s120\headers\ble_gap.h	/^    ble_gap_evt_conn_param_update_request_t   conn_param_update_request;    \/**< Connection Parameter Update Parameters. *\/$/;"	m	union:__anon627::__anon628
conn_params	components\softdevice\s120\headers\ble_gap.h	/^  ble_gap_conn_params_t conn_params;            \/**<  GAP Connection Parameters. *\/$/;"	m	struct:__anon609
conn_params	components\softdevice\s120\headers\ble_gap.h	/^  ble_gap_conn_params_t conn_params;            \/**<  GAP Connection Parameters. *\/$/;"	m	struct:__anon626
conn_params	components\softdevice\s120\headers\ble_gap.h	/^  ble_gap_conn_params_t conn_params;            \/**< GAP Connection Parameters. *\/$/;"	m	struct:__anon607
conn_sec	components\softdevice\s120\headers\ble_gap.h	/^  ble_gap_conn_sec_t conn_sec;                  \/**< Connection security level. *\/$/;"	m	struct:__anon620
conn_sec_update	components\softdevice\s120\headers\ble_gap.h	/^    ble_gap_evt_conn_sec_update_t             conn_sec_update;              \/**< Connection Security Update Event Parameters. *\/$/;"	m	union:__anon627::__anon628
conn_sup_timeout	components\softdevice\s120\headers\ble_gap.h	/^  uint16_t conn_sup_timeout;          \/**< Connection Supervision Timeout in 10 ms units, see @ref BLE_GAP_CP_LIMITS.*\/$/;"	m	struct:__anon594
connected	components\softdevice\s120\headers\ble_gap.h	/^    ble_gap_evt_connected_t                   connected;                    \/**< Connected Event Parameters. *\/$/;"	m	union:__anon627::__anon628
csrk	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t   csrk[BLE_GAP_SEC_KEY_LEN];        \/**< Connection Signature Resolving Key. *\/$/;"	m	struct:__anon606
data	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t        data[BLE_GAP_ADV_MAX_SIZE];    \/**< Advertising or scan response data. *\/$/;"	m	struct:__anon623
disconnected	components\softdevice\s120\headers\ble_gap.h	/^    ble_gap_evt_disconnected_t                disconnected;                 \/**< Disconnected Event Parameters. *\/$/;"	m	union:__anon627::__anon628
dlen	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t        dlen     : 5;                  \/**< Advertising or scan response data length. *\/$/;"	m	struct:__anon623
ediv	components\softdevice\s120\headers\ble_gap.h	/^  uint16_t  ediv;                       \/**< Encrypted Diversifier. *\/$/;"	m	struct:__anon605
enable	components\softdevice\s120\headers\ble_gap.h	/^   uint8_t enable : 1;                           \/**< Enable scan request reports. *\/$/;"	m	struct:__anon633
enc	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t enc     : 1;                        \/**< Long Term Key and Master Identification. *\/$/;"	m	struct:__anon602
enc_info	components\softdevice\s120\headers\ble_gap.h	/^  ble_gap_enc_info_t    enc_info;             \/**< Encryption Information. *\/$/;"	m	struct:__anon615
enc_info	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t             enc_info  : 1;                 \/**< If 1, Encryption Information required. *\/$/;"	m	struct:__anon611
encr_key_size	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t                 encr_key_size;      \/**< Length of currently active encryption key, 7 to 16 octets (only applicable for bonding procedures). *\/$/;"	m	struct:__anon596
error_src	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t               error_src : 2;          \/**< On error, source that caused the failure, see @ref BLE_GAP_SEC_STATUS_SOURCES. *\/$/;"	m	struct:__anon619
fp	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t               fp;                   \/**< Filter Policy, see @ref BLE_GAP_ADV_FILTER_POLICIES. *\/$/;"	m	struct:__anon600
id	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t id      : 1;                        \/**< Identity Resolving Key and Identity Address Information. *\/$/;"	m	struct:__anon602
id_addr_info	components\softdevice\s120\headers\ble_gap.h	/^  ble_gap_addr_t        id_addr_info;         \/**< Identity Address Information. *\/$/;"	m	struct:__anon616
id_info	components\softdevice\s120\headers\ble_gap.h	/^  ble_gap_irk_t         id_info;              \/**< Identity Information. *\/$/;"	m	struct:__anon616
id_info	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t             id_info   : 1;                 \/**< If 1, Identity Information required. *\/$/;"	m	struct:__anon611
interval	components\softdevice\s120\headers\ble_gap.h	/^  uint16_t                interval;             \/**< Scan interval between 0x0004 and 0x4000 in 0.625ms units (2.5ms to 10.24s). *\/$/;"	m	struct:__anon601
interval	components\softdevice\s120\headers\ble_gap.h	/^  uint16_t              interval;             \/**< Advertising interval between 0x0020 and 0x4000 in 0.625 ms units (20ms to 10.24s), see @ref BLE_GAP_ADV_INTERVALS.$/;"	m	struct:__anon600
interval_s	components\softdevice\s120\headers\ble_gap.h	/^  uint16_t        interval_s;   \/**< When input: Custom private address cycle interval in seconds. When output: The current private address cycle interval. *\/$/;"	m	struct:__anon632
io_caps	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t               io_caps : 3;               \/**< IO capabilities, see @ref BLE_GAP_IO_CAPS. *\/$/;"	m	struct:__anon603
irk	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t irk[BLE_GAP_SEC_KEY_LEN];   \/**< Array containing IRK. *\/$/;"	m	struct:__anon597
irk_count	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t             irk_count;       \/**< Count of IRKs in array, up to @ref BLE_GAP_WHITELIST_IRK_MAX_COUNT. *\/$/;"	m	struct:__anon598
irk_match	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t               irk_match :1;           \/**< If 1, peer device's address resolved using an IRK. *\/$/;"	m	struct:__anon607
irk_match_idx	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t               irk_match_idx  :7;      \/**< Index in IRK list where the address was matched. *\/$/;"	m	struct:__anon607
kdist_central	components\softdevice\s120\headers\ble_gap.h	/^  ble_gap_sec_kdist_t   kdist_central;             \/**< Key distribution bitmap: keys that the central device will distribute. *\/$/;"	m	struct:__anon603
kdist_central	components\softdevice\s120\headers\ble_gap.h	/^  ble_gap_sec_kdist_t   kdist_central;          \/**< Bitmap stating which keys were exchanged (distributed) by the central. *\/$/;"	m	struct:__anon619
kdist_periph	components\softdevice\s120\headers\ble_gap.h	/^  ble_gap_sec_kdist_t   kdist_periph;              \/**< Key distribution bitmap: keys that the peripheral device will distribute. *\/$/;"	m	struct:__anon603
kdist_periph	components\softdevice\s120\headers\ble_gap.h	/^  ble_gap_sec_kdist_t   kdist_periph;           \/**< Bitmap stating which keys were exchanged (distributed) by the peripheral. *\/$/;"	m	struct:__anon619
key_type	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t key_type;                             \/**< See @ref BLE_GAP_AUTH_KEY_TYPES. *\/$/;"	m	struct:__anon613
keys_central	components\softdevice\s120\headers\ble_gap.h	/^  ble_gap_sec_keys_t keys_central;    \/**< Keys distributed by the device in the Central role. *\/$/;"	m	struct:__anon618
keys_periph	components\softdevice\s120\headers\ble_gap.h	/^  ble_gap_sec_keys_t keys_periph;     \/**< Keys distributed by the device in the Peripheral role. *\/$/;"	m	struct:__anon618
local_conn_latency	components\softdevice\s120\headers\ble_gap.h	/^  ble_gap_opt_local_conn_latency_t      local_conn_latency;        \/**< Parameters for the Local connection latency option *\/$/;"	m	union:__anon635
ltk	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t   ltk[BLE_GAP_SEC_KEY_LEN];   \/**< Long Term Key. *\/$/;"	m	struct:__anon604
ltk_len	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t   ltk_len : 7;                \/**< LTK length in octets. *\/$/;"	m	struct:__anon604
lv	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t lv : 4;                     \/**< Level (1, 2 or 3), 0 for no permissions at all. *\/$/;"	m	struct:__anon595
lv1	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t lv1 : 1;                              \/**< If 1: Level 1 is supported. *\/$/;"	m	struct:__anon614
lv2	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t lv2 : 1;                              \/**< If 1: Level 2 is supported. *\/$/;"	m	struct:__anon614
lv3	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t lv3 : 1;                              \/**< If 1: Level 3 is supported. *\/$/;"	m	struct:__anon614
master_id	components\softdevice\s120\headers\ble_gap.h	/^  ble_gap_master_id_t   master_id;            \/**< Master Identification. *\/$/;"	m	struct:__anon615
master_id	components\softdevice\s120\headers\ble_gap.h	/^  ble_gap_master_id_t master_id;                     \/**< Master Identification for LTK lookup. *\/$/;"	m	struct:__anon611
max_conn_interval	components\softdevice\s120\headers\ble_gap.h	/^  uint16_t max_conn_interval;         \/**< Maximum Connection Interval in 1.25 ms units, see @ref BLE_GAP_CP_LIMITS.*\/$/;"	m	struct:__anon594
max_key_size	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t               max_key_size;              \/**< Maximum encryption key size in octets between min_key_size and 16. *\/$/;"	m	struct:__anon603
min_conn_interval	components\softdevice\s120\headers\ble_gap.h	/^  uint16_t min_conn_interval;         \/**< Minimum Connection Interval in 1.25 ms units, see @ref BLE_GAP_CP_LIMITS.*\/$/;"	m	struct:__anon594
min_key_size	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t               min_key_size;              \/**< Minimum encryption key size in octets between 7 and 16. If 0 then not applicable in this instance. *\/$/;"	m	struct:__anon603
mitm	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t               mitm    : 1;               \/**< Man In The Middle protection required. *\/$/;"	m	struct:__anon603
mitm	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t    mitm    : 1;                       \/**< Man In The Middle protection required. *\/$/;"	m	struct:__anon625
mode_1_enable	components\softdevice\s120\headers\ble_gap.h	/^   uint8_t mode_1_enable : 1;                           \/**< Enable compatibility mode 1.*\/$/;"	m	struct:__anon634
oob	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t               oob     : 1;               \/**< Out Of Band data available. *\/$/;"	m	struct:__anon603
own_addr	components\softdevice\s120\headers\ble_gap.h	/^  ble_gap_addr_t        own_addr;               \/**< Bluetooth address of the local device used during connection setup. *\/$/;"	m	struct:__anon607
p_actual_latency	components\softdevice\s120\headers\ble_gap.h	/^  uint16_t * p_actual_latency;                  \/**< Pointer to storage for the actual local connection latency (can be set to NULL to skip return value). *\/$/;"	m	struct:__anon630
p_enc_key	components\softdevice\s120\headers\ble_gap.h	/^  ble_gap_enc_key_t     *p_enc_key;           \/**< Encryption Key, or NULL. *\/$/;"	m	struct:__anon617
p_id_key	components\softdevice\s120\headers\ble_gap.h	/^  ble_gap_id_key_t      *p_id_key;            \/**< Identity Key, or NULL. *\/$/;"	m	struct:__anon617
p_irk	components\softdevice\s120\headers\ble_gap.h	/^  ble_gap_irk_t * p_irk;        \/**< When input: Pointer to custom IRK, or NULL to use\/reset to the device's default IRK. When output: Pointer to where the current IRK is to be stored, or NULL to not read out the IRK. *\/$/;"	m	struct:__anon632
p_passkey	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t * p_passkey;                          \/**< Pointer to 6-digit ASCII string (digit 0..9 only, no NULL termination) passkey to be used during pairing. If this is NULL, the SoftDevice will generate a random passkey if required.*\/$/;"	m	struct:__anon631
p_peer_addr	components\softdevice\s120\headers\ble_gap.h	/^  ble_gap_addr_t       *p_peer_addr;          \/**< For @ref BLE_GAP_ADV_TYPE_ADV_DIRECT_IND mode only, known peer address. *\/$/;"	m	struct:__anon600
p_sign_key	components\softdevice\s120\headers\ble_gap.h	/^  ble_gap_sign_info_t   *p_sign_key;          \/**< Signing Key, or NULL. *\/$/;"	m	struct:__anon617
p_whitelist	components\softdevice\s120\headers\ble_gap.h	/^  ble_gap_whitelist_t  *p_whitelist;          \/**< Pointer to whitelist, NULL if none is given. *\/$/;"	m	struct:__anon600
p_whitelist	components\softdevice\s120\headers\ble_gap.h	/^  ble_gap_whitelist_t *   p_whitelist;          \/**< Pointer to whitelist, NULL if none is given. *\/$/;"	m	struct:__anon601
params	components\softdevice\s120\headers\ble_gap.h	/^  } params;                                                                 \/**< Event Parameters. *\/$/;"	m	struct:__anon627	typeref:union:__anon627::__anon628
passkey	components\softdevice\s120\headers\ble_gap.h	/^  ble_gap_opt_passkey_t                 passkey;                   \/**< Parameters for the Passkey option.*\/$/;"	m	union:__anon635
passkey	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t passkey[BLE_GAP_PASSKEY_LEN];         \/**< 6-digit passkey in ASCII ('0'-'9' digits only). *\/$/;"	m	struct:__anon612
passkey_display	components\softdevice\s120\headers\ble_gap.h	/^    ble_gap_evt_passkey_display_t             passkey_display;              \/**< Passkey Display Event Parameters. *\/$/;"	m	union:__anon627::__anon628
peer_addr	components\softdevice\s120\headers\ble_gap.h	/^  ble_gap_addr_t          peer_addr;         \/**< Bluetooth address of the peer device. *\/$/;"	m	struct:__anon624
peer_addr	components\softdevice\s120\headers\ble_gap.h	/^  ble_gap_addr_t        peer_addr;              \/**< Bluetooth address of the peer device. *\/$/;"	m	struct:__anon607
peer_addr	components\softdevice\s120\headers\ble_gap.h	/^  ble_gap_addr_t      peer_addr;                     \/**< Bluetooth address of the peer device. *\/$/;"	m	struct:__anon611
peer_addr	components\softdevice\s120\headers\ble_gap.h	/^  ble_gap_addr_t peer_addr;                     \/**< Bluetooth address of the peer device. *\/$/;"	m	struct:__anon623
peer_params	components\softdevice\s120\headers\ble_gap.h	/^  ble_gap_sec_params_t peer_params;             \/**< Initiator Security Parameters. *\/$/;"	m	struct:__anon610
pp_addrs	components\softdevice\s120\headers\ble_gap.h	/^  ble_gap_addr_t    **pp_addrs;        \/**< Pointer to array of device address pointers, pointing to addresses to be used in whitelist. NULL if none are given. *\/$/;"	m	struct:__anon598
pp_irks	components\softdevice\s120\headers\ble_gap.h	/^  ble_gap_irk_t     **pp_irks;         \/**< Pointer to array of Identity Resolving Key (IRK) pointers, each pointing to an IRK in the whitelist. NULL if none are given. *\/$/;"	m	struct:__anon598
privacy	components\softdevice\s120\headers\ble_gap.h	/^  ble_gap_opt_privacy_t                 privacy;                   \/**< Parameters for the Custom privacy option. *\/$/;"	m	union:__anon635
rand	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t   rand[BLE_GAP_SEC_RAND_LEN]; \/**< Random Number. *\/$/;"	m	struct:__anon605
reason	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t reason;                               \/**< HCI error code, see @ref BLE_HCI_STATUS_CODES. *\/$/;"	m	struct:__anon608
requested_latency	components\softdevice\s120\headers\ble_gap.h	/^  uint16_t   requested_latency;                 \/**< Requested local connection latency. *\/$/;"	m	struct:__anon630
role	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t role:2;             \/**< BLE role to use, see @ref BLE_GAP_ROLES *\/$/;"	m	struct:__anon592
rssi	components\softdevice\s120\headers\ble_gap.h	/^  int8_t                  rssi;              \/**< Received Signal Strength Indication in dBm. *\/$/;"	m	struct:__anon624
rssi	components\softdevice\s120\headers\ble_gap.h	/^  int8_t         rssi;                          \/**< Received Signal Strength Indication in dBm. *\/$/;"	m	struct:__anon623
rssi	components\softdevice\s120\headers\ble_gap.h	/^  int8_t  rssi;                               \/**< Received Signal Strength Indication in dBm. *\/$/;"	m	struct:__anon622
rssi_changed	components\softdevice\s120\headers\ble_gap.h	/^    ble_gap_evt_rssi_changed_t                rssi_changed;                 \/**< RSSI Event parameters. *\/$/;"	m	union:__anon627::__anon628
scan_req_report	components\softdevice\s120\headers\ble_gap.h	/^    ble_gap_evt_scan_req_report_t             scan_req_report;              \/**< Scan Request Report parameters. *\/$/;"	m	union:__anon627::__anon628
scan_req_report	components\softdevice\s120\headers\ble_gap.h	/^  ble_gap_opt_scan_req_report_t         scan_req_report;           \/**< Parameters for the scan request report option.*\/$/;"	m	union:__anon635
scan_rsp	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t        scan_rsp : 1;                  \/**< If 1, the report corresponds to a scan response and the type field may be ignored. *\/$/;"	m	struct:__anon623
sec_info_request	components\softdevice\s120\headers\ble_gap.h	/^    ble_gap_evt_sec_info_request_t            sec_info_request;             \/**< Security Information Request Event Parameters. *\/$/;"	m	union:__anon627::__anon628
sec_mode	components\softdevice\s120\headers\ble_gap.h	/^  ble_gap_conn_sec_mode_t sec_mode;           \/**< Currently active security mode for this connection.*\/$/;"	m	struct:__anon596
sec_params_request	components\softdevice\s120\headers\ble_gap.h	/^    ble_gap_evt_sec_params_request_t          sec_params_request;           \/**< Security Parameters Request Event Parameters. *\/$/;"	m	union:__anon627::__anon628
sec_request	components\softdevice\s120\headers\ble_gap.h	/^    ble_gap_evt_sec_request_t                 sec_request;                  \/**< Security Request Event Parameters. *\/$/;"	m	union:__anon627::__anon628
selective	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t                 selective : 1;        \/**< If 1, ignore unknown devices (non whitelisted). *\/$/;"	m	struct:__anon601
sign	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t sign    : 1;                        \/**< Connection Signature Resolving Key. *\/$/;"	m	struct:__anon602
sign_info	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t             sign_info : 1;                 \/**< If 1, Signing Information required. *\/$/;"	m	struct:__anon611
slave_latency	components\softdevice\s120\headers\ble_gap.h	/^  uint16_t slave_latency;             \/**< Slave Latency in number of connection events, see @ref BLE_GAP_CP_LIMITS.*\/$/;"	m	struct:__anon594
sm	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t sm : 4;                     \/**< Security Mode (1 or 2), 0 for no permissions at all. *\/$/;"	m	struct:__anon595
sm1_levels	components\softdevice\s120\headers\ble_gap.h	/^  ble_gap_sec_levels_t  sm1_levels;             \/**< Levels supported in Security Mode 1. *\/$/;"	m	struct:__anon619
sm2_levels	components\softdevice\s120\headers\ble_gap.h	/^  ble_gap_sec_levels_t  sm2_levels;             \/**< Levels supported in Security Mode 2. *\/$/;"	m	struct:__anon619
src	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t src;                                  \/**< Source of timeout event, see @ref BLE_GAP_TIMEOUT_SOURCES. *\/$/;"	m	struct:__anon621
timeout	components\softdevice\s120\headers\ble_gap.h	/^    ble_gap_evt_timeout_t                     timeout;                      \/**< Timeout Event Parameters. *\/$/;"	m	union:__anon627::__anon628
timeout	components\softdevice\s120\headers\ble_gap.h	/^  uint16_t                timeout;              \/**< Scan timeout between 0x0001 and 0xFFFF in seconds, 0x0000 disables timeout. *\/$/;"	m	struct:__anon601
timeout	components\softdevice\s120\headers\ble_gap.h	/^  uint16_t              timeout;              \/**< Advertising timeout between 0x0001 and 0x3FFF in seconds, 0x0000 disables timeout. See also @ref BLE_GAP_ADV_TIMEOUT_VALUES. If type equals @ref BLE_GAP_ADV_TYPE_ADV_DIRECT_IND, this parameter must be set to 0 for High duty cycle directed advertising. *\/$/;"	m	struct:__anon600
type	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t               type;                 \/**< See @ref BLE_GAP_ADV_TYPES. *\/$/;"	m	struct:__anon600
type	components\softdevice\s120\headers\ble_gap.h	/^  uint8_t        type     : 2;                  \/**< See @ref BLE_GAP_ADV_TYPES. Only valid if the scan_rsp field is 0. *\/$/;"	m	struct:__anon623
window	components\softdevice\s120\headers\ble_gap.h	/^  uint16_t                window;               \/**< Scan window between 0x0004 and 0x4000 in 0.625ms units (2.5ms to 10.24s). *\/$/;"	m	struct:__anon601
BLE_GATT_CPF_FORMAT_2BIT	components\softdevice\s120\headers\ble_gatt.h	132;"	d
BLE_GATT_CPF_FORMAT_BOOLEAN	components\softdevice\s120\headers\ble_gatt.h	131;"	d
BLE_GATT_CPF_FORMAT_DUINT16	components\softdevice\s120\headers\ble_gatt.h	154;"	d
BLE_GATT_CPF_FORMAT_FLOAT	components\softdevice\s120\headers\ble_gatt.h	153;"	d
BLE_GATT_CPF_FORMAT_FLOAT32	components\softdevice\s120\headers\ble_gatt.h	150;"	d
BLE_GATT_CPF_FORMAT_FLOAT64	components\softdevice\s120\headers\ble_gatt.h	151;"	d
BLE_GATT_CPF_FORMAT_NIBBLE	components\softdevice\s120\headers\ble_gatt.h	133;"	d
BLE_GATT_CPF_FORMAT_RFU	components\softdevice\s120\headers\ble_gatt.h	130;"	d
BLE_GATT_CPF_FORMAT_SFLOAT	components\softdevice\s120\headers\ble_gatt.h	152;"	d
BLE_GATT_CPF_FORMAT_SINT12	components\softdevice\s120\headers\ble_gatt.h	143;"	d
BLE_GATT_CPF_FORMAT_SINT128	components\softdevice\s120\headers\ble_gatt.h	149;"	d
BLE_GATT_CPF_FORMAT_SINT16	components\softdevice\s120\headers\ble_gatt.h	144;"	d
BLE_GATT_CPF_FORMAT_SINT24	components\softdevice\s120\headers\ble_gatt.h	145;"	d
BLE_GATT_CPF_FORMAT_SINT32	components\softdevice\s120\headers\ble_gatt.h	146;"	d
BLE_GATT_CPF_FORMAT_SINT48	components\softdevice\s120\headers\ble_gatt.h	147;"	d
BLE_GATT_CPF_FORMAT_SINT64	components\softdevice\s120\headers\ble_gatt.h	148;"	d
BLE_GATT_CPF_FORMAT_SINT8	components\softdevice\s120\headers\ble_gatt.h	142;"	d
BLE_GATT_CPF_FORMAT_STRUCT	components\softdevice\s120\headers\ble_gatt.h	157;"	d
BLE_GATT_CPF_FORMAT_UINT12	components\softdevice\s120\headers\ble_gatt.h	135;"	d
BLE_GATT_CPF_FORMAT_UINT128	components\softdevice\s120\headers\ble_gatt.h	141;"	d
BLE_GATT_CPF_FORMAT_UINT16	components\softdevice\s120\headers\ble_gatt.h	136;"	d
BLE_GATT_CPF_FORMAT_UINT24	components\softdevice\s120\headers\ble_gatt.h	137;"	d
BLE_GATT_CPF_FORMAT_UINT32	components\softdevice\s120\headers\ble_gatt.h	138;"	d
BLE_GATT_CPF_FORMAT_UINT48	components\softdevice\s120\headers\ble_gatt.h	139;"	d
BLE_GATT_CPF_FORMAT_UINT64	components\softdevice\s120\headers\ble_gatt.h	140;"	d
BLE_GATT_CPF_FORMAT_UINT8	components\softdevice\s120\headers\ble_gatt.h	134;"	d
BLE_GATT_CPF_FORMAT_UTF16S	components\softdevice\s120\headers\ble_gatt.h	156;"	d
BLE_GATT_CPF_FORMAT_UTF8S	components\softdevice\s120\headers\ble_gatt.h	155;"	d
BLE_GATT_CPF_NAMESPACE_BTSIG	components\softdevice\s120\headers\ble_gatt.h	163;"	d
BLE_GATT_CPF_NAMESPACE_DESCRIPTION_UNKNOWN	components\softdevice\s120\headers\ble_gatt.h	164;"	d
BLE_GATT_EXEC_WRITE_FLAG_PREPARED_CANCEL	components\softdevice\s120\headers\ble_gatt.h	80;"	d
BLE_GATT_EXEC_WRITE_FLAG_PREPARED_WRITE	components\softdevice\s120\headers\ble_gatt.h	81;"	d
BLE_GATT_HANDLE_INVALID	components\softdevice\s120\headers\ble_gatt.h	61;"	d
BLE_GATT_HVX_INDICATION	components\softdevice\s120\headers\ble_gatt.h	88;"	d
BLE_GATT_HVX_INVALID	components\softdevice\s120\headers\ble_gatt.h	86;"	d
BLE_GATT_HVX_NOTIFICATION	components\softdevice\s120\headers\ble_gatt.h	87;"	d
BLE_GATT_H__	components\softdevice\s120\headers\ble_gatt.h	44;"	d
BLE_GATT_OP_EXEC_WRITE_REQ	components\softdevice\s120\headers\ble_gatt.h	75;"	d
BLE_GATT_OP_INVALID	components\softdevice\s120\headers\ble_gatt.h	70;"	d
BLE_GATT_OP_PREP_WRITE_REQ	components\softdevice\s120\headers\ble_gatt.h	74;"	d
BLE_GATT_OP_SIGN_WRITE_CMD	components\softdevice\s120\headers\ble_gatt.h	73;"	d
BLE_GATT_OP_WRITE_CMD	components\softdevice\s120\headers\ble_gatt.h	72;"	d
BLE_GATT_OP_WRITE_REQ	components\softdevice\s120\headers\ble_gatt.h	71;"	d
BLE_GATT_STATUS_ATTERR_APP_BEGIN	components\softdevice\s120\headers\ble_gatt.h	115;"	d
BLE_GATT_STATUS_ATTERR_APP_END	components\softdevice\s120\headers\ble_gatt.h	116;"	d
BLE_GATT_STATUS_ATTERR_ATTRIBUTE_NOT_FOUND	components\softdevice\s120\headers\ble_gatt.h	105;"	d
BLE_GATT_STATUS_ATTERR_ATTRIBUTE_NOT_LONG	components\softdevice\s120\headers\ble_gatt.h	106;"	d
BLE_GATT_STATUS_ATTERR_CPS_CCCD_CONFIG_ERROR	components\softdevice\s120\headers\ble_gatt.h	121;"	d
BLE_GATT_STATUS_ATTERR_CPS_OUT_OF_RANGE	components\softdevice\s120\headers\ble_gatt.h	123;"	d
BLE_GATT_STATUS_ATTERR_CPS_PROC_ALR_IN_PROG	components\softdevice\s120\headers\ble_gatt.h	122;"	d
BLE_GATT_STATUS_ATTERR_INSUF_AUTHENTICATION	components\softdevice\s120\headers\ble_gatt.h	100;"	d
BLE_GATT_STATUS_ATTERR_INSUF_AUTHORIZATION	components\softdevice\s120\headers\ble_gatt.h	103;"	d
BLE_GATT_STATUS_ATTERR_INSUF_ENCRYPTION	components\softdevice\s120\headers\ble_gatt.h	110;"	d
BLE_GATT_STATUS_ATTERR_INSUF_ENC_KEY_SIZE	components\softdevice\s120\headers\ble_gatt.h	107;"	d
BLE_GATT_STATUS_ATTERR_INSUF_RESOURCES	components\softdevice\s120\headers\ble_gatt.h	112;"	d
BLE_GATT_STATUS_ATTERR_INVALID	components\softdevice\s120\headers\ble_gatt.h	95;"	d
BLE_GATT_STATUS_ATTERR_INVALID_ATT_VAL_LENGTH	components\softdevice\s120\headers\ble_gatt.h	108;"	d
BLE_GATT_STATUS_ATTERR_INVALID_HANDLE	components\softdevice\s120\headers\ble_gatt.h	96;"	d
BLE_GATT_STATUS_ATTERR_INVALID_OFFSET	components\softdevice\s120\headers\ble_gatt.h	102;"	d
BLE_GATT_STATUS_ATTERR_INVALID_PDU	components\softdevice\s120\headers\ble_gatt.h	99;"	d
BLE_GATT_STATUS_ATTERR_PREPARE_QUEUE_FULL	components\softdevice\s120\headers\ble_gatt.h	104;"	d
BLE_GATT_STATUS_ATTERR_READ_NOT_PERMITTED	components\softdevice\s120\headers\ble_gatt.h	97;"	d
BLE_GATT_STATUS_ATTERR_REQUEST_NOT_SUPPORTED	components\softdevice\s120\headers\ble_gatt.h	101;"	d
BLE_GATT_STATUS_ATTERR_RFU_RANGE1_BEGIN	components\softdevice\s120\headers\ble_gatt.h	113;"	d
BLE_GATT_STATUS_ATTERR_RFU_RANGE1_END	components\softdevice\s120\headers\ble_gatt.h	114;"	d
BLE_GATT_STATUS_ATTERR_RFU_RANGE2_BEGIN	components\softdevice\s120\headers\ble_gatt.h	117;"	d
BLE_GATT_STATUS_ATTERR_RFU_RANGE2_END	components\softdevice\s120\headers\ble_gatt.h	118;"	d
BLE_GATT_STATUS_ATTERR_RFU_RANGE3_BEGIN	components\softdevice\s120\headers\ble_gatt.h	119;"	d
BLE_GATT_STATUS_ATTERR_RFU_RANGE3_END	components\softdevice\s120\headers\ble_gatt.h	120;"	d
BLE_GATT_STATUS_ATTERR_UNLIKELY_ERROR	components\softdevice\s120\headers\ble_gatt.h	109;"	d
BLE_GATT_STATUS_ATTERR_UNSUPPORTED_GROUP_TYPE	components\softdevice\s120\headers\ble_gatt.h	111;"	d
BLE_GATT_STATUS_ATTERR_WRITE_NOT_PERMITTED	components\softdevice\s120\headers\ble_gatt.h	98;"	d
BLE_GATT_STATUS_SUCCESS	components\softdevice\s120\headers\ble_gatt.h	93;"	d
BLE_GATT_STATUS_UNKNOWN	components\softdevice\s120\headers\ble_gatt.h	94;"	d
BLE_GATT_TIMEOUT_SRC_PROTOCOL	components\softdevice\s120\headers\ble_gatt.h	65;"	d
GATT_MTU_SIZE_DEFAULT	components\softdevice\s120\headers\ble_gatt.h	54;"	d
GATT_RX_MTU	components\softdevice\s120\headers\ble_gatt.h	57;"	d
auth_signed_wr	components\softdevice\s120\headers\ble_gatt.h	/^  uint8_t auth_signed_wr  :1; \/**< Writing value with Signed Write Command permitted. *\/$/;"	m	struct:__anon636
ble_gatt_char_ext_props_t	components\softdevice\s120\headers\ble_gatt.h	/^} ble_gatt_char_ext_props_t;$/;"	t	typeref:struct:__anon637
ble_gatt_char_props_t	components\softdevice\s120\headers\ble_gatt.h	/^} ble_gatt_char_props_t;$/;"	t	typeref:struct:__anon636
broadcast	components\softdevice\s120\headers\ble_gatt.h	/^  uint8_t broadcast       :1; \/**< Broadcasting of value permitted. *\/$/;"	m	struct:__anon636
indicate	components\softdevice\s120\headers\ble_gatt.h	/^  uint8_t indicate        :1; \/**< Indications of value permitted. *\/$/;"	m	struct:__anon636
notify	components\softdevice\s120\headers\ble_gatt.h	/^  uint8_t notify          :1; \/**< Notications of value permitted. *\/$/;"	m	struct:__anon636
read	components\softdevice\s120\headers\ble_gatt.h	/^  uint8_t read            :1; \/**< Reading value permitted. *\/$/;"	m	struct:__anon636
reliable_wr	components\softdevice\s120\headers\ble_gatt.h	/^  uint8_t reliable_wr     :1; \/**< Writing value with Queued Write Request permitted. *\/$/;"	m	struct:__anon637
wr_aux	components\softdevice\s120\headers\ble_gatt.h	/^  uint8_t wr_aux          :1; \/**< Writing the Characteristic User Description permitted. *\/$/;"	m	struct:__anon637
write	components\softdevice\s120\headers\ble_gatt.h	/^  uint8_t write           :1; \/**< Writing value with Write Request permitted. *\/$/;"	m	struct:__anon636
write_wo_resp	components\softdevice\s120\headers\ble_gatt.h	/^  uint8_t write_wo_resp   :1; \/**< Writing value with Write Command permitted. *\/$/;"	m	struct:__anon636
BLE_ERROR_GATTC_PROC_NOT_PERMITTED	components\softdevice\s120\headers\ble_gattc.h	92;"	d
BLE_GATTC_EVTS	components\softdevice\s120\headers\ble_gattc.h	/^enum BLE_GATTC_EVTS$/;"	g
BLE_GATTC_EVT_CHAR_DISC_RSP	components\softdevice\s120\headers\ble_gattc.h	/^  BLE_GATTC_EVT_CHAR_DISC_RSP,                            \/**< Characteristic Discovery Response event. *\/$/;"	e	enum:BLE_GATTC_EVTS
BLE_GATTC_EVT_CHAR_VALS_READ_RSP	components\softdevice\s120\headers\ble_gattc.h	/^  BLE_GATTC_EVT_CHAR_VALS_READ_RSP,                       \/**< Read multiple Response event. *\/$/;"	e	enum:BLE_GATTC_EVTS
BLE_GATTC_EVT_CHAR_VAL_BY_UUID_READ_RSP	components\softdevice\s120\headers\ble_gattc.h	/^  BLE_GATTC_EVT_CHAR_VAL_BY_UUID_READ_RSP,                \/**< Read By UUID Response event. *\/$/;"	e	enum:BLE_GATTC_EVTS
BLE_GATTC_EVT_DESC_DISC_RSP	components\softdevice\s120\headers\ble_gattc.h	/^  BLE_GATTC_EVT_DESC_DISC_RSP,                            \/**< Descriptor Discovery Response event. *\/$/;"	e	enum:BLE_GATTC_EVTS
BLE_GATTC_EVT_HVX	components\softdevice\s120\headers\ble_gattc.h	/^  BLE_GATTC_EVT_HVX,                                      \/**< Handle Value Notification or Indication event. *\/$/;"	e	enum:BLE_GATTC_EVTS
BLE_GATTC_EVT_PRIM_SRVC_DISC_RSP	components\softdevice\s120\headers\ble_gattc.h	/^  BLE_GATTC_EVT_PRIM_SRVC_DISC_RSP = BLE_GATTC_EVT_BASE,  \/**< Primary Service Discovery Response event.  *\/$/;"	e	enum:BLE_GATTC_EVTS
BLE_GATTC_EVT_READ_RSP	components\softdevice\s120\headers\ble_gattc.h	/^  BLE_GATTC_EVT_READ_RSP,                                 \/**< Read Response event. *\/$/;"	e	enum:BLE_GATTC_EVTS
BLE_GATTC_EVT_REL_DISC_RSP	components\softdevice\s120\headers\ble_gattc.h	/^  BLE_GATTC_EVT_REL_DISC_RSP,                             \/**< Relationship Discovery Response event. *\/$/;"	e	enum:BLE_GATTC_EVTS
BLE_GATTC_EVT_TIMEOUT	components\softdevice\s120\headers\ble_gattc.h	/^  BLE_GATTC_EVT_TIMEOUT                                   \/**< Timeout event. *\/$/;"	e	enum:BLE_GATTC_EVTS
BLE_GATTC_EVT_WRITE_RSP	components\softdevice\s120\headers\ble_gattc.h	/^  BLE_GATTC_EVT_WRITE_RSP,                                \/**< Write Response event. *\/$/;"	e	enum:BLE_GATTC_EVTS
BLE_GATTC_HANDLE_END	components\softdevice\s120\headers\ble_gattc.h	96;"	d
BLE_GATTC_H__	components\softdevice\s120\headers\ble_gattc.h	44;"	d
BLE_GATTC_SVCS	components\softdevice\s120\headers\ble_gattc.h	/^enum BLE_GATTC_SVCS$/;"	g
SD_BLE_GATTC_CHARACTERISTICS_DISCOVER	components\softdevice\s120\headers\ble_gattc.h	/^  SD_BLE_GATTC_CHARACTERISTICS_DISCOVER,                       \/**< Characteristic Discovery. *\/$/;"	e	enum:BLE_GATTC_SVCS
SD_BLE_GATTC_CHAR_VALUES_READ	components\softdevice\s120\headers\ble_gattc.h	/^  SD_BLE_GATTC_CHAR_VALUES_READ,                               \/**< Read multiple Characteristic Values. *\/$/;"	e	enum:BLE_GATTC_SVCS
SD_BLE_GATTC_CHAR_VALUE_BY_UUID_READ	components\softdevice\s120\headers\ble_gattc.h	/^  SD_BLE_GATTC_CHAR_VALUE_BY_UUID_READ,                        \/**< Read Characteristic Value by UUID. *\/$/;"	e	enum:BLE_GATTC_SVCS
SD_BLE_GATTC_DESCRIPTORS_DISCOVER	components\softdevice\s120\headers\ble_gattc.h	/^  SD_BLE_GATTC_DESCRIPTORS_DISCOVER,                           \/**< Characteristic Descriptor Discovery. *\/$/;"	e	enum:BLE_GATTC_SVCS
SD_BLE_GATTC_HV_CONFIRM	components\softdevice\s120\headers\ble_gattc.h	/^  SD_BLE_GATTC_HV_CONFIRM                                      \/**< Handle Value Confirmation. *\/$/;"	e	enum:BLE_GATTC_SVCS
SD_BLE_GATTC_PRIMARY_SERVICES_DISCOVER	components\softdevice\s120\headers\ble_gattc.h	/^  SD_BLE_GATTC_PRIMARY_SERVICES_DISCOVER = BLE_GATTC_SVC_BASE, \/**< Primary Service Discovery. *\/$/;"	e	enum:BLE_GATTC_SVCS
SD_BLE_GATTC_READ	components\softdevice\s120\headers\ble_gattc.h	/^  SD_BLE_GATTC_READ,                                           \/**< Generic read. *\/$/;"	e	enum:BLE_GATTC_SVCS
SD_BLE_GATTC_RELATIONSHIPS_DISCOVER	components\softdevice\s120\headers\ble_gattc.h	/^  SD_BLE_GATTC_RELATIONSHIPS_DISCOVER,                         \/**< Relationship Discovery. *\/$/;"	e	enum:BLE_GATTC_SVCS
SD_BLE_GATTC_WRITE	components\softdevice\s120\headers\ble_gattc.h	/^  SD_BLE_GATTC_WRITE,                                          \/**< Generic write. *\/$/;"	e	enum:BLE_GATTC_SVCS
ble_gattc_char_t	components\softdevice\s120\headers\ble_gattc.h	/^} ble_gattc_char_t;$/;"	t	typeref:struct:__anon641
ble_gattc_desc_t	components\softdevice\s120\headers\ble_gattc.h	/^} ble_gattc_desc_t;$/;"	t	typeref:struct:__anon642
ble_gattc_evt_char_disc_rsp_t	components\softdevice\s120\headers\ble_gattc.h	/^} ble_gattc_evt_char_disc_rsp_t;$/;"	t	typeref:struct:__anon646
ble_gattc_evt_char_val_by_uuid_read_rsp_t	components\softdevice\s120\headers\ble_gattc.h	/^} ble_gattc_evt_char_val_by_uuid_read_rsp_t;$/;"	t	typeref:struct:__anon649
ble_gattc_evt_char_vals_read_rsp_t	components\softdevice\s120\headers\ble_gattc.h	/^} ble_gattc_evt_char_vals_read_rsp_t;$/;"	t	typeref:struct:__anon651
ble_gattc_evt_desc_disc_rsp_t	components\softdevice\s120\headers\ble_gattc.h	/^} ble_gattc_evt_desc_disc_rsp_t;$/;"	t	typeref:struct:__anon647
ble_gattc_evt_hvx_t	components\softdevice\s120\headers\ble_gattc.h	/^} ble_gattc_evt_hvx_t;$/;"	t	typeref:struct:__anon653
ble_gattc_evt_prim_srvc_disc_rsp_t	components\softdevice\s120\headers\ble_gattc.h	/^} ble_gattc_evt_prim_srvc_disc_rsp_t;$/;"	t	typeref:struct:__anon644
ble_gattc_evt_read_rsp_t	components\softdevice\s120\headers\ble_gattc.h	/^} ble_gattc_evt_read_rsp_t;$/;"	t	typeref:struct:__anon650
ble_gattc_evt_rel_disc_rsp_t	components\softdevice\s120\headers\ble_gattc.h	/^} ble_gattc_evt_rel_disc_rsp_t;$/;"	t	typeref:struct:__anon645
ble_gattc_evt_t	components\softdevice\s120\headers\ble_gattc.h	/^} ble_gattc_evt_t;$/;"	t	typeref:struct:__anon655
ble_gattc_evt_timeout_t	components\softdevice\s120\headers\ble_gattc.h	/^} ble_gattc_evt_timeout_t;$/;"	t	typeref:struct:__anon654
ble_gattc_evt_write_rsp_t	components\softdevice\s120\headers\ble_gattc.h	/^} ble_gattc_evt_write_rsp_t;$/;"	t	typeref:struct:__anon652
ble_gattc_handle_range_t	components\softdevice\s120\headers\ble_gattc.h	/^} ble_gattc_handle_range_t;$/;"	t	typeref:struct:__anon638
ble_gattc_handle_value_t	components\softdevice\s120\headers\ble_gattc.h	/^} ble_gattc_handle_value_t;$/;"	t	typeref:struct:__anon648
ble_gattc_include_t	components\softdevice\s120\headers\ble_gattc.h	/^} ble_gattc_include_t;$/;"	t	typeref:struct:__anon640
ble_gattc_service_t	components\softdevice\s120\headers\ble_gattc.h	/^} ble_gattc_service_t;$/;"	t	typeref:struct:__anon639
ble_gattc_write_params_t	components\softdevice\s120\headers\ble_gattc.h	/^} ble_gattc_write_params_t;$/;"	t	typeref:struct:__anon643
char_disc_rsp	components\softdevice\s120\headers\ble_gattc.h	/^    ble_gattc_evt_char_disc_rsp_t               char_disc_rsp;              \/**< Characteristic Discovery Response Event Parameters. *\/$/;"	m	union:__anon655::__anon656
char_ext_props	components\softdevice\s120\headers\ble_gattc.h	/^  uint8_t                 char_ext_props : 1;   \/**< Extended properties present. *\/$/;"	m	struct:__anon641
char_props	components\softdevice\s120\headers\ble_gattc.h	/^  ble_gatt_char_props_t   char_props;           \/**< Characteristic Properties. *\/$/;"	m	struct:__anon641
char_val_by_uuid_read_rsp	components\softdevice\s120\headers\ble_gattc.h	/^    ble_gattc_evt_char_val_by_uuid_read_rsp_t   char_val_by_uuid_read_rsp;  \/**< Characteristic Value Read by UUID Response Event Parameters. *\/$/;"	m	union:__anon655::__anon656
char_vals_read_rsp	components\softdevice\s120\headers\ble_gattc.h	/^    ble_gattc_evt_char_vals_read_rsp_t          char_vals_read_rsp;         \/**< Characteristic Values Read Response Event Parameters. *\/$/;"	m	union:__anon655::__anon656
chars	components\softdevice\s120\headers\ble_gattc.h	/^  ble_gattc_char_t    chars[1];       \/**< Characteristic data, variable length. *\/$/;"	m	struct:__anon646
conn_handle	components\softdevice\s120\headers\ble_gattc.h	/^  uint16_t            conn_handle;                \/**< Connection Handle on which event occured. *\/$/;"	m	struct:__anon655
count	components\softdevice\s120\headers\ble_gattc.h	/^  uint16_t                  count;            \/**< Handle-Value Pair Count. *\/$/;"	m	struct:__anon649
count	components\softdevice\s120\headers\ble_gattc.h	/^  uint16_t             count;           \/**< Include count. *\/$/;"	m	struct:__anon645
count	components\softdevice\s120\headers\ble_gattc.h	/^  uint16_t             count;           \/**< Service count. *\/$/;"	m	struct:__anon644
count	components\softdevice\s120\headers\ble_gattc.h	/^  uint16_t            count;          \/**< Characteristic count. *\/$/;"	m	struct:__anon646
count	components\softdevice\s120\headers\ble_gattc.h	/^  uint16_t            count;          \/**< Descriptor count. *\/$/;"	m	struct:__anon647
data	components\softdevice\s120\headers\ble_gattc.h	/^  uint8_t             data[1];          \/**< Data, variable length. *\/$/;"	m	struct:__anon652
data	components\softdevice\s120\headers\ble_gattc.h	/^  uint8_t             data[1];        \/**< Attribute data, variable length. *\/$/;"	m	struct:__anon650
data	components\softdevice\s120\headers\ble_gattc.h	/^  uint8_t             data[1];        \/**< Attribute data, variable length. *\/$/;"	m	struct:__anon653
desc_disc_rsp	components\softdevice\s120\headers\ble_gattc.h	/^    ble_gattc_evt_desc_disc_rsp_t               desc_disc_rsp;              \/**< Descriptor Discovery Response Event Parameters. *\/$/;"	m	union:__anon655::__anon656
descs	components\softdevice\s120\headers\ble_gattc.h	/^  ble_gattc_desc_t    descs[1];       \/**< Descriptor data, variable length. *\/$/;"	m	struct:__anon647
end_handle	components\softdevice\s120\headers\ble_gattc.h	/^  uint16_t          end_handle;   \/**< End Handle. *\/$/;"	m	struct:__anon638
error_handle	components\softdevice\s120\headers\ble_gattc.h	/^  uint16_t            error_handle;               \/**< In case of error: The handle causing the error. In all other cases @ref BLE_GATT_HANDLE_INVALID. *\/$/;"	m	struct:__anon655
flags	components\softdevice\s120\headers\ble_gattc.h	/^  uint8_t    flags;                    \/**< Flags, see @ref BLE_GATT_EXEC_WRITE_FLAGS. *\/$/;"	m	struct:__anon643
gatt_status	components\softdevice\s120\headers\ble_gattc.h	/^  uint16_t            gatt_status;                \/**< GATT status code for the operation, see @ref BLE_GATT_STATUS_CODES. *\/$/;"	m	struct:__anon655
handle	components\softdevice\s120\headers\ble_gattc.h	/^  uint16_t            handle;           \/**< Attribute Handle. *\/$/;"	m	struct:__anon652
handle	components\softdevice\s120\headers\ble_gattc.h	/^  uint16_t            handle;           \/**< Include Handle. *\/$/;"	m	struct:__anon640
handle	components\softdevice\s120\headers\ble_gattc.h	/^  uint16_t            handle;          \/**< Attribute Handle. *\/$/;"	m	struct:__anon648
handle	components\softdevice\s120\headers\ble_gattc.h	/^  uint16_t            handle;         \/**< Attribute Handle. *\/$/;"	m	struct:__anon650
handle	components\softdevice\s120\headers\ble_gattc.h	/^  uint16_t            handle;         \/**< Handle to which the HVx operation applies. *\/$/;"	m	struct:__anon653
handle	components\softdevice\s120\headers\ble_gattc.h	/^  uint16_t          handle;         \/**< Descriptor Handle. *\/$/;"	m	struct:__anon642
handle	components\softdevice\s120\headers\ble_gattc.h	/^  uint16_t   handle;                   \/**< Handle to the attribute to be written. *\/$/;"	m	struct:__anon643
handle_decl	components\softdevice\s120\headers\ble_gattc.h	/^  uint16_t                handle_decl;          \/**< Handle of the Characteristic Declaration. *\/$/;"	m	struct:__anon641
handle_range	components\softdevice\s120\headers\ble_gattc.h	/^  ble_gattc_handle_range_t handle_range;  \/**< Service Handle Range. *\/$/;"	m	struct:__anon639
handle_value	components\softdevice\s120\headers\ble_gattc.h	/^  ble_gattc_handle_value_t  handle_value[1];  \/**< Handle-Value(s) list, variable length. *\/$/;"	m	struct:__anon649
handle_value	components\softdevice\s120\headers\ble_gattc.h	/^  uint16_t                handle_value;         \/**< Handle of the Characteristic Value. *\/$/;"	m	struct:__anon641
hvx	components\softdevice\s120\headers\ble_gattc.h	/^    ble_gattc_evt_hvx_t                         hvx;                        \/**< Handle Value Notification\/Indication Event Parameters. *\/$/;"	m	union:__anon655::__anon656
included_srvc	components\softdevice\s120\headers\ble_gattc.h	/^  ble_gattc_service_t included_srvc;    \/**< Handle of the included service. *\/$/;"	m	struct:__anon640
includes	components\softdevice\s120\headers\ble_gattc.h	/^  ble_gattc_include_t includes[1];      \/**< Include data, variable length. *\/$/;"	m	struct:__anon645
len	components\softdevice\s120\headers\ble_gattc.h	/^  uint16_t            len;              \/**< Data length. *\/$/;"	m	struct:__anon652
len	components\softdevice\s120\headers\ble_gattc.h	/^  uint16_t            len;            \/**< Attribute data length. *\/$/;"	m	struct:__anon650
len	components\softdevice\s120\headers\ble_gattc.h	/^  uint16_t            len;            \/**< Attribute data length. *\/$/;"	m	struct:__anon653
len	components\softdevice\s120\headers\ble_gattc.h	/^  uint16_t            len;            \/**< Concatenated Attribute values length. *\/$/;"	m	struct:__anon651
len	components\softdevice\s120\headers\ble_gattc.h	/^  uint16_t   len;                      \/**< Length of data in bytes. *\/$/;"	m	struct:__anon643
offset	components\softdevice\s120\headers\ble_gattc.h	/^  uint16_t            offset;           \/**< Data Offset. *\/$/;"	m	struct:__anon652
offset	components\softdevice\s120\headers\ble_gattc.h	/^  uint16_t            offset;         \/**< Offset of the attribute data. *\/$/;"	m	struct:__anon650
offset	components\softdevice\s120\headers\ble_gattc.h	/^  uint16_t   offset;                   \/**< Offset in bytes. @note For WRITE_CMD and WRITE_REQ, offset must be 0. *\/$/;"	m	struct:__anon643
p_value	components\softdevice\s120\headers\ble_gattc.h	/^  uint8_t             *p_value;        \/**< Pointer to value, variable length (length available as value_len in ble_gattc_evt_read_by_uuid_rsp_t). $/;"	m	struct:__anon648
p_value	components\softdevice\s120\headers\ble_gattc.h	/^  uint8_t   *p_value;                  \/**< Pointer to the value data. *\/$/;"	m	struct:__anon643
params	components\softdevice\s120\headers\ble_gattc.h	/^  } params;                                                                 \/**< Event Parameters. @note Only valid if @ref gatt_status == @ref BLE_GATT_STATUS_SUCCESS. *\/$/;"	m	struct:__anon655	typeref:union:__anon655::__anon656
prim_srvc_disc_rsp	components\softdevice\s120\headers\ble_gattc.h	/^    ble_gattc_evt_prim_srvc_disc_rsp_t          prim_srvc_disc_rsp;         \/**< Primary Service Discovery Response Event Parameters. *\/$/;"	m	union:__anon655::__anon656
read_rsp	components\softdevice\s120\headers\ble_gattc.h	/^    ble_gattc_evt_read_rsp_t                    read_rsp;                   \/**< Read Response Event Parameters. *\/$/;"	m	union:__anon655::__anon656
rel_disc_rsp	components\softdevice\s120\headers\ble_gattc.h	/^    ble_gattc_evt_rel_disc_rsp_t                rel_disc_rsp;               \/**< Relationship Discovery Response Event Parameters. *\/$/;"	m	union:__anon655::__anon656
services	components\softdevice\s120\headers\ble_gattc.h	/^  ble_gattc_service_t services[1];      \/**< Service data, variable length. *\/$/;"	m	struct:__anon644
src	components\softdevice\s120\headers\ble_gattc.h	/^  uint8_t          src;                       \/**< Timeout source, see @ref BLE_GATT_TIMEOUT_SOURCES. *\/$/;"	m	struct:__anon654
start_handle	components\softdevice\s120\headers\ble_gattc.h	/^  uint16_t          start_handle; \/**< Start Handle. *\/$/;"	m	struct:__anon638
timeout	components\softdevice\s120\headers\ble_gattc.h	/^    ble_gattc_evt_timeout_t                     timeout;                    \/**< Timeout Event Parameters. *\/$/;"	m	union:__anon655::__anon656
type	components\softdevice\s120\headers\ble_gattc.h	/^  uint8_t             type;           \/**< Indication or Notification, see @ref BLE_GATT_HVX_TYPES. *\/$/;"	m	struct:__anon653
uuid	components\softdevice\s120\headers\ble_gattc.h	/^  ble_uuid_t               uuid;          \/**< Service UUID. *\/$/;"	m	struct:__anon639
uuid	components\softdevice\s120\headers\ble_gattc.h	/^  ble_uuid_t              uuid;                 \/**< Characteristic UUID. *\/$/;"	m	struct:__anon641
uuid	components\softdevice\s120\headers\ble_gattc.h	/^  ble_uuid_t        uuid;           \/**< Descriptor UUID. *\/$/;"	m	struct:__anon642
value_len	components\softdevice\s120\headers\ble_gattc.h	/^  uint16_t                  value_len;        \/**< Length of the value in Handle-Value(s) list. *\/$/;"	m	struct:__anon649
values	components\softdevice\s120\headers\ble_gattc.h	/^  uint8_t             values[1];      \/**< Attribute values, variable length. *\/$/;"	m	struct:__anon651
write_op	components\softdevice\s120\headers\ble_gattc.h	/^  uint8_t             write_op;         \/**< Type of write operation, see @ref BLE_GATT_WRITE_OPS. *\/$/;"	m	struct:__anon652
write_op	components\softdevice\s120\headers\ble_gattc.h	/^  uint8_t    write_op;                 \/**< Write Operation to be performed, see @ref BLE_GATT_WRITE_OPS. *\/$/;"	m	struct:__anon643
write_rsp	components\softdevice\s120\headers\ble_gattc.h	/^    ble_gattc_evt_write_rsp_t                   write_rsp;                  \/**< Write Response Event Parameters. *\/$/;"	m	union:__anon655::__anon656
BLE_ERROR_GATTS_INVALID_ATTR_TYPE	components\softdevice\s120\headers\ble_gatts.h	93;"	d
BLE_ERROR_GATTS_SYS_ATTR_MISSING	components\softdevice\s120\headers\ble_gatts.h	94;"	d
BLE_GATTS_ATTR_TYPE_CHAR_DECL	components\softdevice\s120\headers\ble_gatts.h	117;"	d
BLE_GATTS_ATTR_TYPE_CHAR_VAL	components\softdevice\s120\headers\ble_gatts.h	118;"	d
BLE_GATTS_ATTR_TYPE_DESC	components\softdevice\s120\headers\ble_gatts.h	119;"	d
BLE_GATTS_ATTR_TYPE_INC_DECL	components\softdevice\s120\headers\ble_gatts.h	116;"	d
BLE_GATTS_ATTR_TYPE_INVALID	components\softdevice\s120\headers\ble_gatts.h	113;"	d
BLE_GATTS_ATTR_TYPE_OTHER	components\softdevice\s120\headers\ble_gatts.h	120;"	d
BLE_GATTS_ATTR_TYPE_PRIM_SRVC_DECL	components\softdevice\s120\headers\ble_gatts.h	114;"	d
BLE_GATTS_ATTR_TYPE_SEC_SRVC_DECL	components\softdevice\s120\headers\ble_gatts.h	115;"	d
BLE_GATTS_AUTHORIZE_TYPE_INVALID	components\softdevice\s120\headers\ble_gatts.h	145;"	d
BLE_GATTS_AUTHORIZE_TYPE_READ	components\softdevice\s120\headers\ble_gatts.h	146;"	d
BLE_GATTS_AUTHORIZE_TYPE_WRITE	components\softdevice\s120\headers\ble_gatts.h	147;"	d
BLE_GATTS_EVTS	components\softdevice\s120\headers\ble_gatts.h	/^enum BLE_GATTS_EVTS$/;"	g
BLE_GATTS_EVT_HVC	components\softdevice\s120\headers\ble_gatts.h	/^  BLE_GATTS_EVT_HVC,                              \/**< Handle Value Confirmation. *\/$/;"	e	enum:BLE_GATTS_EVTS
BLE_GATTS_EVT_RW_AUTHORIZE_REQUEST	components\softdevice\s120\headers\ble_gatts.h	/^  BLE_GATTS_EVT_RW_AUTHORIZE_REQUEST,             \/**< Read\/Write Authorization request. *\/$/;"	e	enum:BLE_GATTS_EVTS
BLE_GATTS_EVT_SC_CONFIRM	components\softdevice\s120\headers\ble_gatts.h	/^  BLE_GATTS_EVT_SC_CONFIRM,                       \/**< Service Changed Confirmation. *\/$/;"	e	enum:BLE_GATTS_EVTS
BLE_GATTS_EVT_SYS_ATTR_MISSING	components\softdevice\s120\headers\ble_gatts.h	/^  BLE_GATTS_EVT_SYS_ATTR_MISSING,                 \/**< A persistent system attribute access is pending, awaiting a sd_ble_gatts_sys_attr_set(). *\/$/;"	e	enum:BLE_GATTS_EVTS
BLE_GATTS_EVT_TIMEOUT	components\softdevice\s120\headers\ble_gatts.h	/^  BLE_GATTS_EVT_TIMEOUT                           \/**< Timeout. *\/$/;"	e	enum:BLE_GATTS_EVTS
BLE_GATTS_EVT_WRITE	components\softdevice\s120\headers\ble_gatts.h	/^  BLE_GATTS_EVT_WRITE = BLE_GATTS_EVT_BASE,       \/**< Write operation performed. *\/$/;"	e	enum:BLE_GATTS_EVTS
BLE_GATTS_FIX_ATTR_LEN_MAX	components\softdevice\s120\headers\ble_gatts.h	99;"	d
BLE_GATTS_H__	components\softdevice\s120\headers\ble_gatts.h	44;"	d
BLE_GATTS_OP_EXEC_WRITE_REQ_CANCEL	components\softdevice\s120\headers\ble_gatts.h	131;"	d
BLE_GATTS_OP_EXEC_WRITE_REQ_NOW	components\softdevice\s120\headers\ble_gatts.h	132;"	d
BLE_GATTS_OP_INVALID	components\softdevice\s120\headers\ble_gatts.h	126;"	d
BLE_GATTS_OP_PREP_WRITE_REQ	components\softdevice\s120\headers\ble_gatts.h	130;"	d
BLE_GATTS_OP_SIGN_WRITE_CMD	components\softdevice\s120\headers\ble_gatts.h	129;"	d
BLE_GATTS_OP_WRITE_CMD	components\softdevice\s120\headers\ble_gatts.h	128;"	d
BLE_GATTS_OP_WRITE_REQ	components\softdevice\s120\headers\ble_gatts.h	127;"	d
BLE_GATTS_SRVC_TYPE_INVALID	components\softdevice\s120\headers\ble_gatts.h	105;"	d
BLE_GATTS_SRVC_TYPE_PRIMARY	components\softdevice\s120\headers\ble_gatts.h	106;"	d
BLE_GATTS_SRVC_TYPE_SECONDARY	components\softdevice\s120\headers\ble_gatts.h	107;"	d
BLE_GATTS_SVCS	components\softdevice\s120\headers\ble_gatts.h	/^enum BLE_GATTS_SVCS$/;"	g
BLE_GATTS_SYS_ATTR_FLAG_SYS_SRVCS	components\softdevice\s120\headers\ble_gatts.h	152;"	d
BLE_GATTS_SYS_ATTR_FLAG_USR_SRVCS	components\softdevice\s120\headers\ble_gatts.h	153;"	d
BLE_GATTS_VAR_ATTR_LEN_MAX	components\softdevice\s120\headers\ble_gatts.h	100;"	d
BLE_GATTS_VLOC_INVALID	components\softdevice\s120\headers\ble_gatts.h	137;"	d
BLE_GATTS_VLOC_STACK	components\softdevice\s120\headers\ble_gatts.h	138;"	d
BLE_GATTS_VLOC_USER	components\softdevice\s120\headers\ble_gatts.h	139;"	d
SD_BLE_GATTS_CHARACTERISTIC_ADD	components\softdevice\s120\headers\ble_gatts.h	/^  SD_BLE_GATTS_CHARACTERISTIC_ADD,               \/**< Add a characteristic. *\/$/;"	e	enum:BLE_GATTS_SVCS
SD_BLE_GATTS_DESCRIPTOR_ADD	components\softdevice\s120\headers\ble_gatts.h	/^  SD_BLE_GATTS_DESCRIPTOR_ADD,                   \/**< Add a generic attribute. *\/$/;"	e	enum:BLE_GATTS_SVCS
SD_BLE_GATTS_HVX	components\softdevice\s120\headers\ble_gatts.h	/^  SD_BLE_GATTS_HVX,                              \/**< Handle Value Notification or Indication. *\/$/;"	e	enum:BLE_GATTS_SVCS
SD_BLE_GATTS_INCLUDE_ADD	components\softdevice\s120\headers\ble_gatts.h	/^  SD_BLE_GATTS_INCLUDE_ADD,                      \/**< Add an included service. *\/$/;"	e	enum:BLE_GATTS_SVCS
SD_BLE_GATTS_RW_AUTHORIZE_REPLY	components\softdevice\s120\headers\ble_gatts.h	/^  SD_BLE_GATTS_RW_AUTHORIZE_REPLY,               \/**< Reply to an authorization request for a read or write operation on one or more attributes. *\/ $/;"	e	enum:BLE_GATTS_SVCS
SD_BLE_GATTS_SERVICE_ADD	components\softdevice\s120\headers\ble_gatts.h	/^  SD_BLE_GATTS_SERVICE_ADD = BLE_GATTS_SVC_BASE, \/**< Add a service. *\/$/;"	e	enum:BLE_GATTS_SVCS
SD_BLE_GATTS_SERVICE_CHANGED	components\softdevice\s120\headers\ble_gatts.h	/^  SD_BLE_GATTS_SERVICE_CHANGED,                  \/**< Perform a Service Changed Indication to one or more peers. *\/$/;"	e	enum:BLE_GATTS_SVCS
SD_BLE_GATTS_SYS_ATTR_GET	components\softdevice\s120\headers\ble_gatts.h	/^  SD_BLE_GATTS_SYS_ATTR_GET,                     \/**< Get updated persistent system attributes after terminating a connection. *\/$/;"	e	enum:BLE_GATTS_SVCS
SD_BLE_GATTS_SYS_ATTR_SET	components\softdevice\s120\headers\ble_gatts.h	/^  SD_BLE_GATTS_SYS_ATTR_SET,                     \/**< Set the persistent system attributes for a connection. *\/  $/;"	e	enum:BLE_GATTS_SVCS
SD_BLE_GATTS_VALUE_GET	components\softdevice\s120\headers\ble_gatts.h	/^  SD_BLE_GATTS_VALUE_GET,                        \/**< Get an attribute value. *\/$/;"	e	enum:BLE_GATTS_SVCS
SD_BLE_GATTS_VALUE_SET	components\softdevice\s120\headers\ble_gatts.h	/^  SD_BLE_GATTS_VALUE_SET,                        \/**< Set an attribute value. *\/$/;"	e	enum:BLE_GATTS_SVCS
authorize_request	components\softdevice\s120\headers\ble_gatts.h	/^    ble_gatts_evt_rw_authorize_request_t  authorize_request;  \/**< Read or Write Authorize Request Parameters. *\/$/;"	m	union:__anon677::__anon678
ble_gatts_attr_context_t	components\softdevice\s120\headers\ble_gatts.h	/^} ble_gatts_attr_context_t;$/;"	t	typeref:struct:__anon661
ble_gatts_attr_md_t	components\softdevice\s120\headers\ble_gatts.h	/^} ble_gatts_attr_md_t;$/;"	t	typeref:struct:__anon658
ble_gatts_attr_t	components\softdevice\s120\headers\ble_gatts.h	/^} ble_gatts_attr_t;$/;"	t	typeref:struct:__anon659
ble_gatts_char_handles_t	components\softdevice\s120\headers\ble_gatts.h	/^} ble_gatts_char_handles_t;$/;"	t	typeref:struct:__anon664
ble_gatts_char_md_t	components\softdevice\s120\headers\ble_gatts.h	/^} ble_gatts_char_md_t;$/;"	t	typeref:struct:__anon663
ble_gatts_char_pf_t	components\softdevice\s120\headers\ble_gatts.h	/^} ble_gatts_char_pf_t;$/;"	t	typeref:struct:__anon662
ble_gatts_enable_params_t	components\softdevice\s120\headers\ble_gatts.h	/^} ble_gatts_enable_params_t;$/;"	t	typeref:struct:__anon657
ble_gatts_evt_hvc_t	components\softdevice\s120\headers\ble_gatts.h	/^} ble_gatts_evt_hvc_t;$/;"	t	typeref:struct:__anon675
ble_gatts_evt_read_t	components\softdevice\s120\headers\ble_gatts.h	/^} ble_gatts_evt_read_t;$/;"	t	typeref:struct:__anon671
ble_gatts_evt_rw_authorize_request_t	components\softdevice\s120\headers\ble_gatts.h	/^} ble_gatts_evt_rw_authorize_request_t;$/;"	t	typeref:struct:__anon672
ble_gatts_evt_sys_attr_missing_t	components\softdevice\s120\headers\ble_gatts.h	/^} ble_gatts_evt_sys_attr_missing_t;$/;"	t	typeref:struct:__anon674
ble_gatts_evt_t	components\softdevice\s120\headers\ble_gatts.h	/^} ble_gatts_evt_t;$/;"	t	typeref:struct:__anon677
ble_gatts_evt_timeout_t	components\softdevice\s120\headers\ble_gatts.h	/^} ble_gatts_evt_timeout_t;$/;"	t	typeref:struct:__anon676
ble_gatts_evt_write_t	components\softdevice\s120\headers\ble_gatts.h	/^} ble_gatts_evt_write_t;$/;"	t	typeref:struct:__anon670
ble_gatts_hvx_params_t	components\softdevice\s120\headers\ble_gatts.h	/^} ble_gatts_hvx_params_t;$/;"	t	typeref:struct:__anon665
ble_gatts_read_authorize_params_t	components\softdevice\s120\headers\ble_gatts.h	/^} ble_gatts_read_authorize_params_t;$/;"	t	typeref:struct:__anon666
ble_gatts_rw_authorize_reply_params_t	components\softdevice\s120\headers\ble_gatts.h	/^} ble_gatts_rw_authorize_reply_params_t;$/;"	t	typeref:struct:__anon668
ble_gatts_value_t	components\softdevice\s120\headers\ble_gatts.h	/^} ble_gatts_value_t;$/;"	t	typeref:struct:__anon660
ble_gatts_write_authorize_params_t	components\softdevice\s120\headers\ble_gatts.h	/^} ble_gatts_write_authorize_params_t;$/;"	t	typeref:struct:__anon667
cccd_handle	components\softdevice\s120\headers\ble_gatts.h	/^  uint16_t          cccd_handle;        \/**< Handle to the Client Characteristic Configuration Descriptor, or @ref BLE_GATT_HANDLE_INVALID if not present. *\/$/;"	m	struct:__anon664
char_ext_props	components\softdevice\s120\headers\ble_gatts.h	/^  ble_gatt_char_ext_props_t   char_ext_props;           \/**< Characteristic Extended Properties. *\/$/;"	m	struct:__anon663
char_props	components\softdevice\s120\headers\ble_gatts.h	/^  ble_gatt_char_props_t       char_props;               \/**< Characteristic Properties. *\/$/;"	m	struct:__anon663
char_user_desc_max_size	components\softdevice\s120\headers\ble_gatts.h	/^  uint16_t                    char_user_desc_max_size;  \/**< The maximum size in bytes of the user description descriptor. *\/$/;"	m	struct:__anon663
char_user_desc_size	components\softdevice\s120\headers\ble_gatts.h	/^  uint16_t                    char_user_desc_size;      \/**< The size of the user description, must be smaller or equal to char_user_desc_max_size. *\/ $/;"	m	struct:__anon663
char_uuid	components\softdevice\s120\headers\ble_gatts.h	/^  ble_uuid_t           char_uuid;       \/**< Characteristic UUID if applicable (BLE_UUID_TYPE_UNKNOWN if N\/A). *\/$/;"	m	struct:__anon661
conn_handle	components\softdevice\s120\headers\ble_gatts.h	/^  uint16_t conn_handle;                                       \/**< Connection Handle on which event occurred. *\/$/;"	m	struct:__anon677
context	components\softdevice\s120\headers\ble_gatts.h	/^  ble_gatts_attr_context_t    context;            \/**< Attribute Context. *\/$/;"	m	struct:__anon670
context	components\softdevice\s120\headers\ble_gatts.h	/^  ble_gatts_attr_context_t    context;            \/**< Attribute Context. *\/$/;"	m	struct:__anon671
data	components\softdevice\s120\headers\ble_gatts.h	/^  uint8_t                     data[1];            \/**< Incoming data, variable length. *\/$/;"	m	struct:__anon670
desc	components\softdevice\s120\headers\ble_gatts.h	/^  uint16_t         desc;        \/**< Namespace description from Bluetooth Assigned Numbers, see @ref BLE_GATT_CPF_NAMESPACES. *\/$/;"	m	struct:__anon662
desc_uuid	components\softdevice\s120\headers\ble_gatts.h	/^  ble_uuid_t           desc_uuid;       \/**< Descriptor UUID if applicable (BLE_UUID_TYPE_UNKNOWN if N\/A). *\/$/;"	m	struct:__anon661
exponent	components\softdevice\s120\headers\ble_gatts.h	/^  int8_t           exponent;    \/**< Exponent for integer data types. *\/$/;"	m	struct:__anon662
format	components\softdevice\s120\headers\ble_gatts.h	/^  uint8_t          format;      \/**< Format of the value, see @ref BLE_GATT_CPF_FORMATS. *\/$/;"	m	struct:__anon662
gatt_status	components\softdevice\s120\headers\ble_gatts.h	/^  uint16_t          gatt_status;        \/**< GATT status code for the operation, see @ref BLE_GATT_STATUS_CODES. *\/$/;"	m	struct:__anon666
gatt_status	components\softdevice\s120\headers\ble_gatts.h	/^  uint16_t          gatt_status;        \/**< GATT status code for the operation, see @ref BLE_GATT_STATUS_CODES. *\/$/;"	m	struct:__anon667
handle	components\softdevice\s120\headers\ble_gatts.h	/^  uint16_t                    handle;             \/**< Attribute Handle. *\/$/;"	m	struct:__anon670
handle	components\softdevice\s120\headers\ble_gatts.h	/^  uint16_t                    handle;             \/**< Attribute Handle. *\/$/;"	m	struct:__anon671
handle	components\softdevice\s120\headers\ble_gatts.h	/^  uint16_t          handle;                       \/**< Attribute Handle. *\/$/;"	m	struct:__anon675
handle	components\softdevice\s120\headers\ble_gatts.h	/^  uint16_t          handle;             \/**< Characteristic Value Handle. *\/$/;"	m	struct:__anon665
hint	components\softdevice\s120\headers\ble_gatts.h	/^  uint8_t hint;                                 \/**< Hint (TBD). *\/$/;"	m	struct:__anon674
hvc	components\softdevice\s120\headers\ble_gatts.h	/^    ble_gatts_evt_hvc_t                   hvc;                \/**< Handle Value Confirmation Event Parameters. *\/$/;"	m	union:__anon677::__anon678
init_len	components\softdevice\s120\headers\ble_gatts.h	/^  uint16_t             init_len;        \/**< Initial attribute value length in bytes. *\/$/;"	m	struct:__anon659
init_offs	components\softdevice\s120\headers\ble_gatts.h	/^  uint16_t             init_offs;       \/**< Initial attribute value offset in bytes. If different from zero, the first init_offs bytes of the attribute value will be left uninitialized. *\/$/;"	m	struct:__anon659
len	components\softdevice\s120\headers\ble_gatts.h	/^  uint16_t                    len;                \/**< Length of the incoming data. *\/$/;"	m	struct:__anon670
len	components\softdevice\s120\headers\ble_gatts.h	/^  uint16_t          len;                \/**< Length in bytes of the value in p_data pointer, see @ref BLE_GATTS_ATTR_LENS_MAX. *\/$/;"	m	struct:__anon666
len	components\softdevice\s120\headers\ble_gatts.h	/^  uint16_t  len;        \/**< Length in bytes to be written or read. Length in bytes written or read after successful return.*\/$/;"	m	struct:__anon660
max_len	components\softdevice\s120\headers\ble_gatts.h	/^  uint16_t             max_len;         \/**< Maximum attribute value length in bytes, see @ref BLE_GATTS_ATTR_LENS_MAX for maximum values. *\/$/;"	m	struct:__anon659
name_space	components\softdevice\s120\headers\ble_gatts.h	/^  uint8_t          name_space;  \/**< Namespace from Bluetooth Assigned Numbers, see @ref BLE_GATT_CPF_NAMESPACES. *\/$/;"	m	struct:__anon662
offset	components\softdevice\s120\headers\ble_gatts.h	/^  uint16_t                    offset;             \/**< Offset for the read operation. *\/$/;"	m	struct:__anon671
offset	components\softdevice\s120\headers\ble_gatts.h	/^  uint16_t                    offset;             \/**< Offset for the write operation. *\/$/;"	m	struct:__anon670
offset	components\softdevice\s120\headers\ble_gatts.h	/^  uint16_t          offset;             \/**< Offset of the attribute value being updated. *\/$/;"	m	struct:__anon666
offset	components\softdevice\s120\headers\ble_gatts.h	/^  uint16_t          offset;             \/**< Offset within the attribute value. *\/$/;"	m	struct:__anon665
offset	components\softdevice\s120\headers\ble_gatts.h	/^  uint16_t  offset;     \/**< Attribute value offset. *\/$/;"	m	struct:__anon660
op	components\softdevice\s120\headers\ble_gatts.h	/^  uint8_t                     op;                 \/**< Type of write operation, see @ref BLE_GATTS_OPS. *\/$/;"	m	struct:__anon670
p_attr_md	components\softdevice\s120\headers\ble_gatts.h	/^  ble_gatts_attr_md_t *p_attr_md;       \/**< Pointer to the attribute metadata structure. *\/$/;"	m	struct:__anon659
p_cccd_md	components\softdevice\s120\headers\ble_gatts.h	/^  ble_gatts_attr_md_t*        p_cccd_md;                \/**< Attribute metadata for the Client Characteristic Configuration Descriptor, or NULL for default values. *\/$/;"	m	struct:__anon663
p_char_pf	components\softdevice\s120\headers\ble_gatts.h	/^  ble_gatts_char_pf_t*        p_char_pf;                \/**< Pointer to a presentation format structure or NULL if the descriptor is not required. *\/$/;"	m	struct:__anon663
p_char_user_desc	components\softdevice\s120\headers\ble_gatts.h	/^  uint8_t                    *p_char_user_desc;         \/**< Pointer to a UTF-8, NULL if the descriptor is not required. *\/$/;"	m	struct:__anon663
p_data	components\softdevice\s120\headers\ble_gatts.h	/^  uint8_t          *p_data;             \/**< Actual data content, use NULL to use the current attribute value. *\/$/;"	m	struct:__anon665
p_data	components\softdevice\s120\headers\ble_gatts.h	/^  uint8_t          *p_data;             \/**< Pointer to new value used to update the attribute value. *\/$/;"	m	struct:__anon666
p_len	components\softdevice\s120\headers\ble_gatts.h	/^  uint16_t         *p_len;              \/**< Length in bytes to be written, length in bytes written after successful return. *\/$/;"	m	struct:__anon665
p_sccd_md	components\softdevice\s120\headers\ble_gatts.h	/^  ble_gatts_attr_md_t*        p_sccd_md;                \/**< Attribute metadata for the Server Characteristic Configuration Descriptor, or NULL for default values. *\/$/;"	m	struct:__anon663
p_user_desc_md	components\softdevice\s120\headers\ble_gatts.h	/^  ble_gatts_attr_md_t*        p_user_desc_md;           \/**< Attribute metadata for the User Description descriptor, or NULL for default values. *\/$/;"	m	struct:__anon663
p_uuid	components\softdevice\s120\headers\ble_gatts.h	/^  ble_uuid_t          *p_uuid;          \/**< Pointer to the attribute UUID. *\/$/;"	m	struct:__anon659
p_value	components\softdevice\s120\headers\ble_gatts.h	/^  uint8_t*             p_value;         \/**< Pointer to the attribute data. Please note that if the @ref BLE_GATTS_VLOC_USER value location is selected in the attribute metadata, this will have to point to a buffer$/;"	m	struct:__anon659
p_value	components\softdevice\s120\headers\ble_gatts.h	/^  uint8_t*  p_value;    \/**< Pointer to where value is stored or will be stored. $/;"	m	struct:__anon660
params	components\softdevice\s120\headers\ble_gatts.h	/^  } params;                                                   \/**< Event Parameters. *\/$/;"	m	struct:__anon677	typeref:union:__anon677::__anon678
params	components\softdevice\s120\headers\ble_gatts.h	/^  } params;                                     \/**< Reply Parameters. *\/$/;"	m	struct:__anon668	typeref:union:__anon668::__anon669
rd_auth	components\softdevice\s120\headers\ble_gatts.h	/^  uint8_t                 rd_auth    :1;   \/**< Read Authorization and value will be requested from the application on every read operation. *\/ $/;"	m	struct:__anon658
read	components\softdevice\s120\headers\ble_gatts.h	/^    ble_gatts_evt_read_t      read;             \/**< Attribute Read Parameters. *\/$/;"	m	union:__anon672::__anon673
read	components\softdevice\s120\headers\ble_gatts.h	/^    ble_gatts_read_authorize_params_t   read;   \/**< Read authorization parameters. *\/$/;"	m	union:__anon668::__anon669
read_perm	components\softdevice\s120\headers\ble_gatts.h	/^  ble_gap_conn_sec_mode_t read_perm;       \/**< Read permissions. *\/$/;"	m	struct:__anon658
request	components\softdevice\s120\headers\ble_gatts.h	/^  } request;                                    \/**< Request Parameters. *\/$/;"	m	struct:__anon672	typeref:union:__anon672::__anon673
sccd_handle	components\softdevice\s120\headers\ble_gatts.h	/^  uint16_t          sccd_handle;        \/**< Handle to the Server Characteristic Configuration Descriptor, or @ref BLE_GATT_HANDLE_INVALID if not present. *\/$/;"	m	struct:__anon664
service_changed	components\softdevice\s120\headers\ble_gatts.h	/^  uint8_t   service_changed:1;             \/**< Include the Service Changed characteristic in the local attributes. *\/$/;"	m	struct:__anon657
src	components\softdevice\s120\headers\ble_gatts.h	/^  uint8_t          src;                       \/**< Timeout source, see @ref BLE_GATT_TIMEOUT_SOURCES. *\/$/;"	m	struct:__anon676
srvc_handle	components\softdevice\s120\headers\ble_gatts.h	/^  uint16_t             srvc_handle;     \/**< Service Handle. *\/$/;"	m	struct:__anon661
srvc_uuid	components\softdevice\s120\headers\ble_gatts.h	/^  ble_uuid_t           srvc_uuid;       \/**< Service UUID. *\/$/;"	m	struct:__anon661
sys_attr_missing	components\softdevice\s120\headers\ble_gatts.h	/^    ble_gatts_evt_sys_attr_missing_t      sys_attr_missing;   \/**< System attributes missing. *\/$/;"	m	union:__anon677::__anon678
timeout	components\softdevice\s120\headers\ble_gatts.h	/^    ble_gatts_evt_timeout_t               timeout;            \/**< Timeout Event. *\/$/;"	m	union:__anon677::__anon678
type	components\softdevice\s120\headers\ble_gatts.h	/^  uint8_t                               type;   \/**< Type of authorize operation, see @ref BLE_GATTS_AUTHORIZE_TYPES. *\/$/;"	m	struct:__anon668
type	components\softdevice\s120\headers\ble_gatts.h	/^  uint8_t                     type;             \/**< Type of authorize operation, see @ref BLE_GATTS_AUTHORIZE_TYPES. *\/$/;"	m	struct:__anon672
type	components\softdevice\s120\headers\ble_gatts.h	/^  uint8_t              type;            \/**< Attribute Type, see @ref BLE_GATTS_ATTR_TYPES. *\/$/;"	m	struct:__anon661
type	components\softdevice\s120\headers\ble_gatts.h	/^  uint8_t           type;               \/**< Indication or Notification, see @ref BLE_GATT_HVX_TYPES. *\/$/;"	m	struct:__anon665
unit	components\softdevice\s120\headers\ble_gatts.h	/^  uint16_t         unit;        \/**< UUID from Bluetooth Assigned Numbers. *\/$/;"	m	struct:__anon662
update	components\softdevice\s120\headers\ble_gatts.h	/^  uint8_t           update : 1;         \/**< If set, data supplied in p_data will be used in the ATT response. *\/$/;"	m	struct:__anon666
user_desc_handle	components\softdevice\s120\headers\ble_gatts.h	/^  uint16_t          user_desc_handle;   \/**< Handle to the User Description descriptor, or @ref BLE_GATT_HANDLE_INVALID if not present. *\/$/;"	m	struct:__anon664
value_handle	components\softdevice\s120\headers\ble_gatts.h	/^  uint16_t             value_handle;    \/**< Characteristic Handle if applicable (BLE_GATT_HANDLE_INVALID if N\/A). *\/$/;"	m	struct:__anon661
value_handle	components\softdevice\s120\headers\ble_gatts.h	/^  uint16_t          value_handle;       \/**< Handle to the characteristic value. *\/$/;"	m	struct:__anon664
vlen	components\softdevice\s120\headers\ble_gatts.h	/^  uint8_t                 vlen       :1;   \/**< Variable length attribute. *\/$/;"	m	struct:__anon658
vloc	components\softdevice\s120\headers\ble_gatts.h	/^  uint8_t                 vloc       :2;   \/**< Value location, see @ref BLE_GATTS_VLOCS.*\/$/;"	m	struct:__anon658
wr_auth	components\softdevice\s120\headers\ble_gatts.h	/^  uint8_t                 wr_auth    :1;   \/**< Write Authorization will be requested from the application on every Write Request operation (but not Write Command). *\/$/;"	m	struct:__anon658
write	components\softdevice\s120\headers\ble_gatts.h	/^    ble_gatts_evt_write_t                 write;              \/**< Write Event Parameters. *\/$/;"	m	union:__anon677::__anon678
write	components\softdevice\s120\headers\ble_gatts.h	/^    ble_gatts_evt_write_t     write;            \/**< Attribute Write Parameters. *\/$/;"	m	union:__anon672::__anon673
write	components\softdevice\s120\headers\ble_gatts.h	/^    ble_gatts_write_authorize_params_t  write;  \/**< Write authorization parameters. *\/$/;"	m	union:__anon668::__anon669
write_perm	components\softdevice\s120\headers\ble_gatts.h	/^  ble_gap_conn_sec_mode_t write_perm;      \/**< Write permissions. *\/$/;"	m	struct:__anon658
BLE_HCI_AUTHENTICATION_FAILURE	components\softdevice\s120\headers\ble_hci.h	55;"	d
BLE_HCI_CONNECTION_TIMEOUT	components\softdevice\s120\headers\ble_hci.h	58;"	d
BLE_HCI_CONN_FAILED_TO_BE_ESTABLISHED	components\softdevice\s120\headers\ble_hci.h	118;"	d
BLE_HCI_CONN_INTERVAL_UNACCEPTABLE	components\softdevice\s120\headers\ble_hci.h	115;"	d
BLE_HCI_CONN_TERMINATED_DUE_TO_MIC_FAILURE	components\softdevice\s120\headers\ble_hci.h	117;"	d
BLE_HCI_CONTROLLER_BUSY	components\softdevice\s120\headers\ble_hci.h	114;"	d
BLE_HCI_DIFFERENT_TRANSACTION_COLLISION	components\softdevice\s120\headers\ble_hci.h	97;"	d
BLE_HCI_DIRECTED_ADVERTISER_TIMEOUT	components\softdevice\s120\headers\ble_hci.h	116;"	d
BLE_HCI_H__	components\softdevice\s120\headers\ble_hci.h	44;"	d
BLE_HCI_INSTANT_PASSED	components\softdevice\s120\headers\ble_hci.h	95;"	d
BLE_HCI_LOCAL_HOST_TERMINATED_CONNECTION	components\softdevice\s120\headers\ble_hci.h	72;"	d
BLE_HCI_MEMORY_CAPACITY_EXCEEDED	components\softdevice\s120\headers\ble_hci.h	57;"	d
BLE_HCI_PAIRING_WITH_UNIT_KEY_UNSUPPORTED	components\softdevice\s120\headers\ble_hci.h	96;"	d
BLE_HCI_REMOTE_DEV_TERMINATION_DUE_TO_LOW_RESOURCES	components\softdevice\s120\headers\ble_hci.h	70;"	d
BLE_HCI_REMOTE_DEV_TERMINATION_DUE_TO_POWER_OFF	components\softdevice\s120\headers\ble_hci.h	71;"	d
BLE_HCI_REMOTE_USER_TERMINATED_CONNECTION	components\softdevice\s120\headers\ble_hci.h	69;"	d
BLE_HCI_STATUS_CODE_COMMAND_DISALLOWED	components\softdevice\s120\headers\ble_hci.h	62;"	d
BLE_HCI_STATUS_CODE_INVALID_BTLE_COMMAND_PARAMETERS	components\softdevice\s120\headers\ble_hci.h	68;"	d
BLE_HCI_STATUS_CODE_INVALID_LMP_PARAMETERS	components\softdevice\s120\headers\ble_hci.h	83;"	d
BLE_HCI_STATUS_CODE_LMP_PDU_NOT_ALLOWED	components\softdevice\s120\headers\ble_hci.h	90;"	d
BLE_HCI_STATUS_CODE_LMP_RESPONSE_TIMEOUT	components\softdevice\s120\headers\ble_hci.h	88;"	d
BLE_HCI_STATUS_CODE_PIN_OR_KEY_MISSING	components\softdevice\s120\headers\ble_hci.h	56;"	d
BLE_HCI_STATUS_CODE_SUCCESS	components\softdevice\s120\headers\ble_hci.h	49;"	d
BLE_HCI_STATUS_CODE_UNKNOWN_BTLE_COMMAND	components\softdevice\s120\headers\ble_hci.h	50;"	d
BLE_HCI_STATUS_CODE_UNKNOWN_CONNECTION_IDENTIFIER	components\softdevice\s120\headers\ble_hci.h	51;"	d
BLE_HCI_STATUS_CODE_UNSPECIFIED_ERROR	components\softdevice\s120\headers\ble_hci.h	84;"	d
BLE_HCI_UNSUPPORTED_REMOTE_FEATURE	components\softdevice\s120\headers\ble_hci.h	78;"	d
BLE_ERROR_L2CAP_CID_IN_USE	components\softdevice\s120\headers\ble_l2cap.h	75;"	d
BLE_L2CAP_CID_DYN_BASE	components\softdevice\s120\headers\ble_l2cap.h	85;"	d
BLE_L2CAP_CID_DYN_MAX	components\softdevice\s120\headers\ble_l2cap.h	88;"	d
BLE_L2CAP_CID_INVALID	components\softdevice\s120\headers\ble_l2cap.h	82;"	d
BLE_L2CAP_EVTS	components\softdevice\s120\headers\ble_l2cap.h	/^enum BLE_L2CAP_EVTS $/;"	g
BLE_L2CAP_EVT_RX	components\softdevice\s120\headers\ble_l2cap.h	/^  BLE_L2CAP_EVT_RX  = BLE_L2CAP_EVT_BASE          \/**< L2CAP packet received. *\/$/;"	e	enum:BLE_L2CAP_EVTS
BLE_L2CAP_H__	components\softdevice\s120\headers\ble_l2cap.h	44;"	d
BLE_L2CAP_MTU_DEF	components\softdevice\s120\headers\ble_l2cap.h	79;"	d
BLE_L2CAP_SVCS	components\softdevice\s120\headers\ble_l2cap.h	/^enum BLE_L2CAP_SVCS $/;"	g
SD_BLE_L2CAP_CID_REGISTER	components\softdevice\s120\headers\ble_l2cap.h	/^  SD_BLE_L2CAP_CID_REGISTER = BLE_L2CAP_SVC_BASE,  \/**< Register a CID. *\/$/;"	e	enum:BLE_L2CAP_SVCS
SD_BLE_L2CAP_CID_UNREGISTER	components\softdevice\s120\headers\ble_l2cap.h	/^  SD_BLE_L2CAP_CID_UNREGISTER,                     \/**< Unregister a CID. *\/$/;"	e	enum:BLE_L2CAP_SVCS
SD_BLE_L2CAP_TX	components\softdevice\s120\headers\ble_l2cap.h	/^  SD_BLE_L2CAP_TX                                  \/**< Transmit a packet. *\/$/;"	e	enum:BLE_L2CAP_SVCS
ble_l2cap_evt_rx_t	components\softdevice\s120\headers\ble_l2cap.h	/^} ble_l2cap_evt_rx_t;$/;"	t	typeref:struct:__anon680
ble_l2cap_evt_t	components\softdevice\s120\headers\ble_l2cap.h	/^} ble_l2cap_evt_t;$/;"	t	typeref:struct:__anon681
ble_l2cap_header_t	components\softdevice\s120\headers\ble_l2cap.h	/^} ble_l2cap_header_t;$/;"	t	typeref:struct:__anon679
cid	components\softdevice\s120\headers\ble_l2cap.h	/^  uint16_t   cid;                                 \/**< Channel ID on which packet is transmitted. *\/$/;"	m	struct:__anon679
conn_handle	components\softdevice\s120\headers\ble_l2cap.h	/^  uint16_t conn_handle;                           \/**< Connection Handle on which event occured. *\/$/;"	m	struct:__anon681
data	components\softdevice\s120\headers\ble_l2cap.h	/^  uint8_t    data[1];                             \/**< Packet data, variable length. *\/$/;"	m	struct:__anon680
header	components\softdevice\s120\headers\ble_l2cap.h	/^  ble_l2cap_header_t header;                      \/**< L2CAP packet header. *\/$/;"	m	struct:__anon680
len	components\softdevice\s120\headers\ble_l2cap.h	/^  uint16_t   len;                                 \/**< Length of valid info in data member. *\/$/;"	m	struct:__anon679
params	components\softdevice\s120\headers\ble_l2cap.h	/^  } params;                                       \/**< Event Parameters. *\/$/;"	m	struct:__anon681	typeref:union:__anon681::__anon682
rx	components\softdevice\s120\headers\ble_l2cap.h	/^    ble_l2cap_evt_rx_t rx;                        \/**< RX Event parameters. *\/$/;"	m	union:__anon681::__anon682
BLE_EVT_BASE	components\softdevice\s120\headers\ble_ranges.h	81;"	d
BLE_EVT_INVALID	components\softdevice\s120\headers\ble_ranges.h	79;"	d
BLE_EVT_LAST	components\softdevice\s120\headers\ble_ranges.h	82;"	d
BLE_GAP_EVT_BASE	components\softdevice\s120\headers\ble_ranges.h	84;"	d
BLE_GAP_EVT_LAST	components\softdevice\s120\headers\ble_ranges.h	85;"	d
BLE_GAP_OPT_BASE	components\softdevice\s120\headers\ble_ranges.h	102;"	d
BLE_GAP_OPT_LAST	components\softdevice\s120\headers\ble_ranges.h	103;"	d
BLE_GAP_SVC_BASE	components\softdevice\s120\headers\ble_ranges.h	66;"	d
BLE_GAP_SVC_LAST	components\softdevice\s120\headers\ble_ranges.h	67;"	d
BLE_GATTC_EVT_BASE	components\softdevice\s120\headers\ble_ranges.h	87;"	d
BLE_GATTC_EVT_LAST	components\softdevice\s120\headers\ble_ranges.h	88;"	d
BLE_GATTC_OPT_BASE	components\softdevice\s120\headers\ble_ranges.h	105;"	d
BLE_GATTC_OPT_LAST	components\softdevice\s120\headers\ble_ranges.h	106;"	d
BLE_GATTC_SVC_BASE	components\softdevice\s120\headers\ble_ranges.h	69;"	d
BLE_GATTC_SVC_LAST	components\softdevice\s120\headers\ble_ranges.h	70;"	d
BLE_GATTS_EVT_BASE	components\softdevice\s120\headers\ble_ranges.h	90;"	d
BLE_GATTS_EVT_LAST	components\softdevice\s120\headers\ble_ranges.h	91;"	d
BLE_GATTS_OPT_BASE	components\softdevice\s120\headers\ble_ranges.h	108;"	d
BLE_GATTS_OPT_LAST	components\softdevice\s120\headers\ble_ranges.h	109;"	d
BLE_GATTS_SVC_BASE	components\softdevice\s120\headers\ble_ranges.h	72;"	d
BLE_GATTS_SVC_LAST	components\softdevice\s120\headers\ble_ranges.h	73;"	d
BLE_L2CAP_EVT_BASE	components\softdevice\s120\headers\ble_ranges.h	93;"	d
BLE_L2CAP_EVT_LAST	components\softdevice\s120\headers\ble_ranges.h	94;"	d
BLE_L2CAP_OPT_BASE	components\softdevice\s120\headers\ble_ranges.h	111;"	d
BLE_L2CAP_OPT_LAST	components\softdevice\s120\headers\ble_ranges.h	112;"	d
BLE_L2CAP_SVC_BASE	components\softdevice\s120\headers\ble_ranges.h	75;"	d
BLE_L2CAP_SVC_LAST	components\softdevice\s120\headers\ble_ranges.h	76;"	d
BLE_OPT_BASE	components\softdevice\s120\headers\ble_ranges.h	99;"	d
BLE_OPT_INVALID	components\softdevice\s120\headers\ble_ranges.h	97;"	d
BLE_OPT_LAST	components\softdevice\s120\headers\ble_ranges.h	100;"	d
BLE_RANGES_H__	components\softdevice\s120\headers\ble_ranges.h	58;"	d
BLE_RESERVED_SVC_BASE	components\softdevice\s120\headers\ble_ranges.h	63;"	d
BLE_RESERVED_SVC_LAST	components\softdevice\s120\headers\ble_ranges.h	64;"	d
BLE_SVC_BASE	components\softdevice\s120\headers\ble_ranges.h	60;"	d
BLE_SVC_LAST	components\softdevice\s120\headers\ble_ranges.h	61;"	d
BLE_APPEARANCE_BLOOD_PRESSURE_ARM	components\softdevice\s120\headers\ble_types.h	117;"	d
BLE_APPEARANCE_BLOOD_PRESSURE_WRIST	components\softdevice\s120\headers\ble_types.h	118;"	d
BLE_APPEARANCE_CYCLING_CADENCE_SENSOR	components\softdevice\s120\headers\ble_types.h	136;"	d
BLE_APPEARANCE_CYCLING_CYCLING_COMPUTER	components\softdevice\s120\headers\ble_types.h	134;"	d
BLE_APPEARANCE_CYCLING_POWER_SENSOR	components\softdevice\s120\headers\ble_types.h	137;"	d
BLE_APPEARANCE_CYCLING_SPEED_CADENCE_SENSOR	components\softdevice\s120\headers\ble_types.h	138;"	d
BLE_APPEARANCE_CYCLING_SPEED_SENSOR	components\softdevice\s120\headers\ble_types.h	135;"	d
BLE_APPEARANCE_GENERIC_BARCODE_SCANNER	components\softdevice\s120\headers\ble_types.h	111;"	d
BLE_APPEARANCE_GENERIC_BLOOD_PRESSURE	components\softdevice\s120\headers\ble_types.h	116;"	d
BLE_APPEARANCE_GENERIC_CLOCK	components\softdevice\s120\headers\ble_types.h	104;"	d
BLE_APPEARANCE_GENERIC_COMPUTER	components\softdevice\s120\headers\ble_types.h	101;"	d
BLE_APPEARANCE_GENERIC_CYCLING	components\softdevice\s120\headers\ble_types.h	133;"	d
BLE_APPEARANCE_GENERIC_DISPLAY	components\softdevice\s120\headers\ble_types.h	105;"	d
BLE_APPEARANCE_GENERIC_EYE_GLASSES	components\softdevice\s120\headers\ble_types.h	107;"	d
BLE_APPEARANCE_GENERIC_GLUCOSE_METER	components\softdevice\s120\headers\ble_types.h	128;"	d
BLE_APPEARANCE_GENERIC_HEART_RATE_SENSOR	components\softdevice\s120\headers\ble_types.h	114;"	d
BLE_APPEARANCE_GENERIC_HID	components\softdevice\s120\headers\ble_types.h	119;"	d
BLE_APPEARANCE_GENERIC_KEYRING	components\softdevice\s120\headers\ble_types.h	109;"	d
BLE_APPEARANCE_GENERIC_MEDIA_PLAYER	components\softdevice\s120\headers\ble_types.h	110;"	d
BLE_APPEARANCE_GENERIC_OUTDOOR_SPORTS_ACT	components\softdevice\s120\headers\ble_types.h	143;"	d
BLE_APPEARANCE_GENERIC_PHONE	components\softdevice\s120\headers\ble_types.h	100;"	d
BLE_APPEARANCE_GENERIC_PULSE_OXIMETER	components\softdevice\s120\headers\ble_types.h	139;"	d
BLE_APPEARANCE_GENERIC_REMOTE_CONTROL	components\softdevice\s120\headers\ble_types.h	106;"	d
BLE_APPEARANCE_GENERIC_RUNNING_WALKING_SENSOR	components\softdevice\s120\headers\ble_types.h	129;"	d
BLE_APPEARANCE_GENERIC_TAG	components\softdevice\s120\headers\ble_types.h	108;"	d
BLE_APPEARANCE_GENERIC_THERMOMETER	components\softdevice\s120\headers\ble_types.h	112;"	d
BLE_APPEARANCE_GENERIC_WATCH	components\softdevice\s120\headers\ble_types.h	102;"	d
BLE_APPEARANCE_GENERIC_WEIGHT_SCALE	components\softdevice\s120\headers\ble_types.h	142;"	d
BLE_APPEARANCE_HEART_RATE_SENSOR_HEART_RATE_BELT	components\softdevice\s120\headers\ble_types.h	115;"	d
BLE_APPEARANCE_HID_BARCODE	components\softdevice\s120\headers\ble_types.h	127;"	d
BLE_APPEARANCE_HID_CARD_READER	components\softdevice\s120\headers\ble_types.h	125;"	d
BLE_APPEARANCE_HID_DIGITAL_PEN	components\softdevice\s120\headers\ble_types.h	126;"	d
BLE_APPEARANCE_HID_DIGITIZERSUBTYPE	components\softdevice\s120\headers\ble_types.h	124;"	d
BLE_APPEARANCE_HID_GAMEPAD	components\softdevice\s120\headers\ble_types.h	123;"	d
BLE_APPEARANCE_HID_JOYSTICK	components\softdevice\s120\headers\ble_types.h	122;"	d
BLE_APPEARANCE_HID_KEYBOARD	components\softdevice\s120\headers\ble_types.h	120;"	d
BLE_APPEARANCE_HID_MOUSE	components\softdevice\s120\headers\ble_types.h	121;"	d
BLE_APPEARANCE_OUTDOOR_SPORTS_ACT_LOC_AND_NAV_DISP	components\softdevice\s120\headers\ble_types.h	145;"	d
BLE_APPEARANCE_OUTDOOR_SPORTS_ACT_LOC_AND_NAV_POD	components\softdevice\s120\headers\ble_types.h	147;"	d
BLE_APPEARANCE_OUTDOOR_SPORTS_ACT_LOC_DISP	components\softdevice\s120\headers\ble_types.h	144;"	d
BLE_APPEARANCE_OUTDOOR_SPORTS_ACT_LOC_POD	components\softdevice\s120\headers\ble_types.h	146;"	d
BLE_APPEARANCE_PULSE_OXIMETER_FINGERTIP	components\softdevice\s120\headers\ble_types.h	140;"	d
BLE_APPEARANCE_PULSE_OXIMETER_WRIST_WORN	components\softdevice\s120\headers\ble_types.h	141;"	d
BLE_APPEARANCE_RUNNING_WALKING_SENSOR_IN_SHOE	components\softdevice\s120\headers\ble_types.h	130;"	d
BLE_APPEARANCE_RUNNING_WALKING_SENSOR_ON_HIP	components\softdevice\s120\headers\ble_types.h	132;"	d
BLE_APPEARANCE_RUNNING_WALKING_SENSOR_ON_SHOE	components\softdevice\s120\headers\ble_types.h	131;"	d
BLE_APPEARANCE_THERMOMETER_EAR	components\softdevice\s120\headers\ble_types.h	113;"	d
BLE_APPEARANCE_UNKNOWN	components\softdevice\s120\headers\ble_types.h	99;"	d
BLE_APPEARANCE_WATCH_SPORTS_WATCH	components\softdevice\s120\headers\ble_types.h	103;"	d
BLE_CONN_HANDLE_ALL	components\softdevice\s120\headers\ble_types.h	57;"	d
BLE_CONN_HANDLE_INVALID	components\softdevice\s120\headers\ble_types.h	56;"	d
BLE_TYPES_H__	components\softdevice\s120\headers\ble_types.h	47;"	d
BLE_UUID_BLE_ASSIGN	components\softdevice\s120\headers\ble_types.h	151;"	d
BLE_UUID_CHARACTERISTIC	components\softdevice\s120\headers\ble_types.h	68;"	d
BLE_UUID_COPY_INST	components\softdevice\s120\headers\ble_types.h	161;"	d
BLE_UUID_COPY_PTR	components\softdevice\s120\headers\ble_types.h	156;"	d
BLE_UUID_DESCRIPTOR_CHAR_AGGREGATE_FORMAT	components\softdevice\s120\headers\ble_types.h	74;"	d
BLE_UUID_DESCRIPTOR_CHAR_EXT_PROP	components\softdevice\s120\headers\ble_types.h	69;"	d
BLE_UUID_DESCRIPTOR_CHAR_PRESENTATION_FORMAT	components\softdevice\s120\headers\ble_types.h	73;"	d
BLE_UUID_DESCRIPTOR_CHAR_USER_DESC	components\softdevice\s120\headers\ble_types.h	70;"	d
BLE_UUID_DESCRIPTOR_CLIENT_CHAR_CONFIG	components\softdevice\s120\headers\ble_types.h	71;"	d
BLE_UUID_DESCRIPTOR_SERVER_CHAR_CONFIG	components\softdevice\s120\headers\ble_types.h	72;"	d
BLE_UUID_EQ	components\softdevice\s120\headers\ble_types.h	166;"	d
BLE_UUID_GAP	components\softdevice\s120\headers\ble_types.h	79;"	d
BLE_UUID_GAP_CHARACTERISTIC_APPEARANCE	components\softdevice\s120\headers\ble_types.h	81;"	d
BLE_UUID_GAP_CHARACTERISTIC_DEVICE_NAME	components\softdevice\s120\headers\ble_types.h	80;"	d
BLE_UUID_GAP_CHARACTERISTIC_PPCP	components\softdevice\s120\headers\ble_types.h	84;"	d
BLE_UUID_GAP_CHARACTERISTIC_PPF	components\softdevice\s120\headers\ble_types.h	82;"	d
BLE_UUID_GAP_CHARACTERISTIC_RECONN_ADDR	components\softdevice\s120\headers\ble_types.h	83;"	d
BLE_UUID_GATT	components\softdevice\s120\headers\ble_types.h	76;"	d
BLE_UUID_GATT_CHARACTERISTIC_SERVICE_CHANGED	components\softdevice\s120\headers\ble_types.h	77;"	d
BLE_UUID_NEQ	components\softdevice\s120\headers\ble_types.h	170;"	d
BLE_UUID_SERVICE_INCLUDE	components\softdevice\s120\headers\ble_types.h	67;"	d
BLE_UUID_SERVICE_PRIMARY	components\softdevice\s120\headers\ble_types.h	65;"	d
BLE_UUID_SERVICE_SECONDARY	components\softdevice\s120\headers\ble_types.h	66;"	d
BLE_UUID_TYPE_BLE	components\softdevice\s120\headers\ble_types.h	91;"	d
BLE_UUID_TYPE_UNKNOWN	components\softdevice\s120\headers\ble_types.h	90;"	d
BLE_UUID_TYPE_VENDOR_BEGIN	components\softdevice\s120\headers\ble_types.h	92;"	d
BLE_UUID_UNKNOWN	components\softdevice\s120\headers\ble_types.h	64;"	d
ble_uuid128_t	components\softdevice\s120\headers\ble_types.h	/^} ble_uuid128_t;$/;"	t	typeref:struct:__anon683
ble_uuid_t	components\softdevice\s120\headers\ble_types.h	/^} ble_uuid_t;$/;"	t	typeref:struct:__anon684
type	components\softdevice\s120\headers\ble_types.h	/^    uint8_t     type; \/**< UUID type, see @ref BLE_UUID_TYPES. If type is @ref BLE_UUID_TYPE_UNKNOWN, the value of uuid is undefined. *\/$/;"	m	struct:__anon684
uuid	components\softdevice\s120\headers\ble_types.h	/^    uint16_t    uuid; \/**< 16-bit UUID value or octets 12-13 of 128-bit UUID. *\/$/;"	m	struct:__anon684
uuid128	components\softdevice\s120\headers\ble_types.h	/^    unsigned char uuid128[16]; \/**< Little-Endian UUID bytes. *\/$/;"	m	struct:__anon683
NRF_ERROR_BASE_NUM	components\softdevice\s120\headers\nrf_error.h	49;"	d
NRF_ERROR_BUSY	components\softdevice\s120\headers\nrf_error.h	72;"	d
NRF_ERROR_DATA_SIZE	components\softdevice\s120\headers\nrf_error.h	67;"	d
NRF_ERROR_FORBIDDEN	components\softdevice\s120\headers\nrf_error.h	70;"	d
NRF_ERROR_H__	components\softdevice\s120\headers\nrf_error.h	45;"	d
NRF_ERROR_INTERNAL	components\softdevice\s120\headers\nrf_error.h	58;"	d
NRF_ERROR_INVALID_ADDR	components\softdevice\s120\headers\nrf_error.h	71;"	d
NRF_ERROR_INVALID_DATA	components\softdevice\s120\headers\nrf_error.h	66;"	d
NRF_ERROR_INVALID_FLAGS	components\softdevice\s120\headers\nrf_error.h	65;"	d
NRF_ERROR_INVALID_LENGTH	components\softdevice\s120\headers\nrf_error.h	64;"	d
NRF_ERROR_INVALID_PARAM	components\softdevice\s120\headers\nrf_error.h	62;"	d
NRF_ERROR_INVALID_STATE	components\softdevice\s120\headers\nrf_error.h	63;"	d
NRF_ERROR_NOT_FOUND	components\softdevice\s120\headers\nrf_error.h	60;"	d
NRF_ERROR_NOT_SUPPORTED	components\softdevice\s120\headers\nrf_error.h	61;"	d
NRF_ERROR_NO_MEM	components\softdevice\s120\headers\nrf_error.h	59;"	d
NRF_ERROR_NULL	components\softdevice\s120\headers\nrf_error.h	69;"	d
NRF_ERROR_SDM_BASE_NUM	components\softdevice\s120\headers\nrf_error.h	50;"	d
NRF_ERROR_SOC_BASE_NUM	components\softdevice\s120\headers\nrf_error.h	51;"	d
NRF_ERROR_SOFTDEVICE_NOT_ENABLED	components\softdevice\s120\headers\nrf_error.h	57;"	d
NRF_ERROR_STK_BASE_NUM	components\softdevice\s120\headers\nrf_error.h	52;"	d
NRF_ERROR_SVC_HANDLER_MISSING	components\softdevice\s120\headers\nrf_error.h	56;"	d
NRF_ERROR_TIMEOUT	components\softdevice\s120\headers\nrf_error.h	68;"	d
NRF_SUCCESS	components\softdevice\s120\headers\nrf_error.h	55;"	d
NRF_ERROR_SDM_H__	components\softdevice\s120\headers\nrf_error_sdm.h	47;"	d
NRF_ERROR_SDM_INCORRECT_CLENR0	components\softdevice\s120\headers\nrf_error_sdm.h	53;"	d
NRF_ERROR_SDM_INCORRECT_INTERRUPT_CONFIGURATION	components\softdevice\s120\headers\nrf_error_sdm.h	52;"	d
NRF_ERROR_SDM_LFCLK_SOURCE_UNKNOWN	components\softdevice\s120\headers\nrf_error_sdm.h	51;"	d
NRF_ERROR_SOC_H__	components\softdevice\s120\headers\nrf_error_soc.h	48;"	d
NRF_ERROR_SOC_MUTEX_ALREADY_TAKEN	components\softdevice\s120\headers\nrf_error_soc.h	53;"	d
NRF_ERROR_SOC_NVIC_INTERRUPT_NOT_AVAILABLE	components\softdevice\s120\headers\nrf_error_soc.h	56;"	d
NRF_ERROR_SOC_NVIC_INTERRUPT_PRIORITY_NOT_ALLOWED	components\softdevice\s120\headers\nrf_error_soc.h	57;"	d
NRF_ERROR_SOC_NVIC_SHOULD_NOT_RETURN	components\softdevice\s120\headers\nrf_error_soc.h	58;"	d
NRF_ERROR_SOC_POWER_MODE_UNKNOWN	components\softdevice\s120\headers\nrf_error_soc.h	61;"	d
NRF_ERROR_SOC_POWER_OFF_SHOULD_NOT_RETURN	components\softdevice\s120\headers\nrf_error_soc.h	63;"	d
NRF_ERROR_SOC_POWER_POF_THRESHOLD_UNKNOWN	components\softdevice\s120\headers\nrf_error_soc.h	62;"	d
NRF_ERROR_SOC_PPI_INVALID_CHANNEL	components\softdevice\s120\headers\nrf_error_soc.h	69;"	d
NRF_ERROR_SOC_PPI_INVALID_GROUP	components\softdevice\s120\headers\nrf_error_soc.h	70;"	d
NRF_ERROR_SOC_RAND_NOT_ENOUGH_VALUES	components\softdevice\s120\headers\nrf_error_soc.h	66;"	d
MBR_SVC_BASE	components\softdevice\s120\headers\nrf_mbr.h	56;"	d
NRF_MBR_COMMANDS	components\softdevice\s120\headers\nrf_mbr.h	/^enum NRF_MBR_COMMANDS$/;"	g
NRF_MBR_H__	components\softdevice\s120\headers\nrf_mbr.h	46;"	d
NRF_MBR_SVCS	components\softdevice\s120\headers\nrf_mbr.h	/^enum NRF_MBR_SVCS$/;"	g
PAGE_SIZE_IN_WORDS	components\softdevice\s120\headers\nrf_mbr.h	59;"	d
SD_MBR_COMMAND	components\softdevice\s120\headers\nrf_mbr.h	/^  SD_MBR_COMMAND = MBR_SVC_BASE, \/**< ::sd_mbr_command *\/$/;"	e	enum:NRF_MBR_SVCS
SD_MBR_COMMAND_COMPARE	components\softdevice\s120\headers\nrf_mbr.h	/^  SD_MBR_COMMAND_COMPARE,               \/**< This command works like memcmp. @see ::sd_mbr_command_compare_t*\/$/;"	e	enum:NRF_MBR_COMMANDS
SD_MBR_COMMAND_COPY_BL	components\softdevice\s120\headers\nrf_mbr.h	/^  SD_MBR_COMMAND_COPY_BL,               \/**< Copy a new a new BootLoader. @see sd_mbr_command_copy_bl_t *\/$/;"	e	enum:NRF_MBR_COMMANDS
SD_MBR_COMMAND_COPY_SD	components\softdevice\s120\headers\nrf_mbr.h	/^  SD_MBR_COMMAND_COPY_SD,               \/**< Copy a new SoftDevice. @see ::sd_mbr_command_copy_sd_t*\/$/;"	e	enum:NRF_MBR_COMMANDS
SD_MBR_COMMAND_INIT_SD	components\softdevice\s120\headers\nrf_mbr.h	/^  SD_MBR_COMMAND_INIT_SD,               \/**< Init forwarding interrupts to SD, and run reset function in SD*\/$/;"	e	enum:NRF_MBR_COMMANDS
SD_MBR_COMMAND_VECTOR_TABLE_BASE_SET	components\softdevice\s120\headers\nrf_mbr.h	/^  SD_MBR_COMMAND_VECTOR_TABLE_BASE_SET, \/**< Start forwarding all exception to this address @see ::sd_mbr_command_vector_table_base_set_t*\/$/;"	e	enum:NRF_MBR_COMMANDS
address	components\softdevice\s120\headers\nrf_mbr.h	/^  uint32_t address; \/**< The base address of the interrupt vector table for forwarded interrupts.*\/$/;"	m	struct:__anon688
base_set	components\softdevice\s120\headers\nrf_mbr.h	/^    sd_mbr_command_vector_table_base_set_t base_set; \/**< Parameters for vector table base set.*\/$/;"	m	union:__anon689::__anon690
bl_len	components\softdevice\s120\headers\nrf_mbr.h	/^  uint32_t bl_len;   \/**< Number of 32 bit words to copy for BootLoader. *\/$/;"	m	struct:__anon687
bl_src	components\softdevice\s120\headers\nrf_mbr.h	/^  uint32_t *bl_src;  \/**< Pointer to the source of the Bootloader to be be copied.*\/$/;"	m	struct:__anon687
command	components\softdevice\s120\headers\nrf_mbr.h	/^  uint32_t command;  \/**< type of command to be issued see @ref NRF_MBR_COMMANDS. *\/$/;"	m	struct:__anon689
compare	components\softdevice\s120\headers\nrf_mbr.h	/^    sd_mbr_command_compare_t compare;  \/**< Parameters for verify.*\/$/;"	m	union:__anon689::__anon690
copy_bl	components\softdevice\s120\headers\nrf_mbr.h	/^    sd_mbr_command_copy_bl_t copy_bl;  \/**< Parameters for copy SoftDevice and BootLoader.*\/$/;"	m	union:__anon689::__anon690
copy_sd	components\softdevice\s120\headers\nrf_mbr.h	/^    sd_mbr_command_copy_sd_t copy_sd;  \/**< Parameters for copy.*\/$/;"	m	union:__anon689::__anon690
dst	components\softdevice\s120\headers\nrf_mbr.h	/^  uint32_t *dst;  \/**< Pointer to the destination where the content is to be copied.*\/$/;"	m	struct:__anon685
len	components\softdevice\s120\headers\nrf_mbr.h	/^  uint32_t len;   \/**< Number of 32 bit words to compare.*\/$/;"	m	struct:__anon686
len	components\softdevice\s120\headers\nrf_mbr.h	/^  uint32_t len;   \/**< Number of 32 bit words to copy. Must be a multiple of 256 words.*\/$/;"	m	struct:__anon685
params	components\softdevice\s120\headers\nrf_mbr.h	/^  } params;$/;"	m	struct:__anon689	typeref:union:__anon689::__anon690
ptr1	components\softdevice\s120\headers\nrf_mbr.h	/^  uint32_t *ptr1; \/**< Pointer to block of memory. *\/$/;"	m	struct:__anon686
ptr2	components\softdevice\s120\headers\nrf_mbr.h	/^  uint32_t *ptr2; \/**< Pointer to block of memory. *\/$/;"	m	struct:__anon686
sd_mbr_command_compare_t	components\softdevice\s120\headers\nrf_mbr.h	/^}sd_mbr_command_compare_t;$/;"	t	typeref:struct:__anon686
sd_mbr_command_copy_bl_t	components\softdevice\s120\headers\nrf_mbr.h	/^}sd_mbr_command_copy_bl_t;$/;"	t	typeref:struct:__anon687
sd_mbr_command_copy_sd_t	components\softdevice\s120\headers\nrf_mbr.h	/^}sd_mbr_command_copy_sd_t;$/;"	t	typeref:struct:__anon685
sd_mbr_command_t	components\softdevice\s120\headers\nrf_mbr.h	/^}sd_mbr_command_t;$/;"	t	typeref:struct:__anon689
sd_mbr_command_vector_table_base_set_t	components\softdevice\s120\headers\nrf_mbr.h	/^}sd_mbr_command_vector_table_base_set_t;$/;"	t	typeref:struct:__anon688
src	components\softdevice\s120\headers\nrf_mbr.h	/^  uint32_t *src;  \/**< Pointer to the source of data to be copied.*\/$/;"	m	struct:__anon685
NRF_PPI_ALL_APP_CHANNELS_MASK	components\softdevice\s120\headers\nrf_sd_def.h	19;"	d
NRF_PPI_ALL_APP_GROUPS_MASK	components\softdevice\s120\headers\nrf_sd_def.h	21;"	d
NRF_PPI_PROG_APP_CHANNELS_MASK	components\softdevice\s120\headers\nrf_sd_def.h	20;"	d
NRF_PPI_RESTRICTED	components\softdevice\s120\headers\nrf_sd_def.h	18;"	d
NRF_SD_DEF_H__	components\softdevice\s120\headers\nrf_sd_def.h	14;"	d
MBR_SIZE	components\softdevice\s120\headers\nrf_sdm.h	67;"	d
NRF_CLOCK_LFCLKSRCS	components\softdevice\s120\headers\nrf_sdm.h	/^enum NRF_CLOCK_LFCLKSRCS$/;"	g
NRF_CLOCK_LFCLKSRC_RC_250_PPM_1000MS_CALIBRATION	components\softdevice\s120\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_RC_250_PPM_1000MS_CALIBRATION,       \/**< LFCLK RC oscillator, 1000ms calibration interval.*\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_RC_250_PPM_2000MS_CALIBRATION	components\softdevice\s120\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_RC_250_PPM_2000MS_CALIBRATION,       \/**< LFCLK RC oscillator, 2000ms calibration interval.*\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_RC_250_PPM_250MS_CALIBRATION	components\softdevice\s120\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_RC_250_PPM_250MS_CALIBRATION,        \/**< LFCLK RC oscillator, 250ms  calibration interval.*\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_RC_250_PPM_4000MS_CALIBRATION	components\softdevice\s120\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_RC_250_PPM_4000MS_CALIBRATION,       \/**< LFCLK RC oscillator, 4000ms calibration interval.*\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_RC_250_PPM_500MS_CALIBRATION	components\softdevice\s120\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_RC_250_PPM_500MS_CALIBRATION,        \/**< LFCLK RC oscillator, 500ms  calibration interval.*\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_RC_250_PPM_8000MS_CALIBRATION	components\softdevice\s120\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_RC_250_PPM_8000MS_CALIBRATION,       \/**< LFCLK RC oscillator, 8000ms calibration interval.*\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_1000MS_CALIBRATION	components\softdevice\s120\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_1000MS_CALIBRATION,  \/**< LFCLK RC oscillator. Temperature checked every 1000ms, if changed above a threshold, a calibration is done.*\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_16000MS_CALIBRATION	components\softdevice\s120\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_16000MS_CALIBRATION, \/**< LFCLK RC oscillator. Temperature checked every 16000ms, if changed above a threshold, a calibration is done.*\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_2000MS_CALIBRATION	components\softdevice\s120\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_2000MS_CALIBRATION,  \/**< LFCLK RC oscillator. Temperature checked every 2000ms, if changed above a threshold, a calibration is done.*\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_4000MS_CALIBRATION	components\softdevice\s120\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_4000MS_CALIBRATION,  \/**< LFCLK RC oscillator. Temperature checked every 4000ms, if changed above a threshold, a calibration is done.*\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_8000MS_CALIBRATION	components\softdevice\s120\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_8000MS_CALIBRATION,  \/**< LFCLK RC oscillator. Temperature checked every 8000ms, if changed above a threshold, a calibration is done.*\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_SYNTH_250_PPM	components\softdevice\s120\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_SYNTH_250_PPM,                       \/**< LFCLK Synthesized from HFCLK.                    *\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_XTAL_100_PPM	components\softdevice\s120\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_XTAL_100_PPM,                        \/**< LFCLK crystal oscillator 100 PPM accuracy.       *\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_XTAL_150_PPM	components\softdevice\s120\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_XTAL_150_PPM,                        \/**< LFCLK crystal oscillator 150 PPM accuracy.       *\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_XTAL_20_PPM	components\softdevice\s120\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_XTAL_20_PPM,                         \/**< LFCLK crystal oscillator 20 PPM accuracy.        *\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_XTAL_250_PPM	components\softdevice\s120\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_XTAL_250_PPM,                        \/**< LFCLK crystal oscillator 250 PPM accuracy.       *\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_XTAL_30_PPM	components\softdevice\s120\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_XTAL_30_PPM,                         \/**< LFCLK crystal oscillator 30 PPM accuracy.        *\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_XTAL_500_PPM	components\softdevice\s120\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_XTAL_500_PPM,                        \/**< LFCLK crystal oscillator 500 PPM accuracy.       *\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_XTAL_50_PPM	components\softdevice\s120\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_XTAL_50_PPM,                         \/**< LFCLK crystal oscillator 50 PPM accuracy.        *\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_XTAL_75_PPM	components\softdevice\s120\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_XTAL_75_PPM,                         \/**< LFCLK crystal oscillator 75 PPM accuracy.        *\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_SDM_H__	components\softdevice\s120\headers\nrf_sdm.h	46;"	d
NRF_SD_SVCS	components\softdevice\s120\headers\nrf_sdm.h	/^enum NRF_SD_SVCS$/;"	g
SDM_SVC_BASE	components\softdevice\s120\headers\nrf_sdm.h	57;"	d
SD_FWID_GET	components\softdevice\s120\headers\nrf_sdm.h	84;"	d
SD_FWID_OFFSET	components\softdevice\s120\headers\nrf_sdm.h	76;"	d
SD_SIZE_GET	components\softdevice\s120\headers\nrf_sdm.h	80;"	d
SD_SIZE_OFFSET	components\softdevice\s120\headers\nrf_sdm.h	73;"	d
SD_SOFTDEVICE_DISABLE	components\softdevice\s120\headers\nrf_sdm.h	/^  SD_SOFTDEVICE_DISABLE,               \/**< ::sd_softdevice_disable *\/$/;"	e	enum:NRF_SD_SVCS
SD_SOFTDEVICE_ENABLE	components\softdevice\s120\headers\nrf_sdm.h	/^  SD_SOFTDEVICE_ENABLE = SDM_SVC_BASE, \/**< ::sd_softdevice_enable *\/$/;"	e	enum:NRF_SD_SVCS
SD_SOFTDEVICE_IS_ENABLED	components\softdevice\s120\headers\nrf_sdm.h	/^  SD_SOFTDEVICE_IS_ENABLED,            \/**< ::sd_softdevice_is_enabled *\/$/;"	e	enum:NRF_SD_SVCS
SD_SOFTDEVICE_VECTOR_TABLE_BASE_SET	components\softdevice\s120\headers\nrf_sdm.h	/^  SD_SOFTDEVICE_VECTOR_TABLE_BASE_SET, \/**< ::sd_softdevice_vector_table_base_set *\/$/;"	e	enum:NRF_SD_SVCS
SOFTDEVICE_INFO_STRUCT_ADDRESS	components\softdevice\s120\headers\nrf_sdm.h	70;"	d
SOFTDEVICE_INFO_STRUCT_OFFSET	components\softdevice\s120\headers\nrf_sdm.h	63;"	d
SVC_SDM_LAST	components\softdevice\s120\headers\nrf_sdm.h	/^  SVC_SDM_LAST                         \/**< Placeholder for last SDM SVC *\/$/;"	e	enum:NRF_SD_SVCS
nrf_clock_lfclksrc_t	components\softdevice\s120\headers\nrf_sdm.h	/^typedef uint32_t nrf_clock_lfclksrc_t;$/;"	t
softdevice_assertion_handler_t	components\softdevice\s120\headers\nrf_sdm.h	/^typedef void (*softdevice_assertion_handler_t)(uint32_t pc, uint16_t line_number, const uint8_t * p_file_name);$/;"	t
NRF_APP_PRIORITIES	components\softdevice\s120\headers\nrf_soc.h	/^enum NRF_APP_PRIORITIES$/;"	g
NRF_APP_PRIORITY_HIGH	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_APP_PRIORITY_HIGH = 1,$/;"	e	enum:NRF_APP_PRIORITIES
NRF_APP_PRIORITY_LOW	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_APP_PRIORITY_LOW = 3$/;"	e	enum:NRF_APP_PRIORITIES
NRF_EVT_FLASH_OPERATION_ERROR	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_EVT_FLASH_OPERATION_ERROR,                \/**< Event indicating that the ongoing flash operation has timed out with an error. *\/$/;"	e	enum:NRF_SOC_EVTS
NRF_EVT_FLASH_OPERATION_SUCCESS	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_EVT_FLASH_OPERATION_SUCCESS,              \/**< Event indicating that the ongoing flash operation has completed successfully. *\/$/;"	e	enum:NRF_SOC_EVTS
NRF_EVT_HFCLKSTARTED	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_EVT_HFCLKSTARTED,                         \/**< Event indicating that the HFCLK has started. *\/$/;"	e	enum:NRF_SOC_EVTS
NRF_EVT_NUMBER_OF_EVTS	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_EVT_NUMBER_OF_EVTS$/;"	e	enum:NRF_SOC_EVTS
NRF_EVT_POWER_FAILURE_WARNING	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_EVT_POWER_FAILURE_WARNING,                \/**< Event indicating that a power failure warning has occurred. *\/$/;"	e	enum:NRF_SOC_EVTS
NRF_EVT_RADIO_BLOCKED	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_EVT_RADIO_BLOCKED,                        \/**< Event indicating that a radio timeslot was blocked. *\/$/;"	e	enum:NRF_SOC_EVTS
NRF_EVT_RADIO_CANCELED	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_EVT_RADIO_CANCELED,                       \/**< Event indicating that a radio timeslot was canceled by SoftDevice. *\/$/;"	e	enum:NRF_SOC_EVTS
NRF_EVT_RADIO_SESSION_CLOSED	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_EVT_RADIO_SESSION_CLOSED,                 \/**< Event indicating that a radio session is closed. *\/$/;"	e	enum:NRF_SOC_EVTS
NRF_EVT_RADIO_SESSION_IDLE	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_EVT_RADIO_SESSION_IDLE,                   \/**< Event indicating that a radio session is idle. *\/$/;"	e	enum:NRF_SOC_EVTS
NRF_EVT_RADIO_SIGNAL_CALLBACK_INVALID_RETURN	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_EVT_RADIO_SIGNAL_CALLBACK_INVALID_RETURN, \/**< Event indicating that a radio signal callback handler return was invalid. *\/$/;"	e	enum:NRF_SOC_EVTS
NRF_MUTEX_FREE	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_MUTEX_FREE,$/;"	e	enum:NRF_MUTEX_VALUES
NRF_MUTEX_TAKEN	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_MUTEX_TAKEN$/;"	e	enum:NRF_MUTEX_VALUES
NRF_MUTEX_VALUES	components\softdevice\s120\headers\nrf_soc.h	/^enum NRF_MUTEX_VALUES$/;"	g
NRF_POWER_DCDC_DISABLE	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_POWER_DCDC_DISABLE,          \/**< The DCDC is disabled. *\/$/;"	e	enum:NRF_POWER_DCDC_MODES
NRF_POWER_DCDC_ENABLE	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_POWER_DCDC_ENABLE            \/**< The DCDC is enabled.  *\/$/;"	e	enum:NRF_POWER_DCDC_MODES
NRF_POWER_DCDC_MODES	components\softdevice\s120\headers\nrf_soc.h	/^enum NRF_POWER_DCDC_MODES$/;"	g
NRF_POWER_MODES	components\softdevice\s120\headers\nrf_soc.h	/^enum NRF_POWER_MODES$/;"	g
NRF_POWER_MODE_CONSTLAT	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_POWER_MODE_CONSTLAT,  \/**< Constant latency mode. See power management in the reference manual. *\/$/;"	e	enum:NRF_POWER_MODES
NRF_POWER_MODE_LOWPWR	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_POWER_MODE_LOWPWR     \/**< Low power mode. See power management in the reference manual. *\/$/;"	e	enum:NRF_POWER_MODES
NRF_POWER_THRESHOLDS	components\softdevice\s120\headers\nrf_soc.h	/^enum NRF_POWER_THRESHOLDS$/;"	g
NRF_POWER_THRESHOLD_V21	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_POWER_THRESHOLD_V21,  \/**< 2.1 Volts power failure threshold. *\/$/;"	e	enum:NRF_POWER_THRESHOLDS
NRF_POWER_THRESHOLD_V23	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_POWER_THRESHOLD_V23,  \/**< 2.3 Volts power failure threshold. *\/$/;"	e	enum:NRF_POWER_THRESHOLDS
NRF_POWER_THRESHOLD_V25	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_POWER_THRESHOLD_V25,  \/**< 2.5 Volts power failure threshold. *\/ $/;"	e	enum:NRF_POWER_THRESHOLDS
NRF_POWER_THRESHOLD_V27	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_POWER_THRESHOLD_V27   \/**< 2.7 Volts power failure threshold. *\/$/;"	e	enum:NRF_POWER_THRESHOLDS
NRF_RADIO_CALLBACK_SIGNAL_TYPE	components\softdevice\s120\headers\nrf_soc.h	/^enum NRF_RADIO_CALLBACK_SIGNAL_TYPE$/;"	g
NRF_RADIO_CALLBACK_SIGNAL_TYPE_EXTEND_FAILED	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_RADIO_CALLBACK_SIGNAL_TYPE_EXTEND_FAILED,     \/**< This signal indicates extend action failed. *\/$/;"	e	enum:NRF_RADIO_CALLBACK_SIGNAL_TYPE
NRF_RADIO_CALLBACK_SIGNAL_TYPE_EXTEND_SUCCEEDED	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_RADIO_CALLBACK_SIGNAL_TYPE_EXTEND_SUCCEEDED   \/**< This signal indicates extend action succeeded. *\/$/;"	e	enum:NRF_RADIO_CALLBACK_SIGNAL_TYPE
NRF_RADIO_CALLBACK_SIGNAL_TYPE_RADIO	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_RADIO_CALLBACK_SIGNAL_TYPE_RADIO,             \/**< This signal indicates the NRF_RADIO interrupt. *\/$/;"	e	enum:NRF_RADIO_CALLBACK_SIGNAL_TYPE
NRF_RADIO_CALLBACK_SIGNAL_TYPE_START	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_RADIO_CALLBACK_SIGNAL_TYPE_START,             \/**< This signal indicates the start of the radio timeslot. *\/$/;"	e	enum:NRF_RADIO_CALLBACK_SIGNAL_TYPE
NRF_RADIO_CALLBACK_SIGNAL_TYPE_TIMER0	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_RADIO_CALLBACK_SIGNAL_TYPE_TIMER0,            \/**< This signal indicates the NRF_TIMER0 interrupt. *\/$/;"	e	enum:NRF_RADIO_CALLBACK_SIGNAL_TYPE
NRF_RADIO_DISTANCE_MAX_US	components\softdevice\s120\headers\nrf_soc.h	79;"	d
NRF_RADIO_EARLIEST_TIMEOUT_MAX_US	components\softdevice\s120\headers\nrf_soc.h	81;"	d
NRF_RADIO_HFCLK_CFG	components\softdevice\s120\headers\nrf_soc.h	/^enum NRF_RADIO_HFCLK_CFG$/;"	g
NRF_RADIO_HFCLK_CFG_DEFAULT	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_RADIO_HFCLK_CFG_DEFAULT,                      \/**< Use the currently selected oscillator as HF clock source during the timeslot (i.e. the source is not specified). *\/$/;"	e	enum:NRF_RADIO_HFCLK_CFG
NRF_RADIO_HFCLK_CFG_FORCE_XTAL	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_RADIO_HFCLK_CFG_FORCE_XTAL,                   \/**< Force external crystal to be used as HF clock source during whole the timeslot. *\/$/;"	e	enum:NRF_RADIO_HFCLK_CFG
NRF_RADIO_LENGTH_MAX_US	components\softdevice\s120\headers\nrf_soc.h	77;"	d
NRF_RADIO_LENGTH_MIN_US	components\softdevice\s120\headers\nrf_soc.h	76;"	d
NRF_RADIO_MINIMUM_TIMESLOT_LENGTH_EXTENSION_TIME_US	components\softdevice\s120\headers\nrf_soc.h	65;"	d
NRF_RADIO_NOTIFICATION_DISTANCES	components\softdevice\s120\headers\nrf_soc.h	/^enum NRF_RADIO_NOTIFICATION_DISTANCES$/;"	g
NRF_RADIO_NOTIFICATION_DISTANCE_1740US	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_RADIO_NOTIFICATION_DISTANCE_1740US,   \/**< The distance from the active notification to start of radio activity. *\/$/;"	e	enum:NRF_RADIO_NOTIFICATION_DISTANCES
NRF_RADIO_NOTIFICATION_DISTANCE_2680US	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_RADIO_NOTIFICATION_DISTANCE_2680US,   \/**< The distance from the active notification to start of radio activity. *\/$/;"	e	enum:NRF_RADIO_NOTIFICATION_DISTANCES
NRF_RADIO_NOTIFICATION_DISTANCE_3620US	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_RADIO_NOTIFICATION_DISTANCE_3620US,   \/**< The distance from the active notification to start of radio activity. *\/$/;"	e	enum:NRF_RADIO_NOTIFICATION_DISTANCES
NRF_RADIO_NOTIFICATION_DISTANCE_4560US	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_RADIO_NOTIFICATION_DISTANCE_4560US,   \/**< The distance from the active notification to start of radio activity. *\/$/;"	e	enum:NRF_RADIO_NOTIFICATION_DISTANCES
NRF_RADIO_NOTIFICATION_DISTANCE_5500US	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_RADIO_NOTIFICATION_DISTANCE_5500US    \/**< The distance from the active notification to start of radio activity. *\/$/;"	e	enum:NRF_RADIO_NOTIFICATION_DISTANCES
NRF_RADIO_NOTIFICATION_DISTANCE_800US	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_RADIO_NOTIFICATION_DISTANCE_800US,    \/**< The distance from the active notification to start of radio activity. *\/$/;"	e	enum:NRF_RADIO_NOTIFICATION_DISTANCES
NRF_RADIO_NOTIFICATION_DISTANCE_NONE	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_RADIO_NOTIFICATION_DISTANCE_NONE = 0, \/**< The event does not have a notification. *\/$/;"	e	enum:NRF_RADIO_NOTIFICATION_DISTANCES
NRF_RADIO_NOTIFICATION_INACTIVE_GUARANTEED_TIME_US	components\softdevice\s120\headers\nrf_soc.h	62;"	d
NRF_RADIO_NOTIFICATION_TYPES	components\softdevice\s120\headers\nrf_soc.h	/^enum NRF_RADIO_NOTIFICATION_TYPES$/;"	g
NRF_RADIO_NOTIFICATION_TYPE_INT_ON_ACTIVE	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_RADIO_NOTIFICATION_TYPE_INT_ON_ACTIVE,   \/**< Using interrupt for notification when the radio will be enabled. *\/$/;"	e	enum:NRF_RADIO_NOTIFICATION_TYPES
NRF_RADIO_NOTIFICATION_TYPE_INT_ON_BOTH	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_RADIO_NOTIFICATION_TYPE_INT_ON_BOTH,     \/**< Using interrupt for notification both when the radio will be enabled and disabled. *\/$/;"	e	enum:NRF_RADIO_NOTIFICATION_TYPES
NRF_RADIO_NOTIFICATION_TYPE_INT_ON_INACTIVE	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_RADIO_NOTIFICATION_TYPE_INT_ON_INACTIVE, \/**< Using interrupt for notification when the radio has been disabled. *\/$/;"	e	enum:NRF_RADIO_NOTIFICATION_TYPES
NRF_RADIO_NOTIFICATION_TYPE_NONE	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_RADIO_NOTIFICATION_TYPE_NONE = 0,        \/**< The event does not have a radio notification signal. *\/$/;"	e	enum:NRF_RADIO_NOTIFICATION_TYPES
NRF_RADIO_PRIORITY	components\softdevice\s120\headers\nrf_soc.h	/^enum NRF_RADIO_PRIORITY$/;"	g
NRF_RADIO_PRIORITY_HIGH	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_RADIO_PRIORITY_HIGH,                          \/**< High (equal priority as the normal connection priority of the SoftDevice stack(s)). *\/$/;"	e	enum:NRF_RADIO_PRIORITY
NRF_RADIO_PRIORITY_NORMAL	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_RADIO_PRIORITY_NORMAL,                        \/**< Normal (equal priority as the priority of secondary activites of the SoftDevice stack(s)). *\/$/;"	e	enum:NRF_RADIO_PRIORITY
NRF_RADIO_REQUEST_TYPE	components\softdevice\s120\headers\nrf_soc.h	/^enum NRF_RADIO_REQUEST_TYPE$/;"	g
NRF_RADIO_REQ_TYPE_EARLIEST	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_RADIO_REQ_TYPE_EARLIEST,                      \/**< Request timeslot as early as possible. This should always be used for the first request in a session. *\/$/;"	e	enum:NRF_RADIO_REQUEST_TYPE
NRF_RADIO_REQ_TYPE_NORMAL	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_RADIO_REQ_TYPE_NORMAL                         \/**< Normal timeslot request. *\/$/;"	e	enum:NRF_RADIO_REQUEST_TYPE
NRF_RADIO_SIGNAL_CALLBACK_ACTION	components\softdevice\s120\headers\nrf_soc.h	/^enum NRF_RADIO_SIGNAL_CALLBACK_ACTION$/;"	g
NRF_RADIO_SIGNAL_CALLBACK_ACTION_END	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_RADIO_SIGNAL_CALLBACK_ACTION_END,             \/**< End the current radio timeslot. *\/$/;"	e	enum:NRF_RADIO_SIGNAL_CALLBACK_ACTION
NRF_RADIO_SIGNAL_CALLBACK_ACTION_EXTEND	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_RADIO_SIGNAL_CALLBACK_ACTION_EXTEND,          \/**< Request an extension of the current timeslot (maximum execution time for this action is when the extension succeeded). *\/$/;"	e	enum:NRF_RADIO_SIGNAL_CALLBACK_ACTION
NRF_RADIO_SIGNAL_CALLBACK_ACTION_NONE	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_RADIO_SIGNAL_CALLBACK_ACTION_NONE,            \/**< Return without action. *\/$/;"	e	enum:NRF_RADIO_SIGNAL_CALLBACK_ACTION
NRF_RADIO_SIGNAL_CALLBACK_ACTION_REQUEST_AND_END	components\softdevice\s120\headers\nrf_soc.h	/^  NRF_RADIO_SIGNAL_CALLBACK_ACTION_REQUEST_AND_END  \/**< Request a new radio timeslot and end the current timeslot. *\/$/;"	e	enum:NRF_RADIO_SIGNAL_CALLBACK_ACTION
NRF_RADIO_START_JITTER_US	components\softdevice\s120\headers\nrf_soc.h	83;"	d
NRF_SOC_EVTS	components\softdevice\s120\headers\nrf_soc.h	/^enum NRF_SOC_EVTS$/;"	g
NRF_SOC_H__	components\softdevice\s120\headers\nrf_soc.h	45;"	d
NRF_SOC_SVCS	components\softdevice\s120\headers\nrf_soc.h	/^enum NRF_SOC_SVCS$/;"	g
RADIO_NOTIFICATION_IRQHandler	components\softdevice\s120\headers\nrf_soc.h	74;"	d
RADIO_NOTIFICATION_IRQn	components\softdevice\s120\headers\nrf_soc.h	73;"	d
SD_APP_EVT_WAIT	components\softdevice\s120\headers\nrf_soc.h	/^  SD_APP_EVT_WAIT,$/;"	e	enum:NRF_SOC_SVCS
SD_CLOCK_HFCLK_IS_RUNNING	components\softdevice\s120\headers\nrf_soc.h	/^  SD_CLOCK_HFCLK_IS_RUNNING,$/;"	e	enum:NRF_SOC_SVCS
SD_CLOCK_HFCLK_RELEASE	components\softdevice\s120\headers\nrf_soc.h	/^  SD_CLOCK_HFCLK_RELEASE,$/;"	e	enum:NRF_SOC_SVCS
SD_CLOCK_HFCLK_REQUEST	components\softdevice\s120\headers\nrf_soc.h	/^  SD_CLOCK_HFCLK_REQUEST,$/;"	e	enum:NRF_SOC_SVCS
SD_ECB_BLOCK_ENCRYPT	components\softdevice\s120\headers\nrf_soc.h	/^  SD_ECB_BLOCK_ENCRYPT,$/;"	e	enum:NRF_SOC_SVCS
SD_EVT_GET	components\softdevice\s120\headers\nrf_soc.h	/^  SD_EVT_GET,$/;"	e	enum:NRF_SOC_SVCS
SD_EVT_IRQHandler	components\softdevice\s120\headers\nrf_soc.h	72;"	d
SD_EVT_IRQn	components\softdevice\s120\headers\nrf_soc.h	71;"	d
SD_FLASH_PAGE_ERASE	components\softdevice\s120\headers\nrf_soc.h	/^  SD_FLASH_PAGE_ERASE,$/;"	e	enum:NRF_SOC_SVCS
SD_FLASH_PROTECT	components\softdevice\s120\headers\nrf_soc.h	/^  SD_FLASH_PROTECT,$/;"	e	enum:NRF_SOC_SVCS
SD_FLASH_WRITE	components\softdevice\s120\headers\nrf_soc.h	/^  SD_FLASH_WRITE,$/;"	e	enum:NRF_SOC_SVCS
SD_MUTEX_ACQUIRE	components\softdevice\s120\headers\nrf_soc.h	/^  SD_MUTEX_ACQUIRE,$/;"	e	enum:NRF_SOC_SVCS
SD_MUTEX_NEW	components\softdevice\s120\headers\nrf_soc.h	/^  SD_MUTEX_NEW = SOC_SVC_BASE_NOT_AVAILABLE,$/;"	e	enum:NRF_SOC_SVCS
SD_MUTEX_RELEASE	components\softdevice\s120\headers\nrf_soc.h	/^  SD_MUTEX_RELEASE,$/;"	e	enum:NRF_SOC_SVCS
SD_NVIC_CLEARPENDINGIRQ	components\softdevice\s120\headers\nrf_soc.h	/^  SD_NVIC_CLEARPENDINGIRQ,$/;"	e	enum:NRF_SOC_SVCS
SD_NVIC_CRITICAL_REGION_ENTER	components\softdevice\s120\headers\nrf_soc.h	/^  SD_NVIC_CRITICAL_REGION_ENTER,$/;"	e	enum:NRF_SOC_SVCS
SD_NVIC_CRITICAL_REGION_EXIT	components\softdevice\s120\headers\nrf_soc.h	/^  SD_NVIC_CRITICAL_REGION_EXIT,$/;"	e	enum:NRF_SOC_SVCS
SD_NVIC_DISABLEIRQ	components\softdevice\s120\headers\nrf_soc.h	/^  SD_NVIC_DISABLEIRQ,$/;"	e	enum:NRF_SOC_SVCS
SD_NVIC_ENABLEIRQ	components\softdevice\s120\headers\nrf_soc.h	/^  SD_NVIC_ENABLEIRQ,$/;"	e	enum:NRF_SOC_SVCS
SD_NVIC_GETPENDINGIRQ	components\softdevice\s120\headers\nrf_soc.h	/^  SD_NVIC_GETPENDINGIRQ,$/;"	e	enum:NRF_SOC_SVCS
SD_NVIC_GETPRIORITY	components\softdevice\s120\headers\nrf_soc.h	/^  SD_NVIC_GETPRIORITY,$/;"	e	enum:NRF_SOC_SVCS
SD_NVIC_SETPENDINGIRQ	components\softdevice\s120\headers\nrf_soc.h	/^  SD_NVIC_SETPENDINGIRQ,$/;"	e	enum:NRF_SOC_SVCS
SD_NVIC_SETPRIORITY	components\softdevice\s120\headers\nrf_soc.h	/^  SD_NVIC_SETPRIORITY,$/;"	e	enum:NRF_SOC_SVCS
SD_NVIC_SYSTEMRESET	components\softdevice\s120\headers\nrf_soc.h	/^  SD_NVIC_SYSTEMRESET,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_DCDC_MODE_SET	components\softdevice\s120\headers\nrf_soc.h	/^  SD_POWER_DCDC_MODE_SET,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_GPREGRET_CLR	components\softdevice\s120\headers\nrf_soc.h	/^  SD_POWER_GPREGRET_CLR,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_GPREGRET_GET	components\softdevice\s120\headers\nrf_soc.h	/^  SD_POWER_GPREGRET_GET,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_GPREGRET_SET	components\softdevice\s120\headers\nrf_soc.h	/^  SD_POWER_GPREGRET_SET,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_MODE_SET	components\softdevice\s120\headers\nrf_soc.h	/^  SD_POWER_MODE_SET,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_POF_ENABLE	components\softdevice\s120\headers\nrf_soc.h	/^  SD_POWER_POF_ENABLE,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_POF_THRESHOLD_SET	components\softdevice\s120\headers\nrf_soc.h	/^  SD_POWER_POF_THRESHOLD_SET,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_RAMON_CLR	components\softdevice\s120\headers\nrf_soc.h	/^  SD_POWER_RAMON_CLR,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_RAMON_GET	components\softdevice\s120\headers\nrf_soc.h	/^  SD_POWER_RAMON_GET,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_RAMON_SET	components\softdevice\s120\headers\nrf_soc.h	/^  SD_POWER_RAMON_SET,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_RESET_REASON_CLR	components\softdevice\s120\headers\nrf_soc.h	/^  SD_POWER_RESET_REASON_CLR,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_RESET_REASON_GET	components\softdevice\s120\headers\nrf_soc.h	/^  SD_POWER_RESET_REASON_GET,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_SYSTEM_OFF	components\softdevice\s120\headers\nrf_soc.h	/^  SD_POWER_SYSTEM_OFF,$/;"	e	enum:NRF_SOC_SVCS
SD_PPI_CHANNEL_ASSIGN	components\softdevice\s120\headers\nrf_soc.h	/^  SD_PPI_CHANNEL_ASSIGN,$/;"	e	enum:NRF_SOC_SVCS
SD_PPI_CHANNEL_ENABLE_CLR	components\softdevice\s120\headers\nrf_soc.h	/^  SD_PPI_CHANNEL_ENABLE_CLR,$/;"	e	enum:NRF_SOC_SVCS
SD_PPI_CHANNEL_ENABLE_GET	components\softdevice\s120\headers\nrf_soc.h	/^  SD_PPI_CHANNEL_ENABLE_GET = SOC_SVC_BASE,$/;"	e	enum:NRF_SOC_SVCS
SD_PPI_CHANNEL_ENABLE_SET	components\softdevice\s120\headers\nrf_soc.h	/^  SD_PPI_CHANNEL_ENABLE_SET,$/;"	e	enum:NRF_SOC_SVCS
SD_PPI_GROUP_ASSIGN	components\softdevice\s120\headers\nrf_soc.h	/^  SD_PPI_GROUP_ASSIGN,$/;"	e	enum:NRF_SOC_SVCS
SD_PPI_GROUP_GET	components\softdevice\s120\headers\nrf_soc.h	/^  SD_PPI_GROUP_GET,$/;"	e	enum:NRF_SOC_SVCS
SD_PPI_GROUP_TASK_DISABLE	components\softdevice\s120\headers\nrf_soc.h	/^  SD_PPI_GROUP_TASK_DISABLE,$/;"	e	enum:NRF_SOC_SVCS
SD_PPI_GROUP_TASK_ENABLE	components\softdevice\s120\headers\nrf_soc.h	/^  SD_PPI_GROUP_TASK_ENABLE,$/;"	e	enum:NRF_SOC_SVCS
SD_RADIO_NOTIFICATION_CFG_SET	components\softdevice\s120\headers\nrf_soc.h	/^  SD_RADIO_NOTIFICATION_CFG_SET,$/;"	e	enum:NRF_SOC_SVCS
SD_RADIO_REQUEST	components\softdevice\s120\headers\nrf_soc.h	/^  SD_RADIO_REQUEST,$/;"	e	enum:NRF_SOC_SVCS
SD_RADIO_SESSION_CLOSE	components\softdevice\s120\headers\nrf_soc.h	/^  SD_RADIO_SESSION_CLOSE,$/;"	e	enum:NRF_SOC_SVCS
SD_RADIO_SESSION_OPEN	components\softdevice\s120\headers\nrf_soc.h	/^  SD_RADIO_SESSION_OPEN,$/;"	e	enum:NRF_SOC_SVCS
SD_RAND_APPLICATION_BYTES_AVAILABLE	components\softdevice\s120\headers\nrf_soc.h	/^  SD_RAND_APPLICATION_BYTES_AVAILABLE,$/;"	e	enum:NRF_SOC_SVCS
SD_RAND_APPLICATION_GET_VECTOR	components\softdevice\s120\headers\nrf_soc.h	/^  SD_RAND_APPLICATION_GET_VECTOR,$/;"	e	enum:NRF_SOC_SVCS
SD_RAND_APPLICATION_POOL_CAPACITY	components\softdevice\s120\headers\nrf_soc.h	/^  SD_RAND_APPLICATION_POOL_CAPACITY,$/;"	e	enum:NRF_SOC_SVCS
SD_TEMP_GET	components\softdevice\s120\headers\nrf_soc.h	/^  SD_TEMP_GET,$/;"	e	enum:NRF_SOC_SVCS
SOC_ECB_CIPHERTEXT_LENGTH	components\softdevice\s120\headers\nrf_soc.h	69;"	d
SOC_ECB_CLEARTEXT_LENGTH	components\softdevice\s120\headers\nrf_soc.h	68;"	d
SOC_ECB_KEY_LENGTH	components\softdevice\s120\headers\nrf_soc.h	67;"	d
SOC_SVC_BASE	components\softdevice\s120\headers\nrf_soc.h	58;"	d
SOC_SVC_BASE_NOT_AVAILABLE	components\softdevice\s120\headers\nrf_soc.h	59;"	d
SVC_SOC_LAST	components\softdevice\s120\headers\nrf_soc.h	/^  SVC_SOC_LAST$/;"	e	enum:NRF_SOC_SVCS
callback_action	components\softdevice\s120\headers\nrf_soc.h	/^  uint8_t               callback_action;            \/**< The action requested by the application when returning from the signal callback, see @ref NRF_RADIO_SIGNAL_CALLBACK_ACTION. *\/$/;"	m	struct:__anon695
ciphertext	components\softdevice\s120\headers\nrf_soc.h	/^  uint8_t ciphertext[SOC_ECB_CIPHERTEXT_LENGTH];    \/**< Cipher Text data. *\/$/;"	m	struct:__anon699
cleartext	components\softdevice\s120\headers\nrf_soc.h	/^  uint8_t cleartext[SOC_ECB_CLEARTEXT_LENGTH];      \/**< Clear Text data. *\/$/;"	m	struct:__anon699
distance_us	components\softdevice\s120\headers\nrf_soc.h	/^  uint32_t      distance_us;                        \/**< Distance from the start of the previous radio timeslot (up to @ref NRF_RADIO_DISTANCE_MAX_US microseconds). *\/$/;"	m	struct:__anon692
earliest	components\softdevice\s120\headers\nrf_soc.h	/^    nrf_radio_request_earliest_t  earliest;         \/**< Parameters for a request for a timeslot as early as possible. *\/$/;"	m	union:__anon693::__anon694
extend	components\softdevice\s120\headers\nrf_soc.h	/^    } extend;                                       \/**< Additional parameters for return_code @ref NRF_RADIO_SIGNAL_CALLBACK_ACTION_EXTEND. *\/$/;"	m	union:__anon695::__anon696	typeref:struct:__anon695::__anon696::__anon698
hfclk	components\softdevice\s120\headers\nrf_soc.h	/^  uint8_t       hfclk;                              \/**< High frequency clock source, see @ref NRF_RADIO_HFCLK_CFG. *\/$/;"	m	struct:__anon691
hfclk	components\softdevice\s120\headers\nrf_soc.h	/^  uint8_t       hfclk;                              \/**< High frequency clock source, see @ref NRF_RADIO_HFCLK_CFG. *\/$/;"	m	struct:__anon692
key	components\softdevice\s120\headers\nrf_soc.h	/^  uint8_t key[SOC_ECB_KEY_LENGTH];                  \/**< Encryption key. *\/$/;"	m	struct:__anon699
length_us	components\softdevice\s120\headers\nrf_soc.h	/^      uint32_t              length_us;              \/**< Requested extension of the timeslot duration (microseconds) (for minimum time see @ref NRF_RADIO_MINIMUM_TIMESLOT_LENGTH_EXTENSION_TIME_US). *\/$/;"	m	struct:__anon695::__anon696::__anon698
length_us	components\softdevice\s120\headers\nrf_soc.h	/^  uint32_t      length_us;                          \/**< The radio timeslot length (in the range 100 to 100,000] microseconds). *\/$/;"	m	struct:__anon691
length_us	components\softdevice\s120\headers\nrf_soc.h	/^  uint32_t      length_us;                          \/**< The radio timeslot length (in the range [100..100,000] microseconds). *\/$/;"	m	struct:__anon692
normal	components\softdevice\s120\headers\nrf_soc.h	/^    nrf_radio_request_normal_t    normal;           \/**< Parameters for a normal radio request. *\/$/;"	m	union:__anon693::__anon694
nrf_app_irq_priority_t	components\softdevice\s120\headers\nrf_soc.h	/^typedef uint8_t nrf_app_irq_priority_t;$/;"	t
nrf_ecb_hal_data_t	components\softdevice\s120\headers\nrf_soc.h	/^} nrf_ecb_hal_data_t;$/;"	t	typeref:struct:__anon699
nrf_mutex_t	components\softdevice\s120\headers\nrf_soc.h	/^typedef volatile uint8_t nrf_mutex_t;$/;"	t
nrf_power_dcdc_mode_t	components\softdevice\s120\headers\nrf_soc.h	/^typedef uint32_t nrf_power_dcdc_mode_t;$/;"	t
nrf_power_failure_threshold_t	components\softdevice\s120\headers\nrf_soc.h	/^typedef uint8_t nrf_power_failure_threshold_t;$/;"	t
nrf_power_mode_t	components\softdevice\s120\headers\nrf_soc.h	/^typedef uint8_t nrf_power_mode_t;$/;"	t
nrf_radio_notification_distance_t	components\softdevice\s120\headers\nrf_soc.h	/^typedef uint8_t nrf_radio_notification_distance_t;$/;"	t
nrf_radio_notification_type_t	components\softdevice\s120\headers\nrf_soc.h	/^typedef uint8_t nrf_radio_notification_type_t;$/;"	t
nrf_radio_request_earliest_t	components\softdevice\s120\headers\nrf_soc.h	/^} nrf_radio_request_earliest_t;$/;"	t	typeref:struct:__anon691
nrf_radio_request_normal_t	components\softdevice\s120\headers\nrf_soc.h	/^} nrf_radio_request_normal_t;$/;"	t	typeref:struct:__anon692
nrf_radio_request_t	components\softdevice\s120\headers\nrf_soc.h	/^} nrf_radio_request_t;$/;"	t	typeref:struct:__anon693
nrf_radio_signal_callback_return_param_t	components\softdevice\s120\headers\nrf_soc.h	/^} nrf_radio_signal_callback_return_param_t;$/;"	t	typeref:struct:__anon695
nrf_radio_signal_callback_t	components\softdevice\s120\headers\nrf_soc.h	/^typedef nrf_radio_signal_callback_return_param_t * (*nrf_radio_signal_callback_t) (uint8_t signal_type);$/;"	t
p_next	components\softdevice\s120\headers\nrf_soc.h	/^      nrf_radio_request_t * p_next;                 \/**< The request parameters for the next radio timeslot. *\/$/;"	m	struct:__anon695::__anon696::__anon697
params	components\softdevice\s120\headers\nrf_soc.h	/^  } params;$/;"	m	struct:__anon693	typeref:union:__anon693::__anon694
params	components\softdevice\s120\headers\nrf_soc.h	/^  } params;$/;"	m	struct:__anon695	typeref:union:__anon695::__anon696
priority	components\softdevice\s120\headers\nrf_soc.h	/^  uint8_t       priority;                           \/**< The radio timeslot priority, see @ref NRF_RADIO_PRIORITY. *\/$/;"	m	struct:__anon691
priority	components\softdevice\s120\headers\nrf_soc.h	/^  uint8_t       priority;                           \/**< The radio timeslot priority, see @ref NRF_RADIO_PRIORITY. *\/$/;"	m	struct:__anon692
request	components\softdevice\s120\headers\nrf_soc.h	/^    } request;                                      \/**< Additional parameters for return_code @ref NRF_RADIO_SIGNAL_CALLBACK_ACTION_REQUEST_AND_END. *\/$/;"	m	union:__anon695::__anon696	typeref:struct:__anon695::__anon696::__anon697
request_type	components\softdevice\s120\headers\nrf_soc.h	/^  uint8_t                         request_type;     \/**< Type of request, see @ref NRF_RADIO_REQUEST_TYPE. *\/$/;"	m	struct:__anon693
timeout_us	components\softdevice\s120\headers\nrf_soc.h	/^  uint32_t      timeout_us;                         \/**< Longest acceptable delay until the start of the requested timeslot (up to @ref NRF_RADIO_EARLIEST_TIMEOUT_MAX_US microseconds). *\/$/;"	m	struct:__anon691
NRF_SVC__	components\softdevice\s120\headers\nrf_svc.h	38;"	d
PRAGMA	components\softdevice\s120\headers\nrf_svc.h	59;"	d
SVCALL	components\softdevice\s120\headers\nrf_svc.h	41;"	d
SVCALL	components\softdevice\s120\headers\nrf_svc.h	46;"	d
SVCALL	components\softdevice\s120\headers\nrf_svc.h	48;"	d
SVCALL	components\softdevice\s120\headers\nrf_svc.h	60;"	d
SVCALL	components\softdevice\s120\headers\nrf_svc.h	64;"	d
ASSERT	components\softdevice\s120\headers\softdevice_assert.h	63;"	d
SOFTDEVICE_ASSERT_H_	components\softdevice\s120\headers\softdevice_assert.h	41;"	d
BLE_COMMON_EVTS	components\softdevice\s130\headers\ble.h	/^enum BLE_COMMON_EVTS$/;"	g
BLE_COMMON_OPTS	components\softdevice\s130\headers\ble.h	/^enum BLE_COMMON_OPTS$/;"	g
BLE_COMMON_OPT_RADIO_CPU_MUTEX	components\softdevice\s130\headers\ble.h	/^  BLE_COMMON_OPT_RADIO_CPU_MUTEX = BLE_OPT_BASE    \/**< Radio CPU mutex option. @ref ble_common_opt_radio_cpu_mutex_t *\/$/;"	e	enum:BLE_COMMON_OPTS
BLE_COMMON_SVCS	components\softdevice\s130\headers\ble.h	/^enum BLE_COMMON_SVCS$/;"	g
BLE_EVTS_PTR_ALIGNMENT	components\softdevice\s130\headers\ble.h	102;"	d
BLE_EVT_TX_COMPLETE	components\softdevice\s130\headers\ble.h	/^  BLE_EVT_TX_COMPLETE  = BLE_EVT_BASE,  \/**< Transmission Complete. *\/$/;"	e	enum:BLE_COMMON_EVTS
BLE_EVT_USER_MEM_RELEASE	components\softdevice\s130\headers\ble.h	/^  BLE_EVT_USER_MEM_RELEASE              \/**< User Memory release. *\/$/;"	e	enum:BLE_COMMON_EVTS
BLE_EVT_USER_MEM_REQUEST	components\softdevice\s130\headers\ble.h	/^  BLE_EVT_USER_MEM_REQUEST,             \/**< User Memory request. *\/$/;"	e	enum:BLE_COMMON_EVTS
BLE_H__	components\softdevice\s130\headers\ble.h	48;"	d
BLE_USER_MEM_TYPE_GATTS_QUEUED_WRITES	components\softdevice\s130\headers\ble.h	107;"	d
BLE_USER_MEM_TYPE_INVALID	components\softdevice\s130\headers\ble.h	106;"	d
BLE_UUID_VS_MAX_COUNT	components\softdevice\s130\headers\ble.h	112;"	d
SD_BLE_ENABLE	components\softdevice\s130\headers\ble.h	/^  SD_BLE_ENABLE = BLE_SVC_BASE,         \/**< Enable and initialize the BLE stack *\/$/;"	e	enum:BLE_COMMON_SVCS
SD_BLE_EVT_GET	components\softdevice\s130\headers\ble.h	/^  SD_BLE_EVT_GET,                       \/**< Get an event from the pending events queue. *\/$/;"	e	enum:BLE_COMMON_SVCS
SD_BLE_OPT_GET	components\softdevice\s130\headers\ble.h	/^  SD_BLE_OPT_GET,                       \/**< Get a BLE option. *\/$/;"	e	enum:BLE_COMMON_SVCS
SD_BLE_OPT_SET	components\softdevice\s130\headers\ble.h	/^  SD_BLE_OPT_SET,                       \/**< Set a BLE option. *\/$/;"	e	enum:BLE_COMMON_SVCS
SD_BLE_TX_BUFFER_COUNT_GET	components\softdevice\s130\headers\ble.h	/^  SD_BLE_TX_BUFFER_COUNT_GET,           \/**< Get the total number of available application transmission buffers from the stack. *\/$/;"	e	enum:BLE_COMMON_SVCS
SD_BLE_USER_MEM_REPLY	components\softdevice\s130\headers\ble.h	/^  SD_BLE_USER_MEM_REPLY,                \/**< User Memory Reply. *\/$/;"	e	enum:BLE_COMMON_SVCS
SD_BLE_UUID_DECODE	components\softdevice\s130\headers\ble.h	/^  SD_BLE_UUID_DECODE,                   \/**< Decode UUID bytes. *\/$/;"	e	enum:BLE_COMMON_SVCS
SD_BLE_UUID_ENCODE	components\softdevice\s130\headers\ble.h	/^  SD_BLE_UUID_ENCODE,                   \/**< Encode UUID bytes. *\/$/;"	e	enum:BLE_COMMON_SVCS
SD_BLE_UUID_VS_ADD	components\softdevice\s130\headers\ble.h	/^  SD_BLE_UUID_VS_ADD,                   \/**< Add a Vendor Specific UUID. *\/$/;"	e	enum:BLE_COMMON_SVCS
SD_BLE_VERSION_GET	components\softdevice\s130\headers\ble.h	/^  SD_BLE_VERSION_GET,                   \/**< Get the local version information (company id, Link Layer Version, Link Layer Subversion). *\/$/;"	e	enum:BLE_COMMON_SVCS
ble_common_evt_t	components\softdevice\s130\headers\ble.h	/^} ble_common_evt_t;$/;"	t	typeref:struct:__anon704
ble_common_opt_radio_cpu_mutex_t	components\softdevice\s130\headers\ble.h	/^} ble_common_opt_radio_cpu_mutex_t;$/;"	t	typeref:struct:__anon710
ble_common_opt_t	components\softdevice\s130\headers\ble.h	/^} ble_common_opt_t;$/;"	t	typeref:union:__anon711
ble_enable_params_t	components\softdevice\s130\headers\ble.h	/^} ble_enable_params_t;$/;"	t	typeref:struct:__anon713
ble_evt_hdr_t	components\softdevice\s130\headers\ble.h	/^} ble_evt_hdr_t;$/;"	t	typeref:struct:__anon706
ble_evt_t	components\softdevice\s130\headers\ble.h	/^} ble_evt_t;$/;"	t	typeref:struct:__anon707
ble_evt_tx_complete_t	components\softdevice\s130\headers\ble.h	/^} ble_evt_tx_complete_t;$/;"	t	typeref:struct:__anon701
ble_evt_user_mem_release_t	components\softdevice\s130\headers\ble.h	/^} ble_evt_user_mem_release_t;$/;"	t	typeref:struct:__anon703
ble_evt_user_mem_request_t	components\softdevice\s130\headers\ble.h	/^} ble_evt_user_mem_request_t;$/;"	t	typeref:struct:__anon702
ble_opt_t	components\softdevice\s130\headers\ble.h	/^} ble_opt_t;$/;"	t	typeref:union:__anon712
ble_user_mem_block_t	components\softdevice\s130\headers\ble.h	/^} ble_user_mem_block_t;$/;"	t	typeref:struct:__anon700
ble_version_t	components\softdevice\s130\headers\ble.h	/^} ble_version_t;$/;"	t	typeref:struct:__anon709
common_evt	components\softdevice\s130\headers\ble.h	/^    ble_common_evt_t  common_evt;         \/**< Common Event, evt_id in BLE_EVT_* series. *\/$/;"	m	union:__anon707::__anon708
common_opt	components\softdevice\s130\headers\ble.h	/^  ble_common_opt_t  common_opt;         \/**< Common option, opt_id in BLE_COMMON_OPT_* series. *\/$/;"	m	union:__anon712
company_id	components\softdevice\s130\headers\ble.h	/^  uint16_t  company_id;                 \/**< Company ID, Nordic Semiconductor's company ID is 89 (0x0059) (https:\/\/www.bluetooth.org\/apps\/content\/Default.aspx?doc_id=49708). *\/$/;"	m	struct:__anon709
conn_handle	components\softdevice\s130\headers\ble.h	/^  uint16_t conn_handle;                 \/**< Connection Handle on which this event occurred. *\/$/;"	m	struct:__anon704
count	components\softdevice\s130\headers\ble.h	/^  uint8_t count;                        \/**< Number of packets transmitted. *\/$/;"	m	struct:__anon701
enable	components\softdevice\s130\headers\ble.h	/^  uint8_t enable : 1;                          \/**< Enable mutual exclusion of radio activity and the CPU execution. *\/$/;"	m	struct:__anon710
evt	components\softdevice\s130\headers\ble.h	/^  } evt;$/;"	m	struct:__anon707	typeref:union:__anon707::__anon708
evt_id	components\softdevice\s130\headers\ble.h	/^  uint16_t evt_id;                      \/**< Value from a BLE_<module>_EVT series. *\/$/;"	m	struct:__anon706
evt_len	components\softdevice\s130\headers\ble.h	/^  uint16_t evt_len;                     \/**< Length in octets excluding this header. *\/$/;"	m	struct:__anon706
gap_evt	components\softdevice\s130\headers\ble.h	/^    ble_gap_evt_t     gap_evt;            \/**< GAP originated event, evt_id in BLE_GAP_EVT_* series. *\/$/;"	m	union:__anon707::__anon708
gap_opt	components\softdevice\s130\headers\ble.h	/^  ble_gap_opt_t     gap_opt;            \/**< GAP option, opt_id in BLE_GAP_OPT_* series. *\/$/;"	m	union:__anon712
gattc_evt	components\softdevice\s130\headers\ble.h	/^    ble_gattc_evt_t   gattc_evt;          \/**< GATT client originated event, evt_id in BLE_GATTC_EVT* series. *\/$/;"	m	union:__anon707::__anon708
gatts_enable_params	components\softdevice\s130\headers\ble.h	/^  ble_gatts_enable_params_t  gatts_enable_params; \/**< GATTS init options @ref ble_gatts_enable_params_t. *\/  $/;"	m	struct:__anon713
gatts_evt	components\softdevice\s130\headers\ble.h	/^    ble_gatts_evt_t   gatts_evt;          \/**< GATT server originated event, evt_id in BLE_GATTS_EVT* series. *\/$/;"	m	union:__anon707::__anon708
header	components\softdevice\s130\headers\ble.h	/^  ble_evt_hdr_t header;                 \/**< Event header. *\/$/;"	m	struct:__anon707
l2cap_evt	components\softdevice\s130\headers\ble.h	/^    ble_l2cap_evt_t   l2cap_evt;          \/**< L2CAP originated event, evt_id in BLE_L2CAP_EVT* series. *\/$/;"	m	union:__anon707::__anon708
len	components\softdevice\s130\headers\ble.h	/^  uint16_t          len;        \/**< Length in bytes of the user memory block. *\/$/;"	m	struct:__anon700
mem_block	components\softdevice\s130\headers\ble.h	/^  ble_user_mem_block_t        mem_block;  \/**< User memory block *\/$/;"	m	struct:__anon703
p_mem	components\softdevice\s130\headers\ble.h	/^  uint8_t          *p_mem;      \/**< Pointer to the start of the user memory block. *\/$/;"	m	struct:__anon700
params	components\softdevice\s130\headers\ble.h	/^  } params;$/;"	m	struct:__anon704	typeref:union:__anon704::__anon705
radio_cpu_mutex	components\softdevice\s130\headers\ble.h	/^  ble_common_opt_radio_cpu_mutex_t  radio_cpu_mutex;        \/**< Parameters for the option for the mutual exclusion of radio activity and CPU execution. *\/$/;"	m	union:__anon711
subversion_number	components\softdevice\s130\headers\ble.h	/^  uint16_t  subversion_number;          \/**< Link Layer Sub Version number, corresponds to the SoftDevice Config ID or Firmware ID (FWID). *\/$/;"	m	struct:__anon709
tx_complete	components\softdevice\s130\headers\ble.h	/^    ble_evt_tx_complete_t           tx_complete;        \/**< Transmission Complete. *\/$/;"	m	union:__anon704::__anon705
type	components\softdevice\s130\headers\ble.h	/^  uint8_t                     type;       \/**< User memory type, see @ref BLE_USER_MEM_TYPES. *\/$/;"	m	struct:__anon703
type	components\softdevice\s130\headers\ble.h	/^  uint8_t                     type;     \/**< User memory type, see @ref BLE_USER_MEM_TYPES. *\/$/;"	m	struct:__anon702
user_mem_release	components\softdevice\s130\headers\ble.h	/^    ble_evt_user_mem_release_t      user_mem_release;   \/**< User Memory Release Event Parameters. *\/$/;"	m	union:__anon704::__anon705
user_mem_request	components\softdevice\s130\headers\ble.h	/^    ble_evt_user_mem_request_t      user_mem_request;   \/**< User Memory Request Event Parameters. *\/$/;"	m	union:__anon704::__anon705
version_number	components\softdevice\s130\headers\ble.h	/^  uint8_t   version_number;             \/**< Link Layer Version number for BT 4.1 spec is 7 (https:\/\/www.bluetooth.org\/en-us\/specification\/assigned-numbers\/link-layer). *\/$/;"	m	struct:__anon709
BLE_ERROR_INVALID_ATTR_HANDLE	components\softdevice\s130\headers\ble_err.h	61;"	d
BLE_ERROR_INVALID_CONN_HANDLE	components\softdevice\s130\headers\ble_err.h	60;"	d
BLE_ERROR_INVALID_ROLE	components\softdevice\s130\headers\ble_err.h	63;"	d
BLE_ERROR_NOT_ENABLED	components\softdevice\s130\headers\ble_err.h	59;"	d
BLE_ERROR_NO_TX_BUFFERS	components\softdevice\s130\headers\ble_err.h	62;"	d
NRF_BLE_ERR_H__	components\softdevice\s130\headers\ble_err.h	53;"	d
NRF_GAP_ERR_BASE	components\softdevice\s130\headers\ble_err.h	72;"	d
NRF_GATTC_ERR_BASE	components\softdevice\s130\headers\ble_err.h	73;"	d
NRF_GATTS_ERR_BASE	components\softdevice\s130\headers\ble_err.h	74;"	d
NRF_L2CAP_ERR_BASE	components\softdevice\s130\headers\ble_err.h	71;"	d
BLE_ERROR_GAP_DISCOVERABLE_WITH_WHITELIST	components\softdevice\s130\headers\ble_gap.h	127;"	d
BLE_ERROR_GAP_INVALID_BLE_ADDR	components\softdevice\s130\headers\ble_gap.h	128;"	d
BLE_ERROR_GAP_UUID_LIST_MISMATCH	components\softdevice\s130\headers\ble_gap.h	126;"	d
BLE_ERROR_GAP_WHITELIST_IN_USE	components\softdevice\s130\headers\ble_gap.h	129;"	d
BLE_GAP_ADDR_CYCLE_MODE_AUTO	components\softdevice\s130\headers\ble_gap.h	162;"	d
BLE_GAP_ADDR_CYCLE_MODE_NONE	components\softdevice\s130\headers\ble_gap.h	161;"	d
BLE_GAP_ADDR_LEN	components\softdevice\s130\headers\ble_gap.h	169;"	d
BLE_GAP_ADDR_TYPE_PUBLIC	components\softdevice\s130\headers\ble_gap.h	153;"	d
BLE_GAP_ADDR_TYPE_RANDOM_PRIVATE_NON_RESOLVABLE	components\softdevice\s130\headers\ble_gap.h	156;"	d
BLE_GAP_ADDR_TYPE_RANDOM_PRIVATE_RESOLVABLE	components\softdevice\s130\headers\ble_gap.h	155;"	d
BLE_GAP_ADDR_TYPE_RANDOM_STATIC	components\softdevice\s130\headers\ble_gap.h	154;"	d
BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE	components\softdevice\s130\headers\ble_gap.h	217;"	d
BLE_GAP_ADV_FLAGS_LE_ONLY_LIMITED_DISC_MODE	components\softdevice\s130\headers\ble_gap.h	216;"	d
BLE_GAP_ADV_FLAG_BR_EDR_NOT_SUPPORTED	components\softdevice\s130\headers\ble_gap.h	213;"	d
BLE_GAP_ADV_FLAG_LE_BR_EDR_CONTROLLER	components\softdevice\s130\headers\ble_gap.h	214;"	d
BLE_GAP_ADV_FLAG_LE_BR_EDR_HOST	components\softdevice\s130\headers\ble_gap.h	215;"	d
BLE_GAP_ADV_FLAG_LE_GENERAL_DISC_MODE	components\softdevice\s130\headers\ble_gap.h	212;"	d
BLE_GAP_ADV_FLAG_LE_LIMITED_DISC_MODE	components\softdevice\s130\headers\ble_gap.h	211;"	d
BLE_GAP_ADV_FP_ANY	components\softdevice\s130\headers\ble_gap.h	265;"	d
BLE_GAP_ADV_FP_FILTER_BOTH	components\softdevice\s130\headers\ble_gap.h	268;"	d
BLE_GAP_ADV_FP_FILTER_CONNREQ	components\softdevice\s130\headers\ble_gap.h	267;"	d
BLE_GAP_ADV_FP_FILTER_SCANREQ	components\softdevice\s130\headers\ble_gap.h	266;"	d
BLE_GAP_ADV_INTERVAL_MAX	components\softdevice\s130\headers\ble_gap.h	225;"	d
BLE_GAP_ADV_INTERVAL_MIN	components\softdevice\s130\headers\ble_gap.h	223;"	d
BLE_GAP_ADV_MAX_SIZE	components\softdevice\s130\headers\ble_gap.h	251;"	d
BLE_GAP_ADV_NONCON_INTERVAL_MIN	components\softdevice\s130\headers\ble_gap.h	224;"	d
BLE_GAP_ADV_TIMEOUT_GENERAL_UNLIMITED	components\softdevice\s130\headers\ble_gap.h	275;"	d
BLE_GAP_ADV_TIMEOUT_LIMITED_MAX	components\softdevice\s130\headers\ble_gap.h	274;"	d
BLE_GAP_ADV_TYPE_ADV_DIRECT_IND	components\softdevice\s130\headers\ble_gap.h	257;"	d
BLE_GAP_ADV_TYPE_ADV_IND	components\softdevice\s130\headers\ble_gap.h	256;"	d
BLE_GAP_ADV_TYPE_ADV_NONCONN_IND	components\softdevice\s130\headers\ble_gap.h	259;"	d
BLE_GAP_ADV_TYPE_ADV_SCAN_IND	components\softdevice\s130\headers\ble_gap.h	258;"	d
BLE_GAP_AD_TYPE_128BIT_SERVICE_UUID_COMPLETE	components\softdevice\s130\headers\ble_gap.h	181;"	d
BLE_GAP_AD_TYPE_128BIT_SERVICE_UUID_MORE_AVAILABLE	components\softdevice\s130\headers\ble_gap.h	180;"	d
BLE_GAP_AD_TYPE_16BIT_SERVICE_UUID_COMPLETE	components\softdevice\s130\headers\ble_gap.h	177;"	d
BLE_GAP_AD_TYPE_16BIT_SERVICE_UUID_MORE_AVAILABLE	components\softdevice\s130\headers\ble_gap.h	176;"	d
BLE_GAP_AD_TYPE_32BIT_SERVICE_UUID_COMPLETE	components\softdevice\s130\headers\ble_gap.h	179;"	d
BLE_GAP_AD_TYPE_32BIT_SERVICE_UUID_MORE_AVAILABLE	components\softdevice\s130\headers\ble_gap.h	178;"	d
BLE_GAP_AD_TYPE_3D_INFORMATION_DATA	components\softdevice\s130\headers\ble_gap.h	204;"	d
BLE_GAP_AD_TYPE_ADVERTISING_INTERVAL	components\softdevice\s130\headers\ble_gap.h	197;"	d
BLE_GAP_AD_TYPE_APPEARANCE	components\softdevice\s130\headers\ble_gap.h	196;"	d
BLE_GAP_AD_TYPE_CLASS_OF_DEVICE	components\softdevice\s130\headers\ble_gap.h	185;"	d
BLE_GAP_AD_TYPE_COMPLETE_LOCAL_NAME	components\softdevice\s130\headers\ble_gap.h	183;"	d
BLE_GAP_AD_TYPE_FLAGS	components\softdevice\s130\headers\ble_gap.h	175;"	d
BLE_GAP_AD_TYPE_LE_BLUETOOTH_DEVICE_ADDRESS	components\softdevice\s130\headers\ble_gap.h	198;"	d
BLE_GAP_AD_TYPE_LE_ROLE	components\softdevice\s130\headers\ble_gap.h	199;"	d
BLE_GAP_AD_TYPE_MANUFACTURER_SPECIFIC_DATA	components\softdevice\s130\headers\ble_gap.h	205;"	d
BLE_GAP_AD_TYPE_PUBLIC_TARGET_ADDRESS	components\softdevice\s130\headers\ble_gap.h	194;"	d
BLE_GAP_AD_TYPE_RANDOM_TARGET_ADDRESS	components\softdevice\s130\headers\ble_gap.h	195;"	d
BLE_GAP_AD_TYPE_SECURITY_MANAGER_OOB_FLAGS	components\softdevice\s130\headers\ble_gap.h	189;"	d
BLE_GAP_AD_TYPE_SECURITY_MANAGER_TK_VALUE	components\softdevice\s130\headers\ble_gap.h	188;"	d
BLE_GAP_AD_TYPE_SERVICE_DATA	components\softdevice\s130\headers\ble_gap.h	193;"	d
BLE_GAP_AD_TYPE_SERVICE_DATA_128BIT_UUID	components\softdevice\s130\headers\ble_gap.h	203;"	d
BLE_GAP_AD_TYPE_SERVICE_DATA_32BIT_UUID	components\softdevice\s130\headers\ble_gap.h	202;"	d
BLE_GAP_AD_TYPE_SHORT_LOCAL_NAME	components\softdevice\s130\headers\ble_gap.h	182;"	d
BLE_GAP_AD_TYPE_SIMPLE_PAIRING_HASH_C	components\softdevice\s130\headers\ble_gap.h	186;"	d
BLE_GAP_AD_TYPE_SIMPLE_PAIRING_HASH_C256	components\softdevice\s130\headers\ble_gap.h	200;"	d
BLE_GAP_AD_TYPE_SIMPLE_PAIRING_RANDOMIZER_R	components\softdevice\s130\headers\ble_gap.h	187;"	d
BLE_GAP_AD_TYPE_SIMPLE_PAIRING_RANDOMIZER_R256	components\softdevice\s130\headers\ble_gap.h	201;"	d
BLE_GAP_AD_TYPE_SLAVE_CONNECTION_INTERVAL_RANGE	components\softdevice\s130\headers\ble_gap.h	190;"	d
BLE_GAP_AD_TYPE_SOLICITED_SERVICE_UUIDS_128BIT	components\softdevice\s130\headers\ble_gap.h	192;"	d
BLE_GAP_AD_TYPE_SOLICITED_SERVICE_UUIDS_16BIT	components\softdevice\s130\headers\ble_gap.h	191;"	d
BLE_GAP_AD_TYPE_TX_POWER_LEVEL	components\softdevice\s130\headers\ble_gap.h	184;"	d
BLE_GAP_AUTH_KEY_TYPE_NONE	components\softdevice\s130\headers\ble_gap.h	298;"	d
BLE_GAP_AUTH_KEY_TYPE_OOB	components\softdevice\s130\headers\ble_gap.h	300;"	d
BLE_GAP_AUTH_KEY_TYPE_PASSKEY	components\softdevice\s130\headers\ble_gap.h	299;"	d
BLE_GAP_CONN_SEC_MODE_SET_ENC_NO_MITM	components\softdevice\s130\headers\ble_gap.h	354;"	d
BLE_GAP_CONN_SEC_MODE_SET_ENC_WITH_MITM	components\softdevice\s130\headers\ble_gap.h	356;"	d
BLE_GAP_CONN_SEC_MODE_SET_NO_ACCESS	components\softdevice\s130\headers\ble_gap.h	350;"	d
BLE_GAP_CONN_SEC_MODE_SET_OPEN	components\softdevice\s130\headers\ble_gap.h	352;"	d
BLE_GAP_CONN_SEC_MODE_SET_SIGNED_NO_MITM	components\softdevice\s130\headers\ble_gap.h	358;"	d
BLE_GAP_CONN_SEC_MODE_SET_SIGNED_WITH_MITM	components\softdevice\s130\headers\ble_gap.h	360;"	d
BLE_GAP_CP_CONN_SUP_TIMEOUT_MAX	components\softdevice\s130\headers\ble_gap.h	337;"	d
BLE_GAP_CP_CONN_SUP_TIMEOUT_MIN	components\softdevice\s130\headers\ble_gap.h	336;"	d
BLE_GAP_CP_CONN_SUP_TIMEOUT_NONE	components\softdevice\s130\headers\ble_gap.h	335;"	d
BLE_GAP_CP_MAX_CONN_INTVL_MAX	components\softdevice\s130\headers\ble_gap.h	333;"	d
BLE_GAP_CP_MAX_CONN_INTVL_MIN	components\softdevice\s130\headers\ble_gap.h	332;"	d
BLE_GAP_CP_MAX_CONN_INTVL_NONE	components\softdevice\s130\headers\ble_gap.h	331;"	d
BLE_GAP_CP_MIN_CONN_INTVL_MAX	components\softdevice\s130\headers\ble_gap.h	330;"	d
BLE_GAP_CP_MIN_CONN_INTVL_MIN	components\softdevice\s130\headers\ble_gap.h	329;"	d
BLE_GAP_CP_MIN_CONN_INTVL_NONE	components\softdevice\s130\headers\ble_gap.h	328;"	d
BLE_GAP_CP_SLAVE_LATENCY_MAX	components\softdevice\s130\headers\ble_gap.h	334;"	d
BLE_GAP_DEFAULT_PRIVATE_ADDR_CYCLE_INTERVAL_S	components\softdevice\s130\headers\ble_gap.h	166;"	d
BLE_GAP_DEVNAME_MAX_LEN	components\softdevice\s130\headers\ble_gap.h	342;"	d
BLE_GAP_DISC_MODE_GENERAL	components\softdevice\s130\headers\ble_gap.h	283;"	d
BLE_GAP_DISC_MODE_LIMITED	components\softdevice\s130\headers\ble_gap.h	282;"	d
BLE_GAP_DISC_MODE_NOT_DISCOVERABLE	components\softdevice\s130\headers\ble_gap.h	281;"	d
BLE_GAP_EVTS	components\softdevice\s130\headers\ble_gap.h	/^enum BLE_GAP_EVTS$/;"	g
BLE_GAP_EVT_ADV_REPORT	components\softdevice\s130\headers\ble_gap.h	/^  BLE_GAP_EVT_ADV_REPORT,                       \/**< Advertising report. *\/$/;"	e	enum:BLE_GAP_EVTS
BLE_GAP_EVT_AUTH_KEY_REQUEST	components\softdevice\s130\headers\ble_gap.h	/^  BLE_GAP_EVT_AUTH_KEY_REQUEST,                 \/**< Request to provide an authentication key. *\/$/;"	e	enum:BLE_GAP_EVTS
BLE_GAP_EVT_AUTH_STATUS	components\softdevice\s130\headers\ble_gap.h	/^  BLE_GAP_EVT_AUTH_STATUS,                      \/**< Authentication procedure completed with status. *\/$/;"	e	enum:BLE_GAP_EVTS
BLE_GAP_EVT_CONNECTED	components\softdevice\s130\headers\ble_gap.h	/^  BLE_GAP_EVT_CONNECTED  = BLE_GAP_EVT_BASE,    \/**< Connection established. *\/$/;"	e	enum:BLE_GAP_EVTS
BLE_GAP_EVT_CONN_PARAM_UPDATE	components\softdevice\s130\headers\ble_gap.h	/^  BLE_GAP_EVT_CONN_PARAM_UPDATE,                \/**< Connection Parameters updated. *\/$/;"	e	enum:BLE_GAP_EVTS
BLE_GAP_EVT_CONN_PARAM_UPDATE_REQUEST	components\softdevice\s130\headers\ble_gap.h	/^  BLE_GAP_EVT_CONN_PARAM_UPDATE_REQUEST,        \/**< Connection Parameter Update Request. *\/$/;"	e	enum:BLE_GAP_EVTS
BLE_GAP_EVT_CONN_SEC_UPDATE	components\softdevice\s130\headers\ble_gap.h	/^  BLE_GAP_EVT_CONN_SEC_UPDATE,                  \/**< Connection security updated. *\/$/;"	e	enum:BLE_GAP_EVTS
BLE_GAP_EVT_DISCONNECTED	components\softdevice\s130\headers\ble_gap.h	/^  BLE_GAP_EVT_DISCONNECTED,                     \/**< Disconnected from peer. *\/$/;"	e	enum:BLE_GAP_EVTS
BLE_GAP_EVT_PASSKEY_DISPLAY	components\softdevice\s130\headers\ble_gap.h	/^  BLE_GAP_EVT_PASSKEY_DISPLAY,                  \/**< Request to display a passkey to the user. *\/$/;"	e	enum:BLE_GAP_EVTS
BLE_GAP_EVT_RSSI_CHANGED	components\softdevice\s130\headers\ble_gap.h	/^  BLE_GAP_EVT_RSSI_CHANGED,                     \/**< Signal strength measurement report. *\/$/;"	e	enum:BLE_GAP_EVTS
BLE_GAP_EVT_SCAN_REQ_REPORT	components\softdevice\s130\headers\ble_gap.h	/^  BLE_GAP_EVT_SCAN_REQ_REPORT,                  \/**< Scan request report. *\/$/;"	e	enum:BLE_GAP_EVTS
BLE_GAP_EVT_SEC_INFO_REQUEST	components\softdevice\s130\headers\ble_gap.h	/^  BLE_GAP_EVT_SEC_INFO_REQUEST,                 \/**< Request to provide security information. *\/$/;"	e	enum:BLE_GAP_EVTS
BLE_GAP_EVT_SEC_PARAMS_REQUEST	components\softdevice\s130\headers\ble_gap.h	/^  BLE_GAP_EVT_SEC_PARAMS_REQUEST,               \/**< Request to provide security parameters. *\/$/;"	e	enum:BLE_GAP_EVTS
BLE_GAP_EVT_SEC_REQUEST	components\softdevice\s130\headers\ble_gap.h	/^  BLE_GAP_EVT_SEC_REQUEST,                      \/**< Security Request. *\/$/;"	e	enum:BLE_GAP_EVTS
BLE_GAP_EVT_TIMEOUT	components\softdevice\s130\headers\ble_gap.h	/^  BLE_GAP_EVT_TIMEOUT,                          \/**< Timeout expired. *\/$/;"	e	enum:BLE_GAP_EVTS
BLE_GAP_H__	components\softdevice\s130\headers\ble_gap.h	44;"	d
BLE_GAP_IO_CAPS_DISPLAY_ONLY	components\softdevice\s130\headers\ble_gap.h	288;"	d
BLE_GAP_IO_CAPS_DISPLAY_YESNO	components\softdevice\s130\headers\ble_gap.h	289;"	d
BLE_GAP_IO_CAPS_KEYBOARD_DISPLAY	components\softdevice\s130\headers\ble_gap.h	292;"	d
BLE_GAP_IO_CAPS_KEYBOARD_ONLY	components\softdevice\s130\headers\ble_gap.h	290;"	d
BLE_GAP_IO_CAPS_NONE	components\softdevice\s130\headers\ble_gap.h	291;"	d
BLE_GAP_OPTS	components\softdevice\s130\headers\ble_gap.h	/^enum BLE_GAP_OPTS$/;"	g
BLE_GAP_OPT_CH_MAP	components\softdevice\s130\headers\ble_gap.h	/^  BLE_GAP_OPT_CH_MAP  = BLE_GAP_OPT_BASE,       \/**< Channel Map. @ref ble_gap_opt_ch_map_t  *\/$/;"	e	enum:BLE_GAP_OPTS
BLE_GAP_OPT_LOCAL_CONN_LATENCY	components\softdevice\s130\headers\ble_gap.h	/^  BLE_GAP_OPT_LOCAL_CONN_LATENCY,               \/**< Local connection latency. @ref ble_gap_opt_local_conn_latency_t *\/$/;"	e	enum:BLE_GAP_OPTS
BLE_GAP_OPT_PASSKEY	components\softdevice\s130\headers\ble_gap.h	/^  BLE_GAP_OPT_PASSKEY,                          \/**< Set passkey. @ref ble_gap_opt_passkey_t *\/$/;"	e	enum:BLE_GAP_OPTS
BLE_GAP_OPT_PRIVACY	components\softdevice\s130\headers\ble_gap.h	/^  BLE_GAP_OPT_PRIVACY,                          \/**< Custom privacy. @ref ble_gap_opt_privacy_t *\/$/;"	e	enum:BLE_GAP_OPTS
BLE_GAP_OPT_SCAN_REQ_REPORT	components\softdevice\s130\headers\ble_gap.h	/^  BLE_GAP_OPT_SCAN_REQ_REPORT                   \/**< Scan request report. @ref ble_gap_opt_scan_req_report_t *\/$/;"	e	enum:BLE_GAP_OPTS
BLE_GAP_PASSKEY_LEN	components\softdevice\s130\headers\ble_gap.h	371;"	d
BLE_GAP_ROLE_CENTRAL	components\softdevice\s130\headers\ble_gap.h	138;"	d
BLE_GAP_ROLE_INVALID	components\softdevice\s130\headers\ble_gap.h	136;"	d
BLE_GAP_ROLE_PERIPH	components\softdevice\s130\headers\ble_gap.h	137;"	d
BLE_GAP_SCAN_INTERVAL_MAX	components\softdevice\s130\headers\ble_gap.h	232;"	d
BLE_GAP_SCAN_INTERVAL_MIN	components\softdevice\s130\headers\ble_gap.h	231;"	d
BLE_GAP_SCAN_REQ_REPORT_MODE_DISABLED	components\softdevice\s130\headers\ble_gap.h	388;"	d
BLE_GAP_SCAN_REQ_REPORT_MODE_ENABLED	components\softdevice\s130\headers\ble_gap.h	389;"	d
BLE_GAP_SCAN_TIMEOUT_MAX	components\softdevice\s130\headers\ble_gap.h	246;"	d
BLE_GAP_SCAN_TIMEOUT_MIN	components\softdevice\s130\headers\ble_gap.h	245;"	d
BLE_GAP_SCAN_WINDOW_MAX	components\softdevice\s130\headers\ble_gap.h	239;"	d
BLE_GAP_SCAN_WINDOW_MIN	components\softdevice\s130\headers\ble_gap.h	238;"	d
BLE_GAP_SEC_KEY_LEN	components\softdevice\s130\headers\ble_gap.h	368;"	d
BLE_GAP_SEC_MODE	components\softdevice\s130\headers\ble_gap.h	383;"	d
BLE_GAP_SEC_RAND_LEN	components\softdevice\s130\headers\ble_gap.h	365;"	d
BLE_GAP_SEC_STATUS_AUTH_REQ	components\softdevice\s130\headers\ble_gap.h	310;"	d
BLE_GAP_SEC_STATUS_CONFIRM_VALUE	components\softdevice\s130\headers\ble_gap.h	311;"	d
BLE_GAP_SEC_STATUS_ENC_KEY_SIZE	components\softdevice\s130\headers\ble_gap.h	313;"	d
BLE_GAP_SEC_STATUS_INVALID_PARAMS	components\softdevice\s130\headers\ble_gap.h	317;"	d
BLE_GAP_SEC_STATUS_OOB_NOT_AVAILABLE	components\softdevice\s130\headers\ble_gap.h	309;"	d
BLE_GAP_SEC_STATUS_PAIRING_NOT_SUPP	components\softdevice\s130\headers\ble_gap.h	312;"	d
BLE_GAP_SEC_STATUS_PASSKEY_ENTRY_FAILED	components\softdevice\s130\headers\ble_gap.h	308;"	d
BLE_GAP_SEC_STATUS_PDU_INVALID	components\softdevice\s130\headers\ble_gap.h	307;"	d
BLE_GAP_SEC_STATUS_REPEATED_ATTEMPTS	components\softdevice\s130\headers\ble_gap.h	316;"	d
BLE_GAP_SEC_STATUS_SMP_CMD_UNSUPPORTED	components\softdevice\s130\headers\ble_gap.h	314;"	d
BLE_GAP_SEC_STATUS_SOURCE_LOCAL	components\softdevice\s130\headers\ble_gap.h	322;"	d
BLE_GAP_SEC_STATUS_SOURCE_REMOTE	components\softdevice\s130\headers\ble_gap.h	323;"	d
BLE_GAP_SEC_STATUS_SUCCESS	components\softdevice\s130\headers\ble_gap.h	305;"	d
BLE_GAP_SEC_STATUS_TIMEOUT	components\softdevice\s130\headers\ble_gap.h	306;"	d
BLE_GAP_SEC_STATUS_UNSPECIFIED	components\softdevice\s130\headers\ble_gap.h	315;"	d
BLE_GAP_SVCS	components\softdevice\s130\headers\ble_gap.h	/^enum BLE_GAP_SVCS$/;"	g
BLE_GAP_TIMEOUT_SRC_ADVERTISING	components\softdevice\s130\headers\ble_gap.h	144;"	d
BLE_GAP_TIMEOUT_SRC_CONN	components\softdevice\s130\headers\ble_gap.h	147;"	d
BLE_GAP_TIMEOUT_SRC_SCAN	components\softdevice\s130\headers\ble_gap.h	146;"	d
BLE_GAP_TIMEOUT_SRC_SECURITY_REQUEST	components\softdevice\s130\headers\ble_gap.h	145;"	d
BLE_GAP_WHITELIST_ADDR_MAX_COUNT	components\softdevice\s130\headers\ble_gap.h	374;"	d
BLE_GAP_WHITELIST_IRK_MAX_COUNT	components\softdevice\s130\headers\ble_gap.h	379;"	d
SD_BLE_GAP_ADDRESS_GET	components\softdevice\s130\headers\ble_gap.h	/^  SD_BLE_GAP_ADDRESS_GET,                      \/**< Get own Bluetooth Address. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_ADDRESS_SET	components\softdevice\s130\headers\ble_gap.h	/^  SD_BLE_GAP_ADDRESS_SET  = BLE_GAP_SVC_BASE,  \/**< Set own Bluetooth Address. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_ADV_DATA_SET	components\softdevice\s130\headers\ble_gap.h	/^  SD_BLE_GAP_ADV_DATA_SET,                     \/**< Set Advertising Data. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_ADV_START	components\softdevice\s130\headers\ble_gap.h	/^  SD_BLE_GAP_ADV_START,                        \/**< Start Advertising. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_ADV_STOP	components\softdevice\s130\headers\ble_gap.h	/^  SD_BLE_GAP_ADV_STOP,                         \/**< Stop Advertising. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_APPEARANCE_GET	components\softdevice\s130\headers\ble_gap.h	/^  SD_BLE_GAP_APPEARANCE_GET,                   \/**< Get Appearance. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_APPEARANCE_SET	components\softdevice\s130\headers\ble_gap.h	/^  SD_BLE_GAP_APPEARANCE_SET,                   \/**< Set Appearance. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_AUTHENTICATE	components\softdevice\s130\headers\ble_gap.h	/^  SD_BLE_GAP_AUTHENTICATE,                     \/**< Initiate Pairing\/Bonding. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_AUTH_KEY_REPLY	components\softdevice\s130\headers\ble_gap.h	/^  SD_BLE_GAP_AUTH_KEY_REPLY,                   \/**< Reply with an authentication key. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_CONNECT	components\softdevice\s130\headers\ble_gap.h	/^  SD_BLE_GAP_CONNECT,                          \/**< Connect. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_CONNECT_CANCEL	components\softdevice\s130\headers\ble_gap.h	/^  SD_BLE_GAP_CONNECT_CANCEL,                   \/**< Cancel ongoing connection procedure. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_CONN_PARAM_UPDATE	components\softdevice\s130\headers\ble_gap.h	/^  SD_BLE_GAP_CONN_PARAM_UPDATE,                \/**< Connection Parameter Update. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_CONN_SEC_GET	components\softdevice\s130\headers\ble_gap.h	/^  SD_BLE_GAP_CONN_SEC_GET,                     \/**< Obtain connection security level. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_DEVICE_NAME_GET	components\softdevice\s130\headers\ble_gap.h	/^  SD_BLE_GAP_DEVICE_NAME_GET,                  \/**< Get Device Name. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_DEVICE_NAME_SET	components\softdevice\s130\headers\ble_gap.h	/^  SD_BLE_GAP_DEVICE_NAME_SET,                  \/**< Set Device Name. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_DISCONNECT	components\softdevice\s130\headers\ble_gap.h	/^  SD_BLE_GAP_DISCONNECT,                       \/**< Disconnect. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_ENCRYPT	components\softdevice\s130\headers\ble_gap.h	/^  SD_BLE_GAP_ENCRYPT,                          \/**< Initiate encryption procedure. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_PPCP_GET	components\softdevice\s130\headers\ble_gap.h	/^  SD_BLE_GAP_PPCP_GET,                         \/**< Get PPCP. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_PPCP_SET	components\softdevice\s130\headers\ble_gap.h	/^  SD_BLE_GAP_PPCP_SET,                         \/**< Set PPCP. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_RSSI_START	components\softdevice\s130\headers\ble_gap.h	/^  SD_BLE_GAP_RSSI_START,                       \/**< Start reporting of changes in RSSI. *\/ $/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_RSSI_STOP	components\softdevice\s130\headers\ble_gap.h	/^  SD_BLE_GAP_RSSI_STOP,                        \/**< Stop reporting of changes in RSSI. *\/ $/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_SCAN_START	components\softdevice\s130\headers\ble_gap.h	/^  SD_BLE_GAP_SCAN_START,                       \/**< Start Scanning. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_SCAN_STOP	components\softdevice\s130\headers\ble_gap.h	/^  SD_BLE_GAP_SCAN_STOP,                        \/**< Stop Scanning. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_SEC_INFO_REPLY	components\softdevice\s130\headers\ble_gap.h	/^  SD_BLE_GAP_SEC_INFO_REPLY,                   \/**< Reply with Security Information. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_SEC_PARAMS_REPLY	components\softdevice\s130\headers\ble_gap.h	/^  SD_BLE_GAP_SEC_PARAMS_REPLY,                 \/**< Reply with Security Parameters. *\/$/;"	e	enum:BLE_GAP_SVCS
SD_BLE_GAP_TX_POWER_SET	components\softdevice\s130\headers\ble_gap.h	/^  SD_BLE_GAP_TX_POWER_SET,                     \/**< Set TX Power. *\/$/;"	e	enum:BLE_GAP_SVCS
active	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t                 active    : 1;        \/**< If 1, perform active scanning (scan requests). *\/$/;"	m	struct:__anon722
addr	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t addr[BLE_GAP_ADDR_LEN];       \/**< 48-bit address, LSB format. *\/$/;"	m	struct:__anon714
addr_count	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t             addr_count;      \/**< Count of device addresses in array, up to @ref BLE_GAP_WHITELIST_ADDR_MAX_COUNT. *\/$/;"	m	struct:__anon719
addr_type	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t addr_type;                    \/**< See @ref BLE_GAP_ADDR_TYPES. *\/$/;"	m	struct:__anon714
adv_report	components\softdevice\s130\headers\ble_gap.h	/^    ble_gap_evt_adv_report_t                  adv_report;                   \/**< Advertising Report Event Parameters. *\/$/;"	m	union:__anon748::__anon749
auth	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t   auth : 1;                   \/**< Authenticated Key. *\/$/;"	m	struct:__anon725
auth_key_request	components\softdevice\s130\headers\ble_gap.h	/^    ble_gap_evt_auth_key_request_t            auth_key_request;             \/**< Authentication Key Request Event Parameters. *\/$/;"	m	union:__anon748::__anon749
auth_status	components\softdevice\s130\headers\ble_gap.h	/^    ble_gap_evt_auth_status_t                 auth_status;                  \/**< Authentication Status Event Parameters. *\/$/;"	m	union:__anon748::__anon749
auth_status	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t               auth_status;            \/**< Authentication status, see @ref BLE_GAP_SEC_STATUS. *\/$/;"	m	struct:__anon740
ble_gap_addr_t	components\softdevice\s130\headers\ble_gap.h	/^} ble_gap_addr_t;$/;"	t	typeref:struct:__anon714
ble_gap_adv_ch_mask_t	components\softdevice\s130\headers\ble_gap.h	/^} ble_gap_adv_ch_mask_t;$/;"	t	typeref:struct:__anon720
ble_gap_adv_params_t	components\softdevice\s130\headers\ble_gap.h	/^} ble_gap_adv_params_t;$/;"	t	typeref:struct:__anon721
ble_gap_conn_params_t	components\softdevice\s130\headers\ble_gap.h	/^} ble_gap_conn_params_t;$/;"	t	typeref:struct:__anon715
ble_gap_conn_sec_mode_t	components\softdevice\s130\headers\ble_gap.h	/^} ble_gap_conn_sec_mode_t;$/;"	t	typeref:struct:__anon716
ble_gap_conn_sec_t	components\softdevice\s130\headers\ble_gap.h	/^} ble_gap_conn_sec_t;$/;"	t	typeref:struct:__anon717
ble_gap_enc_info_t	components\softdevice\s130\headers\ble_gap.h	/^} ble_gap_enc_info_t;$/;"	t	typeref:struct:__anon725
ble_gap_enc_key_t	components\softdevice\s130\headers\ble_gap.h	/^} ble_gap_enc_key_t;$/;"	t	typeref:struct:__anon736
ble_gap_evt_adv_report_t	components\softdevice\s130\headers\ble_gap.h	/^} ble_gap_evt_adv_report_t;$/;"	t	typeref:struct:__anon744
ble_gap_evt_auth_key_request_t	components\softdevice\s130\headers\ble_gap.h	/^} ble_gap_evt_auth_key_request_t;$/;"	t	typeref:struct:__anon734
ble_gap_evt_auth_status_t	components\softdevice\s130\headers\ble_gap.h	/^} ble_gap_evt_auth_status_t;$/;"	t	typeref:struct:__anon740
ble_gap_evt_conn_param_update_request_t	components\softdevice\s130\headers\ble_gap.h	/^} ble_gap_evt_conn_param_update_request_t;$/;"	t	typeref:struct:__anon747
ble_gap_evt_conn_param_update_t	components\softdevice\s130\headers\ble_gap.h	/^} ble_gap_evt_conn_param_update_t;$/;"	t	typeref:struct:__anon730
ble_gap_evt_conn_sec_update_t	components\softdevice\s130\headers\ble_gap.h	/^} ble_gap_evt_conn_sec_update_t;$/;"	t	typeref:struct:__anon741
ble_gap_evt_connected_t	components\softdevice\s130\headers\ble_gap.h	/^} ble_gap_evt_connected_t;$/;"	t	typeref:struct:__anon728
ble_gap_evt_disconnected_t	components\softdevice\s130\headers\ble_gap.h	/^} ble_gap_evt_disconnected_t;$/;"	t	typeref:struct:__anon729
ble_gap_evt_passkey_display_t	components\softdevice\s130\headers\ble_gap.h	/^} ble_gap_evt_passkey_display_t;$/;"	t	typeref:struct:__anon733
ble_gap_evt_rssi_changed_t	components\softdevice\s130\headers\ble_gap.h	/^} ble_gap_evt_rssi_changed_t;$/;"	t	typeref:struct:__anon743
ble_gap_evt_scan_req_report_t	components\softdevice\s130\headers\ble_gap.h	/^} ble_gap_evt_scan_req_report_t;$/;"	t	typeref:struct:__anon745
ble_gap_evt_sec_info_request_t	components\softdevice\s130\headers\ble_gap.h	/^} ble_gap_evt_sec_info_request_t;$/;"	t	typeref:struct:__anon732
ble_gap_evt_sec_params_request_t	components\softdevice\s130\headers\ble_gap.h	/^} ble_gap_evt_sec_params_request_t;$/;"	t	typeref:struct:__anon731
ble_gap_evt_sec_request_t	components\softdevice\s130\headers\ble_gap.h	/^} ble_gap_evt_sec_request_t;$/;"	t	typeref:struct:__anon746
ble_gap_evt_t	components\softdevice\s130\headers\ble_gap.h	/^} ble_gap_evt_t;$/;"	t	typeref:struct:__anon748
ble_gap_evt_timeout_t	components\softdevice\s130\headers\ble_gap.h	/^} ble_gap_evt_timeout_t;$/;"	t	typeref:struct:__anon742
ble_gap_id_key_t	components\softdevice\s130\headers\ble_gap.h	/^} ble_gap_id_key_t;$/;"	t	typeref:struct:__anon737
ble_gap_irk_t	components\softdevice\s130\headers\ble_gap.h	/^} ble_gap_irk_t;$/;"	t	typeref:struct:__anon718
ble_gap_master_id_t	components\softdevice\s130\headers\ble_gap.h	/^} ble_gap_master_id_t;$/;"	t	typeref:struct:__anon726
ble_gap_opt_ch_map_t	components\softdevice\s130\headers\ble_gap.h	/^} ble_gap_opt_ch_map_t;$/;"	t	typeref:struct:__anon750
ble_gap_opt_local_conn_latency_t	components\softdevice\s130\headers\ble_gap.h	/^} ble_gap_opt_local_conn_latency_t;$/;"	t	typeref:struct:__anon751
ble_gap_opt_passkey_t	components\softdevice\s130\headers\ble_gap.h	/^} ble_gap_opt_passkey_t;$/;"	t	typeref:struct:__anon752
ble_gap_opt_privacy_t	components\softdevice\s130\headers\ble_gap.h	/^} ble_gap_opt_privacy_t;$/;"	t	typeref:struct:__anon753
ble_gap_opt_scan_req_report_t	components\softdevice\s130\headers\ble_gap.h	/^} ble_gap_opt_scan_req_report_t;$/;"	t	typeref:struct:__anon754
ble_gap_opt_t	components\softdevice\s130\headers\ble_gap.h	/^} ble_gap_opt_t;$/;"	t	typeref:union:__anon755
ble_gap_scan_params_t	components\softdevice\s130\headers\ble_gap.h	/^} ble_gap_scan_params_t;$/;"	t	typeref:struct:__anon722
ble_gap_sec_kdist_t	components\softdevice\s130\headers\ble_gap.h	/^} ble_gap_sec_kdist_t;$/;"	t	typeref:struct:__anon723
ble_gap_sec_keys_t	components\softdevice\s130\headers\ble_gap.h	/^} ble_gap_sec_keys_t;$/;"	t	typeref:struct:__anon738
ble_gap_sec_keyset_t	components\softdevice\s130\headers\ble_gap.h	/^} ble_gap_sec_keyset_t;$/;"	t	typeref:struct:__anon739
ble_gap_sec_levels_t	components\softdevice\s130\headers\ble_gap.h	/^} ble_gap_sec_levels_t;$/;"	t	typeref:struct:__anon735
ble_gap_sec_params_t	components\softdevice\s130\headers\ble_gap.h	/^} ble_gap_sec_params_t;$/;"	t	typeref:struct:__anon724
ble_gap_sign_info_t	components\softdevice\s130\headers\ble_gap.h	/^} ble_gap_sign_info_t;$/;"	t	typeref:struct:__anon727
ble_gap_whitelist_t	components\softdevice\s130\headers\ble_gap.h	/^} ble_gap_whitelist_t;$/;"	t	typeref:struct:__anon719
bond	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t               bond    : 1;               \/**< Perform bonding. *\/$/;"	m	struct:__anon724
bond	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t    bond    : 1;                       \/**< Perform bonding. *\/$/;"	m	struct:__anon746
bonded	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t               bonded : 1;             \/**< Procedure resulted in a bond. *\/$/;"	m	struct:__anon740
ch_37_off	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t ch_37_off : 1;  \/**< Setting this bit to 1 will turn off advertising on channel 37 *\/$/;"	m	struct:__anon720
ch_38_off	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t ch_38_off : 1;  \/**< Setting this bit to 1 will turn off advertising on channel 38 *\/$/;"	m	struct:__anon720
ch_39_off	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t ch_39_off : 1;  \/**< Setting this bit to 1 will turn off advertising on channel 39 *\/$/;"	m	struct:__anon720
ch_map	components\softdevice\s130\headers\ble_gap.h	/^  ble_gap_opt_ch_map_t                  ch_map;                    \/**< Parameters for the Channel Map option. *\/$/;"	m	union:__anon755
ch_map	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t ch_map[5];                      \/**< Channel Map (37-bit). *\/$/;"	m	struct:__anon750
channel_mask	components\softdevice\s130\headers\ble_gap.h	/^  ble_gap_adv_ch_mask_t channel_mask;        \/**< Advertising channel mask. @see ble_gap_channel_mask_t for documentation. *\/$/;"	m	struct:__anon721
conn_handle	components\softdevice\s130\headers\ble_gap.h	/^  uint16_t   conn_handle;                       \/**< Connection Handle *\/$/;"	m	struct:__anon751
conn_handle	components\softdevice\s130\headers\ble_gap.h	/^  uint16_t conn_handle;                                     \/**< Connection Handle on which event occured. *\/$/;"	m	struct:__anon748
conn_handle	components\softdevice\s130\headers\ble_gap.h	/^  uint16_t conn_handle;                   \/**< Connection Handle (only applicable for get) *\/$/;"	m	struct:__anon750
conn_param_update	components\softdevice\s130\headers\ble_gap.h	/^    ble_gap_evt_conn_param_update_t           conn_param_update;            \/**< Connection Parameter Update Parameters. *\/$/;"	m	union:__anon748::__anon749
conn_param_update_request	components\softdevice\s130\headers\ble_gap.h	/^    ble_gap_evt_conn_param_update_request_t   conn_param_update_request;    \/**< Connection Parameter Update Parameters. *\/$/;"	m	union:__anon748::__anon749
conn_params	components\softdevice\s130\headers\ble_gap.h	/^  ble_gap_conn_params_t conn_params;            \/**<  GAP Connection Parameters. *\/$/;"	m	struct:__anon730
conn_params	components\softdevice\s130\headers\ble_gap.h	/^  ble_gap_conn_params_t conn_params;            \/**<  GAP Connection Parameters. *\/$/;"	m	struct:__anon747
conn_params	components\softdevice\s130\headers\ble_gap.h	/^  ble_gap_conn_params_t conn_params;            \/**< GAP Connection Parameters. *\/$/;"	m	struct:__anon728
conn_sec	components\softdevice\s130\headers\ble_gap.h	/^  ble_gap_conn_sec_t conn_sec;                  \/**< Connection security level. *\/$/;"	m	struct:__anon741
conn_sec_update	components\softdevice\s130\headers\ble_gap.h	/^    ble_gap_evt_conn_sec_update_t             conn_sec_update;              \/**< Connection Security Update Event Parameters. *\/$/;"	m	union:__anon748::__anon749
conn_sup_timeout	components\softdevice\s130\headers\ble_gap.h	/^  uint16_t conn_sup_timeout;          \/**< Connection Supervision Timeout in 10 ms units, see @ref BLE_GAP_CP_LIMITS.*\/$/;"	m	struct:__anon715
connected	components\softdevice\s130\headers\ble_gap.h	/^    ble_gap_evt_connected_t                   connected;                    \/**< Connected Event Parameters. *\/$/;"	m	union:__anon748::__anon749
csrk	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t   csrk[BLE_GAP_SEC_KEY_LEN];        \/**< Connection Signature Resolving Key. *\/$/;"	m	struct:__anon727
data	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t        data[BLE_GAP_ADV_MAX_SIZE];    \/**< Advertising or scan response data. *\/$/;"	m	struct:__anon744
disconnected	components\softdevice\s130\headers\ble_gap.h	/^    ble_gap_evt_disconnected_t                disconnected;                 \/**< Disconnected Event Parameters. *\/$/;"	m	union:__anon748::__anon749
dlen	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t        dlen     : 5;                  \/**< Advertising or scan response data length. *\/$/;"	m	struct:__anon744
ediv	components\softdevice\s130\headers\ble_gap.h	/^  uint16_t  ediv;                       \/**< Encrypted Diversifier. *\/$/;"	m	struct:__anon726
enc	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t enc     : 1;                        \/**< Long Term Key and Master Identification. *\/$/;"	m	struct:__anon723
enc_info	components\softdevice\s130\headers\ble_gap.h	/^  ble_gap_enc_info_t    enc_info;             \/**< Encryption Information. *\/$/;"	m	struct:__anon736
enc_info	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t             enc_info  : 1;                 \/**< If 1, Encryption Information required. *\/$/;"	m	struct:__anon732
encr_key_size	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t                 encr_key_size;      \/**< Length of currently active encryption key, 7 to 16 octets (only applicable for bonding procedures). *\/$/;"	m	struct:__anon717
error_src	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t               error_src : 2;          \/**< On error, source that caused the failure, see @ref BLE_GAP_SEC_STATUS_SOURCES. *\/$/;"	m	struct:__anon740
fp	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t               fp;                   \/**< Filter Policy, see @ref BLE_GAP_ADV_FILTER_POLICIES. *\/$/;"	m	struct:__anon721
id	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t id      : 1;                        \/**< Identity Resolving Key and Identity Address Information. *\/$/;"	m	struct:__anon723
id_addr_info	components\softdevice\s130\headers\ble_gap.h	/^  ble_gap_addr_t        id_addr_info;         \/**< Identity Address Information. *\/$/;"	m	struct:__anon737
id_info	components\softdevice\s130\headers\ble_gap.h	/^  ble_gap_irk_t         id_info;              \/**< Identity Information. *\/$/;"	m	struct:__anon737
id_info	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t             id_info   : 1;                 \/**< If 1, Identity Information required. *\/$/;"	m	struct:__anon732
interval	components\softdevice\s130\headers\ble_gap.h	/^  uint16_t                interval;             \/**< Scan interval between 0x0004 and 0x4000 in 0.625ms units (2.5ms to 10.24s). *\/$/;"	m	struct:__anon722
interval	components\softdevice\s130\headers\ble_gap.h	/^  uint16_t              interval;             \/**< Advertising interval between 0x0020 and 0x4000 in 0.625 ms units (20ms to 10.24s), see @ref BLE_GAP_ADV_INTERVALS. This parameter must be set to 0 if type equals @ref BLE_GAP_ADV_TYPE_ADV_DIRECT_IND. *\/$/;"	m	struct:__anon721
interval_s	components\softdevice\s130\headers\ble_gap.h	/^  uint16_t        interval_s;   \/**< When input: Custom private address cycle interval in seconds. When output: The current private address cycle interval. *\/$/;"	m	struct:__anon753
io_caps	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t               io_caps : 3;               \/**< IO capabilities, see @ref BLE_GAP_IO_CAPS. *\/$/;"	m	struct:__anon724
irk	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t irk[BLE_GAP_SEC_KEY_LEN];   \/**< Array containing IRK. *\/$/;"	m	struct:__anon718
irk_count	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t             irk_count;       \/**< Count of IRKs in array, up to @ref BLE_GAP_WHITELIST_IRK_MAX_COUNT. *\/$/;"	m	struct:__anon719
irk_match	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t               irk_match :1;           \/**< If 1, peer device's address resolved using an IRK. *\/$/;"	m	struct:__anon728
irk_match_idx	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t               irk_match_idx  :7;      \/**< Index in IRK list where the address was matched. *\/$/;"	m	struct:__anon728
kdist_central	components\softdevice\s130\headers\ble_gap.h	/^  ble_gap_sec_kdist_t   kdist_central;             \/**< Key distribution bitmap: keys that the central device will distribute. *\/$/;"	m	struct:__anon724
kdist_central	components\softdevice\s130\headers\ble_gap.h	/^  ble_gap_sec_kdist_t   kdist_central;          \/**< Bitmap stating which keys were exchanged (distributed) by the central. *\/$/;"	m	struct:__anon740
kdist_periph	components\softdevice\s130\headers\ble_gap.h	/^  ble_gap_sec_kdist_t   kdist_periph;              \/**< Key distribution bitmap: keys that the peripheral device will distribute. *\/$/;"	m	struct:__anon724
kdist_periph	components\softdevice\s130\headers\ble_gap.h	/^  ble_gap_sec_kdist_t   kdist_periph;           \/**< Bitmap stating which keys were exchanged (distributed) by the peripheral. *\/$/;"	m	struct:__anon740
key_type	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t key_type;                             \/**< See @ref BLE_GAP_AUTH_KEY_TYPES. *\/$/;"	m	struct:__anon734
keys_central	components\softdevice\s130\headers\ble_gap.h	/^  ble_gap_sec_keys_t keys_central;    \/**< Keys distributed by the device in the Central role. *\/$/;"	m	struct:__anon739
keys_periph	components\softdevice\s130\headers\ble_gap.h	/^  ble_gap_sec_keys_t keys_periph;     \/**< Keys distributed by the device in the Peripheral role. *\/$/;"	m	struct:__anon739
local_conn_latency	components\softdevice\s130\headers\ble_gap.h	/^  ble_gap_opt_local_conn_latency_t      local_conn_latency;        \/**< Parameters for the Local connection latency option *\/$/;"	m	union:__anon755
ltk	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t   ltk[BLE_GAP_SEC_KEY_LEN];   \/**< Long Term Key. *\/$/;"	m	struct:__anon725
ltk_len	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t   ltk_len : 7;                \/**< LTK length in octets. *\/$/;"	m	struct:__anon725
lv	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t lv : 4;                     \/**< Level (1, 2 or 3), 0 for no permissions at all. *\/$/;"	m	struct:__anon716
lv1	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t lv1 : 1;                              \/**< If 1: Level 1 is supported. *\/$/;"	m	struct:__anon735
lv2	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t lv2 : 1;                              \/**< If 1: Level 2 is supported. *\/$/;"	m	struct:__anon735
lv3	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t lv3 : 1;                              \/**< If 1: Level 3 is supported. *\/$/;"	m	struct:__anon735
master_id	components\softdevice\s130\headers\ble_gap.h	/^  ble_gap_master_id_t   master_id;            \/**< Master Identification. *\/$/;"	m	struct:__anon736
master_id	components\softdevice\s130\headers\ble_gap.h	/^  ble_gap_master_id_t master_id;                     \/**< Master Identification for LTK lookup. *\/$/;"	m	struct:__anon732
max_conn_interval	components\softdevice\s130\headers\ble_gap.h	/^  uint16_t max_conn_interval;         \/**< Maximum Connection Interval in 1.25 ms units, see @ref BLE_GAP_CP_LIMITS.*\/$/;"	m	struct:__anon715
max_key_size	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t               max_key_size;              \/**< Maximum encryption key size in octets between min_key_size and 16. *\/$/;"	m	struct:__anon724
min_conn_interval	components\softdevice\s130\headers\ble_gap.h	/^  uint16_t min_conn_interval;         \/**< Minimum Connection Interval in 1.25 ms units, see @ref BLE_GAP_CP_LIMITS.*\/$/;"	m	struct:__anon715
min_key_size	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t               min_key_size;              \/**< Minimum encryption key size in octets between 7 and 16. If 0 then not applicable in this instance. *\/$/;"	m	struct:__anon724
mitm	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t               mitm    : 1;               \/**< Man In The Middle protection required. *\/$/;"	m	struct:__anon724
mitm	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t    mitm    : 1;                       \/**< Man In The Middle protection required. *\/$/;"	m	struct:__anon746
mode	components\softdevice\s130\headers\ble_gap.h	/^   uint8_t mode : 1;                           \/**< The mode for scan request events, @ref BLE_GAP_SCAN_REQ_REPORT_MODE.*\/$/;"	m	struct:__anon754
oob	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t               oob     : 1;               \/**< Out Of Band data available. *\/$/;"	m	struct:__anon724
p_actual_latency	components\softdevice\s130\headers\ble_gap.h	/^  uint16_t * p_actual_latency;                  \/**< Pointer to storage for the actual local connection latency (can be set to NULL to skip return value). *\/$/;"	m	struct:__anon751
p_enc_key	components\softdevice\s130\headers\ble_gap.h	/^  ble_gap_enc_key_t     *p_enc_key;           \/**< Encryption Key, or NULL. *\/$/;"	m	struct:__anon738
p_id_key	components\softdevice\s130\headers\ble_gap.h	/^  ble_gap_id_key_t      *p_id_key;            \/**< Identity Key, or NULL. *\/$/;"	m	struct:__anon738
p_irk	components\softdevice\s130\headers\ble_gap.h	/^  ble_gap_irk_t * p_irk;        \/**< When input: Pointer to custom IRK, or NULL to use\/reset to the device's default IRK. When output: Pointer to where the current IRK is to be stored, or NULL to not read out the IRK. *\/$/;"	m	struct:__anon753
p_passkey	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t * p_passkey;                          \/**< Pointer to 6-digit ASCII string (digit 0..9 only, no NULL termination) passkey to be used during pairing. If this is NULL, the SoftDevice will generate a random passkey if required.*\/$/;"	m	struct:__anon752
p_peer_addr	components\softdevice\s130\headers\ble_gap.h	/^  ble_gap_addr_t       *p_peer_addr;          \/**< For BLE_GAP_CONN_MODE_DIRECTED mode only, known peer address. *\/$/;"	m	struct:__anon721
p_sign_key	components\softdevice\s130\headers\ble_gap.h	/^  ble_gap_sign_info_t   *p_sign_key;          \/**< Signing Key, or NULL. *\/$/;"	m	struct:__anon738
p_whitelist	components\softdevice\s130\headers\ble_gap.h	/^  ble_gap_whitelist_t  *p_whitelist;          \/**< Pointer to whitelist, NULL if no whitelist or the current active whitelist is to be used. *\/$/;"	m	struct:__anon721
p_whitelist	components\softdevice\s130\headers\ble_gap.h	/^  ble_gap_whitelist_t *   p_whitelist;          \/**< Pointer to whitelist, NULL if no whitelist or the current active whitelist is to be used. *\/$/;"	m	struct:__anon722
params	components\softdevice\s130\headers\ble_gap.h	/^  } params;                                                                 \/**< Event Parameters. *\/$/;"	m	struct:__anon748	typeref:union:__anon748::__anon749
passkey	components\softdevice\s130\headers\ble_gap.h	/^  ble_gap_opt_passkey_t                 passkey;                   \/**< Parameters for the Passkey option.*\/$/;"	m	union:__anon755
passkey	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t passkey[BLE_GAP_PASSKEY_LEN];         \/**< 6-digit passkey in ASCII ('0'-'9' digits only). *\/$/;"	m	struct:__anon733
passkey_display	components\softdevice\s130\headers\ble_gap.h	/^    ble_gap_evt_passkey_display_t             passkey_display;              \/**< Passkey Display Event Parameters. *\/$/;"	m	union:__anon748::__anon749
peer_addr	components\softdevice\s130\headers\ble_gap.h	/^  ble_gap_addr_t          peer_addr;         \/**< Bluetooth address of the peer device. *\/$/;"	m	struct:__anon745
peer_addr	components\softdevice\s130\headers\ble_gap.h	/^  ble_gap_addr_t        peer_addr;              \/**< Bluetooth address of the peer device. *\/$/;"	m	struct:__anon728
peer_addr	components\softdevice\s130\headers\ble_gap.h	/^  ble_gap_addr_t      peer_addr;                     \/**< Bluetooth address of the peer device. *\/$/;"	m	struct:__anon732
peer_addr	components\softdevice\s130\headers\ble_gap.h	/^  ble_gap_addr_t peer_addr;                     \/**< Bluetooth address of the peer device. *\/$/;"	m	struct:__anon744
peer_params	components\softdevice\s130\headers\ble_gap.h	/^  ble_gap_sec_params_t peer_params;             \/**< Initiator Security Parameters. *\/$/;"	m	struct:__anon731
pp_addrs	components\softdevice\s130\headers\ble_gap.h	/^  ble_gap_addr_t    **pp_addrs;        \/**< Pointer to array of device address pointers, pointing to addresses to be used in whitelist. NULL if none are given. *\/$/;"	m	struct:__anon719
pp_irks	components\softdevice\s130\headers\ble_gap.h	/^  ble_gap_irk_t     **pp_irks;         \/**< Pointer to array of Identity Resolving Key (IRK) pointers, each pointing to an IRK in the whitelist. NULL if none are given. *\/$/;"	m	struct:__anon719
privacy	components\softdevice\s130\headers\ble_gap.h	/^  ble_gap_opt_privacy_t                 privacy;                   \/**< Parameters for the Custom privacy option. *\/$/;"	m	union:__anon755
rand	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t   rand[BLE_GAP_SEC_RAND_LEN]; \/**< Random Number. *\/$/;"	m	struct:__anon726
reason	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t reason;                               \/**< HCI error code, see @ref BLE_HCI_STATUS_CODES. *\/$/;"	m	struct:__anon729
requested_latency	components\softdevice\s130\headers\ble_gap.h	/^  uint16_t   requested_latency;                 \/**< Requested local connection latency. *\/$/;"	m	struct:__anon751
role	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t               role;                   \/**< BLE role for this connection, see @ref BLE_GAP_ROLES *\/$/;"	m	struct:__anon728
rssi	components\softdevice\s130\headers\ble_gap.h	/^  int8_t                  rssi;              \/**< Received Signal Strength Indication in dBm. *\/$/;"	m	struct:__anon745
rssi	components\softdevice\s130\headers\ble_gap.h	/^  int8_t         rssi;                          \/**< Received Signal Strength Indication in dBm. *\/$/;"	m	struct:__anon744
rssi	components\softdevice\s130\headers\ble_gap.h	/^  int8_t  rssi;                               \/**< Received Signal Strength Indication in dBm. *\/$/;"	m	struct:__anon743
rssi_changed	components\softdevice\s130\headers\ble_gap.h	/^    ble_gap_evt_rssi_changed_t                rssi_changed;                 \/**< RSSI Event parameters. *\/$/;"	m	union:__anon748::__anon749
scan_req_report	components\softdevice\s130\headers\ble_gap.h	/^    ble_gap_evt_scan_req_report_t             scan_req_report;              \/**< Scan Request Report parameters. *\/$/;"	m	union:__anon748::__anon749
scan_req_report	components\softdevice\s130\headers\ble_gap.h	/^  ble_gap_opt_scan_req_report_t         scan_req_report;           \/**< Parameters for the scan request report option.*\/$/;"	m	union:__anon755
scan_rsp	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t        scan_rsp : 1;                  \/**< If 1, the report corresponds to a scan response and the type field may be ignored. *\/$/;"	m	struct:__anon744
sec_info_request	components\softdevice\s130\headers\ble_gap.h	/^    ble_gap_evt_sec_info_request_t            sec_info_request;             \/**< Security Information Request Event Parameters. *\/$/;"	m	union:__anon748::__anon749
sec_mode	components\softdevice\s130\headers\ble_gap.h	/^  ble_gap_conn_sec_mode_t sec_mode;           \/**< Currently active security mode for this connection.*\/$/;"	m	struct:__anon717
sec_params_request	components\softdevice\s130\headers\ble_gap.h	/^    ble_gap_evt_sec_params_request_t          sec_params_request;           \/**< Security Parameters Request Event Parameters. *\/$/;"	m	union:__anon748::__anon749
sec_request	components\softdevice\s130\headers\ble_gap.h	/^    ble_gap_evt_sec_request_t                 sec_request;                  \/**< Security Request Event Parameters. *\/$/;"	m	union:__anon748::__anon749
selective	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t                 selective : 1;        \/**< If 1, ignore unknown devices (non whitelisted). *\/$/;"	m	struct:__anon722
sign	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t sign    : 1;                        \/**< Connection Signature Resolving Key. *\/$/;"	m	struct:__anon723
sign_info	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t             sign_info : 1;                 \/**< If 1, Signing Information required. *\/$/;"	m	struct:__anon732
slave_latency	components\softdevice\s130\headers\ble_gap.h	/^  uint16_t slave_latency;             \/**< Slave Latency in number of connection events, see @ref BLE_GAP_CP_LIMITS.*\/$/;"	m	struct:__anon715
sm	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t sm : 4;                     \/**< Security Mode (1 or 2), 0 for no permissions at all. *\/$/;"	m	struct:__anon716
sm1_levels	components\softdevice\s130\headers\ble_gap.h	/^  ble_gap_sec_levels_t  sm1_levels;             \/**< Levels supported in Security Mode 1. *\/$/;"	m	struct:__anon740
sm2_levels	components\softdevice\s130\headers\ble_gap.h	/^  ble_gap_sec_levels_t  sm2_levels;             \/**< Levels supported in Security Mode 2. *\/$/;"	m	struct:__anon740
src	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t src;                                  \/**< Source of timeout event, see @ref BLE_GAP_TIMEOUT_SOURCES. *\/$/;"	m	struct:__anon742
timeout	components\softdevice\s130\headers\ble_gap.h	/^    ble_gap_evt_timeout_t                     timeout;                      \/**< Timeout Event Parameters. *\/$/;"	m	union:__anon748::__anon749
timeout	components\softdevice\s130\headers\ble_gap.h	/^  uint16_t                timeout;              \/**< Scan timeout between 0x0001 and 0xFFFF in seconds, 0x0000 disables timeout. *\/$/;"	m	struct:__anon722
timeout	components\softdevice\s130\headers\ble_gap.h	/^  uint16_t              timeout;              \/**< Advertising timeout between 0x0001 and 0x3FFF in seconds, 0x0000 disables timeout. See also @ref BLE_GAP_ADV_TIMEOUT_VALUES. This parameter must be set to 0 if type equals @ref BLE_GAP_ADV_TYPE_ADV_DIRECT_IND. *\/$/;"	m	struct:__anon721
type	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t               type;                 \/**< See @ref BLE_GAP_ADV_TYPES. *\/$/;"	m	struct:__anon721
type	components\softdevice\s130\headers\ble_gap.h	/^  uint8_t        type     : 2;                  \/**< See @ref BLE_GAP_ADV_TYPES. Only valid if the scan_rsp field is 0. *\/$/;"	m	struct:__anon744
window	components\softdevice\s130\headers\ble_gap.h	/^  uint16_t                window;               \/**< Scan window between 0x0004 and 0x4000 in 0.625ms units (2.5ms to 10.24s). *\/$/;"	m	struct:__anon722
BLE_GATT_CPF_FORMAT_2BIT	components\softdevice\s130\headers\ble_gatt.h	132;"	d
BLE_GATT_CPF_FORMAT_BOOLEAN	components\softdevice\s130\headers\ble_gatt.h	131;"	d
BLE_GATT_CPF_FORMAT_DUINT16	components\softdevice\s130\headers\ble_gatt.h	154;"	d
BLE_GATT_CPF_FORMAT_FLOAT	components\softdevice\s130\headers\ble_gatt.h	153;"	d
BLE_GATT_CPF_FORMAT_FLOAT32	components\softdevice\s130\headers\ble_gatt.h	150;"	d
BLE_GATT_CPF_FORMAT_FLOAT64	components\softdevice\s130\headers\ble_gatt.h	151;"	d
BLE_GATT_CPF_FORMAT_NIBBLE	components\softdevice\s130\headers\ble_gatt.h	133;"	d
BLE_GATT_CPF_FORMAT_RFU	components\softdevice\s130\headers\ble_gatt.h	130;"	d
BLE_GATT_CPF_FORMAT_SFLOAT	components\softdevice\s130\headers\ble_gatt.h	152;"	d
BLE_GATT_CPF_FORMAT_SINT12	components\softdevice\s130\headers\ble_gatt.h	143;"	d
BLE_GATT_CPF_FORMAT_SINT128	components\softdevice\s130\headers\ble_gatt.h	149;"	d
BLE_GATT_CPF_FORMAT_SINT16	components\softdevice\s130\headers\ble_gatt.h	144;"	d
BLE_GATT_CPF_FORMAT_SINT24	components\softdevice\s130\headers\ble_gatt.h	145;"	d
BLE_GATT_CPF_FORMAT_SINT32	components\softdevice\s130\headers\ble_gatt.h	146;"	d
BLE_GATT_CPF_FORMAT_SINT48	components\softdevice\s130\headers\ble_gatt.h	147;"	d
BLE_GATT_CPF_FORMAT_SINT64	components\softdevice\s130\headers\ble_gatt.h	148;"	d
BLE_GATT_CPF_FORMAT_SINT8	components\softdevice\s130\headers\ble_gatt.h	142;"	d
BLE_GATT_CPF_FORMAT_STRUCT	components\softdevice\s130\headers\ble_gatt.h	157;"	d
BLE_GATT_CPF_FORMAT_UINT12	components\softdevice\s130\headers\ble_gatt.h	135;"	d
BLE_GATT_CPF_FORMAT_UINT128	components\softdevice\s130\headers\ble_gatt.h	141;"	d
BLE_GATT_CPF_FORMAT_UINT16	components\softdevice\s130\headers\ble_gatt.h	136;"	d
BLE_GATT_CPF_FORMAT_UINT24	components\softdevice\s130\headers\ble_gatt.h	137;"	d
BLE_GATT_CPF_FORMAT_UINT32	components\softdevice\s130\headers\ble_gatt.h	138;"	d
BLE_GATT_CPF_FORMAT_UINT48	components\softdevice\s130\headers\ble_gatt.h	139;"	d
BLE_GATT_CPF_FORMAT_UINT64	components\softdevice\s130\headers\ble_gatt.h	140;"	d
BLE_GATT_CPF_FORMAT_UINT8	components\softdevice\s130\headers\ble_gatt.h	134;"	d
BLE_GATT_CPF_FORMAT_UTF16S	components\softdevice\s130\headers\ble_gatt.h	156;"	d
BLE_GATT_CPF_FORMAT_UTF8S	components\softdevice\s130\headers\ble_gatt.h	155;"	d
BLE_GATT_CPF_NAMESPACE_BTSIG	components\softdevice\s130\headers\ble_gatt.h	163;"	d
BLE_GATT_CPF_NAMESPACE_DESCRIPTION_UNKNOWN	components\softdevice\s130\headers\ble_gatt.h	164;"	d
BLE_GATT_EXEC_WRITE_FLAG_PREPARED_CANCEL	components\softdevice\s130\headers\ble_gatt.h	80;"	d
BLE_GATT_EXEC_WRITE_FLAG_PREPARED_WRITE	components\softdevice\s130\headers\ble_gatt.h	81;"	d
BLE_GATT_HANDLE_INVALID	components\softdevice\s130\headers\ble_gatt.h	61;"	d
BLE_GATT_HVX_INDICATION	components\softdevice\s130\headers\ble_gatt.h	88;"	d
BLE_GATT_HVX_INVALID	components\softdevice\s130\headers\ble_gatt.h	86;"	d
BLE_GATT_HVX_NOTIFICATION	components\softdevice\s130\headers\ble_gatt.h	87;"	d
BLE_GATT_H__	components\softdevice\s130\headers\ble_gatt.h	44;"	d
BLE_GATT_OP_EXEC_WRITE_REQ	components\softdevice\s130\headers\ble_gatt.h	75;"	d
BLE_GATT_OP_INVALID	components\softdevice\s130\headers\ble_gatt.h	70;"	d
BLE_GATT_OP_PREP_WRITE_REQ	components\softdevice\s130\headers\ble_gatt.h	74;"	d
BLE_GATT_OP_SIGN_WRITE_CMD	components\softdevice\s130\headers\ble_gatt.h	73;"	d
BLE_GATT_OP_WRITE_CMD	components\softdevice\s130\headers\ble_gatt.h	72;"	d
BLE_GATT_OP_WRITE_REQ	components\softdevice\s130\headers\ble_gatt.h	71;"	d
BLE_GATT_STATUS_ATTERR_APP_BEGIN	components\softdevice\s130\headers\ble_gatt.h	115;"	d
BLE_GATT_STATUS_ATTERR_APP_END	components\softdevice\s130\headers\ble_gatt.h	116;"	d
BLE_GATT_STATUS_ATTERR_ATTRIBUTE_NOT_FOUND	components\softdevice\s130\headers\ble_gatt.h	105;"	d
BLE_GATT_STATUS_ATTERR_ATTRIBUTE_NOT_LONG	components\softdevice\s130\headers\ble_gatt.h	106;"	d
BLE_GATT_STATUS_ATTERR_CPS_CCCD_CONFIG_ERROR	components\softdevice\s130\headers\ble_gatt.h	121;"	d
BLE_GATT_STATUS_ATTERR_CPS_OUT_OF_RANGE	components\softdevice\s130\headers\ble_gatt.h	123;"	d
BLE_GATT_STATUS_ATTERR_CPS_PROC_ALR_IN_PROG	components\softdevice\s130\headers\ble_gatt.h	122;"	d
BLE_GATT_STATUS_ATTERR_INSUF_AUTHENTICATION	components\softdevice\s130\headers\ble_gatt.h	100;"	d
BLE_GATT_STATUS_ATTERR_INSUF_AUTHORIZATION	components\softdevice\s130\headers\ble_gatt.h	103;"	d
BLE_GATT_STATUS_ATTERR_INSUF_ENCRYPTION	components\softdevice\s130\headers\ble_gatt.h	110;"	d
BLE_GATT_STATUS_ATTERR_INSUF_ENC_KEY_SIZE	components\softdevice\s130\headers\ble_gatt.h	107;"	d
BLE_GATT_STATUS_ATTERR_INSUF_RESOURCES	components\softdevice\s130\headers\ble_gatt.h	112;"	d
BLE_GATT_STATUS_ATTERR_INVALID	components\softdevice\s130\headers\ble_gatt.h	95;"	d
BLE_GATT_STATUS_ATTERR_INVALID_ATT_VAL_LENGTH	components\softdevice\s130\headers\ble_gatt.h	108;"	d
BLE_GATT_STATUS_ATTERR_INVALID_HANDLE	components\softdevice\s130\headers\ble_gatt.h	96;"	d
BLE_GATT_STATUS_ATTERR_INVALID_OFFSET	components\softdevice\s130\headers\ble_gatt.h	102;"	d
BLE_GATT_STATUS_ATTERR_INVALID_PDU	components\softdevice\s130\headers\ble_gatt.h	99;"	d
BLE_GATT_STATUS_ATTERR_PREPARE_QUEUE_FULL	components\softdevice\s130\headers\ble_gatt.h	104;"	d
BLE_GATT_STATUS_ATTERR_READ_NOT_PERMITTED	components\softdevice\s130\headers\ble_gatt.h	97;"	d
BLE_GATT_STATUS_ATTERR_REQUEST_NOT_SUPPORTED	components\softdevice\s130\headers\ble_gatt.h	101;"	d
BLE_GATT_STATUS_ATTERR_RFU_RANGE1_BEGIN	components\softdevice\s130\headers\ble_gatt.h	113;"	d
BLE_GATT_STATUS_ATTERR_RFU_RANGE1_END	components\softdevice\s130\headers\ble_gatt.h	114;"	d
BLE_GATT_STATUS_ATTERR_RFU_RANGE2_BEGIN	components\softdevice\s130\headers\ble_gatt.h	117;"	d
BLE_GATT_STATUS_ATTERR_RFU_RANGE2_END	components\softdevice\s130\headers\ble_gatt.h	118;"	d
BLE_GATT_STATUS_ATTERR_RFU_RANGE3_BEGIN	components\softdevice\s130\headers\ble_gatt.h	119;"	d
BLE_GATT_STATUS_ATTERR_RFU_RANGE3_END	components\softdevice\s130\headers\ble_gatt.h	120;"	d
BLE_GATT_STATUS_ATTERR_UNLIKELY_ERROR	components\softdevice\s130\headers\ble_gatt.h	109;"	d
BLE_GATT_STATUS_ATTERR_UNSUPPORTED_GROUP_TYPE	components\softdevice\s130\headers\ble_gatt.h	111;"	d
BLE_GATT_STATUS_ATTERR_WRITE_NOT_PERMITTED	components\softdevice\s130\headers\ble_gatt.h	98;"	d
BLE_GATT_STATUS_SUCCESS	components\softdevice\s130\headers\ble_gatt.h	93;"	d
BLE_GATT_STATUS_UNKNOWN	components\softdevice\s130\headers\ble_gatt.h	94;"	d
BLE_GATT_TIMEOUT_SRC_PROTOCOL	components\softdevice\s130\headers\ble_gatt.h	65;"	d
GATT_MTU_SIZE_DEFAULT	components\softdevice\s130\headers\ble_gatt.h	54;"	d
GATT_RX_MTU	components\softdevice\s130\headers\ble_gatt.h	57;"	d
auth_signed_wr	components\softdevice\s130\headers\ble_gatt.h	/^  uint8_t auth_signed_wr  :1; \/**< Writing value with Signed Write Command permitted. *\/$/;"	m	struct:__anon756
ble_gatt_char_ext_props_t	components\softdevice\s130\headers\ble_gatt.h	/^} ble_gatt_char_ext_props_t;$/;"	t	typeref:struct:__anon757
ble_gatt_char_props_t	components\softdevice\s130\headers\ble_gatt.h	/^} ble_gatt_char_props_t;$/;"	t	typeref:struct:__anon756
broadcast	components\softdevice\s130\headers\ble_gatt.h	/^  uint8_t broadcast       :1; \/**< Broadcasting of value permitted. *\/$/;"	m	struct:__anon756
indicate	components\softdevice\s130\headers\ble_gatt.h	/^  uint8_t indicate        :1; \/**< Indications of value permitted. *\/$/;"	m	struct:__anon756
notify	components\softdevice\s130\headers\ble_gatt.h	/^  uint8_t notify          :1; \/**< Notications of value permitted. *\/$/;"	m	struct:__anon756
read	components\softdevice\s130\headers\ble_gatt.h	/^  uint8_t read            :1; \/**< Reading value permitted. *\/$/;"	m	struct:__anon756
reliable_wr	components\softdevice\s130\headers\ble_gatt.h	/^  uint8_t reliable_wr     :1; \/**< Writing value with Queued Write Request permitted. *\/$/;"	m	struct:__anon757
wr_aux	components\softdevice\s130\headers\ble_gatt.h	/^  uint8_t wr_aux          :1; \/**< Writing the Characteristic User Description permitted. *\/$/;"	m	struct:__anon757
write	components\softdevice\s130\headers\ble_gatt.h	/^  uint8_t write           :1; \/**< Writing value with Write Request permitted. *\/$/;"	m	struct:__anon756
write_wo_resp	components\softdevice\s130\headers\ble_gatt.h	/^  uint8_t write_wo_resp   :1; \/**< Writing value with Write Command permitted. *\/$/;"	m	struct:__anon756
BLE_ERROR_GATTC_PROC_NOT_PERMITTED	components\softdevice\s130\headers\ble_gattc.h	92;"	d
BLE_GATTC_EVTS	components\softdevice\s130\headers\ble_gattc.h	/^enum BLE_GATTC_EVTS$/;"	g
BLE_GATTC_EVT_CHAR_DISC_RSP	components\softdevice\s130\headers\ble_gattc.h	/^  BLE_GATTC_EVT_CHAR_DISC_RSP,                            \/**< Characteristic Discovery Response event. *\/$/;"	e	enum:BLE_GATTC_EVTS
BLE_GATTC_EVT_CHAR_VALS_READ_RSP	components\softdevice\s130\headers\ble_gattc.h	/^  BLE_GATTC_EVT_CHAR_VALS_READ_RSP,                       \/**< Read multiple Response event. *\/$/;"	e	enum:BLE_GATTC_EVTS
BLE_GATTC_EVT_CHAR_VAL_BY_UUID_READ_RSP	components\softdevice\s130\headers\ble_gattc.h	/^  BLE_GATTC_EVT_CHAR_VAL_BY_UUID_READ_RSP,                \/**< Read By UUID Response event. *\/$/;"	e	enum:BLE_GATTC_EVTS
BLE_GATTC_EVT_DESC_DISC_RSP	components\softdevice\s130\headers\ble_gattc.h	/^  BLE_GATTC_EVT_DESC_DISC_RSP,                            \/**< Descriptor Discovery Response event. *\/$/;"	e	enum:BLE_GATTC_EVTS
BLE_GATTC_EVT_HVX	components\softdevice\s130\headers\ble_gattc.h	/^  BLE_GATTC_EVT_HVX,                                      \/**< Handle Value Notification or Indication event. *\/$/;"	e	enum:BLE_GATTC_EVTS
BLE_GATTC_EVT_PRIM_SRVC_DISC_RSP	components\softdevice\s130\headers\ble_gattc.h	/^  BLE_GATTC_EVT_PRIM_SRVC_DISC_RSP = BLE_GATTC_EVT_BASE,  \/**< Primary Service Discovery Response event.  *\/$/;"	e	enum:BLE_GATTC_EVTS
BLE_GATTC_EVT_READ_RSP	components\softdevice\s130\headers\ble_gattc.h	/^  BLE_GATTC_EVT_READ_RSP,                                 \/**< Read Response event. *\/$/;"	e	enum:BLE_GATTC_EVTS
BLE_GATTC_EVT_REL_DISC_RSP	components\softdevice\s130\headers\ble_gattc.h	/^  BLE_GATTC_EVT_REL_DISC_RSP,                             \/**< Relationship Discovery Response event. *\/$/;"	e	enum:BLE_GATTC_EVTS
BLE_GATTC_EVT_TIMEOUT	components\softdevice\s130\headers\ble_gattc.h	/^  BLE_GATTC_EVT_TIMEOUT                                   \/**< Timeout event. *\/$/;"	e	enum:BLE_GATTC_EVTS
BLE_GATTC_EVT_WRITE_RSP	components\softdevice\s130\headers\ble_gattc.h	/^  BLE_GATTC_EVT_WRITE_RSP,                                \/**< Write Response event. *\/$/;"	e	enum:BLE_GATTC_EVTS
BLE_GATTC_HANDLE_END	components\softdevice\s130\headers\ble_gattc.h	96;"	d
BLE_GATTC_H__	components\softdevice\s130\headers\ble_gattc.h	44;"	d
BLE_GATTC_SVCS	components\softdevice\s130\headers\ble_gattc.h	/^enum BLE_GATTC_SVCS$/;"	g
SD_BLE_GATTC_CHARACTERISTICS_DISCOVER	components\softdevice\s130\headers\ble_gattc.h	/^  SD_BLE_GATTC_CHARACTERISTICS_DISCOVER,                       \/**< Characteristic Discovery. *\/$/;"	e	enum:BLE_GATTC_SVCS
SD_BLE_GATTC_CHAR_VALUES_READ	components\softdevice\s130\headers\ble_gattc.h	/^  SD_BLE_GATTC_CHAR_VALUES_READ,                               \/**< Read multiple Characteristic Values. *\/$/;"	e	enum:BLE_GATTC_SVCS
SD_BLE_GATTC_CHAR_VALUE_BY_UUID_READ	components\softdevice\s130\headers\ble_gattc.h	/^  SD_BLE_GATTC_CHAR_VALUE_BY_UUID_READ,                        \/**< Read Characteristic Value by UUID. *\/$/;"	e	enum:BLE_GATTC_SVCS
SD_BLE_GATTC_DESCRIPTORS_DISCOVER	components\softdevice\s130\headers\ble_gattc.h	/^  SD_BLE_GATTC_DESCRIPTORS_DISCOVER,                           \/**< Characteristic Descriptor Discovery. *\/$/;"	e	enum:BLE_GATTC_SVCS
SD_BLE_GATTC_HV_CONFIRM	components\softdevice\s130\headers\ble_gattc.h	/^  SD_BLE_GATTC_HV_CONFIRM                                      \/**< Handle Value Confirmation. *\/$/;"	e	enum:BLE_GATTC_SVCS
SD_BLE_GATTC_PRIMARY_SERVICES_DISCOVER	components\softdevice\s130\headers\ble_gattc.h	/^  SD_BLE_GATTC_PRIMARY_SERVICES_DISCOVER = BLE_GATTC_SVC_BASE, \/**< Primary Service Discovery. *\/$/;"	e	enum:BLE_GATTC_SVCS
SD_BLE_GATTC_READ	components\softdevice\s130\headers\ble_gattc.h	/^  SD_BLE_GATTC_READ,                                           \/**< Generic read. *\/$/;"	e	enum:BLE_GATTC_SVCS
SD_BLE_GATTC_RELATIONSHIPS_DISCOVER	components\softdevice\s130\headers\ble_gattc.h	/^  SD_BLE_GATTC_RELATIONSHIPS_DISCOVER,                         \/**< Relationship Discovery. *\/$/;"	e	enum:BLE_GATTC_SVCS
SD_BLE_GATTC_WRITE	components\softdevice\s130\headers\ble_gattc.h	/^  SD_BLE_GATTC_WRITE,                                          \/**< Generic write. *\/$/;"	e	enum:BLE_GATTC_SVCS
ble_gattc_char_t	components\softdevice\s130\headers\ble_gattc.h	/^} ble_gattc_char_t;$/;"	t	typeref:struct:__anon761
ble_gattc_desc_t	components\softdevice\s130\headers\ble_gattc.h	/^} ble_gattc_desc_t;$/;"	t	typeref:struct:__anon762
ble_gattc_evt_char_disc_rsp_t	components\softdevice\s130\headers\ble_gattc.h	/^} ble_gattc_evt_char_disc_rsp_t;$/;"	t	typeref:struct:__anon766
ble_gattc_evt_char_val_by_uuid_read_rsp_t	components\softdevice\s130\headers\ble_gattc.h	/^} ble_gattc_evt_char_val_by_uuid_read_rsp_t;$/;"	t	typeref:struct:__anon769
ble_gattc_evt_char_vals_read_rsp_t	components\softdevice\s130\headers\ble_gattc.h	/^} ble_gattc_evt_char_vals_read_rsp_t;$/;"	t	typeref:struct:__anon771
ble_gattc_evt_desc_disc_rsp_t	components\softdevice\s130\headers\ble_gattc.h	/^} ble_gattc_evt_desc_disc_rsp_t;$/;"	t	typeref:struct:__anon767
ble_gattc_evt_hvx_t	components\softdevice\s130\headers\ble_gattc.h	/^} ble_gattc_evt_hvx_t;$/;"	t	typeref:struct:__anon773
ble_gattc_evt_prim_srvc_disc_rsp_t	components\softdevice\s130\headers\ble_gattc.h	/^} ble_gattc_evt_prim_srvc_disc_rsp_t;$/;"	t	typeref:struct:__anon764
ble_gattc_evt_read_rsp_t	components\softdevice\s130\headers\ble_gattc.h	/^} ble_gattc_evt_read_rsp_t;$/;"	t	typeref:struct:__anon770
ble_gattc_evt_rel_disc_rsp_t	components\softdevice\s130\headers\ble_gattc.h	/^} ble_gattc_evt_rel_disc_rsp_t;$/;"	t	typeref:struct:__anon765
ble_gattc_evt_t	components\softdevice\s130\headers\ble_gattc.h	/^} ble_gattc_evt_t;$/;"	t	typeref:struct:__anon775
ble_gattc_evt_timeout_t	components\softdevice\s130\headers\ble_gattc.h	/^} ble_gattc_evt_timeout_t;$/;"	t	typeref:struct:__anon774
ble_gattc_evt_write_rsp_t	components\softdevice\s130\headers\ble_gattc.h	/^} ble_gattc_evt_write_rsp_t;$/;"	t	typeref:struct:__anon772
ble_gattc_handle_range_t	components\softdevice\s130\headers\ble_gattc.h	/^} ble_gattc_handle_range_t;$/;"	t	typeref:struct:__anon758
ble_gattc_handle_value_t	components\softdevice\s130\headers\ble_gattc.h	/^} ble_gattc_handle_value_t;$/;"	t	typeref:struct:__anon768
ble_gattc_include_t	components\softdevice\s130\headers\ble_gattc.h	/^} ble_gattc_include_t;$/;"	t	typeref:struct:__anon760
ble_gattc_service_t	components\softdevice\s130\headers\ble_gattc.h	/^} ble_gattc_service_t;$/;"	t	typeref:struct:__anon759
ble_gattc_write_params_t	components\softdevice\s130\headers\ble_gattc.h	/^} ble_gattc_write_params_t;$/;"	t	typeref:struct:__anon763
char_disc_rsp	components\softdevice\s130\headers\ble_gattc.h	/^    ble_gattc_evt_char_disc_rsp_t               char_disc_rsp;              \/**< Characteristic Discovery Response Event Parameters. *\/$/;"	m	union:__anon775::__anon776
char_ext_props	components\softdevice\s130\headers\ble_gattc.h	/^  uint8_t                 char_ext_props : 1;   \/**< Extended properties present. *\/$/;"	m	struct:__anon761
char_props	components\softdevice\s130\headers\ble_gattc.h	/^  ble_gatt_char_props_t   char_props;           \/**< Characteristic Properties. *\/$/;"	m	struct:__anon761
char_val_by_uuid_read_rsp	components\softdevice\s130\headers\ble_gattc.h	/^    ble_gattc_evt_char_val_by_uuid_read_rsp_t   char_val_by_uuid_read_rsp;  \/**< Characteristic Value Read by UUID Response Event Parameters. *\/$/;"	m	union:__anon775::__anon776
char_vals_read_rsp	components\softdevice\s130\headers\ble_gattc.h	/^    ble_gattc_evt_char_vals_read_rsp_t          char_vals_read_rsp;         \/**< Characteristic Values Read Response Event Parameters. *\/$/;"	m	union:__anon775::__anon776
chars	components\softdevice\s130\headers\ble_gattc.h	/^  ble_gattc_char_t    chars[1];       \/**< Characteristic data, variable length. *\/$/;"	m	struct:__anon766
conn_handle	components\softdevice\s130\headers\ble_gattc.h	/^  uint16_t            conn_handle;                \/**< Connection Handle on which event occured. *\/$/;"	m	struct:__anon775
count	components\softdevice\s130\headers\ble_gattc.h	/^  uint16_t                  count;            \/**< Handle-Value Pair Count. *\/$/;"	m	struct:__anon769
count	components\softdevice\s130\headers\ble_gattc.h	/^  uint16_t             count;           \/**< Include count. *\/$/;"	m	struct:__anon765
count	components\softdevice\s130\headers\ble_gattc.h	/^  uint16_t             count;           \/**< Service count. *\/$/;"	m	struct:__anon764
count	components\softdevice\s130\headers\ble_gattc.h	/^  uint16_t            count;          \/**< Characteristic count. *\/$/;"	m	struct:__anon766
count	components\softdevice\s130\headers\ble_gattc.h	/^  uint16_t            count;          \/**< Descriptor count. *\/$/;"	m	struct:__anon767
data	components\softdevice\s130\headers\ble_gattc.h	/^  uint8_t             data[1];          \/**< Data, variable length. *\/$/;"	m	struct:__anon772
data	components\softdevice\s130\headers\ble_gattc.h	/^  uint8_t             data[1];        \/**< Attribute data, variable length. *\/$/;"	m	struct:__anon770
data	components\softdevice\s130\headers\ble_gattc.h	/^  uint8_t             data[1];        \/**< Attribute data, variable length. *\/$/;"	m	struct:__anon773
desc_disc_rsp	components\softdevice\s130\headers\ble_gattc.h	/^    ble_gattc_evt_desc_disc_rsp_t               desc_disc_rsp;              \/**< Descriptor Discovery Response Event Parameters. *\/$/;"	m	union:__anon775::__anon776
descs	components\softdevice\s130\headers\ble_gattc.h	/^  ble_gattc_desc_t    descs[1];       \/**< Descriptor data, variable length. *\/$/;"	m	struct:__anon767
end_handle	components\softdevice\s130\headers\ble_gattc.h	/^  uint16_t          end_handle;   \/**< End Handle. *\/$/;"	m	struct:__anon758
error_handle	components\softdevice\s130\headers\ble_gattc.h	/^  uint16_t            error_handle;               \/**< In case of error: The handle causing the error. In all other cases BLE_GATT_HANDLE_INVALID. *\/$/;"	m	struct:__anon775
flags	components\softdevice\s130\headers\ble_gattc.h	/^  uint8_t    flags;                    \/**< Flags, see @ref BLE_GATT_EXEC_WRITE_FLAGS. *\/$/;"	m	struct:__anon763
gatt_status	components\softdevice\s130\headers\ble_gattc.h	/^  uint16_t            gatt_status;                \/**< GATT status code for the operation, see @ref BLE_GATT_STATUS_CODES. *\/$/;"	m	struct:__anon775
handle	components\softdevice\s130\headers\ble_gattc.h	/^  uint16_t            handle;           \/**< Attribute Handle. *\/$/;"	m	struct:__anon772
handle	components\softdevice\s130\headers\ble_gattc.h	/^  uint16_t            handle;           \/**< Include Handle. *\/$/;"	m	struct:__anon760
handle	components\softdevice\s130\headers\ble_gattc.h	/^  uint16_t            handle;          \/**< Attribute Handle. *\/$/;"	m	struct:__anon768
handle	components\softdevice\s130\headers\ble_gattc.h	/^  uint16_t            handle;         \/**< Attribute Handle. *\/$/;"	m	struct:__anon770
handle	components\softdevice\s130\headers\ble_gattc.h	/^  uint16_t            handle;         \/**< Handle to which the HVx operation applies. *\/$/;"	m	struct:__anon773
handle	components\softdevice\s130\headers\ble_gattc.h	/^  uint16_t          handle;         \/**< Descriptor Handle. *\/$/;"	m	struct:__anon762
handle	components\softdevice\s130\headers\ble_gattc.h	/^  uint16_t   handle;                   \/**< Handle to the attribute to be written. *\/$/;"	m	struct:__anon763
handle_decl	components\softdevice\s130\headers\ble_gattc.h	/^  uint16_t                handle_decl;          \/**< Handle of the Characteristic Declaration. *\/$/;"	m	struct:__anon761
handle_range	components\softdevice\s130\headers\ble_gattc.h	/^  ble_gattc_handle_range_t handle_range;  \/**< Service Handle Range. *\/$/;"	m	struct:__anon759
handle_value	components\softdevice\s130\headers\ble_gattc.h	/^  ble_gattc_handle_value_t  handle_value[1];  \/**< Handle-Value(s) list, variable length. *\/$/;"	m	struct:__anon769
handle_value	components\softdevice\s130\headers\ble_gattc.h	/^  uint16_t                handle_value;         \/**< Handle of the Characteristic Value. *\/$/;"	m	struct:__anon761
hvx	components\softdevice\s130\headers\ble_gattc.h	/^    ble_gattc_evt_hvx_t                         hvx;                        \/**< Handle Value Notification\/Indication Event Parameters. *\/$/;"	m	union:__anon775::__anon776
included_srvc	components\softdevice\s130\headers\ble_gattc.h	/^  ble_gattc_service_t included_srvc;    \/**< Handle of the included service. *\/$/;"	m	struct:__anon760
includes	components\softdevice\s130\headers\ble_gattc.h	/^  ble_gattc_include_t includes[1];      \/**< Include data, variable length. *\/$/;"	m	struct:__anon765
len	components\softdevice\s130\headers\ble_gattc.h	/^  uint16_t            len;              \/**< Data length. *\/$/;"	m	struct:__anon772
len	components\softdevice\s130\headers\ble_gattc.h	/^  uint16_t            len;            \/**< Attribute data length. *\/$/;"	m	struct:__anon770
len	components\softdevice\s130\headers\ble_gattc.h	/^  uint16_t            len;            \/**< Attribute data length. *\/$/;"	m	struct:__anon773
len	components\softdevice\s130\headers\ble_gattc.h	/^  uint16_t            len;            \/**< Concatenated Attribute values length. *\/$/;"	m	struct:__anon771
len	components\softdevice\s130\headers\ble_gattc.h	/^  uint16_t   len;                      \/**< Length of data in bytes. *\/$/;"	m	struct:__anon763
offset	components\softdevice\s130\headers\ble_gattc.h	/^  uint16_t            offset;           \/**< Data Offset. *\/$/;"	m	struct:__anon772
offset	components\softdevice\s130\headers\ble_gattc.h	/^  uint16_t            offset;         \/**< Offset of the attribute data. *\/$/;"	m	struct:__anon770
offset	components\softdevice\s130\headers\ble_gattc.h	/^  uint16_t   offset;                   \/**< Offset in bytes. @note For WRITE_CMD and WRITE_REQ, offset must be 0. *\/$/;"	m	struct:__anon763
p_value	components\softdevice\s130\headers\ble_gattc.h	/^  uint8_t             *p_value;        \/**< Pointer to value, variable length (length available as value_len in ble_gattc_evt_read_by_uuid_rsp_t). $/;"	m	struct:__anon768
p_value	components\softdevice\s130\headers\ble_gattc.h	/^  uint8_t   *p_value;                  \/**< Pointer to the value data. *\/$/;"	m	struct:__anon763
params	components\softdevice\s130\headers\ble_gattc.h	/^  } params;                                                                 \/**< Event Parameters. @note Only valid if @ref gatt_status == BLE_GATT_STATUS_SUCCESS. *\/$/;"	m	struct:__anon775	typeref:union:__anon775::__anon776
prim_srvc_disc_rsp	components\softdevice\s130\headers\ble_gattc.h	/^    ble_gattc_evt_prim_srvc_disc_rsp_t          prim_srvc_disc_rsp;         \/**< Primary Service Discovery Response Event Parameters. *\/$/;"	m	union:__anon775::__anon776
read_rsp	components\softdevice\s130\headers\ble_gattc.h	/^    ble_gattc_evt_read_rsp_t                    read_rsp;                   \/**< Read Response Event Parameters. *\/$/;"	m	union:__anon775::__anon776
rel_disc_rsp	components\softdevice\s130\headers\ble_gattc.h	/^    ble_gattc_evt_rel_disc_rsp_t                rel_disc_rsp;               \/**< Relationship Discovery Response Event Parameters. *\/$/;"	m	union:__anon775::__anon776
services	components\softdevice\s130\headers\ble_gattc.h	/^  ble_gattc_service_t services[1];      \/**< Service data, variable length. *\/$/;"	m	struct:__anon764
src	components\softdevice\s130\headers\ble_gattc.h	/^  uint8_t          src;                       \/**< Timeout source, see @ref BLE_GATT_TIMEOUT_SOURCES. *\/$/;"	m	struct:__anon774
start_handle	components\softdevice\s130\headers\ble_gattc.h	/^  uint16_t          start_handle; \/**< Start Handle. *\/$/;"	m	struct:__anon758
timeout	components\softdevice\s130\headers\ble_gattc.h	/^    ble_gattc_evt_timeout_t                     timeout;                    \/**< Timeout Event Parameters. *\/$/;"	m	union:__anon775::__anon776
type	components\softdevice\s130\headers\ble_gattc.h	/^  uint8_t             type;           \/**< Indication or Notification, see @ref BLE_GATT_HVX_TYPES. *\/$/;"	m	struct:__anon773
uuid	components\softdevice\s130\headers\ble_gattc.h	/^  ble_uuid_t               uuid;          \/**< Service UUID. *\/$/;"	m	struct:__anon759
uuid	components\softdevice\s130\headers\ble_gattc.h	/^  ble_uuid_t              uuid;                 \/**< Characteristic UUID. *\/$/;"	m	struct:__anon761
uuid	components\softdevice\s130\headers\ble_gattc.h	/^  ble_uuid_t        uuid;           \/**< Descriptor UUID. *\/$/;"	m	struct:__anon762
value_len	components\softdevice\s130\headers\ble_gattc.h	/^  uint16_t                  value_len;        \/**< Length of the value in Handle-Value(s) list. *\/$/;"	m	struct:__anon769
values	components\softdevice\s130\headers\ble_gattc.h	/^  uint8_t             values[1];      \/**< Attribute values, variable length. *\/$/;"	m	struct:__anon771
write_op	components\softdevice\s130\headers\ble_gattc.h	/^  uint8_t             write_op;         \/**< Type of write operation, see @ref BLE_GATT_WRITE_OPS. *\/$/;"	m	struct:__anon772
write_op	components\softdevice\s130\headers\ble_gattc.h	/^  uint8_t    write_op;                 \/**< Write Operation to be performed, see @ref BLE_GATT_WRITE_OPS. *\/$/;"	m	struct:__anon763
write_rsp	components\softdevice\s130\headers\ble_gattc.h	/^    ble_gattc_evt_write_rsp_t                   write_rsp;                  \/**< Write Response Event Parameters. *\/$/;"	m	union:__anon775::__anon776
BLE_ERROR_GATTS_INVALID_ATTR_TYPE	components\softdevice\s130\headers\ble_gatts.h	93;"	d
BLE_ERROR_GATTS_SYS_ATTR_MISSING	components\softdevice\s130\headers\ble_gatts.h	94;"	d
BLE_GATTS_ATTR_TYPE_CHAR_DECL	components\softdevice\s130\headers\ble_gatts.h	117;"	d
BLE_GATTS_ATTR_TYPE_CHAR_VAL	components\softdevice\s130\headers\ble_gatts.h	118;"	d
BLE_GATTS_ATTR_TYPE_DESC	components\softdevice\s130\headers\ble_gatts.h	119;"	d
BLE_GATTS_ATTR_TYPE_INC_DECL	components\softdevice\s130\headers\ble_gatts.h	116;"	d
BLE_GATTS_ATTR_TYPE_INVALID	components\softdevice\s130\headers\ble_gatts.h	113;"	d
BLE_GATTS_ATTR_TYPE_OTHER	components\softdevice\s130\headers\ble_gatts.h	120;"	d
BLE_GATTS_ATTR_TYPE_PRIM_SRVC_DECL	components\softdevice\s130\headers\ble_gatts.h	114;"	d
BLE_GATTS_ATTR_TYPE_SEC_SRVC_DECL	components\softdevice\s130\headers\ble_gatts.h	115;"	d
BLE_GATTS_AUTHORIZE_TYPE_INVALID	components\softdevice\s130\headers\ble_gatts.h	145;"	d
BLE_GATTS_AUTHORIZE_TYPE_READ	components\softdevice\s130\headers\ble_gatts.h	146;"	d
BLE_GATTS_AUTHORIZE_TYPE_WRITE	components\softdevice\s130\headers\ble_gatts.h	147;"	d
BLE_GATTS_EVTS	components\softdevice\s130\headers\ble_gatts.h	/^enum BLE_GATTS_EVTS$/;"	g
BLE_GATTS_EVT_HVC	components\softdevice\s130\headers\ble_gatts.h	/^  BLE_GATTS_EVT_HVC,                              \/**< Handle Value Confirmation. *\/$/;"	e	enum:BLE_GATTS_EVTS
BLE_GATTS_EVT_RW_AUTHORIZE_REQUEST	components\softdevice\s130\headers\ble_gatts.h	/^  BLE_GATTS_EVT_RW_AUTHORIZE_REQUEST,             \/**< Read\/Write Authorization request. *\/$/;"	e	enum:BLE_GATTS_EVTS
BLE_GATTS_EVT_SC_CONFIRM	components\softdevice\s130\headers\ble_gatts.h	/^  BLE_GATTS_EVT_SC_CONFIRM,                       \/**< Service Changed Confirmation. *\/$/;"	e	enum:BLE_GATTS_EVTS
BLE_GATTS_EVT_SYS_ATTR_MISSING	components\softdevice\s130\headers\ble_gatts.h	/^  BLE_GATTS_EVT_SYS_ATTR_MISSING,                 \/**< A persistent system attribute access is pending, awaiting a sd_ble_gatts_sys_attr_set(). *\/$/;"	e	enum:BLE_GATTS_EVTS
BLE_GATTS_EVT_TIMEOUT	components\softdevice\s130\headers\ble_gatts.h	/^  BLE_GATTS_EVT_TIMEOUT                           \/**< Timeout. *\/$/;"	e	enum:BLE_GATTS_EVTS
BLE_GATTS_EVT_WRITE	components\softdevice\s130\headers\ble_gatts.h	/^  BLE_GATTS_EVT_WRITE = BLE_GATTS_EVT_BASE,       \/**< Write operation performed. *\/$/;"	e	enum:BLE_GATTS_EVTS
BLE_GATTS_FIX_ATTR_LEN_MAX	components\softdevice\s130\headers\ble_gatts.h	99;"	d
BLE_GATTS_H__	components\softdevice\s130\headers\ble_gatts.h	44;"	d
BLE_GATTS_OP_EXEC_WRITE_REQ_CANCEL	components\softdevice\s130\headers\ble_gatts.h	131;"	d
BLE_GATTS_OP_EXEC_WRITE_REQ_NOW	components\softdevice\s130\headers\ble_gatts.h	132;"	d
BLE_GATTS_OP_INVALID	components\softdevice\s130\headers\ble_gatts.h	126;"	d
BLE_GATTS_OP_PREP_WRITE_REQ	components\softdevice\s130\headers\ble_gatts.h	130;"	d
BLE_GATTS_OP_SIGN_WRITE_CMD	components\softdevice\s130\headers\ble_gatts.h	129;"	d
BLE_GATTS_OP_WRITE_CMD	components\softdevice\s130\headers\ble_gatts.h	128;"	d
BLE_GATTS_OP_WRITE_REQ	components\softdevice\s130\headers\ble_gatts.h	127;"	d
BLE_GATTS_SRVC_TYPE_INVALID	components\softdevice\s130\headers\ble_gatts.h	105;"	d
BLE_GATTS_SRVC_TYPE_PRIMARY	components\softdevice\s130\headers\ble_gatts.h	106;"	d
BLE_GATTS_SRVC_TYPE_SECONDARY	components\softdevice\s130\headers\ble_gatts.h	107;"	d
BLE_GATTS_SVCS	components\softdevice\s130\headers\ble_gatts.h	/^enum BLE_GATTS_SVCS$/;"	g
BLE_GATTS_VAR_ATTR_LEN_MAX	components\softdevice\s130\headers\ble_gatts.h	100;"	d
BLE_GATTS_VLOC_INVALID	components\softdevice\s130\headers\ble_gatts.h	137;"	d
BLE_GATTS_VLOC_STACK	components\softdevice\s130\headers\ble_gatts.h	138;"	d
BLE_GATTS_VLOC_USER	components\softdevice\s130\headers\ble_gatts.h	139;"	d
SD_BLE_GATTS_CHARACTERISTIC_ADD	components\softdevice\s130\headers\ble_gatts.h	/^  SD_BLE_GATTS_CHARACTERISTIC_ADD,               \/**< Add a characteristic. *\/$/;"	e	enum:BLE_GATTS_SVCS
SD_BLE_GATTS_DESCRIPTOR_ADD	components\softdevice\s130\headers\ble_gatts.h	/^  SD_BLE_GATTS_DESCRIPTOR_ADD,                   \/**< Add a generic attribute. *\/$/;"	e	enum:BLE_GATTS_SVCS
SD_BLE_GATTS_HVX	components\softdevice\s130\headers\ble_gatts.h	/^  SD_BLE_GATTS_HVX,                              \/**< Handle Value Notification or Indication. *\/$/;"	e	enum:BLE_GATTS_SVCS
SD_BLE_GATTS_INCLUDE_ADD	components\softdevice\s130\headers\ble_gatts.h	/^  SD_BLE_GATTS_INCLUDE_ADD,                      \/**< Add an included service. *\/$/;"	e	enum:BLE_GATTS_SVCS
SD_BLE_GATTS_RW_AUTHORIZE_REPLY	components\softdevice\s130\headers\ble_gatts.h	/^  SD_BLE_GATTS_RW_AUTHORIZE_REPLY,               \/**< Reply to an authorization request for a read or write operation on one or more attributes. *\/ $/;"	e	enum:BLE_GATTS_SVCS
SD_BLE_GATTS_SERVICE_ADD	components\softdevice\s130\headers\ble_gatts.h	/^  SD_BLE_GATTS_SERVICE_ADD = BLE_GATTS_SVC_BASE, \/**< Add a service. *\/$/;"	e	enum:BLE_GATTS_SVCS
SD_BLE_GATTS_SERVICE_CHANGED	components\softdevice\s130\headers\ble_gatts.h	/^  SD_BLE_GATTS_SERVICE_CHANGED,                  \/**< Perform a Service Changed Indication to one or more peers. *\/$/;"	e	enum:BLE_GATTS_SVCS
SD_BLE_GATTS_SYS_ATTR_GET	components\softdevice\s130\headers\ble_gatts.h	/^  SD_BLE_GATTS_SYS_ATTR_GET,                     \/**< Get updated persistent system attributes after terminating a connection. *\/$/;"	e	enum:BLE_GATTS_SVCS
SD_BLE_GATTS_SYS_ATTR_SET	components\softdevice\s130\headers\ble_gatts.h	/^  SD_BLE_GATTS_SYS_ATTR_SET,                     \/**< Set the persistent system attributes for a connection. *\/  $/;"	e	enum:BLE_GATTS_SVCS
SD_BLE_GATTS_VALUE_GET	components\softdevice\s130\headers\ble_gatts.h	/^  SD_BLE_GATTS_VALUE_GET,                        \/**< Get an attribute value. *\/$/;"	e	enum:BLE_GATTS_SVCS
SD_BLE_GATTS_VALUE_SET	components\softdevice\s130\headers\ble_gatts.h	/^  SD_BLE_GATTS_VALUE_SET,                        \/**< Set an attribute value. *\/$/;"	e	enum:BLE_GATTS_SVCS
authorize_request	components\softdevice\s130\headers\ble_gatts.h	/^    ble_gatts_evt_rw_authorize_request_t  authorize_request;  \/**< Read or Write Authorize Request Parameters. *\/$/;"	m	union:__anon797::__anon798
ble_gatts_attr_context_t	components\softdevice\s130\headers\ble_gatts.h	/^} ble_gatts_attr_context_t;$/;"	t	typeref:struct:__anon781
ble_gatts_attr_md_t	components\softdevice\s130\headers\ble_gatts.h	/^} ble_gatts_attr_md_t;$/;"	t	typeref:struct:__anon778
ble_gatts_attr_t	components\softdevice\s130\headers\ble_gatts.h	/^} ble_gatts_attr_t;$/;"	t	typeref:struct:__anon779
ble_gatts_char_handles_t	components\softdevice\s130\headers\ble_gatts.h	/^} ble_gatts_char_handles_t;$/;"	t	typeref:struct:__anon784
ble_gatts_char_md_t	components\softdevice\s130\headers\ble_gatts.h	/^} ble_gatts_char_md_t;$/;"	t	typeref:struct:__anon783
ble_gatts_char_pf_t	components\softdevice\s130\headers\ble_gatts.h	/^} ble_gatts_char_pf_t;$/;"	t	typeref:struct:__anon782
ble_gatts_enable_params_t	components\softdevice\s130\headers\ble_gatts.h	/^} ble_gatts_enable_params_t;$/;"	t	typeref:struct:__anon777
ble_gatts_evt_hvc_t	components\softdevice\s130\headers\ble_gatts.h	/^} ble_gatts_evt_hvc_t;$/;"	t	typeref:struct:__anon795
ble_gatts_evt_read_t	components\softdevice\s130\headers\ble_gatts.h	/^} ble_gatts_evt_read_t;$/;"	t	typeref:struct:__anon791
ble_gatts_evt_rw_authorize_request_t	components\softdevice\s130\headers\ble_gatts.h	/^} ble_gatts_evt_rw_authorize_request_t;$/;"	t	typeref:struct:__anon792
ble_gatts_evt_sys_attr_missing_t	components\softdevice\s130\headers\ble_gatts.h	/^} ble_gatts_evt_sys_attr_missing_t;$/;"	t	typeref:struct:__anon794
ble_gatts_evt_t	components\softdevice\s130\headers\ble_gatts.h	/^} ble_gatts_evt_t;$/;"	t	typeref:struct:__anon797
ble_gatts_evt_timeout_t	components\softdevice\s130\headers\ble_gatts.h	/^} ble_gatts_evt_timeout_t;$/;"	t	typeref:struct:__anon796
ble_gatts_evt_write_t	components\softdevice\s130\headers\ble_gatts.h	/^} ble_gatts_evt_write_t;$/;"	t	typeref:struct:__anon790
ble_gatts_hvx_params_t	components\softdevice\s130\headers\ble_gatts.h	/^} ble_gatts_hvx_params_t;$/;"	t	typeref:struct:__anon785
ble_gatts_read_authorize_params_t	components\softdevice\s130\headers\ble_gatts.h	/^} ble_gatts_read_authorize_params_t;$/;"	t	typeref:struct:__anon786
ble_gatts_rw_authorize_reply_params_t	components\softdevice\s130\headers\ble_gatts.h	/^} ble_gatts_rw_authorize_reply_params_t;$/;"	t	typeref:struct:__anon788
ble_gatts_value_t	components\softdevice\s130\headers\ble_gatts.h	/^} ble_gatts_value_t;$/;"	t	typeref:struct:__anon780
ble_gatts_write_authorize_params_t	components\softdevice\s130\headers\ble_gatts.h	/^} ble_gatts_write_authorize_params_t;$/;"	t	typeref:struct:__anon787
cccd_handle	components\softdevice\s130\headers\ble_gatts.h	/^  uint16_t          cccd_handle;        \/**< Handle to the Client Characteristic Configuration Descriptor, or BLE_GATT_HANDLE_INVALID if not present. *\/$/;"	m	struct:__anon784
char_ext_props	components\softdevice\s130\headers\ble_gatts.h	/^  ble_gatt_char_ext_props_t   char_ext_props;           \/**< Characteristic Extended Properties. *\/$/;"	m	struct:__anon783
char_props	components\softdevice\s130\headers\ble_gatts.h	/^  ble_gatt_char_props_t       char_props;               \/**< Characteristic Properties. *\/$/;"	m	struct:__anon783
char_user_desc_max_size	components\softdevice\s130\headers\ble_gatts.h	/^  uint16_t                    char_user_desc_max_size;  \/**< The maximum size in bytes of the user description descriptor. *\/$/;"	m	struct:__anon783
char_user_desc_size	components\softdevice\s130\headers\ble_gatts.h	/^  uint16_t                    char_user_desc_size;      \/**< The size of the user description, must be smaller or equal to char_user_desc_max_size. *\/ $/;"	m	struct:__anon783
char_uuid	components\softdevice\s130\headers\ble_gatts.h	/^  ble_uuid_t           char_uuid;       \/**< Characteristic UUID if applicable (BLE_UUID_TYPE_UNKNOWN if N\/A). *\/$/;"	m	struct:__anon781
conn_handle	components\softdevice\s130\headers\ble_gatts.h	/^  uint16_t conn_handle;                                       \/**< Connection Handle on which event occurred. *\/$/;"	m	struct:__anon797
context	components\softdevice\s130\headers\ble_gatts.h	/^  ble_gatts_attr_context_t    context;            \/**< Attribute Context. *\/$/;"	m	struct:__anon790
context	components\softdevice\s130\headers\ble_gatts.h	/^  ble_gatts_attr_context_t    context;            \/**< Attribute Context. *\/$/;"	m	struct:__anon791
data	components\softdevice\s130\headers\ble_gatts.h	/^  uint8_t                     data[1];            \/**< Incoming data, variable length. *\/$/;"	m	struct:__anon790
desc	components\softdevice\s130\headers\ble_gatts.h	/^  uint16_t         desc;        \/**< Namespace description from Bluetooth Assigned Numbers, see @ref BLE_GATT_CPF_NAMESPACES. *\/$/;"	m	struct:__anon782
desc_uuid	components\softdevice\s130\headers\ble_gatts.h	/^  ble_uuid_t           desc_uuid;       \/**< Descriptor UUID if applicable (BLE_UUID_TYPE_UNKNOWN if N\/A). *\/$/;"	m	struct:__anon781
exponent	components\softdevice\s130\headers\ble_gatts.h	/^  int8_t           exponent;    \/**< Exponent for integer data types. *\/$/;"	m	struct:__anon782
format	components\softdevice\s130\headers\ble_gatts.h	/^  uint8_t          format;      \/**< Format of the value, see @ref BLE_GATT_CPF_FORMATS. *\/$/;"	m	struct:__anon782
gatt_status	components\softdevice\s130\headers\ble_gatts.h	/^  uint16_t          gatt_status;        \/**< GATT status code for the operation, see @ref BLE_GATT_STATUS_CODES. *\/$/;"	m	struct:__anon786
gatt_status	components\softdevice\s130\headers\ble_gatts.h	/^  uint16_t          gatt_status;        \/**< GATT status code for the operation, see @ref BLE_GATT_STATUS_CODES. *\/$/;"	m	struct:__anon787
handle	components\softdevice\s130\headers\ble_gatts.h	/^  uint16_t                    handle;             \/**< Attribute Handle. *\/$/;"	m	struct:__anon790
handle	components\softdevice\s130\headers\ble_gatts.h	/^  uint16_t                    handle;             \/**< Attribute Handle. *\/$/;"	m	struct:__anon791
handle	components\softdevice\s130\headers\ble_gatts.h	/^  uint16_t          handle;                       \/**< Attribute Handle. *\/$/;"	m	struct:__anon795
handle	components\softdevice\s130\headers\ble_gatts.h	/^  uint16_t          handle;             \/**< Characteristic Value Handle. *\/$/;"	m	struct:__anon785
hint	components\softdevice\s130\headers\ble_gatts.h	/^  uint8_t hint;                                 \/**< Hint (TBD). *\/$/;"	m	struct:__anon794
hvc	components\softdevice\s130\headers\ble_gatts.h	/^    ble_gatts_evt_hvc_t                   hvc;                \/**< Handle Value Confirmation Event Parameters. *\/$/;"	m	union:__anon797::__anon798
init_len	components\softdevice\s130\headers\ble_gatts.h	/^  uint16_t             init_len;        \/**< Initial attribute value length in bytes. *\/$/;"	m	struct:__anon779
init_offs	components\softdevice\s130\headers\ble_gatts.h	/^  uint16_t             init_offs;       \/**< Initial attribute value offset in bytes. If different from zero, the first init_offs bytes of the attribute value will be left uninitialized. *\/$/;"	m	struct:__anon779
len	components\softdevice\s130\headers\ble_gatts.h	/^  uint16_t                    len;                \/**< Length of the incoming data. *\/$/;"	m	struct:__anon790
len	components\softdevice\s130\headers\ble_gatts.h	/^  uint16_t          len;                \/**< Length in bytes of the value in p_data pointer, see @ref BLE_GATTS_ATTR_LENS_MAX. *\/$/;"	m	struct:__anon786
len	components\softdevice\s130\headers\ble_gatts.h	/^  uint16_t  len;        \/**< Length in bytes to be written or read. Length in bytes written or read after successful return.*\/$/;"	m	struct:__anon780
max_len	components\softdevice\s130\headers\ble_gatts.h	/^  uint16_t             max_len;         \/**< Maximum attribute value length in bytes, see @ref BLE_GATTS_ATTR_LENS_MAX for maximum values. *\/$/;"	m	struct:__anon779
name_space	components\softdevice\s130\headers\ble_gatts.h	/^  uint8_t          name_space;  \/**< Namespace from Bluetooth Assigned Numbers, see @ref BLE_GATT_CPF_NAMESPACES. *\/$/;"	m	struct:__anon782
offset	components\softdevice\s130\headers\ble_gatts.h	/^  uint16_t                    offset;             \/**< Offset for the read operation. *\/$/;"	m	struct:__anon791
offset	components\softdevice\s130\headers\ble_gatts.h	/^  uint16_t                    offset;             \/**< Offset for the write operation. *\/$/;"	m	struct:__anon790
offset	components\softdevice\s130\headers\ble_gatts.h	/^  uint16_t          offset;             \/**< Offset of the attribute value being updated. *\/$/;"	m	struct:__anon786
offset	components\softdevice\s130\headers\ble_gatts.h	/^  uint16_t          offset;             \/**< Offset within the attribute value. *\/$/;"	m	struct:__anon785
offset	components\softdevice\s130\headers\ble_gatts.h	/^  uint16_t  offset;     \/**< Attribute value offset. *\/$/;"	m	struct:__anon780
op	components\softdevice\s130\headers\ble_gatts.h	/^  uint8_t                     op;                 \/**< Type of write operation, see @ref BLE_GATTS_OPS. *\/$/;"	m	struct:__anon790
p_attr_md	components\softdevice\s130\headers\ble_gatts.h	/^  ble_gatts_attr_md_t *p_attr_md;       \/**< Pointer to the attribute metadata structure. *\/$/;"	m	struct:__anon779
p_cccd_md	components\softdevice\s130\headers\ble_gatts.h	/^  ble_gatts_attr_md_t*        p_cccd_md;                \/**< Attribute metadata for the Client Characteristic Configuration Descriptor, or NULL for default values. *\/$/;"	m	struct:__anon783
p_char_pf	components\softdevice\s130\headers\ble_gatts.h	/^  ble_gatts_char_pf_t*        p_char_pf;                \/**< Pointer to a presentation format structure or NULL if the descriptor is not required. *\/$/;"	m	struct:__anon783
p_char_user_desc	components\softdevice\s130\headers\ble_gatts.h	/^  uint8_t                    *p_char_user_desc;         \/**< Pointer to a UTF-8, NULL if the descriptor is not required. *\/$/;"	m	struct:__anon783
p_data	components\softdevice\s130\headers\ble_gatts.h	/^  uint8_t          *p_data;             \/**< Actual data content, use NULL to use the current attribute value. *\/$/;"	m	struct:__anon785
p_data	components\softdevice\s130\headers\ble_gatts.h	/^  uint8_t          *p_data;             \/**< Pointer to new value used to update the attribute value. *\/$/;"	m	struct:__anon786
p_len	components\softdevice\s130\headers\ble_gatts.h	/^  uint16_t         *p_len;              \/**< Length in bytes to be written, length in bytes written after successful return. *\/$/;"	m	struct:__anon785
p_sccd_md	components\softdevice\s130\headers\ble_gatts.h	/^  ble_gatts_attr_md_t*        p_sccd_md;                \/**< Attribute metadata for the Server Characteristic Configuration Descriptor, or NULL for default values. *\/$/;"	m	struct:__anon783
p_user_desc_md	components\softdevice\s130\headers\ble_gatts.h	/^  ble_gatts_attr_md_t*        p_user_desc_md;           \/**< Attribute metadata for the User Description descriptor, or NULL for default values. *\/$/;"	m	struct:__anon783
p_uuid	components\softdevice\s130\headers\ble_gatts.h	/^  ble_uuid_t          *p_uuid;          \/**< Pointer to the attribute UUID. *\/$/;"	m	struct:__anon779
p_value	components\softdevice\s130\headers\ble_gatts.h	/^  uint8_t*             p_value;         \/**< Pointer to the attribute data. Please note that if the @ref BLE_GATTS_VLOC_USER value location is selected in the attribute metadata, this will have to point to a buffer$/;"	m	struct:__anon779
p_value	components\softdevice\s130\headers\ble_gatts.h	/^  uint8_t*  p_value;    \/**< Pointer to where value is stored or will be stored. $/;"	m	struct:__anon780
params	components\softdevice\s130\headers\ble_gatts.h	/^  } params;                                                   \/**< Event Parameters. *\/$/;"	m	struct:__anon797	typeref:union:__anon797::__anon798
params	components\softdevice\s130\headers\ble_gatts.h	/^  } params;                                     \/**< Reply Parameters. *\/$/;"	m	struct:__anon788	typeref:union:__anon788::__anon789
rd_auth	components\softdevice\s130\headers\ble_gatts.h	/^  uint8_t                 rd_auth    :1;   \/**< Read Authorization and value will be requested from the application on every read operation. *\/ $/;"	m	struct:__anon778
read	components\softdevice\s130\headers\ble_gatts.h	/^    ble_gatts_evt_read_t      read;             \/**< Attribute Read Parameters. *\/$/;"	m	union:__anon792::__anon793
read	components\softdevice\s130\headers\ble_gatts.h	/^    ble_gatts_read_authorize_params_t   read;   \/**< Read authorization parameters. *\/$/;"	m	union:__anon788::__anon789
read_perm	components\softdevice\s130\headers\ble_gatts.h	/^  ble_gap_conn_sec_mode_t read_perm;       \/**< Read permissions. *\/$/;"	m	struct:__anon778
request	components\softdevice\s130\headers\ble_gatts.h	/^  } request;                                    \/**< Request Parameters. *\/$/;"	m	struct:__anon792	typeref:union:__anon792::__anon793
sccd_handle	components\softdevice\s130\headers\ble_gatts.h	/^  uint16_t          sccd_handle;        \/**< Handle to the Server Characteristic Configuration Descriptor, or BLE_GATT_HANDLE_INVALID if not present. *\/$/;"	m	struct:__anon784
service_changed	components\softdevice\s130\headers\ble_gatts.h	/^  uint8_t   service_changed:1;             \/**< Include the Service Changed characteristic in the local attributes. *\/$/;"	m	struct:__anon777
src	components\softdevice\s130\headers\ble_gatts.h	/^  uint8_t          src;                       \/**< Timeout source, see @ref BLE_GATT_TIMEOUT_SOURCES. *\/$/;"	m	struct:__anon796
srvc_handle	components\softdevice\s130\headers\ble_gatts.h	/^  uint16_t             srvc_handle;     \/**< Service Handle. *\/$/;"	m	struct:__anon781
srvc_uuid	components\softdevice\s130\headers\ble_gatts.h	/^  ble_uuid_t           srvc_uuid;       \/**< Service UUID. *\/$/;"	m	struct:__anon781
sys_attr_missing	components\softdevice\s130\headers\ble_gatts.h	/^    ble_gatts_evt_sys_attr_missing_t      sys_attr_missing;   \/**< System attributes missing. *\/$/;"	m	union:__anon797::__anon798
timeout	components\softdevice\s130\headers\ble_gatts.h	/^    ble_gatts_evt_timeout_t               timeout;            \/**< Timeout Event. *\/$/;"	m	union:__anon797::__anon798
type	components\softdevice\s130\headers\ble_gatts.h	/^  uint8_t                               type;   \/**< Type of authorize operation, see @ref BLE_GATTS_AUTHORIZE_TYPES. *\/$/;"	m	struct:__anon788
type	components\softdevice\s130\headers\ble_gatts.h	/^  uint8_t                     type;             \/**< Type of authorize operation, see @ref BLE_GATTS_AUTHORIZE_TYPES. *\/$/;"	m	struct:__anon792
type	components\softdevice\s130\headers\ble_gatts.h	/^  uint8_t              type;            \/**< Attribute Type, see @ref BLE_GATTS_ATTR_TYPES. *\/$/;"	m	struct:__anon781
type	components\softdevice\s130\headers\ble_gatts.h	/^  uint8_t           type;               \/**< Indication or Notification, see @ref BLE_GATT_HVX_TYPES. *\/$/;"	m	struct:__anon785
unit	components\softdevice\s130\headers\ble_gatts.h	/^  uint16_t         unit;        \/**< UUID from Bluetooth Assigned Numbers. *\/$/;"	m	struct:__anon782
update	components\softdevice\s130\headers\ble_gatts.h	/^  uint8_t           update : 1;         \/**< If set, data supplied in p_data will be used in the ATT response. *\/$/;"	m	struct:__anon786
user_desc_handle	components\softdevice\s130\headers\ble_gatts.h	/^  uint16_t          user_desc_handle;   \/**< Handle to the User Description descriptor, or BLE_GATT_HANDLE_INVALID if not present. *\/$/;"	m	struct:__anon784
value_handle	components\softdevice\s130\headers\ble_gatts.h	/^  uint16_t             value_handle;    \/**< Characteristic Handle if applicable (BLE_GATT_HANDLE_INVALID if N\/A). *\/$/;"	m	struct:__anon781
value_handle	components\softdevice\s130\headers\ble_gatts.h	/^  uint16_t          value_handle;       \/**< Handle to the characteristic value. *\/$/;"	m	struct:__anon784
vlen	components\softdevice\s130\headers\ble_gatts.h	/^  uint8_t                 vlen       :1;   \/**< Variable length attribute. *\/$/;"	m	struct:__anon778
vloc	components\softdevice\s130\headers\ble_gatts.h	/^  uint8_t                 vloc       :2;   \/**< Value location, see @ref BLE_GATTS_VLOCS.*\/$/;"	m	struct:__anon778
wr_auth	components\softdevice\s130\headers\ble_gatts.h	/^  uint8_t                 wr_auth    :1;   \/**< Write Authorization will be requested from the application on every Write Request operation (but not Write Command). *\/$/;"	m	struct:__anon778
write	components\softdevice\s130\headers\ble_gatts.h	/^    ble_gatts_evt_write_t                 write;              \/**< Write Event Parameters. *\/$/;"	m	union:__anon797::__anon798
write	components\softdevice\s130\headers\ble_gatts.h	/^    ble_gatts_evt_write_t     write;            \/**< Attribute Write Parameters. *\/$/;"	m	union:__anon792::__anon793
write	components\softdevice\s130\headers\ble_gatts.h	/^    ble_gatts_write_authorize_params_t  write;  \/**< Write authorization parameters. *\/$/;"	m	union:__anon788::__anon789
write_perm	components\softdevice\s130\headers\ble_gatts.h	/^  ble_gap_conn_sec_mode_t write_perm;      \/**< Write permissions. *\/$/;"	m	struct:__anon778
BLE_HCI_AUTHENTICATION_FAILURE	components\softdevice\s130\headers\ble_hci.h	55;"	d
BLE_HCI_CONNECTION_TIMEOUT	components\softdevice\s130\headers\ble_hci.h	58;"	d
BLE_HCI_CONN_FAILED_TO_BE_ESTABLISHED	components\softdevice\s130\headers\ble_hci.h	118;"	d
BLE_HCI_CONN_INTERVAL_UNACCEPTABLE	components\softdevice\s130\headers\ble_hci.h	115;"	d
BLE_HCI_CONN_TERMINATED_DUE_TO_MIC_FAILURE	components\softdevice\s130\headers\ble_hci.h	117;"	d
BLE_HCI_CONTROLLER_BUSY	components\softdevice\s130\headers\ble_hci.h	114;"	d
BLE_HCI_DIFFERENT_TRANSACTION_COLLISION	components\softdevice\s130\headers\ble_hci.h	97;"	d
BLE_HCI_DIRECTED_ADVERTISER_TIMEOUT	components\softdevice\s130\headers\ble_hci.h	116;"	d
BLE_HCI_H__	components\softdevice\s130\headers\ble_hci.h	44;"	d
BLE_HCI_INSTANT_PASSED	components\softdevice\s130\headers\ble_hci.h	95;"	d
BLE_HCI_LOCAL_HOST_TERMINATED_CONNECTION	components\softdevice\s130\headers\ble_hci.h	72;"	d
BLE_HCI_MEMORY_CAPACITY_EXCEEDED	components\softdevice\s130\headers\ble_hci.h	57;"	d
BLE_HCI_PAIRING_WITH_UNIT_KEY_UNSUPPORTED	components\softdevice\s130\headers\ble_hci.h	96;"	d
BLE_HCI_REMOTE_DEV_TERMINATION_DUE_TO_LOW_RESOURCES	components\softdevice\s130\headers\ble_hci.h	70;"	d
BLE_HCI_REMOTE_DEV_TERMINATION_DUE_TO_POWER_OFF	components\softdevice\s130\headers\ble_hci.h	71;"	d
BLE_HCI_REMOTE_USER_TERMINATED_CONNECTION	components\softdevice\s130\headers\ble_hci.h	69;"	d
BLE_HCI_STATUS_CODE_COMMAND_DISALLOWED	components\softdevice\s130\headers\ble_hci.h	62;"	d
BLE_HCI_STATUS_CODE_INVALID_BTLE_COMMAND_PARAMETERS	components\softdevice\s130\headers\ble_hci.h	68;"	d
BLE_HCI_STATUS_CODE_INVALID_LMP_PARAMETERS	components\softdevice\s130\headers\ble_hci.h	83;"	d
BLE_HCI_STATUS_CODE_LMP_PDU_NOT_ALLOWED	components\softdevice\s130\headers\ble_hci.h	90;"	d
BLE_HCI_STATUS_CODE_LMP_RESPONSE_TIMEOUT	components\softdevice\s130\headers\ble_hci.h	88;"	d
BLE_HCI_STATUS_CODE_PIN_OR_KEY_MISSING	components\softdevice\s130\headers\ble_hci.h	56;"	d
BLE_HCI_STATUS_CODE_SUCCESS	components\softdevice\s130\headers\ble_hci.h	49;"	d
BLE_HCI_STATUS_CODE_UNKNOWN_BTLE_COMMAND	components\softdevice\s130\headers\ble_hci.h	50;"	d
BLE_HCI_STATUS_CODE_UNKNOWN_CONNECTION_IDENTIFIER	components\softdevice\s130\headers\ble_hci.h	51;"	d
BLE_HCI_STATUS_CODE_UNSPECIFIED_ERROR	components\softdevice\s130\headers\ble_hci.h	84;"	d
BLE_HCI_UNSUPPORTED_REMOTE_FEATURE	components\softdevice\s130\headers\ble_hci.h	78;"	d
BLE_ERROR_L2CAP_CID_IN_USE	components\softdevice\s130\headers\ble_l2cap.h	75;"	d
BLE_L2CAP_CID_DYN_BASE	components\softdevice\s130\headers\ble_l2cap.h	85;"	d
BLE_L2CAP_CID_DYN_MAX	components\softdevice\s130\headers\ble_l2cap.h	88;"	d
BLE_L2CAP_CID_INVALID	components\softdevice\s130\headers\ble_l2cap.h	82;"	d
BLE_L2CAP_EVTS	components\softdevice\s130\headers\ble_l2cap.h	/^enum BLE_L2CAP_EVTS $/;"	g
BLE_L2CAP_EVT_RX	components\softdevice\s130\headers\ble_l2cap.h	/^  BLE_L2CAP_EVT_RX  = BLE_L2CAP_EVT_BASE          \/**< L2CAP packet received. *\/$/;"	e	enum:BLE_L2CAP_EVTS
BLE_L2CAP_H__	components\softdevice\s130\headers\ble_l2cap.h	44;"	d
BLE_L2CAP_MTU_DEF	components\softdevice\s130\headers\ble_l2cap.h	79;"	d
BLE_L2CAP_SVCS	components\softdevice\s130\headers\ble_l2cap.h	/^enum BLE_L2CAP_SVCS $/;"	g
SD_BLE_L2CAP_CID_REGISTER	components\softdevice\s130\headers\ble_l2cap.h	/^  SD_BLE_L2CAP_CID_REGISTER = BLE_L2CAP_SVC_BASE,  \/**< Register a CID. *\/$/;"	e	enum:BLE_L2CAP_SVCS
SD_BLE_L2CAP_CID_UNREGISTER	components\softdevice\s130\headers\ble_l2cap.h	/^  SD_BLE_L2CAP_CID_UNREGISTER,                     \/**< Unregister a CID. *\/$/;"	e	enum:BLE_L2CAP_SVCS
SD_BLE_L2CAP_TX	components\softdevice\s130\headers\ble_l2cap.h	/^  SD_BLE_L2CAP_TX                                  \/**< Transmit a packet. *\/$/;"	e	enum:BLE_L2CAP_SVCS
ble_l2cap_evt_rx_t	components\softdevice\s130\headers\ble_l2cap.h	/^} ble_l2cap_evt_rx_t;$/;"	t	typeref:struct:__anon800
ble_l2cap_evt_t	components\softdevice\s130\headers\ble_l2cap.h	/^} ble_l2cap_evt_t;$/;"	t	typeref:struct:__anon801
ble_l2cap_header_t	components\softdevice\s130\headers\ble_l2cap.h	/^} ble_l2cap_header_t;$/;"	t	typeref:struct:__anon799
cid	components\softdevice\s130\headers\ble_l2cap.h	/^  uint16_t   cid;                                 \/**< Channel ID on which packet is transmitted. *\/$/;"	m	struct:__anon799
conn_handle	components\softdevice\s130\headers\ble_l2cap.h	/^  uint16_t conn_handle;                           \/**< Connection Handle on which event occured. *\/$/;"	m	struct:__anon801
data	components\softdevice\s130\headers\ble_l2cap.h	/^  uint8_t    data[1];                             \/**< Packet data, variable length. *\/$/;"	m	struct:__anon800
header	components\softdevice\s130\headers\ble_l2cap.h	/^  ble_l2cap_header_t header;                      \/**< L2CAP packet header. *\/$/;"	m	struct:__anon800
len	components\softdevice\s130\headers\ble_l2cap.h	/^  uint16_t   len;                                 \/**< Length of valid info in data member. *\/$/;"	m	struct:__anon799
params	components\softdevice\s130\headers\ble_l2cap.h	/^  } params;                                       \/**< Event Parameters. *\/$/;"	m	struct:__anon801	typeref:union:__anon801::__anon802
rx	components\softdevice\s130\headers\ble_l2cap.h	/^    ble_l2cap_evt_rx_t rx;                        \/**< RX Event parameters. *\/$/;"	m	union:__anon801::__anon802
BLE_EVT_BASE	components\softdevice\s130\headers\ble_ranges.h	81;"	d
BLE_EVT_INVALID	components\softdevice\s130\headers\ble_ranges.h	79;"	d
BLE_EVT_LAST	components\softdevice\s130\headers\ble_ranges.h	82;"	d
BLE_GAP_EVT_BASE	components\softdevice\s130\headers\ble_ranges.h	84;"	d
BLE_GAP_EVT_LAST	components\softdevice\s130\headers\ble_ranges.h	85;"	d
BLE_GAP_OPT_BASE	components\softdevice\s130\headers\ble_ranges.h	102;"	d
BLE_GAP_OPT_LAST	components\softdevice\s130\headers\ble_ranges.h	103;"	d
BLE_GAP_SVC_BASE	components\softdevice\s130\headers\ble_ranges.h	66;"	d
BLE_GAP_SVC_LAST	components\softdevice\s130\headers\ble_ranges.h	67;"	d
BLE_GATTC_EVT_BASE	components\softdevice\s130\headers\ble_ranges.h	87;"	d
BLE_GATTC_EVT_LAST	components\softdevice\s130\headers\ble_ranges.h	88;"	d
BLE_GATTC_OPT_BASE	components\softdevice\s130\headers\ble_ranges.h	105;"	d
BLE_GATTC_OPT_LAST	components\softdevice\s130\headers\ble_ranges.h	106;"	d
BLE_GATTC_SVC_BASE	components\softdevice\s130\headers\ble_ranges.h	69;"	d
BLE_GATTC_SVC_LAST	components\softdevice\s130\headers\ble_ranges.h	70;"	d
BLE_GATTS_EVT_BASE	components\softdevice\s130\headers\ble_ranges.h	90;"	d
BLE_GATTS_EVT_LAST	components\softdevice\s130\headers\ble_ranges.h	91;"	d
BLE_GATTS_OPT_BASE	components\softdevice\s130\headers\ble_ranges.h	108;"	d
BLE_GATTS_OPT_LAST	components\softdevice\s130\headers\ble_ranges.h	109;"	d
BLE_GATTS_SVC_BASE	components\softdevice\s130\headers\ble_ranges.h	72;"	d
BLE_GATTS_SVC_LAST	components\softdevice\s130\headers\ble_ranges.h	73;"	d
BLE_L2CAP_EVT_BASE	components\softdevice\s130\headers\ble_ranges.h	93;"	d
BLE_L2CAP_EVT_LAST	components\softdevice\s130\headers\ble_ranges.h	94;"	d
BLE_L2CAP_OPT_BASE	components\softdevice\s130\headers\ble_ranges.h	111;"	d
BLE_L2CAP_OPT_LAST	components\softdevice\s130\headers\ble_ranges.h	112;"	d
BLE_L2CAP_SVC_BASE	components\softdevice\s130\headers\ble_ranges.h	75;"	d
BLE_L2CAP_SVC_LAST	components\softdevice\s130\headers\ble_ranges.h	76;"	d
BLE_OPT_BASE	components\softdevice\s130\headers\ble_ranges.h	99;"	d
BLE_OPT_INVALID	components\softdevice\s130\headers\ble_ranges.h	97;"	d
BLE_OPT_LAST	components\softdevice\s130\headers\ble_ranges.h	100;"	d
BLE_RANGES_H__	components\softdevice\s130\headers\ble_ranges.h	58;"	d
BLE_RESERVED_SVC_BASE	components\softdevice\s130\headers\ble_ranges.h	63;"	d
BLE_RESERVED_SVC_LAST	components\softdevice\s130\headers\ble_ranges.h	64;"	d
BLE_SVC_BASE	components\softdevice\s130\headers\ble_ranges.h	60;"	d
BLE_SVC_LAST	components\softdevice\s130\headers\ble_ranges.h	61;"	d
BLE_APPEARANCE_BLOOD_PRESSURE_ARM	components\softdevice\s130\headers\ble_types.h	117;"	d
BLE_APPEARANCE_BLOOD_PRESSURE_WRIST	components\softdevice\s130\headers\ble_types.h	118;"	d
BLE_APPEARANCE_CYCLING_CADENCE_SENSOR	components\softdevice\s130\headers\ble_types.h	136;"	d
BLE_APPEARANCE_CYCLING_CYCLING_COMPUTER	components\softdevice\s130\headers\ble_types.h	134;"	d
BLE_APPEARANCE_CYCLING_POWER_SENSOR	components\softdevice\s130\headers\ble_types.h	137;"	d
BLE_APPEARANCE_CYCLING_SPEED_CADENCE_SENSOR	components\softdevice\s130\headers\ble_types.h	138;"	d
BLE_APPEARANCE_CYCLING_SPEED_SENSOR	components\softdevice\s130\headers\ble_types.h	135;"	d
BLE_APPEARANCE_GENERIC_BARCODE_SCANNER	components\softdevice\s130\headers\ble_types.h	111;"	d
BLE_APPEARANCE_GENERIC_BLOOD_PRESSURE	components\softdevice\s130\headers\ble_types.h	116;"	d
BLE_APPEARANCE_GENERIC_CLOCK	components\softdevice\s130\headers\ble_types.h	104;"	d
BLE_APPEARANCE_GENERIC_COMPUTER	components\softdevice\s130\headers\ble_types.h	101;"	d
BLE_APPEARANCE_GENERIC_CYCLING	components\softdevice\s130\headers\ble_types.h	133;"	d
BLE_APPEARANCE_GENERIC_DISPLAY	components\softdevice\s130\headers\ble_types.h	105;"	d
BLE_APPEARANCE_GENERIC_EYE_GLASSES	components\softdevice\s130\headers\ble_types.h	107;"	d
BLE_APPEARANCE_GENERIC_GLUCOSE_METER	components\softdevice\s130\headers\ble_types.h	128;"	d
BLE_APPEARANCE_GENERIC_HEART_RATE_SENSOR	components\softdevice\s130\headers\ble_types.h	114;"	d
BLE_APPEARANCE_GENERIC_HID	components\softdevice\s130\headers\ble_types.h	119;"	d
BLE_APPEARANCE_GENERIC_KEYRING	components\softdevice\s130\headers\ble_types.h	109;"	d
BLE_APPEARANCE_GENERIC_MEDIA_PLAYER	components\softdevice\s130\headers\ble_types.h	110;"	d
BLE_APPEARANCE_GENERIC_OUTDOOR_SPORTS_ACT	components\softdevice\s130\headers\ble_types.h	143;"	d
BLE_APPEARANCE_GENERIC_PHONE	components\softdevice\s130\headers\ble_types.h	100;"	d
BLE_APPEARANCE_GENERIC_PULSE_OXIMETER	components\softdevice\s130\headers\ble_types.h	139;"	d
BLE_APPEARANCE_GENERIC_REMOTE_CONTROL	components\softdevice\s130\headers\ble_types.h	106;"	d
BLE_APPEARANCE_GENERIC_RUNNING_WALKING_SENSOR	components\softdevice\s130\headers\ble_types.h	129;"	d
BLE_APPEARANCE_GENERIC_TAG	components\softdevice\s130\headers\ble_types.h	108;"	d
BLE_APPEARANCE_GENERIC_THERMOMETER	components\softdevice\s130\headers\ble_types.h	112;"	d
BLE_APPEARANCE_GENERIC_WATCH	components\softdevice\s130\headers\ble_types.h	102;"	d
BLE_APPEARANCE_GENERIC_WEIGHT_SCALE	components\softdevice\s130\headers\ble_types.h	142;"	d
BLE_APPEARANCE_HEART_RATE_SENSOR_HEART_RATE_BELT	components\softdevice\s130\headers\ble_types.h	115;"	d
BLE_APPEARANCE_HID_BARCODE	components\softdevice\s130\headers\ble_types.h	127;"	d
BLE_APPEARANCE_HID_CARD_READER	components\softdevice\s130\headers\ble_types.h	125;"	d
BLE_APPEARANCE_HID_DIGITAL_PEN	components\softdevice\s130\headers\ble_types.h	126;"	d
BLE_APPEARANCE_HID_DIGITIZERSUBTYPE	components\softdevice\s130\headers\ble_types.h	124;"	d
BLE_APPEARANCE_HID_GAMEPAD	components\softdevice\s130\headers\ble_types.h	123;"	d
BLE_APPEARANCE_HID_JOYSTICK	components\softdevice\s130\headers\ble_types.h	122;"	d
BLE_APPEARANCE_HID_KEYBOARD	components\softdevice\s130\headers\ble_types.h	120;"	d
BLE_APPEARANCE_HID_MOUSE	components\softdevice\s130\headers\ble_types.h	121;"	d
BLE_APPEARANCE_OUTDOOR_SPORTS_ACT_LOC_AND_NAV_DISP	components\softdevice\s130\headers\ble_types.h	145;"	d
BLE_APPEARANCE_OUTDOOR_SPORTS_ACT_LOC_AND_NAV_POD	components\softdevice\s130\headers\ble_types.h	147;"	d
BLE_APPEARANCE_OUTDOOR_SPORTS_ACT_LOC_DISP	components\softdevice\s130\headers\ble_types.h	144;"	d
BLE_APPEARANCE_OUTDOOR_SPORTS_ACT_LOC_POD	components\softdevice\s130\headers\ble_types.h	146;"	d
BLE_APPEARANCE_PULSE_OXIMETER_FINGERTIP	components\softdevice\s130\headers\ble_types.h	140;"	d
BLE_APPEARANCE_PULSE_OXIMETER_WRIST_WORN	components\softdevice\s130\headers\ble_types.h	141;"	d
BLE_APPEARANCE_RUNNING_WALKING_SENSOR_IN_SHOE	components\softdevice\s130\headers\ble_types.h	130;"	d
BLE_APPEARANCE_RUNNING_WALKING_SENSOR_ON_HIP	components\softdevice\s130\headers\ble_types.h	132;"	d
BLE_APPEARANCE_RUNNING_WALKING_SENSOR_ON_SHOE	components\softdevice\s130\headers\ble_types.h	131;"	d
BLE_APPEARANCE_THERMOMETER_EAR	components\softdevice\s130\headers\ble_types.h	113;"	d
BLE_APPEARANCE_UNKNOWN	components\softdevice\s130\headers\ble_types.h	99;"	d
BLE_APPEARANCE_WATCH_SPORTS_WATCH	components\softdevice\s130\headers\ble_types.h	103;"	d
BLE_CONN_HANDLE_ALL	components\softdevice\s130\headers\ble_types.h	57;"	d
BLE_CONN_HANDLE_INVALID	components\softdevice\s130\headers\ble_types.h	56;"	d
BLE_TYPES_H__	components\softdevice\s130\headers\ble_types.h	47;"	d
BLE_UUID_BLE_ASSIGN	components\softdevice\s130\headers\ble_types.h	151;"	d
BLE_UUID_CHARACTERISTIC	components\softdevice\s130\headers\ble_types.h	68;"	d
BLE_UUID_COPY_INST	components\softdevice\s130\headers\ble_types.h	161;"	d
BLE_UUID_COPY_PTR	components\softdevice\s130\headers\ble_types.h	156;"	d
BLE_UUID_DESCRIPTOR_CHAR_AGGREGATE_FORMAT	components\softdevice\s130\headers\ble_types.h	74;"	d
BLE_UUID_DESCRIPTOR_CHAR_EXT_PROP	components\softdevice\s130\headers\ble_types.h	69;"	d
BLE_UUID_DESCRIPTOR_CHAR_PRESENTATION_FORMAT	components\softdevice\s130\headers\ble_types.h	73;"	d
BLE_UUID_DESCRIPTOR_CHAR_USER_DESC	components\softdevice\s130\headers\ble_types.h	70;"	d
BLE_UUID_DESCRIPTOR_CLIENT_CHAR_CONFIG	components\softdevice\s130\headers\ble_types.h	71;"	d
BLE_UUID_DESCRIPTOR_SERVER_CHAR_CONFIG	components\softdevice\s130\headers\ble_types.h	72;"	d
BLE_UUID_EQ	components\softdevice\s130\headers\ble_types.h	166;"	d
BLE_UUID_GAP	components\softdevice\s130\headers\ble_types.h	79;"	d
BLE_UUID_GAP_CHARACTERISTIC_APPEARANCE	components\softdevice\s130\headers\ble_types.h	81;"	d
BLE_UUID_GAP_CHARACTERISTIC_DEVICE_NAME	components\softdevice\s130\headers\ble_types.h	80;"	d
BLE_UUID_GAP_CHARACTERISTIC_PPCP	components\softdevice\s130\headers\ble_types.h	84;"	d
BLE_UUID_GAP_CHARACTERISTIC_PPF	components\softdevice\s130\headers\ble_types.h	82;"	d
BLE_UUID_GAP_CHARACTERISTIC_RECONN_ADDR	components\softdevice\s130\headers\ble_types.h	83;"	d
BLE_UUID_GATT	components\softdevice\s130\headers\ble_types.h	76;"	d
BLE_UUID_GATT_CHARACTERISTIC_SERVICE_CHANGED	components\softdevice\s130\headers\ble_types.h	77;"	d
BLE_UUID_NEQ	components\softdevice\s130\headers\ble_types.h	170;"	d
BLE_UUID_SERVICE_INCLUDE	components\softdevice\s130\headers\ble_types.h	67;"	d
BLE_UUID_SERVICE_PRIMARY	components\softdevice\s130\headers\ble_types.h	65;"	d
BLE_UUID_SERVICE_SECONDARY	components\softdevice\s130\headers\ble_types.h	66;"	d
BLE_UUID_TYPE_BLE	components\softdevice\s130\headers\ble_types.h	91;"	d
BLE_UUID_TYPE_UNKNOWN	components\softdevice\s130\headers\ble_types.h	90;"	d
BLE_UUID_TYPE_VENDOR_BEGIN	components\softdevice\s130\headers\ble_types.h	92;"	d
BLE_UUID_UNKNOWN	components\softdevice\s130\headers\ble_types.h	64;"	d
ble_uuid128_t	components\softdevice\s130\headers\ble_types.h	/^} ble_uuid128_t;$/;"	t	typeref:struct:__anon803
ble_uuid_t	components\softdevice\s130\headers\ble_types.h	/^} ble_uuid_t;$/;"	t	typeref:struct:__anon804
type	components\softdevice\s130\headers\ble_types.h	/^    uint8_t     type; \/**< UUID type, see @ref BLE_UUID_TYPES. If type is BLE_UUID_TYPE_UNKNOWN, the value of uuid is undefined. *\/$/;"	m	struct:__anon804
uuid	components\softdevice\s130\headers\ble_types.h	/^    uint16_t    uuid; \/**< 16-bit UUID value or octets 12-13 of 128-bit UUID. *\/$/;"	m	struct:__anon804
uuid128	components\softdevice\s130\headers\ble_types.h	/^    unsigned char uuid128[16]; \/**< Little-Endian UUID bytes. *\/$/;"	m	struct:__anon803
NRF_ERROR_BASE_NUM	components\softdevice\s130\headers\nrf_error.h	49;"	d
NRF_ERROR_BUSY	components\softdevice\s130\headers\nrf_error.h	72;"	d
NRF_ERROR_DATA_SIZE	components\softdevice\s130\headers\nrf_error.h	67;"	d
NRF_ERROR_FORBIDDEN	components\softdevice\s130\headers\nrf_error.h	70;"	d
NRF_ERROR_H__	components\softdevice\s130\headers\nrf_error.h	45;"	d
NRF_ERROR_INTERNAL	components\softdevice\s130\headers\nrf_error.h	58;"	d
NRF_ERROR_INVALID_ADDR	components\softdevice\s130\headers\nrf_error.h	71;"	d
NRF_ERROR_INVALID_DATA	components\softdevice\s130\headers\nrf_error.h	66;"	d
NRF_ERROR_INVALID_FLAGS	components\softdevice\s130\headers\nrf_error.h	65;"	d
NRF_ERROR_INVALID_LENGTH	components\softdevice\s130\headers\nrf_error.h	64;"	d
NRF_ERROR_INVALID_PARAM	components\softdevice\s130\headers\nrf_error.h	62;"	d
NRF_ERROR_INVALID_STATE	components\softdevice\s130\headers\nrf_error.h	63;"	d
NRF_ERROR_NOT_FOUND	components\softdevice\s130\headers\nrf_error.h	60;"	d
NRF_ERROR_NOT_SUPPORTED	components\softdevice\s130\headers\nrf_error.h	61;"	d
NRF_ERROR_NO_MEM	components\softdevice\s130\headers\nrf_error.h	59;"	d
NRF_ERROR_NULL	components\softdevice\s130\headers\nrf_error.h	69;"	d
NRF_ERROR_SDM_BASE_NUM	components\softdevice\s130\headers\nrf_error.h	50;"	d
NRF_ERROR_SOC_BASE_NUM	components\softdevice\s130\headers\nrf_error.h	51;"	d
NRF_ERROR_SOFTDEVICE_NOT_ENABLED	components\softdevice\s130\headers\nrf_error.h	57;"	d
NRF_ERROR_STK_BASE_NUM	components\softdevice\s130\headers\nrf_error.h	52;"	d
NRF_ERROR_SVC_HANDLER_MISSING	components\softdevice\s130\headers\nrf_error.h	56;"	d
NRF_ERROR_TIMEOUT	components\softdevice\s130\headers\nrf_error.h	68;"	d
NRF_SUCCESS	components\softdevice\s130\headers\nrf_error.h	55;"	d
NRF_ERROR_SDM_H__	components\softdevice\s130\headers\nrf_error_sdm.h	47;"	d
NRF_ERROR_SDM_INCORRECT_CLENR0	components\softdevice\s130\headers\nrf_error_sdm.h	53;"	d
NRF_ERROR_SDM_INCORRECT_INTERRUPT_CONFIGURATION	components\softdevice\s130\headers\nrf_error_sdm.h	52;"	d
NRF_ERROR_SDM_LFCLK_SOURCE_UNKNOWN	components\softdevice\s130\headers\nrf_error_sdm.h	51;"	d
NRF_ERROR_SOC_H__	components\softdevice\s130\headers\nrf_error_soc.h	48;"	d
NRF_ERROR_SOC_MUTEX_ALREADY_TAKEN	components\softdevice\s130\headers\nrf_error_soc.h	53;"	d
NRF_ERROR_SOC_NVIC_INTERRUPT_NOT_AVAILABLE	components\softdevice\s130\headers\nrf_error_soc.h	56;"	d
NRF_ERROR_SOC_NVIC_INTERRUPT_PRIORITY_NOT_ALLOWED	components\softdevice\s130\headers\nrf_error_soc.h	57;"	d
NRF_ERROR_SOC_NVIC_SHOULD_NOT_RETURN	components\softdevice\s130\headers\nrf_error_soc.h	58;"	d
NRF_ERROR_SOC_POWER_MODE_UNKNOWN	components\softdevice\s130\headers\nrf_error_soc.h	61;"	d
NRF_ERROR_SOC_POWER_OFF_SHOULD_NOT_RETURN	components\softdevice\s130\headers\nrf_error_soc.h	63;"	d
NRF_ERROR_SOC_POWER_POF_THRESHOLD_UNKNOWN	components\softdevice\s130\headers\nrf_error_soc.h	62;"	d
NRF_ERROR_SOC_PPI_INVALID_CHANNEL	components\softdevice\s130\headers\nrf_error_soc.h	69;"	d
NRF_ERROR_SOC_PPI_INVALID_GROUP	components\softdevice\s130\headers\nrf_error_soc.h	70;"	d
NRF_ERROR_SOC_RAND_NOT_ENOUGH_VALUES	components\softdevice\s130\headers\nrf_error_soc.h	66;"	d
MBR_SVC_BASE	components\softdevice\s130\headers\nrf_mbr.h	56;"	d
NRF_MBR_COMMANDS	components\softdevice\s130\headers\nrf_mbr.h	/^enum NRF_MBR_COMMANDS$/;"	g
NRF_MBR_H__	components\softdevice\s130\headers\nrf_mbr.h	46;"	d
NRF_MBR_SVCS	components\softdevice\s130\headers\nrf_mbr.h	/^enum NRF_MBR_SVCS$/;"	g
SD_MBR_COMMAND	components\softdevice\s130\headers\nrf_mbr.h	/^  SD_MBR_COMMAND = MBR_SVC_BASE, \/**< ::sd_mbr_command *\/$/;"	e	enum:NRF_MBR_SVCS
SD_MBR_COMMAND_COMPARE	components\softdevice\s130\headers\nrf_mbr.h	/^  SD_MBR_COMMAND_COMPARE,               \/**< This command works like memcmp. @see ::sd_mbr_command_compare_t*\/$/;"	e	enum:NRF_MBR_COMMANDS
SD_MBR_COMMAND_COPY_BL	components\softdevice\s130\headers\nrf_mbr.h	/^  SD_MBR_COMMAND_COPY_BL,               \/**< Copy a new a new BootLoader. @see sd_mbr_command_copy_bl_t *\/$/;"	e	enum:NRF_MBR_COMMANDS
SD_MBR_COMMAND_COPY_SD	components\softdevice\s130\headers\nrf_mbr.h	/^  SD_MBR_COMMAND_COPY_SD,               \/**< Copy a new SoftDevice. @see ::sd_mbr_command_copy_sd_t*\/$/;"	e	enum:NRF_MBR_COMMANDS
SD_MBR_COMMAND_INIT_SD	components\softdevice\s130\headers\nrf_mbr.h	/^  SD_MBR_COMMAND_INIT_SD,               \/**< Init forwarding interrupts to SD, and run reset function in SD*\/$/;"	e	enum:NRF_MBR_COMMANDS
SD_MBR_COMMAND_VECTOR_TABLE_BASE_SET	components\softdevice\s130\headers\nrf_mbr.h	/^  SD_MBR_COMMAND_VECTOR_TABLE_BASE_SET, \/**< Start forwarding all exception to this address @see ::sd_mbr_command_vector_table_base_set_t*\/$/;"	e	enum:NRF_MBR_COMMANDS
address	components\softdevice\s130\headers\nrf_mbr.h	/^  uint32_t address; \/**< The base address of the interrupt vector table for forwarded interrupts.*\/$/;"	m	struct:__anon808
base_set	components\softdevice\s130\headers\nrf_mbr.h	/^    sd_mbr_command_vector_table_base_set_t base_set; \/**< Parameters for vector table base set.*\/$/;"	m	union:__anon809::__anon810
bl_len	components\softdevice\s130\headers\nrf_mbr.h	/^  uint32_t bl_len;   \/**< Number of 32 bit words to copy for BootLoader *\/$/;"	m	struct:__anon807
bl_src	components\softdevice\s130\headers\nrf_mbr.h	/^  uint32_t *bl_src;  \/**< Pointer to the source of the Bootloader to be be copied.*\/$/;"	m	struct:__anon807
command	components\softdevice\s130\headers\nrf_mbr.h	/^  uint32_t command;  \/**< type of command to be issued see @ref NRF_MBR_COMMANDS. *\/$/;"	m	struct:__anon809
compare	components\softdevice\s130\headers\nrf_mbr.h	/^    sd_mbr_command_compare_t compare;  \/**< Parameters for verify*\/$/;"	m	union:__anon809::__anon810
copy_bl	components\softdevice\s130\headers\nrf_mbr.h	/^    sd_mbr_command_copy_bl_t copy_bl;  \/**< Parameters for copy SoftDevice and BootLoader*\/$/;"	m	union:__anon809::__anon810
copy_sd	components\softdevice\s130\headers\nrf_mbr.h	/^    sd_mbr_command_copy_sd_t copy_sd;  \/**< Parameters for copy*\/$/;"	m	union:__anon809::__anon810
dst	components\softdevice\s130\headers\nrf_mbr.h	/^  uint32_t *dst;  \/**< Pointer to the destination where the content is to be copied.*\/$/;"	m	struct:__anon805
len	components\softdevice\s130\headers\nrf_mbr.h	/^  uint32_t len;   \/**< Number of 32 bit words to compare*\/$/;"	m	struct:__anon806
len	components\softdevice\s130\headers\nrf_mbr.h	/^  uint32_t len;   \/**< Number of 32 bit words to copy. Must be a multiple of 256 words*\/$/;"	m	struct:__anon805
params	components\softdevice\s130\headers\nrf_mbr.h	/^  } params;$/;"	m	struct:__anon809	typeref:union:__anon809::__anon810
ptr1	components\softdevice\s130\headers\nrf_mbr.h	/^  uint32_t *ptr1; \/**< Pointer to block of memory *\/$/;"	m	struct:__anon806
ptr2	components\softdevice\s130\headers\nrf_mbr.h	/^  uint32_t *ptr2; \/**< Pointer to block of memory *\/$/;"	m	struct:__anon806
sd_mbr_command_compare_t	components\softdevice\s130\headers\nrf_mbr.h	/^}sd_mbr_command_compare_t;$/;"	t	typeref:struct:__anon806
sd_mbr_command_copy_bl_t	components\softdevice\s130\headers\nrf_mbr.h	/^}sd_mbr_command_copy_bl_t;$/;"	t	typeref:struct:__anon807
sd_mbr_command_copy_sd_t	components\softdevice\s130\headers\nrf_mbr.h	/^}sd_mbr_command_copy_sd_t;$/;"	t	typeref:struct:__anon805
sd_mbr_command_t	components\softdevice\s130\headers\nrf_mbr.h	/^}sd_mbr_command_t;$/;"	t	typeref:struct:__anon809
sd_mbr_command_vector_table_base_set_t	components\softdevice\s130\headers\nrf_mbr.h	/^}sd_mbr_command_vector_table_base_set_t;$/;"	t	typeref:struct:__anon808
src	components\softdevice\s130\headers\nrf_mbr.h	/^  uint32_t *src;  \/**< Pointer to the source of data to be copied.*\/$/;"	m	struct:__anon805
NRF_PPI_ALL_APP_CHANNELS_MASK	components\softdevice\s130\headers\nrf_sd_def.h	19;"	d
NRF_PPI_ALL_APP_GROUPS_MASK	components\softdevice\s130\headers\nrf_sd_def.h	21;"	d
NRF_PPI_PROG_APP_CHANNELS_MASK	components\softdevice\s130\headers\nrf_sd_def.h	20;"	d
NRF_PPI_RESTRICTED	components\softdevice\s130\headers\nrf_sd_def.h	18;"	d
NRF_SD_DEF_H__	components\softdevice\s130\headers\nrf_sd_def.h	14;"	d
MBR_SIZE	components\softdevice\s130\headers\nrf_sdm.h	67;"	d
NRF_CLOCK_LFCLKSRCS	components\softdevice\s130\headers\nrf_sdm.h	/^enum NRF_CLOCK_LFCLKSRCS$/;"	g
NRF_CLOCK_LFCLKSRC_RC_250_PPM_1000MS_CALIBRATION	components\softdevice\s130\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_RC_250_PPM_1000MS_CALIBRATION,       \/**< LFCLK RC oscillator, 1000ms calibration interval.*\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_RC_250_PPM_2000MS_CALIBRATION	components\softdevice\s130\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_RC_250_PPM_2000MS_CALIBRATION,       \/**< LFCLK RC oscillator, 2000ms calibration interval.*\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_RC_250_PPM_250MS_CALIBRATION	components\softdevice\s130\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_RC_250_PPM_250MS_CALIBRATION,        \/**< LFCLK RC oscillator, 250ms  calibration interval.*\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_RC_250_PPM_4000MS_CALIBRATION	components\softdevice\s130\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_RC_250_PPM_4000MS_CALIBRATION,       \/**< LFCLK RC oscillator, 4000ms calibration interval.*\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_RC_250_PPM_500MS_CALIBRATION	components\softdevice\s130\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_RC_250_PPM_500MS_CALIBRATION,        \/**< LFCLK RC oscillator, 500ms  calibration interval.*\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_RC_250_PPM_8000MS_CALIBRATION	components\softdevice\s130\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_RC_250_PPM_8000MS_CALIBRATION,       \/**< LFCLK RC oscillator, 8000ms calibration interval.*\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_1000MS_CALIBRATION	components\softdevice\s130\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_1000MS_CALIBRATION,  \/**< LFCLK RC oscillator. Temperature checked every 1000ms, if changed above a threshold, a calibration is done.*\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_16000MS_CALIBRATION	components\softdevice\s130\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_16000MS_CALIBRATION, \/**< LFCLK RC oscillator. Temperature checked every 16000ms, if changed above a threshold, a calibration is done.*\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_2000MS_CALIBRATION	components\softdevice\s130\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_2000MS_CALIBRATION,  \/**< LFCLK RC oscillator. Temperature checked every 2000ms, if changed above a threshold, a calibration is done.*\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_4000MS_CALIBRATION	components\softdevice\s130\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_4000MS_CALIBRATION,  \/**< LFCLK RC oscillator. Temperature checked every 4000ms, if changed above a threshold, a calibration is done.*\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_8000MS_CALIBRATION	components\softdevice\s130\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_8000MS_CALIBRATION,  \/**< LFCLK RC oscillator. Temperature checked every 8000ms, if changed above a threshold, a calibration is done.*\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_SYNTH_250_PPM	components\softdevice\s130\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_SYNTH_250_PPM,                       \/**< LFCLK Synthesized from HFCLK.                    *\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_XTAL_100_PPM	components\softdevice\s130\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_XTAL_100_PPM,                        \/**< LFCLK crystal oscillator 100 PPM accuracy.       *\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_XTAL_150_PPM	components\softdevice\s130\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_XTAL_150_PPM,                        \/**< LFCLK crystal oscillator 150 PPM accuracy.       *\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_XTAL_20_PPM	components\softdevice\s130\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_XTAL_20_PPM,                         \/**< LFCLK crystal oscillator 20 PPM accuracy.        *\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_XTAL_250_PPM	components\softdevice\s130\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_XTAL_250_PPM,                        \/**< LFCLK crystal oscillator 250 PPM accuracy.       *\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_XTAL_30_PPM	components\softdevice\s130\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_XTAL_30_PPM,                         \/**< LFCLK crystal oscillator 30 PPM accuracy.        *\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_XTAL_500_PPM	components\softdevice\s130\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_XTAL_500_PPM,                        \/**< LFCLK crystal oscillator 500 PPM accuracy.       *\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_XTAL_50_PPM	components\softdevice\s130\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_XTAL_50_PPM,                         \/**< LFCLK crystal oscillator 50 PPM accuracy.        *\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_XTAL_75_PPM	components\softdevice\s130\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_XTAL_75_PPM,                         \/**< LFCLK crystal oscillator 75 PPM accuracy.        *\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_SDM_H__	components\softdevice\s130\headers\nrf_sdm.h	46;"	d
NRF_SD_SVCS	components\softdevice\s130\headers\nrf_sdm.h	/^enum NRF_SD_SVCS$/;"	g
SDM_SVC_BASE	components\softdevice\s130\headers\nrf_sdm.h	57;"	d
SD_FWID_GET	components\softdevice\s130\headers\nrf_sdm.h	84;"	d
SD_FWID_OFFSET	components\softdevice\s130\headers\nrf_sdm.h	76;"	d
SD_SIZE_GET	components\softdevice\s130\headers\nrf_sdm.h	80;"	d
SD_SIZE_OFFSET	components\softdevice\s130\headers\nrf_sdm.h	73;"	d
SD_SOFTDEVICE_DISABLE	components\softdevice\s130\headers\nrf_sdm.h	/^  SD_SOFTDEVICE_DISABLE,               \/**< ::sd_softdevice_disable *\/$/;"	e	enum:NRF_SD_SVCS
SD_SOFTDEVICE_ENABLE	components\softdevice\s130\headers\nrf_sdm.h	/^  SD_SOFTDEVICE_ENABLE = SDM_SVC_BASE, \/**< ::sd_softdevice_enable *\/$/;"	e	enum:NRF_SD_SVCS
SD_SOFTDEVICE_IS_ENABLED	components\softdevice\s130\headers\nrf_sdm.h	/^  SD_SOFTDEVICE_IS_ENABLED,            \/**< ::sd_softdevice_is_enabled *\/$/;"	e	enum:NRF_SD_SVCS
SD_SOFTDEVICE_VECTOR_TABLE_BASE_SET	components\softdevice\s130\headers\nrf_sdm.h	/^  SD_SOFTDEVICE_VECTOR_TABLE_BASE_SET, \/**< ::sd_softdevice_vector_table_base_set *\/$/;"	e	enum:NRF_SD_SVCS
SOFTDEVICE_INFO_STRUCT_ADDRESS	components\softdevice\s130\headers\nrf_sdm.h	70;"	d
SOFTDEVICE_INFO_STRUCT_OFFSET	components\softdevice\s130\headers\nrf_sdm.h	63;"	d
SVC_SDM_LAST	components\softdevice\s130\headers\nrf_sdm.h	/^  SVC_SDM_LAST                         \/**< Placeholder for last SDM SVC *\/$/;"	e	enum:NRF_SD_SVCS
nrf_clock_lfclksrc_t	components\softdevice\s130\headers\nrf_sdm.h	/^typedef uint32_t nrf_clock_lfclksrc_t;$/;"	t
softdevice_assertion_handler_t	components\softdevice\s130\headers\nrf_sdm.h	/^typedef void (*softdevice_assertion_handler_t)(uint32_t pc, uint16_t line_number, const uint8_t * p_file_name);$/;"	t
NRF_APP_PRIORITIES	components\softdevice\s130\headers\nrf_soc.h	/^enum NRF_APP_PRIORITIES$/;"	g
NRF_APP_PRIORITY_HIGH	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_APP_PRIORITY_HIGH = 1,$/;"	e	enum:NRF_APP_PRIORITIES
NRF_APP_PRIORITY_LOW	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_APP_PRIORITY_LOW = 3$/;"	e	enum:NRF_APP_PRIORITIES
NRF_EVT_FLASH_OPERATION_ERROR	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_EVT_FLASH_OPERATION_ERROR,                \/**< Event indicating that the ongoing flash operation has timed out with an error. *\/$/;"	e	enum:NRF_SOC_EVTS
NRF_EVT_FLASH_OPERATION_SUCCESS	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_EVT_FLASH_OPERATION_SUCCESS,              \/**< Event indicating that the ongoing flash operation has completed successfully. *\/$/;"	e	enum:NRF_SOC_EVTS
NRF_EVT_HFCLKSTARTED	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_EVT_HFCLKSTARTED,                         \/**< Event indicating that the HFCLK has started. *\/$/;"	e	enum:NRF_SOC_EVTS
NRF_EVT_NUMBER_OF_EVTS	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_EVT_NUMBER_OF_EVTS$/;"	e	enum:NRF_SOC_EVTS
NRF_EVT_POWER_FAILURE_WARNING	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_EVT_POWER_FAILURE_WARNING,                \/**< Event indicating that a power failure warning has occurred. *\/$/;"	e	enum:NRF_SOC_EVTS
NRF_EVT_RADIO_BLOCKED	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_EVT_RADIO_BLOCKED,                        \/**< Event indicating that a radio timeslot was blocked. *\/$/;"	e	enum:NRF_SOC_EVTS
NRF_EVT_RADIO_CANCELED	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_EVT_RADIO_CANCELED,                       \/**< Event indicating that a radio timeslot was canceled by SoftDevice. *\/$/;"	e	enum:NRF_SOC_EVTS
NRF_EVT_RADIO_SESSION_CLOSED	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_EVT_RADIO_SESSION_CLOSED,                 \/**< Event indicating that a radio session is closed. *\/$/;"	e	enum:NRF_SOC_EVTS
NRF_EVT_RADIO_SESSION_IDLE	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_EVT_RADIO_SESSION_IDLE,                   \/**< Event indicating that a radio session is idle. *\/$/;"	e	enum:NRF_SOC_EVTS
NRF_EVT_RADIO_SIGNAL_CALLBACK_INVALID_RETURN	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_EVT_RADIO_SIGNAL_CALLBACK_INVALID_RETURN, \/**< Event indicating that a radio signal callback handler return was invalid. *\/$/;"	e	enum:NRF_SOC_EVTS
NRF_MUTEX_FREE	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_MUTEX_FREE,$/;"	e	enum:NRF_MUTEX_VALUES
NRF_MUTEX_TAKEN	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_MUTEX_TAKEN$/;"	e	enum:NRF_MUTEX_VALUES
NRF_MUTEX_VALUES	components\softdevice\s130\headers\nrf_soc.h	/^enum NRF_MUTEX_VALUES$/;"	g
NRF_POWER_DCDC_DISABLE	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_POWER_DCDC_DISABLE,          \/**< The DCDC is disabled. *\/$/;"	e	enum:NRF_POWER_DCDC_MODES
NRF_POWER_DCDC_ENABLE	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_POWER_DCDC_ENABLE            \/**< The DCDC is enabled.  *\/$/;"	e	enum:NRF_POWER_DCDC_MODES
NRF_POWER_DCDC_MODES	components\softdevice\s130\headers\nrf_soc.h	/^enum NRF_POWER_DCDC_MODES$/;"	g
NRF_POWER_MODES	components\softdevice\s130\headers\nrf_soc.h	/^enum NRF_POWER_MODES$/;"	g
NRF_POWER_MODE_CONSTLAT	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_POWER_MODE_CONSTLAT,  \/**< Constant latency mode. See power management in the reference manual. *\/$/;"	e	enum:NRF_POWER_MODES
NRF_POWER_MODE_LOWPWR	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_POWER_MODE_LOWPWR     \/**< Low power mode. See power management in the reference manual. *\/$/;"	e	enum:NRF_POWER_MODES
NRF_POWER_THRESHOLDS	components\softdevice\s130\headers\nrf_soc.h	/^enum NRF_POWER_THRESHOLDS$/;"	g
NRF_POWER_THRESHOLD_V21	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_POWER_THRESHOLD_V21,  \/**< 2.1 Volts power failure threshold. *\/$/;"	e	enum:NRF_POWER_THRESHOLDS
NRF_POWER_THRESHOLD_V23	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_POWER_THRESHOLD_V23,  \/**< 2.3 Volts power failure threshold. *\/$/;"	e	enum:NRF_POWER_THRESHOLDS
NRF_POWER_THRESHOLD_V25	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_POWER_THRESHOLD_V25,  \/**< 2.5 Volts power failure threshold. *\/ $/;"	e	enum:NRF_POWER_THRESHOLDS
NRF_POWER_THRESHOLD_V27	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_POWER_THRESHOLD_V27   \/**< 2.7 Volts power failure threshold. *\/$/;"	e	enum:NRF_POWER_THRESHOLDS
NRF_RADIO_CALLBACK_SIGNAL_TYPE	components\softdevice\s130\headers\nrf_soc.h	/^enum NRF_RADIO_CALLBACK_SIGNAL_TYPE$/;"	g
NRF_RADIO_CALLBACK_SIGNAL_TYPE_EXTEND_FAILED	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_RADIO_CALLBACK_SIGNAL_TYPE_EXTEND_FAILED,     \/**< This signal indicates extend action failed. *\/$/;"	e	enum:NRF_RADIO_CALLBACK_SIGNAL_TYPE
NRF_RADIO_CALLBACK_SIGNAL_TYPE_EXTEND_SUCCEEDED	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_RADIO_CALLBACK_SIGNAL_TYPE_EXTEND_SUCCEEDED   \/**< This signal indicates extend action succeeded. *\/$/;"	e	enum:NRF_RADIO_CALLBACK_SIGNAL_TYPE
NRF_RADIO_CALLBACK_SIGNAL_TYPE_RADIO	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_RADIO_CALLBACK_SIGNAL_TYPE_RADIO,             \/**< This signal indicates the NRF_RADIO interrupt. *\/$/;"	e	enum:NRF_RADIO_CALLBACK_SIGNAL_TYPE
NRF_RADIO_CALLBACK_SIGNAL_TYPE_START	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_RADIO_CALLBACK_SIGNAL_TYPE_START,             \/**< This signal indicates the start of the radio timeslot. *\/$/;"	e	enum:NRF_RADIO_CALLBACK_SIGNAL_TYPE
NRF_RADIO_CALLBACK_SIGNAL_TYPE_TIMER0	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_RADIO_CALLBACK_SIGNAL_TYPE_TIMER0,            \/**< This signal indicates the NRF_TIMER0 interrupt. *\/$/;"	e	enum:NRF_RADIO_CALLBACK_SIGNAL_TYPE
NRF_RADIO_DISTANCE_MAX_US	components\softdevice\s130\headers\nrf_soc.h	79;"	d
NRF_RADIO_EARLIEST_TIMEOUT_MAX_US	components\softdevice\s130\headers\nrf_soc.h	81;"	d
NRF_RADIO_HFCLK_CFG	components\softdevice\s130\headers\nrf_soc.h	/^enum NRF_RADIO_HFCLK_CFG$/;"	g
NRF_RADIO_HFCLK_CFG_DEFAULT	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_RADIO_HFCLK_CFG_DEFAULT,                      \/**< Use the currently selected oscillator as HF clock source during the timeslot (i.e. the source is not specified). *\/$/;"	e	enum:NRF_RADIO_HFCLK_CFG
NRF_RADIO_HFCLK_CFG_FORCE_XTAL	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_RADIO_HFCLK_CFG_FORCE_XTAL,                   \/**< Force external crystal to be used as HF clock source during whole the timeslot. *\/$/;"	e	enum:NRF_RADIO_HFCLK_CFG
NRF_RADIO_LENGTH_MAX_US	components\softdevice\s130\headers\nrf_soc.h	77;"	d
NRF_RADIO_LENGTH_MIN_US	components\softdevice\s130\headers\nrf_soc.h	76;"	d
NRF_RADIO_MINIMUM_TIMESLOT_LENGTH_EXTENSION_TIME_US	components\softdevice\s130\headers\nrf_soc.h	65;"	d
NRF_RADIO_NOTIFICATION_DISTANCES	components\softdevice\s130\headers\nrf_soc.h	/^enum NRF_RADIO_NOTIFICATION_DISTANCES$/;"	g
NRF_RADIO_NOTIFICATION_DISTANCE_1740US	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_RADIO_NOTIFICATION_DISTANCE_1740US,   \/**< The distance from the active notification to start of radio activity. *\/$/;"	e	enum:NRF_RADIO_NOTIFICATION_DISTANCES
NRF_RADIO_NOTIFICATION_DISTANCE_2680US	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_RADIO_NOTIFICATION_DISTANCE_2680US,   \/**< The distance from the active notification to start of radio activity. *\/$/;"	e	enum:NRF_RADIO_NOTIFICATION_DISTANCES
NRF_RADIO_NOTIFICATION_DISTANCE_3620US	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_RADIO_NOTIFICATION_DISTANCE_3620US,   \/**< The distance from the active notification to start of radio activity. *\/$/;"	e	enum:NRF_RADIO_NOTIFICATION_DISTANCES
NRF_RADIO_NOTIFICATION_DISTANCE_4560US	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_RADIO_NOTIFICATION_DISTANCE_4560US,   \/**< The distance from the active notification to start of radio activity. *\/$/;"	e	enum:NRF_RADIO_NOTIFICATION_DISTANCES
NRF_RADIO_NOTIFICATION_DISTANCE_5500US	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_RADIO_NOTIFICATION_DISTANCE_5500US    \/**< The distance from the active notification to start of radio activity. *\/$/;"	e	enum:NRF_RADIO_NOTIFICATION_DISTANCES
NRF_RADIO_NOTIFICATION_DISTANCE_800US	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_RADIO_NOTIFICATION_DISTANCE_800US,    \/**< The distance from the active notification to start of radio activity. *\/$/;"	e	enum:NRF_RADIO_NOTIFICATION_DISTANCES
NRF_RADIO_NOTIFICATION_DISTANCE_NONE	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_RADIO_NOTIFICATION_DISTANCE_NONE = 0, \/**< The event does not have a notification. *\/$/;"	e	enum:NRF_RADIO_NOTIFICATION_DISTANCES
NRF_RADIO_NOTIFICATION_INACTIVE_GUARANTEED_TIME_US	components\softdevice\s130\headers\nrf_soc.h	62;"	d
NRF_RADIO_NOTIFICATION_TYPES	components\softdevice\s130\headers\nrf_soc.h	/^enum NRF_RADIO_NOTIFICATION_TYPES$/;"	g
NRF_RADIO_NOTIFICATION_TYPE_INT_ON_ACTIVE	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_RADIO_NOTIFICATION_TYPE_INT_ON_ACTIVE,   \/**< Using interrupt for notification when the radio will be enabled. *\/$/;"	e	enum:NRF_RADIO_NOTIFICATION_TYPES
NRF_RADIO_NOTIFICATION_TYPE_INT_ON_BOTH	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_RADIO_NOTIFICATION_TYPE_INT_ON_BOTH,     \/**< Using interrupt for notification both when the radio will be enabled and disabled. *\/$/;"	e	enum:NRF_RADIO_NOTIFICATION_TYPES
NRF_RADIO_NOTIFICATION_TYPE_INT_ON_INACTIVE	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_RADIO_NOTIFICATION_TYPE_INT_ON_INACTIVE, \/**< Using interrupt for notification when the radio has been disabled. *\/$/;"	e	enum:NRF_RADIO_NOTIFICATION_TYPES
NRF_RADIO_NOTIFICATION_TYPE_NONE	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_RADIO_NOTIFICATION_TYPE_NONE = 0,        \/**< The event does not have a radio notification signal. *\/$/;"	e	enum:NRF_RADIO_NOTIFICATION_TYPES
NRF_RADIO_PRIORITY	components\softdevice\s130\headers\nrf_soc.h	/^enum NRF_RADIO_PRIORITY$/;"	g
NRF_RADIO_PRIORITY_HIGH	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_RADIO_PRIORITY_HIGH,                          \/**< High (equal priority as the normal connection priority of the SoftDevice stack(s)). *\/$/;"	e	enum:NRF_RADIO_PRIORITY
NRF_RADIO_PRIORITY_NORMAL	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_RADIO_PRIORITY_NORMAL,                        \/**< Normal (equal priority as the priority of secondary activites of the SoftDevice stack(s)). *\/$/;"	e	enum:NRF_RADIO_PRIORITY
NRF_RADIO_REQUEST_TYPE	components\softdevice\s130\headers\nrf_soc.h	/^enum NRF_RADIO_REQUEST_TYPE$/;"	g
NRF_RADIO_REQ_TYPE_EARLIEST	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_RADIO_REQ_TYPE_EARLIEST,                      \/**< Request timeslot as early as possible. This should always be used for the first request in a session. *\/$/;"	e	enum:NRF_RADIO_REQUEST_TYPE
NRF_RADIO_REQ_TYPE_NORMAL	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_RADIO_REQ_TYPE_NORMAL                         \/**< Normal timeslot request. *\/$/;"	e	enum:NRF_RADIO_REQUEST_TYPE
NRF_RADIO_SIGNAL_CALLBACK_ACTION	components\softdevice\s130\headers\nrf_soc.h	/^enum NRF_RADIO_SIGNAL_CALLBACK_ACTION$/;"	g
NRF_RADIO_SIGNAL_CALLBACK_ACTION_END	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_RADIO_SIGNAL_CALLBACK_ACTION_END,             \/**< End the current radio timeslot. *\/$/;"	e	enum:NRF_RADIO_SIGNAL_CALLBACK_ACTION
NRF_RADIO_SIGNAL_CALLBACK_ACTION_EXTEND	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_RADIO_SIGNAL_CALLBACK_ACTION_EXTEND,          \/**< Request an extension of the current timeslot (maximum execution time for this action is when the extension succeeded). *\/$/;"	e	enum:NRF_RADIO_SIGNAL_CALLBACK_ACTION
NRF_RADIO_SIGNAL_CALLBACK_ACTION_NONE	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_RADIO_SIGNAL_CALLBACK_ACTION_NONE,            \/**< Return without action. *\/$/;"	e	enum:NRF_RADIO_SIGNAL_CALLBACK_ACTION
NRF_RADIO_SIGNAL_CALLBACK_ACTION_REQUEST_AND_END	components\softdevice\s130\headers\nrf_soc.h	/^  NRF_RADIO_SIGNAL_CALLBACK_ACTION_REQUEST_AND_END  \/**< Request a new radio timeslot and end the current timeslot. *\/$/;"	e	enum:NRF_RADIO_SIGNAL_CALLBACK_ACTION
NRF_RADIO_START_JITTER_US	components\softdevice\s130\headers\nrf_soc.h	83;"	d
NRF_SOC_EVTS	components\softdevice\s130\headers\nrf_soc.h	/^enum NRF_SOC_EVTS$/;"	g
NRF_SOC_H__	components\softdevice\s130\headers\nrf_soc.h	45;"	d
NRF_SOC_SVCS	components\softdevice\s130\headers\nrf_soc.h	/^enum NRF_SOC_SVCS$/;"	g
RADIO_NOTIFICATION_IRQHandler	components\softdevice\s130\headers\nrf_soc.h	74;"	d
RADIO_NOTIFICATION_IRQn	components\softdevice\s130\headers\nrf_soc.h	73;"	d
SD_APP_EVT_WAIT	components\softdevice\s130\headers\nrf_soc.h	/^  SD_APP_EVT_WAIT,$/;"	e	enum:NRF_SOC_SVCS
SD_CLOCK_HFCLK_IS_RUNNING	components\softdevice\s130\headers\nrf_soc.h	/^  SD_CLOCK_HFCLK_IS_RUNNING,$/;"	e	enum:NRF_SOC_SVCS
SD_CLOCK_HFCLK_RELEASE	components\softdevice\s130\headers\nrf_soc.h	/^  SD_CLOCK_HFCLK_RELEASE,$/;"	e	enum:NRF_SOC_SVCS
SD_CLOCK_HFCLK_REQUEST	components\softdevice\s130\headers\nrf_soc.h	/^  SD_CLOCK_HFCLK_REQUEST,$/;"	e	enum:NRF_SOC_SVCS
SD_ECB_BLOCK_ENCRYPT	components\softdevice\s130\headers\nrf_soc.h	/^  SD_ECB_BLOCK_ENCRYPT,$/;"	e	enum:NRF_SOC_SVCS
SD_EVT_GET	components\softdevice\s130\headers\nrf_soc.h	/^  SD_EVT_GET,$/;"	e	enum:NRF_SOC_SVCS
SD_EVT_IRQHandler	components\softdevice\s130\headers\nrf_soc.h	72;"	d
SD_EVT_IRQn	components\softdevice\s130\headers\nrf_soc.h	71;"	d
SD_FLASH_PAGE_ERASE	components\softdevice\s130\headers\nrf_soc.h	/^  SD_FLASH_PAGE_ERASE = SOC_SVC_BASE,$/;"	e	enum:NRF_SOC_SVCS
SD_FLASH_PROTECT	components\softdevice\s130\headers\nrf_soc.h	/^  SD_FLASH_PROTECT,$/;"	e	enum:NRF_SOC_SVCS
SD_FLASH_WRITE	components\softdevice\s130\headers\nrf_soc.h	/^  SD_FLASH_WRITE,$/;"	e	enum:NRF_SOC_SVCS
SD_MUTEX_ACQUIRE	components\softdevice\s130\headers\nrf_soc.h	/^  SD_MUTEX_ACQUIRE,$/;"	e	enum:NRF_SOC_SVCS
SD_MUTEX_NEW	components\softdevice\s130\headers\nrf_soc.h	/^  SD_MUTEX_NEW = SOC_SVC_BASE_NOT_AVAILABLE,$/;"	e	enum:NRF_SOC_SVCS
SD_MUTEX_RELEASE	components\softdevice\s130\headers\nrf_soc.h	/^  SD_MUTEX_RELEASE,$/;"	e	enum:NRF_SOC_SVCS
SD_NVIC_CLEARPENDINGIRQ	components\softdevice\s130\headers\nrf_soc.h	/^  SD_NVIC_CLEARPENDINGIRQ,$/;"	e	enum:NRF_SOC_SVCS
SD_NVIC_CRITICAL_REGION_ENTER	components\softdevice\s130\headers\nrf_soc.h	/^  SD_NVIC_CRITICAL_REGION_ENTER,$/;"	e	enum:NRF_SOC_SVCS
SD_NVIC_CRITICAL_REGION_EXIT	components\softdevice\s130\headers\nrf_soc.h	/^  SD_NVIC_CRITICAL_REGION_EXIT,$/;"	e	enum:NRF_SOC_SVCS
SD_NVIC_DISABLEIRQ	components\softdevice\s130\headers\nrf_soc.h	/^  SD_NVIC_DISABLEIRQ,$/;"	e	enum:NRF_SOC_SVCS
SD_NVIC_ENABLEIRQ	components\softdevice\s130\headers\nrf_soc.h	/^  SD_NVIC_ENABLEIRQ,$/;"	e	enum:NRF_SOC_SVCS
SD_NVIC_GETPENDINGIRQ	components\softdevice\s130\headers\nrf_soc.h	/^  SD_NVIC_GETPENDINGIRQ,$/;"	e	enum:NRF_SOC_SVCS
SD_NVIC_GETPRIORITY	components\softdevice\s130\headers\nrf_soc.h	/^  SD_NVIC_GETPRIORITY,$/;"	e	enum:NRF_SOC_SVCS
SD_NVIC_SETPENDINGIRQ	components\softdevice\s130\headers\nrf_soc.h	/^  SD_NVIC_SETPENDINGIRQ,$/;"	e	enum:NRF_SOC_SVCS
SD_NVIC_SETPRIORITY	components\softdevice\s130\headers\nrf_soc.h	/^  SD_NVIC_SETPRIORITY,$/;"	e	enum:NRF_SOC_SVCS
SD_NVIC_SYSTEMRESET	components\softdevice\s130\headers\nrf_soc.h	/^  SD_NVIC_SYSTEMRESET,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_DCDC_MODE_SET	components\softdevice\s130\headers\nrf_soc.h	/^  SD_POWER_DCDC_MODE_SET,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_GPREGRET_CLR	components\softdevice\s130\headers\nrf_soc.h	/^  SD_POWER_GPREGRET_CLR,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_GPREGRET_GET	components\softdevice\s130\headers\nrf_soc.h	/^  SD_POWER_GPREGRET_GET,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_GPREGRET_SET	components\softdevice\s130\headers\nrf_soc.h	/^  SD_POWER_GPREGRET_SET,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_MODE_SET	components\softdevice\s130\headers\nrf_soc.h	/^  SD_POWER_MODE_SET,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_POF_ENABLE	components\softdevice\s130\headers\nrf_soc.h	/^  SD_POWER_POF_ENABLE,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_POF_THRESHOLD_SET	components\softdevice\s130\headers\nrf_soc.h	/^  SD_POWER_POF_THRESHOLD_SET,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_RAMON_CLR	components\softdevice\s130\headers\nrf_soc.h	/^  SD_POWER_RAMON_CLR,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_RAMON_GET	components\softdevice\s130\headers\nrf_soc.h	/^  SD_POWER_RAMON_GET,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_RAMON_SET	components\softdevice\s130\headers\nrf_soc.h	/^  SD_POWER_RAMON_SET,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_RESET_REASON_CLR	components\softdevice\s130\headers\nrf_soc.h	/^  SD_POWER_RESET_REASON_CLR,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_RESET_REASON_GET	components\softdevice\s130\headers\nrf_soc.h	/^  SD_POWER_RESET_REASON_GET,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_SYSTEM_OFF	components\softdevice\s130\headers\nrf_soc.h	/^  SD_POWER_SYSTEM_OFF,$/;"	e	enum:NRF_SOC_SVCS
SD_PPI_CHANNEL_ASSIGN	components\softdevice\s130\headers\nrf_soc.h	/^  SD_PPI_CHANNEL_ASSIGN,$/;"	e	enum:NRF_SOC_SVCS
SD_PPI_CHANNEL_ENABLE_CLR	components\softdevice\s130\headers\nrf_soc.h	/^  SD_PPI_CHANNEL_ENABLE_CLR,$/;"	e	enum:NRF_SOC_SVCS
SD_PPI_CHANNEL_ENABLE_GET	components\softdevice\s130\headers\nrf_soc.h	/^  SD_PPI_CHANNEL_ENABLE_GET,$/;"	e	enum:NRF_SOC_SVCS
SD_PPI_CHANNEL_ENABLE_SET	components\softdevice\s130\headers\nrf_soc.h	/^  SD_PPI_CHANNEL_ENABLE_SET,$/;"	e	enum:NRF_SOC_SVCS
SD_PPI_GROUP_ASSIGN	components\softdevice\s130\headers\nrf_soc.h	/^  SD_PPI_GROUP_ASSIGN,$/;"	e	enum:NRF_SOC_SVCS
SD_PPI_GROUP_GET	components\softdevice\s130\headers\nrf_soc.h	/^  SD_PPI_GROUP_GET,$/;"	e	enum:NRF_SOC_SVCS
SD_PPI_GROUP_TASK_DISABLE	components\softdevice\s130\headers\nrf_soc.h	/^  SD_PPI_GROUP_TASK_DISABLE,$/;"	e	enum:NRF_SOC_SVCS
SD_PPI_GROUP_TASK_ENABLE	components\softdevice\s130\headers\nrf_soc.h	/^  SD_PPI_GROUP_TASK_ENABLE,$/;"	e	enum:NRF_SOC_SVCS
SD_RADIO_NOTIFICATION_CFG_SET	components\softdevice\s130\headers\nrf_soc.h	/^  SD_RADIO_NOTIFICATION_CFG_SET,$/;"	e	enum:NRF_SOC_SVCS
SD_RADIO_REQUEST	components\softdevice\s130\headers\nrf_soc.h	/^  SD_RADIO_REQUEST,$/;"	e	enum:NRF_SOC_SVCS
SD_RADIO_SESSION_CLOSE	components\softdevice\s130\headers\nrf_soc.h	/^  SD_RADIO_SESSION_CLOSE,$/;"	e	enum:NRF_SOC_SVCS
SD_RADIO_SESSION_OPEN	components\softdevice\s130\headers\nrf_soc.h	/^  SD_RADIO_SESSION_OPEN,$/;"	e	enum:NRF_SOC_SVCS
SD_RAND_APPLICATION_BYTES_AVAILABLE	components\softdevice\s130\headers\nrf_soc.h	/^  SD_RAND_APPLICATION_BYTES_AVAILABLE,$/;"	e	enum:NRF_SOC_SVCS
SD_RAND_APPLICATION_GET_VECTOR	components\softdevice\s130\headers\nrf_soc.h	/^  SD_RAND_APPLICATION_GET_VECTOR,$/;"	e	enum:NRF_SOC_SVCS
SD_RAND_APPLICATION_POOL_CAPACITY	components\softdevice\s130\headers\nrf_soc.h	/^  SD_RAND_APPLICATION_POOL_CAPACITY,$/;"	e	enum:NRF_SOC_SVCS
SD_TEMP_GET	components\softdevice\s130\headers\nrf_soc.h	/^  SD_TEMP_GET,$/;"	e	enum:NRF_SOC_SVCS
SOC_ECB_CIPHERTEXT_LENGTH	components\softdevice\s130\headers\nrf_soc.h	69;"	d
SOC_ECB_CLEARTEXT_LENGTH	components\softdevice\s130\headers\nrf_soc.h	68;"	d
SOC_ECB_KEY_LENGTH	components\softdevice\s130\headers\nrf_soc.h	67;"	d
SOC_SVC_BASE	components\softdevice\s130\headers\nrf_soc.h	58;"	d
SOC_SVC_BASE_NOT_AVAILABLE	components\softdevice\s130\headers\nrf_soc.h	59;"	d
SVC_SOC_LAST	components\softdevice\s130\headers\nrf_soc.h	/^  SVC_SOC_LAST$/;"	e	enum:NRF_SOC_SVCS
callback_action	components\softdevice\s130\headers\nrf_soc.h	/^  uint8_t               callback_action;            \/**< The action requested by the application when returning from the signal callback, see @ref NRF_RADIO_SIGNAL_CALLBACK_ACTION. *\/$/;"	m	struct:__anon815
ciphertext	components\softdevice\s130\headers\nrf_soc.h	/^  uint8_t ciphertext[SOC_ECB_CIPHERTEXT_LENGTH];    \/**< Cipher Text data. *\/$/;"	m	struct:__anon819
cleartext	components\softdevice\s130\headers\nrf_soc.h	/^  uint8_t cleartext[SOC_ECB_CLEARTEXT_LENGTH];      \/**< Clear Text data. *\/$/;"	m	struct:__anon819
distance_us	components\softdevice\s130\headers\nrf_soc.h	/^  uint32_t      distance_us;                        \/**< Distance from the start of the previous radio timeslot (up to @ref NRF_RADIO_DISTANCE_MAX_US microseconds). *\/$/;"	m	struct:__anon812
earliest	components\softdevice\s130\headers\nrf_soc.h	/^    nrf_radio_request_earliest_t  earliest;         \/**< Parameters for a request for a timeslot as early as possible. *\/$/;"	m	union:__anon813::__anon814
extend	components\softdevice\s130\headers\nrf_soc.h	/^    } extend;                                       \/**< Additional parameters for return_code @ref NRF_RADIO_SIGNAL_CALLBACK_ACTION_EXTEND. *\/$/;"	m	union:__anon815::__anon816	typeref:struct:__anon815::__anon816::__anon818
hfclk	components\softdevice\s130\headers\nrf_soc.h	/^  uint8_t       hfclk;                              \/**< High frequency clock source, see @ref NRF_RADIO_HFCLK_CFG. *\/$/;"	m	struct:__anon811
hfclk	components\softdevice\s130\headers\nrf_soc.h	/^  uint8_t       hfclk;                              \/**< High frequency clock source, see @ref NRF_RADIO_HFCLK_CFG. *\/$/;"	m	struct:__anon812
key	components\softdevice\s130\headers\nrf_soc.h	/^  uint8_t key[SOC_ECB_KEY_LENGTH];                  \/**< Encryption key. *\/$/;"	m	struct:__anon819
length_us	components\softdevice\s130\headers\nrf_soc.h	/^      uint32_t              length_us;              \/**< Requested extension of the timeslot duration (microseconds) (for minimum time see @ref NRF_RADIO_MINIMUM_TIMESLOT_LENGTH_EXTENSION_TIME_US). *\/$/;"	m	struct:__anon815::__anon816::__anon818
length_us	components\softdevice\s130\headers\nrf_soc.h	/^  uint32_t      length_us;                          \/**< The radio timeslot length (in the range 100 to 100,000] microseconds). *\/$/;"	m	struct:__anon811
length_us	components\softdevice\s130\headers\nrf_soc.h	/^  uint32_t      length_us;                          \/**< The radio timeslot length (in the range [100..100,000] microseconds). *\/$/;"	m	struct:__anon812
normal	components\softdevice\s130\headers\nrf_soc.h	/^    nrf_radio_request_normal_t    normal;           \/**< Parameters for a normal radio request. *\/$/;"	m	union:__anon813::__anon814
nrf_app_irq_priority_t	components\softdevice\s130\headers\nrf_soc.h	/^typedef uint8_t nrf_app_irq_priority_t;$/;"	t
nrf_ecb_hal_data_t	components\softdevice\s130\headers\nrf_soc.h	/^} nrf_ecb_hal_data_t;$/;"	t	typeref:struct:__anon819
nrf_mutex_t	components\softdevice\s130\headers\nrf_soc.h	/^typedef volatile uint8_t nrf_mutex_t;$/;"	t
nrf_power_dcdc_mode_t	components\softdevice\s130\headers\nrf_soc.h	/^typedef uint32_t nrf_power_dcdc_mode_t;$/;"	t
nrf_power_failure_threshold_t	components\softdevice\s130\headers\nrf_soc.h	/^typedef uint8_t nrf_power_failure_threshold_t;$/;"	t
nrf_power_mode_t	components\softdevice\s130\headers\nrf_soc.h	/^typedef uint8_t nrf_power_mode_t;$/;"	t
nrf_radio_notification_distance_t	components\softdevice\s130\headers\nrf_soc.h	/^typedef uint8_t nrf_radio_notification_distance_t;$/;"	t
nrf_radio_notification_type_t	components\softdevice\s130\headers\nrf_soc.h	/^typedef uint8_t nrf_radio_notification_type_t;$/;"	t
nrf_radio_request_earliest_t	components\softdevice\s130\headers\nrf_soc.h	/^} nrf_radio_request_earliest_t;$/;"	t	typeref:struct:__anon811
nrf_radio_request_normal_t	components\softdevice\s130\headers\nrf_soc.h	/^} nrf_radio_request_normal_t;$/;"	t	typeref:struct:__anon812
nrf_radio_request_t	components\softdevice\s130\headers\nrf_soc.h	/^} nrf_radio_request_t;$/;"	t	typeref:struct:__anon813
nrf_radio_signal_callback_return_param_t	components\softdevice\s130\headers\nrf_soc.h	/^} nrf_radio_signal_callback_return_param_t;$/;"	t	typeref:struct:__anon815
nrf_radio_signal_callback_t	components\softdevice\s130\headers\nrf_soc.h	/^typedef nrf_radio_signal_callback_return_param_t * (*nrf_radio_signal_callback_t) (uint8_t signal_type);$/;"	t
p_next	components\softdevice\s130\headers\nrf_soc.h	/^      nrf_radio_request_t * p_next;                 \/**< The request parameters for the next radio timeslot. *\/$/;"	m	struct:__anon815::__anon816::__anon817
params	components\softdevice\s130\headers\nrf_soc.h	/^  } params;$/;"	m	struct:__anon813	typeref:union:__anon813::__anon814
params	components\softdevice\s130\headers\nrf_soc.h	/^  } params;$/;"	m	struct:__anon815	typeref:union:__anon815::__anon816
priority	components\softdevice\s130\headers\nrf_soc.h	/^  uint8_t       priority;                           \/**< The radio timeslot priority, see @ref NRF_RADIO_PRIORITY. *\/$/;"	m	struct:__anon811
priority	components\softdevice\s130\headers\nrf_soc.h	/^  uint8_t       priority;                           \/**< The radio timeslot priority, see @ref NRF_RADIO_PRIORITY. *\/$/;"	m	struct:__anon812
request	components\softdevice\s130\headers\nrf_soc.h	/^    } request;                                      \/**< Additional parameters for return_code @ref NRF_RADIO_SIGNAL_CALLBACK_ACTION_REQUEST_AND_END. *\/$/;"	m	union:__anon815::__anon816	typeref:struct:__anon815::__anon816::__anon817
request_type	components\softdevice\s130\headers\nrf_soc.h	/^  uint8_t                         request_type;     \/**< Type of request, see @ref NRF_RADIO_REQUEST_TYPE. *\/$/;"	m	struct:__anon813
timeout_us	components\softdevice\s130\headers\nrf_soc.h	/^  uint32_t      timeout_us;                         \/**< Longest acceptable delay until the start of the requested timeslot (up to @ref NRF_RADIO_EARLIEST_TIMEOUT_MAX_US microseconds). *\/$/;"	m	struct:__anon811
NRF_SVC__	components\softdevice\s130\headers\nrf_svc.h	38;"	d
PRAGMA	components\softdevice\s130\headers\nrf_svc.h	59;"	d
SVCALL	components\softdevice\s130\headers\nrf_svc.h	41;"	d
SVCALL	components\softdevice\s130\headers\nrf_svc.h	46;"	d
SVCALL	components\softdevice\s130\headers\nrf_svc.h	48;"	d
SVCALL	components\softdevice\s130\headers\nrf_svc.h	60;"	d
SVCALL	components\softdevice\s130\headers\nrf_svc.h	64;"	d
ASSERT	components\softdevice\s130\headers\softdevice_assert.h	63;"	d
SOFTDEVICE_ASSERT_H_	components\softdevice\s130\headers\softdevice_assert.h	41;"	d
ANT_ERROR_H__	components\softdevice\s210\headers\ant_error.h	13;"	d
NRF_ANT_ERROR_CHANNEL_ID_NOT_SET	components\softdevice\s210\headers\ant_error.h	28;"	d
NRF_ANT_ERROR_CHANNEL_IN_WRONG_STATE	components\softdevice\s210\headers\ant_error.h	26;"	d
NRF_ANT_ERROR_CHANNEL_NOT_OPENED	components\softdevice\s210\headers\ant_error.h	27;"	d
NRF_ANT_ERROR_CLOSE_ALL_CHANNELS	components\softdevice\s210\headers\ant_error.h	29;"	d
NRF_ANT_ERROR_INVALID_LIST_ID	components\softdevice\s210\headers\ant_error.h	37;"	d
NRF_ANT_ERROR_INVALID_MESSAGE	components\softdevice\s210\headers\ant_error.h	35;"	d
NRF_ANT_ERROR_INVALID_NETWORK_NUMBER	components\softdevice\s210\headers\ant_error.h	36;"	d
NRF_ANT_ERROR_INVALID_PARAMETER_PROVIDED	components\softdevice\s210\headers\ant_error.h	39;"	d
NRF_ANT_ERROR_INVALID_SCAN_TX_CHANNEL	components\softdevice\s210\headers\ant_error.h	38;"	d
NRF_ANT_ERROR_MESSAGE_SIZE_EXCEEDS_LIMIT	components\softdevice\s210\headers\ant_error.h	34;"	d
NRF_ANT_ERROR_OFFSET	components\softdevice\s210\headers\ant_error.h	24;"	d
NRF_ANT_ERROR_TRANSFER_BUSY	components\softdevice\s210\headers\ant_error.h	33;"	d
NRF_ANT_ERROR_TRANSFER_IN_ERROR	components\softdevice\s210\headers\ant_error.h	32;"	d
NRF_ANT_ERROR_TRANSFER_IN_PROGRESS	components\softdevice\s210\headers\ant_error.h	30;"	d
NRF_ANT_ERROR_TRANSFER_SEQUENCE_NUMBER_ERROR	components\softdevice\s210\headers\ant_error.h	31;"	d
ANT_INTERFACE_H__	components\softdevice\s210\headers\ant_interface.h	12;"	d
SD_ANT_EXT0_ID_ENHANCED_CHANNEL_SPACING_SET	components\softdevice\s210\headers\ant_interface.h	892;"	d
SD_ANT_EXT0_ID_WAKEON_RF_ACTIVITY_CONFIG_GET	components\softdevice\s210\headers\ant_interface.h	879;"	d
SD_ANT_EXT0_ID_WAKEON_RF_ACTIVITY_CONFIG_SET	components\softdevice\s210\headers\ant_interface.h	867;"	d
STK_SVC_BASE_2	components\softdevice\s210\headers\ant_interface.h	26;"	d
SVC_ANT_ACTIVE	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_ACTIVE,$/;"	e	enum:__anon820
SVC_ANT_ACTIVE_SEARCH_SHARING_CYCLES_GET	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_ACTIVE_SEARCH_SHARING_CYCLES_GET,$/;"	e	enum:__anon820
SVC_ANT_ACTIVE_SEARCH_SHARING_CYCLES_SET	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_ACTIVE_SEARCH_SHARING_CYCLES_SET,$/;"	e	enum:__anon820
SVC_ANT_ADV_BURST_CONFIG_GET	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_ADV_BURST_CONFIG_GET,$/;"	e	enum:__anon820
SVC_ANT_ADV_BURST_CONFIG_SET	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_ADV_BURST_CONFIG_SET,$/;"	e	enum:__anon820
SVC_ANT_AUTO_FREQ_HOP_TABLE_SET	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_AUTO_FREQ_HOP_TABLE_SET,$/;"	e	enum:__anon820
SVC_ANT_BURST_HANDLER_REQUEST	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_BURST_HANDLER_REQUEST,$/;"	e	enum:__anon820
SVC_ANT_BURST_HANDLER_WAIT_FLAG_DISABLE	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_BURST_HANDLER_WAIT_FLAG_DISABLE,$/;"	e	enum:__anon820
SVC_ANT_BURST_HANDLER_WAIT_FLAG_ENABLE	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_BURST_HANDLER_WAIT_FLAG_ENABLE,$/;"	e	enum:__anon820
SVC_ANT_CAPABILITIES	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_CAPABILITIES,$/;"	e	enum:__anon820
SVC_ANT_CHANNEL_ASSIGN	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_CHANNEL_ASSIGN,$/;"	e	enum:__anon820
SVC_ANT_CHANNEL_CLOSE	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_CHANNEL_CLOSE,$/;"	e	enum:__anon820
SVC_ANT_CHANNEL_ID_GET	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_CHANNEL_ID_GET,$/;"	e	enum:__anon820
SVC_ANT_CHANNEL_ID_SET	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_CHANNEL_ID_SET,$/;"	e	enum:__anon820
SVC_ANT_CHANNEL_IN_PROGRESS	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_CHANNEL_IN_PROGRESS,$/;"	e	enum:__anon820
SVC_ANT_CHANNEL_LOW_PRIO_RX_SEARCH_TIMEOUT_SET	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_CHANNEL_LOW_PRIO_RX_SEARCH_TIMEOUT_SET,$/;"	e	enum:__anon820
SVC_ANT_CHANNEL_OPEN	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_CHANNEL_OPEN,$/;"	e	enum:__anon820
SVC_ANT_CHANNEL_PERIOD_GET	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_CHANNEL_PERIOD_GET,$/;"	e	enum:__anon820
SVC_ANT_CHANNEL_PERIOD_SET	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_CHANNEL_PERIOD_SET,$/;"	e	enum:__anon820
SVC_ANT_CHANNEL_RADIO_FREQ_GET	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_CHANNEL_RADIO_FREQ_GET,$/;"	e	enum:__anon820
SVC_ANT_CHANNEL_RADIO_FREQ_SET	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_CHANNEL_RADIO_FREQ_SET,$/;"	e	enum:__anon820
SVC_ANT_CHANNEL_RADIO_TX_POWER_SET	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_CHANNEL_RADIO_TX_POWER_SET,$/;"	e	enum:__anon820
SVC_ANT_CHANNEL_RX_SEARCH_TIMEOUT_SET	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_CHANNEL_RX_SEARCH_TIMEOUT_SET,$/;"	e	enum:__anon820
SVC_ANT_CHANNEL_STATUS_GET	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_CHANNEL_STATUS_GET,$/;"	e	enum:__anon820
SVC_ANT_CHANNEL_UNASSIGN	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_CHANNEL_UNASSIGN,$/;"	e	enum:__anon820
SVC_ANT_COEX_CONFIG_GET	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_COEX_CONFIG_GET,$/;"	e	enum:__anon820
SVC_ANT_COEX_CONFIG_SET	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_COEX_CONFIG_SET,$/;"	e	enum:__anon820
SVC_ANT_CRYPTO_CHANNEL_ENABLE	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_CRYPTO_CHANNEL_ENABLE,$/;"	e	enum:__anon820
SVC_ANT_CRYPTO_INFO_GET	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_CRYPTO_INFO_GET,$/;"	e	enum:__anon820
SVC_ANT_CRYPTO_INFO_SET	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_CRYPTO_INFO_SET,$/;"	e	enum:__anon820
SVC_ANT_CRYPTO_KEY_SET	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_CRYPTO_KEY_SET,$/;"	e	enum:__anon820
SVC_ANT_CW_TEST_MODE	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_CW_TEST_MODE,$/;"	e	enum:__anon820
SVC_ANT_EVENT_FILTERING_GET	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_EVENT_FILTERING_GET,$/;"	e	enum:__anon820
SVC_ANT_EVENT_FILTERING_SET	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_EVENT_FILTERING_SET,$/;"	e	enum:__anon820
SVC_ANT_EVENT_GET	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_EVENT_GET,$/;"	e	enum:__anon820
SVC_ANT_EXTENDED0	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_EXTENDED0,$/;"	e	enum:__anon820
SVC_ANT_EXTENDED1	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_EXTENDED1,$/;"	e	enum:__anon820
SVC_ANT_EXTENDED2	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_EXTENDED2, \/\/ LAST (64 SVCs)$/;"	e	enum:__anon820
SVC_ANT_ID_LIST_ADD	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_ID_LIST_ADD,$/;"	e	enum:__anon820
SVC_ANT_ID_LIST_CONFIG	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_ID_LIST_CONFIG,$/;"	e	enum:__anon820
SVC_ANT_INIT_CW_TEST_MODE	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_INIT_CW_TEST_MODE,$/;"	e	enum:__anon820
SVC_ANT_LIB_CONFIG_CLEAR	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_LIB_CONFIG_CLEAR,$/;"	e	enum:__anon820
SVC_ANT_LIB_CONFIG_GET	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_LIB_CONFIG_GET,$/;"	e	enum:__anon820
SVC_ANT_LIB_CONFIG_SET	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_LIB_CONFIG_SET,$/;"	e	enum:__anon820
SVC_ANT_NETWORK_KEY_SET	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_NETWORK_KEY_SET,$/;"	e	enum:__anon820
SVC_ANT_PENDING_TRANSMIT	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_PENDING_TRANSMIT,$/;"	e	enum:__anon820
SVC_ANT_PENDING_TRANSMIT_CLEAR	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_PENDING_TRANSMIT_CLEAR,$/;"	e	enum:__anon820
SVC_ANT_PROX_SEARCH_SET	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_PROX_SEARCH_SET,$/;"	e	enum:__anon820
SVC_ANT_RESERVED0	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_RESERVED0,$/;"	e	enum:__anon820
SVC_ANT_RESERVED1	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_RESERVED1,$/;"	e	enum:__anon820
SVC_ANT_RESERVED2	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_RESERVED2,$/;"	e	enum:__anon820
SVC_ANT_RFACTIVE_NOTIFICATION_CONFIG_GET	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_RFACTIVE_NOTIFICATION_CONFIG_GET,$/;"	e	enum:__anon820
SVC_ANT_RFACTIVE_NOTIFICATION_CONFIG_SET	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_RFACTIVE_NOTIFICATION_CONFIG_SET,$/;"	e	enum:__anon820
SVC_ANT_RX_SCAN_MODE_START	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_RX_SCAN_MODE_START,$/;"	e	enum:__anon820
SVC_ANT_SDU_MASK_CONFIG	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_SDU_MASK_CONFIG,$/;"	e	enum:__anon820
SVC_ANT_SDU_MASK_GET	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_SDU_MASK_GET,$/;"	e	enum:__anon820
SVC_ANT_SDU_MASK_SET	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_SDU_MASK_SET,$/;"	e	enum:__anon820
SVC_ANT_SEARCH_CHANNEL_PRIORITY_SET	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_SEARCH_CHANNEL_PRIORITY_SET,$/;"	e	enum:__anon820
SVC_ANT_SEARCH_WAVEFORM_SET	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_SEARCH_WAVEFORM_SET,$/;"	e	enum:__anon820
SVC_ANT_STACK_INIT	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_STACK_INIT = STK_SVC_BASE_2,$/;"	e	enum:__anon820
SVC_ANT_TRANSFER_STOP	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_TRANSFER_STOP,$/;"	e	enum:__anon820
SVC_ANT_TX_ACKNOWLEDGED_MESSAGE	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_TX_ACKNOWLEDGED_MESSAGE,$/;"	e	enum:__anon820
SVC_ANT_TX_BROADCAST_MESSAGE	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_TX_BROADCAST_MESSAGE,$/;"	e	enum:__anon820
SVC_ANT_VERSION	components\softdevice\s210\headers\ant_interface.h	/^  SVC_ANT_VERSION,$/;"	e	enum:__anon820
ADV_BURST_MODES_FREQ_HOP	components\softdevice\s210\headers\ant_parameters.h	297;"	d
ADV_BURST_MODES_MASK	components\softdevice\s210\headers\ant_parameters.h	296;"	d
ADV_BURST_MODES_MAX_SIZE	components\softdevice\s210\headers\ant_parameters.h	291;"	d
ADV_BURST_MODES_RESERVED0	components\softdevice\s210\headers\ant_parameters.h	298;"	d
ADV_BURST_MODES_SIZE_16_BYTES	components\softdevice\s210\headers\ant_parameters.h	293;"	d
ADV_BURST_MODES_SIZE_24_BYTES	components\softdevice\s210\headers\ant_parameters.h	294;"	d
ADV_BURST_MODES_SIZE_8_BYTES	components\softdevice\s210\headers\ant_parameters.h	292;"	d
ADV_BURST_MODE_DISABLE	components\softdevice\s210\headers\ant_parameters.h	288;"	d
ADV_BURST_MODE_ENABLE	components\softdevice\s210\headers\ant_parameters.h	289;"	d
ANTDEFINES_H	components\softdevice\s210\headers\ant_parameters.h	12;"	d
ANTMESSAGE_H	components\softdevice\s210\headers\ant_parameters.h	417;"	d
ANT_CLOCK_FREQUENCY	components\softdevice\s210\headers\ant_parameters.h	25;"	d
ANT_EXT_MESG_BIFIELD_EXTENSION	components\softdevice\s210\headers\ant_parameters.h	224;"	d
ANT_EXT_MESG_BITFIELD_DEVICE_ID	components\softdevice\s210\headers\ant_parameters.h	221;"	d
ANT_EXT_MESG_BITFIELD_RSSI	components\softdevice\s210\headers\ant_parameters.h	222;"	d
ANT_EXT_MESG_BITFIELD_TIME_STAMP	components\softdevice\s210\headers\ant_parameters.h	223;"	d
ANT_EXT_MESG_DEVICE_ID_FIELD_SIZE	components\softdevice\s210\headers\ant_parameters.h	449;"	d
ANT_EXT_MESG_RSSI_FIELD_SIZE	components\softdevice\s210\headers\ant_parameters.h	450;"	d
ANT_EXT_MESG_TIME_STAMP_FIELD_SIZE	components\softdevice\s210\headers\ant_parameters.h	451;"	d
ANT_EXT_STRING_SIZE	components\softdevice\s210\headers\ant_parameters.h	452;"	d
ANT_ID_DEVICE_NUMBER_HIGH_OFFSET	components\softdevice\s210\headers\ant_parameters.h	104;"	d
ANT_ID_DEVICE_NUMBER_LOW_OFFSET	components\softdevice\s210\headers\ant_parameters.h	105;"	d
ANT_ID_DEVICE_TYPE_OFFSET	components\softdevice\s210\headers\ant_parameters.h	103;"	d
ANT_ID_DEVICE_TYPE_PAIRING_FLAG	components\softdevice\s210\headers\ant_parameters.h	106;"	d
ANT_ID_SIZE	components\softdevice\s210\headers\ant_parameters.h	101;"	d
ANT_ID_TRANS_TYPE_OFFSET	components\softdevice\s210\headers\ant_parameters.h	102;"	d
ANT_LIB_CONFIG_MASK_ALL	components\softdevice\s210\headers\ant_parameters.h	210;"	d
ANT_LIB_CONFIG_MESG_OUT_INC_DEVICE_ID	components\softdevice\s210\headers\ant_parameters.h	214;"	d
ANT_LIB_CONFIG_MESG_OUT_INC_RSSI	components\softdevice\s210\headers\ant_parameters.h	213;"	d
ANT_LIB_CONFIG_MESG_OUT_INC_TIME_STAMP	components\softdevice\s210\headers\ant_parameters.h	212;"	d
ANT_LIB_CONFIG_RADIO_CONFIG_ALWAYS	components\softdevice\s210\headers\ant_parameters.h	211;"	d
ANT_MESSAGE	components\softdevice\s210\headers\ant_parameters.h	/^} ANT_MESSAGE;$/;"	t	typeref:union:__anon823
ANT_MESSAGE_aucExtData	components\softdevice\s210\headers\ant_parameters.h	686;"	d
ANT_MESSAGE_aucFramedData	components\softdevice\s210\headers\ant_parameters.h	677;"	d
ANT_MESSAGE_aucMesgData	components\softdevice\s210\headers\ant_parameters.h	679;"	d
ANT_MESSAGE_aucMessage	components\softdevice\s210\headers\ant_parameters.h	675;"	d
ANT_MESSAGE_aucPayload	components\softdevice\s210\headers\ant_parameters.h	682;"	d
ANT_MESSAGE_sExtMesgBF	components\softdevice\s210\headers\ant_parameters.h	683;"	d
ANT_MESSAGE_stExtMesgBF	components\softdevice\s210\headers\ant_parameters.h	685;"	d
ANT_MESSAGE_ucChannel	components\softdevice\s210\headers\ant_parameters.h	680;"	d
ANT_MESSAGE_ucCheckSum	components\softdevice\s210\headers\ant_parameters.h	687;"	d
ANT_MESSAGE_ucExtMesgBF	components\softdevice\s210\headers\ant_parameters.h	684;"	d
ANT_MESSAGE_ucMesgID	components\softdevice\s210\headers\ant_parameters.h	678;"	d
ANT_MESSAGE_ucSize	components\softdevice\s210\headers\ant_parameters.h	676;"	d
ANT_MESSAGE_ucSubID	components\softdevice\s210\headers\ant_parameters.h	681;"	d
ANT_MESSAGE_ulForceAlign	components\softdevice\s210\headers\ant_parameters.h	674;"	d
ANT_STANDARD_DATA_PAYLOAD_SIZE	components\softdevice\s210\headers\ant_parameters.h	30;"	d
ANT_TRANS_TYPE_1_BYTE_SHARED_ADDRESS	components\softdevice\s210\headers\ant_parameters.h	109;"	d
ANT_TRANS_TYPE_2_BYTE_SHARED_ADDRESS	components\softdevice\s210\headers\ant_parameters.h	110;"	d
ANT_TRANS_TYPE_SHARED_ADDR_MASK	components\softdevice\s210\headers\ant_parameters.h	108;"	d
BURST_SEGMENT_CONTINUE	components\softdevice\s210\headers\ant_parameters.h	201;"	d
BURST_SEGMENT_END	components\softdevice\s210\headers\ant_parameters.h	203;"	d
BURST_SEGMENT_START	components\softdevice\s210\headers\ant_parameters.h	202;"	d
CAPABILITIES_ACTIVE_SEARCH_SHARING_MODE_ENABLED	components\softdevice\s210\headers\ant_parameters.h	170;"	d
CAPABILITIES_ADVANCED_BURST_ENABLED	components\softdevice\s210\headers\ant_parameters.h	166;"	d
CAPABILITIES_ENCRYPTED_CHANNEL_ENABLED	components\softdevice\s210\headers\ant_parameters.h	173;"	d
CAPABILITIES_EVENT_BUFFERING_ENABLED	components\softdevice\s210\headers\ant_parameters.h	167;"	d
CAPABILITIES_EVENT_FILTERING_ENABLED	components\softdevice\s210\headers\ant_parameters.h	168;"	d
CAPABILITIES_EXT_ASSIGN_ENABLED	components\softdevice\s210\headers\ant_parameters.h	157;"	d
CAPABILITIES_EXT_MESSAGE_ENABLED	components\softdevice\s210\headers\ant_parameters.h	153;"	d
CAPABILITIES_FIT1_ENABLED	components\softdevice\s210\headers\ant_parameters.h	159;"	d
CAPABILITIES_FS_ANTFS_ENABLED	components\softdevice\s210\headers\ant_parameters.h	158;"	d
CAPABILITIES_HIGH_DUTY_SEARCH_MODE_ENABLED	components\softdevice\s210\headers\ant_parameters.h	169;"	d
CAPABILITIES_LED_ENABLED	components\softdevice\s210\headers\ant_parameters.h	152;"	d
CAPABILITIES_LOW_PRIORITY_SEARCH_ENABLED	components\softdevice\s210\headers\ant_parameters.h	143;"	d
CAPABILITIES_NETWORK_ENABLED	components\softdevice\s210\headers\ant_parameters.h	140;"	d
CAPABILITIES_NO_ACKD_MESSAGES	components\softdevice\s210\headers\ant_parameters.h	132;"	d
CAPABILITIES_NO_BURST_TRANSFER	components\softdevice\s210\headers\ant_parameters.h	133;"	d
CAPABILITIES_NO_RX_CHANNELS	components\softdevice\s210\headers\ant_parameters.h	128;"	d
CAPABILITIES_NO_RX_MESSAGES	components\softdevice\s210\headers\ant_parameters.h	130;"	d
CAPABILITIES_NO_TX_CHANNELS	components\softdevice\s210\headers\ant_parameters.h	129;"	d
CAPABILITIES_NO_TX_MESSAGES	components\softdevice\s210\headers\ant_parameters.h	131;"	d
CAPABILITIES_PER_CHANNEL_TX_POWER_ENABLED	components\softdevice\s210\headers\ant_parameters.h	142;"	d
CAPABILITIES_PROX_SEARCH_ENABLED	components\softdevice\s210\headers\ant_parameters.h	156;"	d
CAPABILITIES_RADIO_COEX_CONFIG_ENABLED	components\softdevice\s210\headers\ant_parameters.h	171;"	d
CAPABILITIES_RESERVED	components\softdevice\s210\headers\ant_parameters.h	155;"	d
CAPABILITIES_RFACTIVE_NOTIFICATION_ENABLED	components\softdevice\s210\headers\ant_parameters.h	180;"	d
CAPABILITIES_SCAN_MODE_ENABLED	components\softdevice\s210\headers\ant_parameters.h	154;"	d
CAPABILITIES_SCRIPT_ENABLED	components\softdevice\s210\headers\ant_parameters.h	144;"	d
CAPABILITIES_SEARCH_LIST_ENABLED	components\softdevice\s210\headers\ant_parameters.h	145;"	d
CAPABILITIES_SELECTIVE_DATA_UPDATE_ENABLED	components\softdevice\s210\headers\ant_parameters.h	172;"	d
CAPABILITIES_SERIAL_NUMBER_ENABLED	components\softdevice\s210\headers\ant_parameters.h	141;"	d
CHANNEL_ID_NOT_SET	components\softdevice\s210\headers\ant_parameters.h	375;"	d
CHANNEL_IN_WRONG_STATE	components\softdevice\s210\headers\ant_parameters.h	372;"	d
CHANNEL_NOT_OPENED	components\softdevice\s210\headers\ant_parameters.h	373;"	d
CHANNEL_NUMBER_MASK	components\softdevice\s210\headers\ant_parameters.h	189;"	d
CHANNEL_TYPE_MASTER	components\softdevice\s210\headers\ant_parameters.h	90;"	d
CHANNEL_TYPE_MASTER_TX_ONLY	components\softdevice\s210\headers\ant_parameters.h	92;"	d
CHANNEL_TYPE_SHARED_MASTER	components\softdevice\s210\headers\ant_parameters.h	94;"	d
CHANNEL_TYPE_SHARED_SLAVE	components\softdevice\s210\headers\ant_parameters.h	93;"	d
CHANNEL_TYPE_SLAVE	components\softdevice\s210\headers\ant_parameters.h	89;"	d
CHANNEL_TYPE_SLAVE_RX_ONLY	components\softdevice\s210\headers\ant_parameters.h	91;"	d
CLOSE_ALL_CHANNELS	components\softdevice\s210\headers\ant_parameters.h	376;"	d
ENCRYPTION_BASIC_REQUEST_MODE	components\softdevice\s210\headers\ant_parameters.h	306;"	d
ENCRYPTION_DISABLED_MODE	components\softdevice\s210\headers\ant_parameters.h	305;"	d
ENCRYPTION_INFO_GET_CRYPTO_ID	components\softdevice\s210\headers\ant_parameters.h	317;"	d
ENCRYPTION_INFO_GET_CUSTOM_USER_DATA	components\softdevice\s210\headers\ant_parameters.h	318;"	d
ENCRYPTION_INFO_GET_SUPPORTED_MODE	components\softdevice\s210\headers\ant_parameters.h	316;"	d
ENCRYPTION_INFO_SET_CRYPTO_ID	components\softdevice\s210\headers\ant_parameters.h	312;"	d
ENCRYPTION_INFO_SET_CUSTOM_USER_DATA	components\softdevice\s210\headers\ant_parameters.h	313;"	d
ENCRYPTION_INFO_SET_RNG_SEED	components\softdevice\s210\headers\ant_parameters.h	314;"	d
ENCRYPTION_USER_DATA_REQUEST_MODE	components\softdevice\s210\headers\ant_parameters.h	307;"	d
ENCRYPTION_USER_DATA_SIZE	components\softdevice\s210\headers\ant_parameters.h	310;"	d
ENHANCED_CHANNEL_SPACING_DISABLE	components\softdevice\s210\headers\ant_parameters.h	346;"	d
ENHANCED_CHANNEL_SPACING_ENABLE	components\softdevice\s210\headers\ant_parameters.h	347;"	d
EVENT_BLOCKED	components\softdevice\s210\headers\ant_parameters.h	401;"	d
EVENT_CHANNEL_CLOSED	components\softdevice\s210\headers\ant_parameters.h	365;"	d
EVENT_CHANNEL_COLLISION	components\softdevice\s210\headers\ant_parameters.h	367;"	d
EVENT_CONNECTION_FAIL	components\softdevice\s210\headers\ant_parameters.h	395;"	d
EVENT_CONNECTION_START	components\softdevice\s210\headers\ant_parameters.h	393;"	d
EVENT_CONNECTION_SUCCESS	components\softdevice\s210\headers\ant_parameters.h	394;"	d
EVENT_CONNECTION_TIMEOUT	components\softdevice\s210\headers\ant_parameters.h	396;"	d
EVENT_CONNECTION_UPDATE	components\softdevice\s210\headers\ant_parameters.h	397;"	d
EVENT_ENCRYPT_NEGOTIATION_FAIL	components\softdevice\s210\headers\ant_parameters.h	391;"	d
EVENT_ENCRYPT_NEGOTIATION_SUCCESS	components\softdevice\s210\headers\ant_parameters.h	390;"	d
EVENT_QUE_OVERFLOW	components\softdevice\s210\headers\ant_parameters.h	389;"	d
EVENT_RFACTIVE_NOTIFICATION	components\softdevice\s210\headers\ant_parameters.h	392;"	d
EVENT_RX	components\softdevice\s210\headers\ant_parameters.h	400;"	d
EVENT_RX_FAIL	components\softdevice\s210\headers\ant_parameters.h	360;"	d
EVENT_RX_FAIL_GO_TO_SEARCH	components\softdevice\s210\headers\ant_parameters.h	366;"	d
EVENT_RX_SEARCH_TIMEOUT	components\softdevice\s210\headers\ant_parameters.h	359;"	d
EVENT_TRANSFER_NEXT_DATA_BLOCK	components\softdevice\s210\headers\ant_parameters.h	370;"	d
EVENT_TRANSFER_RX_FAILED	components\softdevice\s210\headers\ant_parameters.h	362;"	d
EVENT_TRANSFER_TX_COMPLETED	components\softdevice\s210\headers\ant_parameters.h	363;"	d
EVENT_TRANSFER_TX_FAILED	components\softdevice\s210\headers\ant_parameters.h	364;"	d
EVENT_TRANSFER_TX_START	components\softdevice\s210\headers\ant_parameters.h	368;"	d
EVENT_TX	components\softdevice\s210\headers\ant_parameters.h	361;"	d
EXT_MESG_BF	components\softdevice\s210\headers\ant_parameters.h	/^} EXT_MESG_BF; \/\/ extended message bitfield$/;"	t	typeref:union:__anon821
EXT_PARAM_ALWAYS_SEARCH	components\softdevice\s210\headers\ant_parameters.h	77;"	d
EXT_PARAM_ASYNC_TX_MODE	components\softdevice\s210\headers\ant_parameters.h	82;"	d
EXT_PARAM_AUTO_SHARED_SLAVE	components\softdevice\s210\headers\ant_parameters.h	80;"	d
EXT_PARAM_FAST_INITIATION_MODE	components\softdevice\s210\headers\ant_parameters.h	81;"	d
EXT_PARAM_FREQUENCY_AGILITY	components\softdevice\s210\headers\ant_parameters.h	79;"	d
EXT_PARAM_IGNORE_TRANSMISSION_TYPE	components\softdevice\s210\headers\ant_parameters.h	78;"	d
FILTER_EVENT_CHANNEL_CLOSED	components\softdevice\s210\headers\ant_parameters.h	269;"	d
FILTER_EVENT_CHANNEL_COLLISION	components\softdevice\s210\headers\ant_parameters.h	271;"	d
FILTER_EVENT_RX_FAIL	components\softdevice\s210\headers\ant_parameters.h	264;"	d
FILTER_EVENT_RX_FAIL_GO_TO_SEARCH	components\softdevice\s210\headers\ant_parameters.h	270;"	d
FILTER_EVENT_RX_SEARCH_TIMEOUT	components\softdevice\s210\headers\ant_parameters.h	263;"	d
FILTER_EVENT_TRANSFER_RX_FAILED	components\softdevice\s210\headers\ant_parameters.h	266;"	d
FILTER_EVENT_TRANSFER_TX_COMPLETED	components\softdevice\s210\headers\ant_parameters.h	267;"	d
FILTER_EVENT_TRANSFER_TX_FAILED	components\softdevice\s210\headers\ant_parameters.h	268;"	d
FILTER_EVENT_TRANSFER_TX_START	components\softdevice\s210\headers\ant_parameters.h	272;"	d
FILTER_EVENT_TX	components\softdevice\s210\headers\ant_parameters.h	265;"	d
INVALID_LIST_ID	components\softdevice\s210\headers\ant_parameters.h	386;"	d
INVALID_MESSAGE	components\softdevice\s210\headers\ant_parameters.h	384;"	d
INVALID_NETWORK_NUMBER	components\softdevice\s210\headers\ant_parameters.h	385;"	d
INVALID_PARAMETER_PROVIDED	components\softdevice\s210\headers\ant_parameters.h	388;"	d
INVALID_SCAN_TX_CHANNEL	components\softdevice\s210\headers\ant_parameters.h	387;"	d
INVALID_SDU_MASK	components\softdevice\s210\headers\ant_parameters.h	280;"	d
MAX_SUPPORTED_ENCRYPTION_MODE	components\softdevice\s210\headers\ant_parameters.h	309;"	d
MESG_ACKNOWLEDGED_DATA_ID	components\softdevice\s210\headers\ant_parameters.h	494;"	d
MESG_ACTIVE_SEARCH_SHARING_ID	components\softdevice\s210\headers\ant_parameters.h	527;"	d
MESG_ACTIVE_SEARCH_SHARING_REQ_SIZE	components\softdevice\s210\headers\ant_parameters.h	607;"	d
MESG_ADV_BURST_DATA_ID	components\softdevice\s210\headers\ant_parameters.h	516;"	d
MESG_ANTLIB_CONFIG_ID	components\softdevice\s210\headers\ant_parameters.h	512;"	d
MESG_ANTLIB_CONFIG_SIZE	components\softdevice\s210\headers\ant_parameters.h	594;"	d
MESG_ANT_MAX_PAYLOAD_SIZE	components\softdevice\s210\headers\ant_parameters.h	455;"	d
MESG_ASSIGN_CHANNEL_ID	components\softdevice\s210\headers\ant_parameters.h	481;"	d
MESG_ASSIGN_CHANNEL_SIZE	components\softdevice\s210\headers\ant_parameters.h	569;"	d
MESG_AUTO_FREQ_CONFIG_ID	components\softdevice\s210\headers\ant_parameters.h	514;"	d
MESG_AUTO_FREQ_CONFIG_SIZE	components\softdevice\s210\headers\ant_parameters.h	596;"	d
MESG_BIST_SIZE	components\softdevice\s210\headers\ant_parameters.h	611;"	d
MESG_BROADCAST_DATA_ID	components\softdevice\s210\headers\ant_parameters.h	493;"	d
MESG_BUFFER_SIZE	components\softdevice\s210\headers\ant_parameters.h	461;"	d
MESG_BURST_DATA_ID	components\softdevice\s210\headers\ant_parameters.h	495;"	d
MESG_CAPABILITIES_ID	components\softdevice\s210\headers\ant_parameters.h	499;"	d
MESG_CAPABILITIES_SIZE	components\softdevice\s210\headers\ant_parameters.h	584;"	d
MESG_CHANNEL_ID_ID	components\softdevice\s210\headers\ant_parameters.h	496;"	d
MESG_CHANNEL_ID_SIZE	components\softdevice\s210\headers\ant_parameters.h	570;"	d
MESG_CHANNEL_MESG_PERIOD_ID	components\softdevice\s210\headers\ant_parameters.h	482;"	d
MESG_CHANNEL_MESG_PERIOD_SIZE	components\softdevice\s210\headers\ant_parameters.h	571;"	d
MESG_CHANNEL_NUM_SIZE	components\softdevice\s210\headers\ant_parameters.h	438;"	d
MESG_CHANNEL_RADIO_FREQ_ID	components\softdevice\s210\headers\ant_parameters.h	484;"	d
MESG_CHANNEL_RADIO_FREQ_SIZE	components\softdevice\s210\headers\ant_parameters.h	573;"	d
MESG_CHANNEL_RADIO_TX_POWER_ID	components\softdevice\s210\headers\ant_parameters.h	507;"	d
MESG_CHANNEL_RADIO_TX_POWER_SIZE	components\softdevice\s210\headers\ant_parameters.h	574;"	d
MESG_CHANNEL_SEARCH_TIMEOUT_ID	components\softdevice\s210\headers\ant_parameters.h	483;"	d
MESG_CHANNEL_SEARCH_TIMEOUT_SIZE	components\softdevice\s210\headers\ant_parameters.h	572;"	d
MESG_CHANNEL_STATUS_ID	components\softdevice\s210\headers\ant_parameters.h	497;"	d
MESG_CHANNEL_STATUS_SIZE	components\softdevice\s210\headers\ant_parameters.h	567;"	d
MESG_CHECKSUM_SIZE	components\softdevice\s210\headers\ant_parameters.h	440;"	d
MESG_CLOSE_CHANNEL_ID	components\softdevice\s210\headers\ant_parameters.h	491;"	d
MESG_CLOSE_CHANNEL_SIZE	components\softdevice\s210\headers\ant_parameters.h	582;"	d
MESG_COEX_ADV_PRIORITY_CONFIG_ID	components\softdevice\s210\headers\ant_parameters.h	528;"	d
MESG_COEX_ADV_PRIORITY_CONFIG_REQ_SIZE	components\softdevice\s210\headers\ant_parameters.h	608;"	d
MESG_COEX_PRIORITY_CONFIG_ID	components\softdevice\s210\headers\ant_parameters.h	517;"	d
MESG_COEX_PRIORITY_CONFIG_REQ_SIZE	components\softdevice\s210\headers\ant_parameters.h	598;"	d
MESG_CONFIG_ADV_BURST_ID	components\softdevice\s210\headers\ant_parameters.h	520;"	d
MESG_CONFIG_ADV_BURST_REQ_CAPABILITIES_SIZE	components\softdevice\s210\headers\ant_parameters.h	600;"	d
MESG_CONFIG_ADV_BURST_REQ_CONFIG_SIZE	components\softdevice\s210\headers\ant_parameters.h	601;"	d
MESG_CONFIG_ENCRYPT_REQ_CAPABILITIES_SIZE	components\softdevice\s210\headers\ant_parameters.h	602;"	d
MESG_CONFIG_ENCRYPT_REQ_CONFIG_ID_SIZE	components\softdevice\s210\headers\ant_parameters.h	603;"	d
MESG_CONFIG_ENCRYPT_REQ_CONFIG_USER_DATA_SIZE	components\softdevice\s210\headers\ant_parameters.h	604;"	d
MESG_CONFIG_ENCRYPT_REQ_CURRENT_CTR	components\softdevice\s210\headers\ant_parameters.h	605;"	d
MESG_DATA_OFFSET	components\softdevice\s210\headers\ant_parameters.h	469;"	d
MESG_DATA_SIZE	components\softdevice\s210\headers\ant_parameters.h	441;"	d
MESG_DEBUG_ID	components\softdevice\s210\headers\ant_parameters.h	557;"	d
MESG_ENCRYPT_ENABLE_ID	components\softdevice\s210\headers\ant_parameters.h	524;"	d
MESG_EVENT_BUFFERING_CONFIG_ID	components\softdevice\s210\headers\ant_parameters.h	518;"	d
MESG_EVENT_BUFFERING_CONFIG_REQ_SIZE	components\softdevice\s210\headers\ant_parameters.h	599;"	d
MESG_EVENT_FILTER_CONFIG_ID	components\softdevice\s210\headers\ant_parameters.h	521;"	d
MESG_EVENT_FILTER_CONFIG_REQ_SIZE	components\softdevice\s210\headers\ant_parameters.h	606;"	d
MESG_EVENT_ID	components\softdevice\s210\headers\ant_parameters.h	476;"	d
MESG_EXT_ACKNOWLEDGED_DATA_ID	components\softdevice\s210\headers\ant_parameters.h	505;"	d
MESG_EXT_BROADCAST_DATA_ID	components\softdevice\s210\headers\ant_parameters.h	504;"	d
MESG_EXT_BURST_DATA_ID	components\softdevice\s210\headers\ant_parameters.h	506;"	d
MESG_EXT_CHANNEL_RADIO_FREQ_SIZE	components\softdevice\s210\headers\ant_parameters.h	588;"	d
MESG_EXT_ID_0	components\softdevice\s210\headers\ant_parameters.h	537;"	d
MESG_EXT_ID_1	components\softdevice\s210\headers\ant_parameters.h	538;"	d
MESG_EXT_ID_2	components\softdevice\s210\headers\ant_parameters.h	539;"	d
MESG_EXT_ID_3	components\softdevice\s210\headers\ant_parameters.h	540;"	d
MESG_EXT_MESG_BF_SIZE	components\softdevice\s210\headers\ant_parameters.h	439;"	d
MESG_EXT_REQUEST_ID	components\softdevice\s210\headers\ant_parameters.h	546;"	d
MESG_EXT_RESPONSE_ID	components\softdevice\s210\headers\ant_parameters.h	543;"	d
MESG_FLASH_PROTECTION_CHECK_SIZE	components\softdevice\s210\headers\ant_parameters.h	610;"	d
MESG_FRAMED_SIZE	components\softdevice\s210\headers\ant_parameters.h	462;"	d
MESG_FRAME_SIZE	components\softdevice\s210\headers\ant_parameters.h	464;"	d
MESG_GET_SERIAL_NUM_ID	components\softdevice\s210\headers\ant_parameters.h	508;"	d
MESG_GET_SERIAL_NUM_SIZE	components\softdevice\s210\headers\ant_parameters.h	593;"	d
MESG_HEADER_SIZE	components\softdevice\s210\headers\ant_parameters.h	463;"	d
MESG_ID_LIST_ADD_ID	components\softdevice\s210\headers\ant_parameters.h	501;"	d
MESG_ID_LIST_ADD_SIZE	components\softdevice\s210\headers\ant_parameters.h	585;"	d
MESG_ID_LIST_CONFIG_ID	components\softdevice\s210\headers\ant_parameters.h	502;"	d
MESG_ID_LIST_CONFIG_SIZE	components\softdevice\s210\headers\ant_parameters.h	586;"	d
MESG_ID_OFFSET	components\softdevice\s210\headers\ant_parameters.h	468;"	d
MESG_ID_SIZE	components\softdevice\s210\headers\ant_parameters.h	437;"	d
MESG_INVALID_ID	components\softdevice\s210\headers\ant_parameters.h	475;"	d
MESG_INVALID_SIZE	components\softdevice\s210\headers\ant_parameters.h	564;"	d
MESG_MAX_DATA_SIZE	components\softdevice\s210\headers\ant_parameters.h	459;"	d
MESG_MAX_EXT_DATA_SIZE	components\softdevice\s210\headers\ant_parameters.h	457;"	d
MESG_MAX_SIZE	components\softdevice\s210\headers\ant_parameters.h	465;"	d
MESG_MAX_SIZE_VALUE	components\softdevice\s210\headers\ant_parameters.h	460;"	d
MESG_NETWORK_KEY_ID	components\softdevice\s210\headers\ant_parameters.h	485;"	d
MESG_NETWORK_KEY_SIZE	components\softdevice\s210\headers\ant_parameters.h	575;"	d
MESG_OPEN_CHANNEL_ID	components\softdevice\s210\headers\ant_parameters.h	490;"	d
MESG_OPEN_CHANNEL_SIZE	components\softdevice\s210\headers\ant_parameters.h	581;"	d
MESG_OPEN_RX_SCAN_ID	components\softdevice\s210\headers\ant_parameters.h	503;"	d
MESG_OPEN_RX_SCAN_SIZE	components\softdevice\s210\headers\ant_parameters.h	587;"	d
MESG_PROX_SEARCH_CONFIG_ID	components\softdevice\s210\headers\ant_parameters.h	515;"	d
MESG_PROX_SEARCH_CONFIG_SIZE	components\softdevice\s210\headers\ant_parameters.h	597;"	d
MESG_RADIO_CONFIG_ALWAYS_SIZE	components\softdevice\s210\headers\ant_parameters.h	589;"	d
MESG_RADIO_CW_INIT_ID	components\softdevice\s210\headers\ant_parameters.h	498;"	d
MESG_RADIO_CW_INIT_SIZE	components\softdevice\s210\headers\ant_parameters.h	578;"	d
MESG_RADIO_CW_MODE_ID	components\softdevice\s210\headers\ant_parameters.h	487;"	d
MESG_RADIO_CW_MODE_SIZE	components\softdevice\s210\headers\ant_parameters.h	577;"	d
MESG_RADIO_TX_POWER_ID	components\softdevice\s210\headers\ant_parameters.h	486;"	d
MESG_RADIO_TX_POWER_SIZE	components\softdevice\s210\headers\ant_parameters.h	576;"	d
MESG_REQUEST_ID	components\softdevice\s210\headers\ant_parameters.h	492;"	d
MESG_REQUEST_SIZE	components\softdevice\s210\headers\ant_parameters.h	583;"	d
MESG_RESPONSE_EVENT_ID	components\softdevice\s210\headers\ant_parameters.h	479;"	d
MESG_RESPONSE_EVENT_SIZE	components\softdevice\s210\headers\ant_parameters.h	566;"	d
MESG_RFACTIVE_NOTIFICATION_ID	components\softdevice\s210\headers\ant_parameters.h	529;"	d
MESG_RFACTIVE_NOTIFICATION_SIZE	components\softdevice\s210\headers\ant_parameters.h	609;"	d
MESG_RX_EXT_MESGS_ENABLE_ID	components\softdevice\s210\headers\ant_parameters.h	511;"	d
MESG_RX_EXT_MESGS_ENABLE_SIZE	components\softdevice\s210\headers\ant_parameters.h	590;"	d
MESG_RX_SYNC	components\softdevice\s210\headers\ant_parameters.h	434;"	d
MESG_SDU_CONFIG_ID	components\softdevice\s210\headers\ant_parameters.h	522;"	d
MESG_SDU_SET_MASK_ID	components\softdevice\s210\headers\ant_parameters.h	523;"	d
MESG_SEARCH_WAVEFORM_ID	components\softdevice\s210\headers\ant_parameters.h	488;"	d
MESG_SEARCH_WAVEFORM_SIZE	components\softdevice\s210\headers\ant_parameters.h	579;"	d
MESG_SERIAL_NUM_SET_CHANNEL_ID_ID	components\softdevice\s210\headers\ant_parameters.h	510;"	d
MESG_SET_ENCRYPT_INFO_ID	components\softdevice\s210\headers\ant_parameters.h	526;"	d
MESG_SET_ENCRYPT_KEY_ID	components\softdevice\s210\headers\ant_parameters.h	525;"	d
MESG_SET_LP_SEARCH_TIMEOUT_ID	components\softdevice\s210\headers\ant_parameters.h	509;"	d
MESG_SET_LP_SEARCH_TIMEOUT_SIZE	components\softdevice\s210\headers\ant_parameters.h	592;"	d
MESG_SET_SEARCH_CH_PRIORITY_ID	components\softdevice\s210\headers\ant_parameters.h	519;"	d
MESG_SET_SYNC_SERIAL_BIT_RATE	components\softdevice\s210\headers\ant_parameters.h	550;"	d
MESG_SET_TX_SEARCH_ON_NEXT_SIZE	components\softdevice\s210\headers\ant_parameters.h	591;"	d
MESG_SIZE_OFFSET	components\softdevice\s210\headers\ant_parameters.h	467;"	d
MESG_SIZE_SIZE	components\softdevice\s210\headers\ant_parameters.h	436;"	d
MESG_STARTUP_MESG_ID	components\softdevice\s210\headers\ant_parameters.h	513;"	d
MESG_STARTUP_MESG_SIZE	components\softdevice\s210\headers\ant_parameters.h	595;"	d
MESG_SYNC_SIZE	components\softdevice\s210\headers\ant_parameters.h	435;"	d
MESG_SYSTEM_RESET_ID	components\softdevice\s210\headers\ant_parameters.h	489;"	d
MESG_SYSTEM_RESET_SIZE	components\softdevice\s210\headers\ant_parameters.h	580;"	d
MESG_TX_SYNC	components\softdevice\s210\headers\ant_parameters.h	433;"	d
MESG_UNASSIGN_CHANNEL_ID	components\softdevice\s210\headers\ant_parameters.h	480;"	d
MESG_UNASSIGN_CHANNEL_SIZE	components\softdevice\s210\headers\ant_parameters.h	568;"	d
MESG_VERSION_ID	components\softdevice\s210\headers\ant_parameters.h	478;"	d
MESG_VERSION_SIZE	components\softdevice\s210\headers\ant_parameters.h	565;"	d
MESSAGE_SIZE_EXCEEDS_LIMIT	components\softdevice\s210\headers\ant_parameters.h	383;"	d
MSG_EXT_ID_MASK	components\softdevice\s210\headers\ant_parameters.h	536;"	d
NO_EVENT	components\softdevice\s210\headers\ant_parameters.h	358;"	d
NO_RESPONSE_MESSAGE	components\softdevice\s210\headers\ant_parameters.h	399;"	d
PARAMETER_NO_TX_GUARD_BAND	components\softdevice\s210\headers\ant_parameters.h	69;"	d
PARAMETER_RX_NOT_TX	components\softdevice\s210\headers\ant_parameters.h	66;"	d
PARAMETER_RX_ONLY	components\softdevice\s210\headers\ant_parameters.h	70;"	d
PARAMETER_SHARED_CHANNEL	components\softdevice\s210\headers\ant_parameters.h	68;"	d
PARAMETER_TX_NOT_RX	components\softdevice\s210\headers\ant_parameters.h	67;"	d
PROXIMITY_THRESHOLD_1	components\softdevice\s210\headers\ant_parameters.h	50;"	d
PROXIMITY_THRESHOLD_10	components\softdevice\s210\headers\ant_parameters.h	59;"	d
PROXIMITY_THRESHOLD_2	components\softdevice\s210\headers\ant_parameters.h	51;"	d
PROXIMITY_THRESHOLD_3	components\softdevice\s210\headers\ant_parameters.h	52;"	d
PROXIMITY_THRESHOLD_4	components\softdevice\s210\headers\ant_parameters.h	53;"	d
PROXIMITY_THRESHOLD_5	components\softdevice\s210\headers\ant_parameters.h	54;"	d
PROXIMITY_THRESHOLD_6	components\softdevice\s210\headers\ant_parameters.h	55;"	d
PROXIMITY_THRESHOLD_7	components\softdevice\s210\headers\ant_parameters.h	56;"	d
PROXIMITY_THRESHOLD_8	components\softdevice\s210\headers\ant_parameters.h	57;"	d
PROXIMITY_THRESHOLD_9	components\softdevice\s210\headers\ant_parameters.h	58;"	d
PROXIMITY_THRESHOLD_CUSTOM	components\softdevice\s210\headers\ant_parameters.h	48;"	d
PROXIMITY_THRESHOLD_OFF	components\softdevice\s210\headers\ant_parameters.h	49;"	d
RADIO_TX_POWER_LVL_0	components\softdevice\s210\headers\ant_parameters.h	37;"	d
RADIO_TX_POWER_LVL_1	components\softdevice\s210\headers\ant_parameters.h	38;"	d
RADIO_TX_POWER_LVL_2	components\softdevice\s210\headers\ant_parameters.h	39;"	d
RADIO_TX_POWER_LVL_3	components\softdevice\s210\headers\ant_parameters.h	40;"	d
RADIO_TX_POWER_LVL_4	components\softdevice\s210\headers\ant_parameters.h	41;"	d
RADIO_TX_POWER_LVL_CUSTOM	components\softdevice\s210\headers\ant_parameters.h	36;"	d
RESET_CMD	components\softdevice\s210\headers\ant_parameters.h	253;"	d
RESET_FLAGS_MASK	components\softdevice\s210\headers\ant_parameters.h	250;"	d
RESET_POR	components\softdevice\s210\headers\ant_parameters.h	256;"	d
RESET_RST	components\softdevice\s210\headers\ant_parameters.h	255;"	d
RESET_SUSPEND	components\softdevice\s210\headers\ant_parameters.h	251;"	d
RESET_SYNC	components\softdevice\s210\headers\ant_parameters.h	252;"	d
RESET_WDT	components\softdevice\s210\headers\ant_parameters.h	254;"	d
RESPONSE_NO_ERROR	components\softdevice\s210\headers\ant_parameters.h	357;"	d
RFACTIVE_NOTIFICATION_CONTINUOUS_MODE	components\softdevice\s210\headers\ant_parameters.h	327;"	d
RFACTIVE_NOTIFICATION_DISABLED_MODE	components\softdevice\s210\headers\ant_parameters.h	325;"	d
RFACTIVE_NOTIFICATION_MIN_TIME_THRESHOLD	components\softdevice\s210\headers\ant_parameters.h	329;"	d
RFACTIVE_NOTIFICATION_ONE_TIME_MODE	components\softdevice\s210\headers\ant_parameters.h	326;"	d
RSSI_AGC_TYPE	components\softdevice\s210\headers\ant_parameters.h	235;"	d
RSSI_DBM_TYPE	components\softdevice\s210\headers\ant_parameters.h	236;"	d
RSSI_TYPE_AGC_EXT_MESG_FIELD_SIZE	components\softdevice\s210\headers\ant_parameters.h	231;"	d
RSSI_TYPE_AGC_REGISTER_HIGH	components\softdevice\s210\headers\ant_parameters.h	240;"	d
RSSI_TYPE_AGC_REGISTER_LOW	components\softdevice\s210\headers\ant_parameters.h	239;"	d
RSSI_TYPE_AGC_THRESHOLD_OFFSET	components\softdevice\s210\headers\ant_parameters.h	238;"	d
RSSI_TYPE_DBM_EXT_MESG_FIELD_SIZE	components\softdevice\s210\headers\ant_parameters.h	232;"	d
RSSI_TYPE_DBM_SETTING	components\softdevice\s210\headers\ant_parameters.h	243;"	d
RSSI_TYPE_DBM_VALUE	components\softdevice\s210\headers\ant_parameters.h	242;"	d
RSSI_TYPE_OFFSET	components\softdevice\s210\headers\ant_parameters.h	234;"	d
SDU_MASK_ACK_CONFIG_BIT	components\softdevice\s210\headers\ant_parameters.h	281;"	d
SEQUENCE_FIRST_MESSAGE	components\softdevice\s210\headers\ant_parameters.h	192;"	d
SEQUENCE_LAST_MESSAGE	components\softdevice\s210\headers\ant_parameters.h	193;"	d
SEQUENCE_NUMBER_INC	components\softdevice\s210\headers\ant_parameters.h	194;"	d
SEQUENCE_NUMBER_MASK	components\softdevice\s210\headers\ant_parameters.h	190;"	d
SEQUENCE_NUMBER_ROLLOVER	components\softdevice\s210\headers\ant_parameters.h	191;"	d
STATUS_ASSIGNED_CHANNEL	components\softdevice\s210\headers\ant_parameters.h	119;"	d
STATUS_CHANNEL_STATE_MASK	components\softdevice\s210\headers\ant_parameters.h	117;"	d
STATUS_SEARCHING_CHANNEL	components\softdevice\s210\headers\ant_parameters.h	120;"	d
STATUS_TRACKING_CHANNEL	components\softdevice\s210\headers\ant_parameters.h	121;"	d
STATUS_UNASSIGNED_CHANNEL	components\softdevice\s210\headers\ant_parameters.h	118;"	d
TRANSFER_BUSY	components\softdevice\s210\headers\ant_parameters.h	381;"	d
TRANSFER_IN_ERROR	components\softdevice\s210\headers\ant_parameters.h	380;"	d
TRANSFER_IN_PROGRESS	components\softdevice\s210\headers\ant_parameters.h	378;"	d
TRANSFER_SEQUENCE_NUMBER_ERROR	components\softdevice\s210\headers\ant_parameters.h	379;"	d
WAKEON_RF_ACTIVITY_ALL	components\softdevice\s210\headers\ant_parameters.h	339;"	d
WAKEON_RF_ACTIVITY_NONE	components\softdevice\s210\headers\ant_parameters.h	336;"	d
WAKEON_RF_ACTIVITY_RX	components\softdevice\s210\headers\ant_parameters.h	338;"	d
WAKEON_RF_ACTIVITY_TX	components\softdevice\s210\headers\ant_parameters.h	337;"	d
aucExtData	components\softdevice\s210\headers\ant_parameters.h	/^                  uint8_t aucExtData[MESG_MAX_EXT_DATA_SIZE]; \/\/ extended message data$/;"	m	struct:__anon823::__anon824::__anon825::__anon826::__anon827::__anon828
aucFramedData	components\softdevice\s210\headers\ant_parameters.h	/^         uint8_t aucFramedData[MESG_FRAMED_SIZE]; \/\/ pointer for serial framer$/;"	m	union:__anon823::__anon824::__anon825
aucMesgData	components\softdevice\s210\headers\ant_parameters.h	/^               uint8_t aucMesgData[MESG_MAX_SIZE_VALUE]; \/\/ the message data$/;"	m	union:__anon823::__anon824::__anon825::__anon826::__anon827
aucMessage	components\softdevice\s210\headers\ant_parameters.h	/^   uint8_t aucMessage[MESG_BUFFER_SIZE]; \/\/ the complete message buffer pointer$/;"	m	union:__anon823
aucPayload	components\softdevice\s210\headers\ant_parameters.h	/^                  uint8_t aucPayload[ANT_STANDARD_DATA_PAYLOAD_SIZE]; \/\/ ANT message payload$/;"	m	struct:__anon823::__anon824::__anon825::__anon826::__anon827::__anon828
bANTDeviceID	components\softdevice\s210\headers\ant_parameters.h	/^      uint8_t bANTDeviceID  : 1;$/;"	m	struct:__anon821::__anon822
bANTRssi	components\softdevice\s210\headers\ant_parameters.h	/^      uint8_t bANTRssi      : 1;$/;"	m	struct:__anon821::__anon822
bANTTimeStamp	components\softdevice\s210\headers\ant_parameters.h	/^      uint8_t bANTTimeStamp : 1;$/;"	m	struct:__anon821::__anon822
bExtFieldCont	components\softdevice\s210\headers\ant_parameters.h	/^      uint8_t bExtFieldCont : 1;$/;"	m	struct:__anon821::__anon822
sExtMesgBF	components\softdevice\s210\headers\ant_parameters.h	/^                  EXT_MESG_BF sExtMesgBF; \/\/ extended message bitfield (NOTE: this will not be here for longer data messages)$/;"	m	struct:__anon823::__anon824::__anon825::__anon826::__anon827::__anon828
stExtMesgBF	components\softdevice\s210\headers\ant_parameters.h	/^   }stExtMesgBF;$/;"	m	union:__anon821	typeref:struct:__anon821::__anon822
stFramedData	components\softdevice\s210\headers\ant_parameters.h	/^         }stFramedData;$/;"	m	union:__anon823::__anon824::__anon825	typeref:struct:__anon823::__anon824::__anon825::__anon826
stMesgData	components\softdevice\s210\headers\ant_parameters.h	/^               }stMesgData;$/;"	m	union:__anon823::__anon824::__anon825::__anon826::__anon827	typeref:struct:__anon823::__anon824::__anon825::__anon826::__anon827::__anon828
stMessage	components\softdevice\s210\headers\ant_parameters.h	/^   }stMessage;$/;"	m	union:__anon823	typeref:struct:__anon823::__anon824
uData0	components\softdevice\s210\headers\ant_parameters.h	/^                  }uData0;$/;"	m	struct:__anon823::__anon824::__anon825::__anon826::__anon827::__anon828	typeref:union:__anon823::__anon824::__anon825::__anon826::__anon827::__anon828::__anon829
uFramedData	components\softdevice\s210\headers\ant_parameters.h	/^      }uFramedData;$/;"	m	struct:__anon823::__anon824	typeref:union:__anon823::__anon824::__anon825
uMesgData	components\softdevice\s210\headers\ant_parameters.h	/^            }uMesgData;$/;"	m	struct:__anon823::__anon824::__anon825::__anon826	typeref:union:__anon823::__anon824::__anon825::__anon826::__anon827
ucChannel	components\softdevice\s210\headers\ant_parameters.h	/^                     uint8_t ucChannel; \/\/ ANT channel number$/;"	m	union:__anon823::__anon824::__anon825::__anon826::__anon827::__anon828::__anon829
ucCheckSum	components\softdevice\s210\headers\ant_parameters.h	/^      uint8_t ucCheckSum; \/\/ the message checksum$/;"	m	struct:__anon823::__anon824
ucExtMesgBF	components\softdevice\s210\headers\ant_parameters.h	/^   uint8_t ucExtMesgBF;$/;"	m	union:__anon821
ucMesgID	components\softdevice\s210\headers\ant_parameters.h	/^            uint8_t ucMesgID; \/\/ the message ID$/;"	m	struct:__anon823::__anon824::__anon825::__anon826
ucSize	components\softdevice\s210\headers\ant_parameters.h	/^      uint8_t ucSize; \/\/ the message size$/;"	m	struct:__anon823::__anon824
ucSubID	components\softdevice\s210\headers\ant_parameters.h	/^                     uint8_t ucSubID; \/\/ subID portion of ext ID message$/;"	m	union:__anon823::__anon824::__anon825::__anon826::__anon827::__anon828::__anon829
uint8_t	components\softdevice\s210\headers\ant_parameters.h	/^      uint8_t               : 1;$/;"	m	struct:__anon821::__anon822
ulForceAlign	components\softdevice\s210\headers\ant_parameters.h	/^   uint32_t ulForceAlign; \/\/ force the struct to be 4-byte aligned, required for some casting in command.c$/;"	m	union:__anon823
NRF_ERROR_BASE_NUM	components\softdevice\s210\headers\nrf_error.h	22;"	d
NRF_ERROR_BUSY	components\softdevice\s210\headers\nrf_error.h	45;"	d
NRF_ERROR_DATA_SIZE	components\softdevice\s210\headers\nrf_error.h	40;"	d
NRF_ERROR_FORBIDDEN	components\softdevice\s210\headers\nrf_error.h	43;"	d
NRF_ERROR_H__	components\softdevice\s210\headers\nrf_error.h	18;"	d
NRF_ERROR_INTERNAL	components\softdevice\s210\headers\nrf_error.h	31;"	d
NRF_ERROR_INVALID_ADDR	components\softdevice\s210\headers\nrf_error.h	44;"	d
NRF_ERROR_INVALID_DATA	components\softdevice\s210\headers\nrf_error.h	39;"	d
NRF_ERROR_INVALID_FLAGS	components\softdevice\s210\headers\nrf_error.h	38;"	d
NRF_ERROR_INVALID_LENGTH	components\softdevice\s210\headers\nrf_error.h	37;"	d
NRF_ERROR_INVALID_PARAM	components\softdevice\s210\headers\nrf_error.h	35;"	d
NRF_ERROR_INVALID_STATE	components\softdevice\s210\headers\nrf_error.h	36;"	d
NRF_ERROR_NOT_FOUND	components\softdevice\s210\headers\nrf_error.h	33;"	d
NRF_ERROR_NOT_SUPPORTED	components\softdevice\s210\headers\nrf_error.h	34;"	d
NRF_ERROR_NO_MEM	components\softdevice\s210\headers\nrf_error.h	32;"	d
NRF_ERROR_NULL	components\softdevice\s210\headers\nrf_error.h	42;"	d
NRF_ERROR_SDM_BASE_NUM	components\softdevice\s210\headers\nrf_error.h	23;"	d
NRF_ERROR_SOC_BASE_NUM	components\softdevice\s210\headers\nrf_error.h	24;"	d
NRF_ERROR_SOFTDEVICE_NOT_ENABLED	components\softdevice\s210\headers\nrf_error.h	30;"	d
NRF_ERROR_STK_BASE_NUM	components\softdevice\s210\headers\nrf_error.h	25;"	d
NRF_ERROR_SVC_HANDLER_MISSING	components\softdevice\s210\headers\nrf_error.h	29;"	d
NRF_ERROR_TIMEOUT	components\softdevice\s210\headers\nrf_error.h	41;"	d
NRF_SUCCESS	components\softdevice\s210\headers\nrf_error.h	28;"	d
NRF_ERROR_SDM_H__	components\softdevice\s210\headers\nrf_error_sdm.h	20;"	d
NRF_ERROR_SDM_INCORRECT_CLENR0	components\softdevice\s210\headers\nrf_error_sdm.h	26;"	d
NRF_ERROR_SDM_INCORRECT_INTERRUPT_CONFIGURATION	components\softdevice\s210\headers\nrf_error_sdm.h	25;"	d
NRF_ERROR_SDM_LFCLK_SOURCE_UNKNOWN	components\softdevice\s210\headers\nrf_error_sdm.h	24;"	d
NRF_ERROR_SOC_H__	components\softdevice\s210\headers\nrf_error_soc.h	21;"	d
NRF_ERROR_SOC_MUTEX_ALREADY_TAKEN	components\softdevice\s210\headers\nrf_error_soc.h	26;"	d
NRF_ERROR_SOC_NVIC_INTERRUPT_NOT_AVAILABLE	components\softdevice\s210\headers\nrf_error_soc.h	29;"	d
NRF_ERROR_SOC_NVIC_INTERRUPT_PRIORITY_NOT_ALLOWED	components\softdevice\s210\headers\nrf_error_soc.h	30;"	d
NRF_ERROR_SOC_NVIC_SHOULD_NOT_RETURN	components\softdevice\s210\headers\nrf_error_soc.h	31;"	d
NRF_ERROR_SOC_POWER_MODE_UNKNOWN	components\softdevice\s210\headers\nrf_error_soc.h	34;"	d
NRF_ERROR_SOC_POWER_OFF_SHOULD_NOT_RETURN	components\softdevice\s210\headers\nrf_error_soc.h	36;"	d
NRF_ERROR_SOC_POWER_POF_THRESHOLD_UNKNOWN	components\softdevice\s210\headers\nrf_error_soc.h	35;"	d
NRF_ERROR_SOC_PPI_INVALID_CHANNEL	components\softdevice\s210\headers\nrf_error_soc.h	42;"	d
NRF_ERROR_SOC_PPI_INVALID_GROUP	components\softdevice\s210\headers\nrf_error_soc.h	43;"	d
NRF_ERROR_SOC_RAND_NOT_ENOUGH_VALUES	components\softdevice\s210\headers\nrf_error_soc.h	39;"	d
MBR_SVC_BASE	components\softdevice\s210\headers\nrf_mbr.h	29;"	d
NRF_MBR_COMMANDS	components\softdevice\s210\headers\nrf_mbr.h	/^enum NRF_MBR_COMMANDS$/;"	g
NRF_MBR_H__	components\softdevice\s210\headers\nrf_mbr.h	19;"	d
NRF_MBR_SVCS	components\softdevice\s210\headers\nrf_mbr.h	/^enum NRF_MBR_SVCS$/;"	g
SD_MBR_COMMAND	components\softdevice\s210\headers\nrf_mbr.h	/^  SD_MBR_COMMAND = MBR_SVC_BASE, \/**< ::sd_mbr_command *\/$/;"	e	enum:NRF_MBR_SVCS
SD_MBR_COMMAND_COMPARE	components\softdevice\s210\headers\nrf_mbr.h	/^  SD_MBR_COMMAND_COMPARE,               \/**< This command works like memcmp. @see ::sd_mbr_command_compare_t*\/$/;"	e	enum:NRF_MBR_COMMANDS
SD_MBR_COMMAND_COPY_BL	components\softdevice\s210\headers\nrf_mbr.h	/^  SD_MBR_COMMAND_COPY_BL,               \/**< Copy a new a new BootLoader. @see sd_mbr_command_copy_bl_t *\/$/;"	e	enum:NRF_MBR_COMMANDS
SD_MBR_COMMAND_COPY_SD	components\softdevice\s210\headers\nrf_mbr.h	/^  SD_MBR_COMMAND_COPY_SD,               \/**< Copy a new SoftDevice. @see ::sd_mbr_command_copy_sd_t*\/$/;"	e	enum:NRF_MBR_COMMANDS
SD_MBR_COMMAND_INIT_SD	components\softdevice\s210\headers\nrf_mbr.h	/^  SD_MBR_COMMAND_INIT_SD,               \/**< Init forwarding interrupts to SD, and run reset function in SD*\/$/;"	e	enum:NRF_MBR_COMMANDS
SD_MBR_COMMAND_VECTOR_TABLE_BASE_SET	components\softdevice\s210\headers\nrf_mbr.h	/^  SD_MBR_COMMAND_VECTOR_TABLE_BASE_SET, \/**< Start forwarding all exception to this address @see ::sd_mbr_command_vector_table_base_set_t*\/$/;"	e	enum:NRF_MBR_COMMANDS
address	components\softdevice\s210\headers\nrf_mbr.h	/^  uint32_t address; \/**< The base address of the interrupt vector table for forwarded interrupts.*\/$/;"	m	struct:__anon833
base_set	components\softdevice\s210\headers\nrf_mbr.h	/^    sd_mbr_command_vector_table_base_set_t base_set; \/**< Parameters for vector table base set.*\/$/;"	m	union:__anon834::__anon835
bl_len	components\softdevice\s210\headers\nrf_mbr.h	/^  uint32_t bl_len;   \/**< Number of 32 bit words to copy for BootLoader *\/$/;"	m	struct:__anon832
bl_src	components\softdevice\s210\headers\nrf_mbr.h	/^  uint32_t *bl_src;  \/**< Pointer to the source of the Bootloader to be be copied.*\/$/;"	m	struct:__anon832
command	components\softdevice\s210\headers\nrf_mbr.h	/^  uint32_t command;  \/**< type of command to be issued see @ref NRF_MBR_COMMANDS. *\/$/;"	m	struct:__anon834
compare	components\softdevice\s210\headers\nrf_mbr.h	/^    sd_mbr_command_compare_t compare;  \/**< Parameters for verify*\/$/;"	m	union:__anon834::__anon835
copy_bl	components\softdevice\s210\headers\nrf_mbr.h	/^    sd_mbr_command_copy_bl_t copy_bl;  \/**< Parameters for copy SoftDevice and BootLoader*\/$/;"	m	union:__anon834::__anon835
copy_sd	components\softdevice\s210\headers\nrf_mbr.h	/^    sd_mbr_command_copy_sd_t copy_sd;  \/**< Parameters for copy*\/$/;"	m	union:__anon834::__anon835
dst	components\softdevice\s210\headers\nrf_mbr.h	/^  uint32_t *dst;  \/**< Pointer to the destination where the content is to be copied.*\/$/;"	m	struct:__anon830
len	components\softdevice\s210\headers\nrf_mbr.h	/^  uint32_t len;   \/**< Number of 32 bit words to compare*\/$/;"	m	struct:__anon831
len	components\softdevice\s210\headers\nrf_mbr.h	/^  uint32_t len;   \/**< Number of 32 bit words to copy. Must be a multiple of 256 words*\/$/;"	m	struct:__anon830
params	components\softdevice\s210\headers\nrf_mbr.h	/^  } params;$/;"	m	struct:__anon834	typeref:union:__anon834::__anon835
ptr1	components\softdevice\s210\headers\nrf_mbr.h	/^  uint32_t *ptr1; \/**< Pointer to block of memory *\/$/;"	m	struct:__anon831
ptr2	components\softdevice\s210\headers\nrf_mbr.h	/^  uint32_t *ptr2; \/**< Pointer to block of memory *\/$/;"	m	struct:__anon831
sd_mbr_command_compare_t	components\softdevice\s210\headers\nrf_mbr.h	/^}sd_mbr_command_compare_t;$/;"	t	typeref:struct:__anon831
sd_mbr_command_copy_bl_t	components\softdevice\s210\headers\nrf_mbr.h	/^}sd_mbr_command_copy_bl_t;$/;"	t	typeref:struct:__anon832
sd_mbr_command_copy_sd_t	components\softdevice\s210\headers\nrf_mbr.h	/^}sd_mbr_command_copy_sd_t;$/;"	t	typeref:struct:__anon830
sd_mbr_command_t	components\softdevice\s210\headers\nrf_mbr.h	/^}sd_mbr_command_t;$/;"	t	typeref:struct:__anon834
sd_mbr_command_vector_table_base_set_t	components\softdevice\s210\headers\nrf_mbr.h	/^}sd_mbr_command_vector_table_base_set_t;$/;"	t	typeref:struct:__anon833
src	components\softdevice\s210\headers\nrf_mbr.h	/^  uint32_t *src;  \/**< Pointer to the source of data to be copied.*\/$/;"	m	struct:__anon830
NRF_PPI_ALL_APP_CHANNELS_MASK	components\softdevice\s210\headers\nrf_sd_def.h	19;"	d
NRF_PPI_ALL_APP_GROUPS_MASK	components\softdevice\s210\headers\nrf_sd_def.h	21;"	d
NRF_PPI_PROG_APP_CHANNELS_MASK	components\softdevice\s210\headers\nrf_sd_def.h	20;"	d
NRF_PPI_RESTRICTED	components\softdevice\s210\headers\nrf_sd_def.h	18;"	d
NRF_SD_DEF_H__	components\softdevice\s210\headers\nrf_sd_def.h	14;"	d
NRF_CLOCK_LFCLKSRCS	components\softdevice\s210\headers\nrf_sdm.h	/^enum NRF_CLOCK_LFCLKSRCS$/;"	g
NRF_CLOCK_LFCLKSRC_RC_250_PPM_1000MS_CALIBRATION	components\softdevice\s210\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_RC_250_PPM_1000MS_CALIBRATION,       \/**< LFCLK RC oscillator, 1000ms calibration interval.*\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_RC_250_PPM_2000MS_CALIBRATION	components\softdevice\s210\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_RC_250_PPM_2000MS_CALIBRATION,       \/**< LFCLK RC oscillator, 2000ms calibration interval.*\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_RC_250_PPM_250MS_CALIBRATION	components\softdevice\s210\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_RC_250_PPM_250MS_CALIBRATION,        \/**< LFCLK RC oscillator, 250ms  calibration interval.*\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_RC_250_PPM_4000MS_CALIBRATION	components\softdevice\s210\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_RC_250_PPM_4000MS_CALIBRATION,       \/**< LFCLK RC oscillator, 4000ms calibration interval.*\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_RC_250_PPM_500MS_CALIBRATION	components\softdevice\s210\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_RC_250_PPM_500MS_CALIBRATION,        \/**< LFCLK RC oscillator, 500ms  calibration interval.*\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_RC_250_PPM_8000MS_CALIBRATION	components\softdevice\s210\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_RC_250_PPM_8000MS_CALIBRATION,       \/**< LFCLK RC oscillator, 8000ms calibration interval.*\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_1000MS_CALIBRATION	components\softdevice\s210\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_1000MS_CALIBRATION,  \/**< LFCLK RC oscillator. Temperature checked every 1000ms, if changed above a threshold, a calibration is done.*\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_16000MS_CALIBRATION	components\softdevice\s210\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_16000MS_CALIBRATION, \/**< LFCLK RC oscillator. Temperature checked every 16000ms, if changed above a threshold, a calibration is done.*\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_2000MS_CALIBRATION	components\softdevice\s210\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_2000MS_CALIBRATION,  \/**< LFCLK RC oscillator. Temperature checked every 2000ms, if changed above a threshold, a calibration is done.*\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_4000MS_CALIBRATION	components\softdevice\s210\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_4000MS_CALIBRATION,  \/**< LFCLK RC oscillator. Temperature checked every 4000ms, if changed above a threshold, a calibration is done.*\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_8000MS_CALIBRATION	components\softdevice\s210\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_8000MS_CALIBRATION,  \/**< LFCLK RC oscillator. Temperature checked every 8000ms, if changed above a threshold, a calibration is done.*\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_SYNTH_250_PPM	components\softdevice\s210\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_SYNTH_250_PPM,                       \/**< LFCLK Synthesized from HFCLK.                    *\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_XTAL_100_PPM	components\softdevice\s210\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_XTAL_100_PPM,                        \/**< LFCLK crystal oscillator 100 PPM accuracy.       *\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_XTAL_150_PPM	components\softdevice\s210\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_XTAL_150_PPM,                        \/**< LFCLK crystal oscillator 150 PPM accuracy.       *\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_XTAL_20_PPM	components\softdevice\s210\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_XTAL_20_PPM,                         \/**< LFCLK crystal oscillator 20 PPM accuracy.        *\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_XTAL_250_PPM	components\softdevice\s210\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_XTAL_250_PPM,                        \/**< LFCLK crystal oscillator 250 PPM accuracy.       *\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_XTAL_30_PPM	components\softdevice\s210\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_XTAL_30_PPM,                         \/**< LFCLK crystal oscillator 30 PPM accuracy.        *\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_XTAL_500_PPM	components\softdevice\s210\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_XTAL_500_PPM,                        \/**< LFCLK crystal oscillator 500 PPM accuracy.       *\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_XTAL_50_PPM	components\softdevice\s210\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_XTAL_50_PPM,                         \/**< LFCLK crystal oscillator 50 PPM accuracy.        *\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_CLOCK_LFCLKSRC_XTAL_75_PPM	components\softdevice\s210\headers\nrf_sdm.h	/^  NRF_CLOCK_LFCLKSRC_XTAL_75_PPM,                         \/**< LFCLK crystal oscillator 75 PPM accuracy.        *\/$/;"	e	enum:NRF_CLOCK_LFCLKSRCS
NRF_SDM_H__	components\softdevice\s210\headers\nrf_sdm.h	19;"	d
NRF_SD_SVCS	components\softdevice\s210\headers\nrf_sdm.h	/^enum NRF_SD_SVCS$/;"	g
SDM_SVC_BASE	components\softdevice\s210\headers\nrf_sdm.h	30;"	d
SD_SOFTDEVICE_DISABLE	components\softdevice\s210\headers\nrf_sdm.h	/^  SD_SOFTDEVICE_DISABLE,               \/**< ::sd_softdevice_disable *\/$/;"	e	enum:NRF_SD_SVCS
SD_SOFTDEVICE_ENABLE	components\softdevice\s210\headers\nrf_sdm.h	/^  SD_SOFTDEVICE_ENABLE = SDM_SVC_BASE, \/**< ::sd_softdevice_enable *\/$/;"	e	enum:NRF_SD_SVCS
SD_SOFTDEVICE_IS_ENABLED	components\softdevice\s210\headers\nrf_sdm.h	/^  SD_SOFTDEVICE_IS_ENABLED,            \/**< ::sd_softdevice_is_enabled *\/$/;"	e	enum:NRF_SD_SVCS
SD_SOFTDEVICE_VECTOR_TABLE_BASE_SET	components\softdevice\s210\headers\nrf_sdm.h	/^  SD_SOFTDEVICE_VECTOR_TABLE_BASE_SET, \/**< ::sd_softdevice_vector_table_base_set *\/$/;"	e	enum:NRF_SD_SVCS
SVC_SDM_LAST	components\softdevice\s210\headers\nrf_sdm.h	/^  SVC_SDM_LAST                         \/**< Placeholder for last SDM SVC *\/$/;"	e	enum:NRF_SD_SVCS
nrf_clock_lfclksrc_t	components\softdevice\s210\headers\nrf_sdm.h	/^typedef uint32_t nrf_clock_lfclksrc_t;$/;"	t
softdevice_assertion_handler_t	components\softdevice\s210\headers\nrf_sdm.h	/^typedef void (*softdevice_assertion_handler_t)(uint32_t pc, uint16_t line_number, const uint8_t * p_file_name);$/;"	t
NRF_APP_PRIORITIES	components\softdevice\s210\headers\nrf_soc.h	/^enum NRF_APP_PRIORITIES$/;"	g
NRF_APP_PRIORITY_HIGH	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_APP_PRIORITY_HIGH = 1,$/;"	e	enum:NRF_APP_PRIORITIES
NRF_APP_PRIORITY_LOW	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_APP_PRIORITY_LOW = 3$/;"	e	enum:NRF_APP_PRIORITIES
NRF_EVT_FLASH_OPERATION_ERROR	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_EVT_FLASH_OPERATION_ERROR,                \/**< Event indicating that the ongoing flash operation has timed out with an error. *\/$/;"	e	enum:NRF_SOC_EVTS
NRF_EVT_FLASH_OPERATION_SUCCESS	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_EVT_FLASH_OPERATION_SUCCESS,              \/**< Event indicating that the ongoing flash operation has completed successfully. *\/$/;"	e	enum:NRF_SOC_EVTS
NRF_EVT_HFCLKSTARTED	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_EVT_HFCLKSTARTED,                         \/**< Event indicating that the HFCLK has started. *\/$/;"	e	enum:NRF_SOC_EVTS
NRF_EVT_NUMBER_OF_EVTS	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_EVT_NUMBER_OF_EVTS$/;"	e	enum:NRF_SOC_EVTS
NRF_EVT_POWER_FAILURE_WARNING	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_EVT_POWER_FAILURE_WARNING,                \/**< Event indicating that a power failure warning has occurred. *\/$/;"	e	enum:NRF_SOC_EVTS
NRF_EVT_RADIO_BLOCKED	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_EVT_RADIO_BLOCKED,                        \/**< Event indicating that a radio timeslot was blocked. *\/$/;"	e	enum:NRF_SOC_EVTS
NRF_EVT_RADIO_CANCELED	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_EVT_RADIO_CANCELED,                       \/**< Event indicating that a radio timeslot was canceled by SoftDevice. *\/$/;"	e	enum:NRF_SOC_EVTS
NRF_EVT_RADIO_SESSION_CLOSED	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_EVT_RADIO_SESSION_CLOSED,                 \/**< Event indicating that a radio session is closed. *\/$/;"	e	enum:NRF_SOC_EVTS
NRF_EVT_RADIO_SESSION_IDLE	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_EVT_RADIO_SESSION_IDLE,                   \/**< Event indicating that a radio session is idle. *\/$/;"	e	enum:NRF_SOC_EVTS
NRF_EVT_RADIO_SIGNAL_CALLBACK_INVALID_RETURN	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_EVT_RADIO_SIGNAL_CALLBACK_INVALID_RETURN, \/**< Event indicating that a radio signal callback handler return was invalid. *\/$/;"	e	enum:NRF_SOC_EVTS
NRF_MUTEX_FREE	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_MUTEX_FREE,$/;"	e	enum:NRF_MUTEX_VALUES
NRF_MUTEX_TAKEN	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_MUTEX_TAKEN$/;"	e	enum:NRF_MUTEX_VALUES
NRF_MUTEX_VALUES	components\softdevice\s210\headers\nrf_soc.h	/^enum NRF_MUTEX_VALUES$/;"	g
NRF_POWER_DCDC_MODES	components\softdevice\s210\headers\nrf_soc.h	/^enum NRF_POWER_DCDC_MODES$/;"	g
NRF_POWER_DCDC_MODE_AUTOMATIC	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_POWER_DCDC_MODE_AUTOMATIC     \/**< The DCDC is automatically managed. *\/$/;"	e	enum:NRF_POWER_DCDC_MODES
NRF_POWER_DCDC_MODE_OFF	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_POWER_DCDC_MODE_OFF,          \/**< The DCDC is always off. *\/$/;"	e	enum:NRF_POWER_DCDC_MODES
NRF_POWER_DCDC_MODE_ON	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_POWER_DCDC_MODE_ON,           \/**< The DCDC is always on. *\/$/;"	e	enum:NRF_POWER_DCDC_MODES
NRF_POWER_MODES	components\softdevice\s210\headers\nrf_soc.h	/^enum NRF_POWER_MODES$/;"	g
NRF_POWER_MODE_CONSTLAT	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_POWER_MODE_CONSTLAT,  \/**< Constant latency mode. See power management in the reference manual. *\/$/;"	e	enum:NRF_POWER_MODES
NRF_POWER_MODE_LOWPWR	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_POWER_MODE_LOWPWR     \/**< Low power mode. See power management in the reference manual. *\/$/;"	e	enum:NRF_POWER_MODES
NRF_POWER_THRESHOLDS	components\softdevice\s210\headers\nrf_soc.h	/^enum NRF_POWER_THRESHOLDS$/;"	g
NRF_POWER_THRESHOLD_V21	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_POWER_THRESHOLD_V21,  \/**< 2.1 Volts power failure threshold. *\/$/;"	e	enum:NRF_POWER_THRESHOLDS
NRF_POWER_THRESHOLD_V23	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_POWER_THRESHOLD_V23,  \/**< 2.3 Volts power failure threshold. *\/$/;"	e	enum:NRF_POWER_THRESHOLDS
NRF_POWER_THRESHOLD_V25	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_POWER_THRESHOLD_V25,  \/**< 2.5 Volts power failure threshold. *\/$/;"	e	enum:NRF_POWER_THRESHOLDS
NRF_POWER_THRESHOLD_V27	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_POWER_THRESHOLD_V27   \/**< 2.7 Volts power failure threshold. *\/$/;"	e	enum:NRF_POWER_THRESHOLDS
NRF_RADIO_CALLBACK_SIGNAL_TYPE	components\softdevice\s210\headers\nrf_soc.h	/^enum NRF_RADIO_CALLBACK_SIGNAL_TYPE$/;"	g
NRF_RADIO_CALLBACK_SIGNAL_TYPE_EXTEND_FAILED	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_RADIO_CALLBACK_SIGNAL_TYPE_EXTEND_FAILED,     \/**< This signal indicates extend action failed. *\/$/;"	e	enum:NRF_RADIO_CALLBACK_SIGNAL_TYPE
NRF_RADIO_CALLBACK_SIGNAL_TYPE_EXTEND_SUCCEEDED	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_RADIO_CALLBACK_SIGNAL_TYPE_EXTEND_SUCCEEDED   \/**< This signal indicates extend action succeeded. *\/$/;"	e	enum:NRF_RADIO_CALLBACK_SIGNAL_TYPE
NRF_RADIO_CALLBACK_SIGNAL_TYPE_RADIO	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_RADIO_CALLBACK_SIGNAL_TYPE_RADIO,             \/**< This signal indicates the NRF_RADIO interrupt. *\/$/;"	e	enum:NRF_RADIO_CALLBACK_SIGNAL_TYPE
NRF_RADIO_CALLBACK_SIGNAL_TYPE_START	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_RADIO_CALLBACK_SIGNAL_TYPE_START,            \/**< This signal indicates the start of the radio timeslot. *\/$/;"	e	enum:NRF_RADIO_CALLBACK_SIGNAL_TYPE
NRF_RADIO_CALLBACK_SIGNAL_TYPE_TIMER0	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_RADIO_CALLBACK_SIGNAL_TYPE_TIMER0,            \/**< This signal indicates the NRF_TIMER0 interrupt. *\/$/;"	e	enum:NRF_RADIO_CALLBACK_SIGNAL_TYPE
NRF_RADIO_DISTANCE_MAX_US	components\softdevice\s210\headers\nrf_soc.h	52;"	d
NRF_RADIO_EARLIEST_TIMEOUT_MAX_US	components\softdevice\s210\headers\nrf_soc.h	54;"	d
NRF_RADIO_HFCLK_CFG	components\softdevice\s210\headers\nrf_soc.h	/^enum NRF_RADIO_HFCLK_CFG$/;"	g
NRF_RADIO_HFCLK_CFG_DEFAULT	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_RADIO_HFCLK_CFG_DEFAULT,                      \/**< Use the currently selected oscillator as HF clock source during the timeslot (i.e. the source is not specified). *\/$/;"	e	enum:NRF_RADIO_HFCLK_CFG
NRF_RADIO_HFCLK_CFG_FORCE_XTAL	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_RADIO_HFCLK_CFG_FORCE_XTAL,                   \/**< Force external crystal to be used as HF clock source during whole the timeslot. *\/$/;"	e	enum:NRF_RADIO_HFCLK_CFG
NRF_RADIO_LENGTH_MAX_US	components\softdevice\s210\headers\nrf_soc.h	50;"	d
NRF_RADIO_LENGTH_MIN_US	components\softdevice\s210\headers\nrf_soc.h	49;"	d
NRF_RADIO_MINIMUM_TIMESLOT_LENGTH_EXTENSION_TIME_US	components\softdevice\s210\headers\nrf_soc.h	38;"	d
NRF_RADIO_NOTIFICATION_DISTANCES	components\softdevice\s210\headers\nrf_soc.h	/^enum NRF_RADIO_NOTIFICATION_DISTANCES$/;"	g
NRF_RADIO_NOTIFICATION_DISTANCE_1740US	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_RADIO_NOTIFICATION_DISTANCE_1740US,   \/**< The distance from the active notification to start of radio activity. *\/$/;"	e	enum:NRF_RADIO_NOTIFICATION_DISTANCES
NRF_RADIO_NOTIFICATION_DISTANCE_2680US	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_RADIO_NOTIFICATION_DISTANCE_2680US,   \/**< The distance from the active notification to start of radio activity. *\/$/;"	e	enum:NRF_RADIO_NOTIFICATION_DISTANCES
NRF_RADIO_NOTIFICATION_DISTANCE_3620US	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_RADIO_NOTIFICATION_DISTANCE_3620US,   \/**< The distance from the active notification to start of radio activity. *\/$/;"	e	enum:NRF_RADIO_NOTIFICATION_DISTANCES
NRF_RADIO_NOTIFICATION_DISTANCE_4560US	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_RADIO_NOTIFICATION_DISTANCE_4560US,   \/**< The distance from the active notification to start of radio activity. *\/$/;"	e	enum:NRF_RADIO_NOTIFICATION_DISTANCES
NRF_RADIO_NOTIFICATION_DISTANCE_5500US	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_RADIO_NOTIFICATION_DISTANCE_5500US    \/**< The distance from the active notification to start of radio activity. *\/$/;"	e	enum:NRF_RADIO_NOTIFICATION_DISTANCES
NRF_RADIO_NOTIFICATION_DISTANCE_800US	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_RADIO_NOTIFICATION_DISTANCE_800US,    \/**< The distance from the active notification to start of radio activity. *\/$/;"	e	enum:NRF_RADIO_NOTIFICATION_DISTANCES
NRF_RADIO_NOTIFICATION_DISTANCE_NONE	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_RADIO_NOTIFICATION_DISTANCE_NONE = 0, \/**< The event does not have a notification. *\/$/;"	e	enum:NRF_RADIO_NOTIFICATION_DISTANCES
NRF_RADIO_NOTIFICATION_INACTIVE_GUARANTEED_TIME_US	components\softdevice\s210\headers\nrf_soc.h	35;"	d
NRF_RADIO_NOTIFICATION_TYPES	components\softdevice\s210\headers\nrf_soc.h	/^enum NRF_RADIO_NOTIFICATION_TYPES$/;"	g
NRF_RADIO_NOTIFICATION_TYPE_INT_ON_ACTIVE	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_RADIO_NOTIFICATION_TYPE_INT_ON_ACTIVE,   \/**< Using interrupt for notification when the radio will be enabled. *\/$/;"	e	enum:NRF_RADIO_NOTIFICATION_TYPES
NRF_RADIO_NOTIFICATION_TYPE_INT_ON_BOTH	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_RADIO_NOTIFICATION_TYPE_INT_ON_BOTH,     \/**< Using interrupt for notification both when the radio will be enabled and disabled. *\/$/;"	e	enum:NRF_RADIO_NOTIFICATION_TYPES
NRF_RADIO_NOTIFICATION_TYPE_INT_ON_INACTIVE	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_RADIO_NOTIFICATION_TYPE_INT_ON_INACTIVE, \/**< Using interrupt for notification when the radio has been disabled. *\/$/;"	e	enum:NRF_RADIO_NOTIFICATION_TYPES
NRF_RADIO_NOTIFICATION_TYPE_NONE	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_RADIO_NOTIFICATION_TYPE_NONE = 0,        \/**< The event does not have a radio notification signal. *\/$/;"	e	enum:NRF_RADIO_NOTIFICATION_TYPES
NRF_RADIO_PRIORITY	components\softdevice\s210\headers\nrf_soc.h	/^enum NRF_RADIO_PRIORITY$/;"	g
NRF_RADIO_PRIORITY_HIGH	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_RADIO_PRIORITY_HIGH,                          \/**< High (equal priority as the normal connection priority of the SoftDevice stack(s)). *\/$/;"	e	enum:NRF_RADIO_PRIORITY
NRF_RADIO_PRIORITY_NORMAL	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_RADIO_PRIORITY_NORMAL,                        \/**< Normal (equal priority as the priority of secondary activites of the SoftDevice stack(s)). *\/$/;"	e	enum:NRF_RADIO_PRIORITY
NRF_RADIO_REQUEST_TYPE	components\softdevice\s210\headers\nrf_soc.h	/^enum NRF_RADIO_REQUEST_TYPE$/;"	g
NRF_RADIO_REQ_TYPE_EARLIEST	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_RADIO_REQ_TYPE_EARLIEST,                      \/**< Request timeslot as early as possible. This should always be used for the first request in a session. *\/$/;"	e	enum:NRF_RADIO_REQUEST_TYPE
NRF_RADIO_REQ_TYPE_NORMAL	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_RADIO_REQ_TYPE_NORMAL                         \/**< Normal timeslot request. *\/$/;"	e	enum:NRF_RADIO_REQUEST_TYPE
NRF_RADIO_SIGNAL_CALLBACK_ACTION	components\softdevice\s210\headers\nrf_soc.h	/^enum NRF_RADIO_SIGNAL_CALLBACK_ACTION$/;"	g
NRF_RADIO_SIGNAL_CALLBACK_ACTION_END	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_RADIO_SIGNAL_CALLBACK_ACTION_END,             \/**< End the current radio timeslot. *\/$/;"	e	enum:NRF_RADIO_SIGNAL_CALLBACK_ACTION
NRF_RADIO_SIGNAL_CALLBACK_ACTION_EXTEND	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_RADIO_SIGNAL_CALLBACK_ACTION_EXTEND,          \/**< Request an extension of the current timeslot (maximum execution time for this action is when the extension succeeded). *\/$/;"	e	enum:NRF_RADIO_SIGNAL_CALLBACK_ACTION
NRF_RADIO_SIGNAL_CALLBACK_ACTION_NONE	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_RADIO_SIGNAL_CALLBACK_ACTION_NONE,            \/**< Return without action. *\/$/;"	e	enum:NRF_RADIO_SIGNAL_CALLBACK_ACTION
NRF_RADIO_SIGNAL_CALLBACK_ACTION_REQUEST_AND_END	components\softdevice\s210\headers\nrf_soc.h	/^  NRF_RADIO_SIGNAL_CALLBACK_ACTION_REQUEST_AND_END  \/**< Request a new radio timeslot and end the current timeslot. *\/$/;"	e	enum:NRF_RADIO_SIGNAL_CALLBACK_ACTION
NRF_RADIO_START_JITTER_US	components\softdevice\s210\headers\nrf_soc.h	56;"	d
NRF_SOC_EVTS	components\softdevice\s210\headers\nrf_soc.h	/^enum NRF_SOC_EVTS$/;"	g
NRF_SOC_H__	components\softdevice\s210\headers\nrf_soc.h	18;"	d
NRF_SOC_SVCS	components\softdevice\s210\headers\nrf_soc.h	/^enum NRF_SOC_SVCS$/;"	g
RADIO_NOTIFICATION_IRQHandler	components\softdevice\s210\headers\nrf_soc.h	47;"	d
RADIO_NOTIFICATION_IRQn	components\softdevice\s210\headers\nrf_soc.h	46;"	d
SD_APP_EVT_WAIT	components\softdevice\s210\headers\nrf_soc.h	/^  SD_APP_EVT_WAIT,$/;"	e	enum:NRF_SOC_SVCS
SD_CLOCK_HFCLK_IS_RUNNING	components\softdevice\s210\headers\nrf_soc.h	/^  SD_CLOCK_HFCLK_IS_RUNNING,$/;"	e	enum:NRF_SOC_SVCS
SD_CLOCK_HFCLK_RELEASE	components\softdevice\s210\headers\nrf_soc.h	/^  SD_CLOCK_HFCLK_RELEASE,$/;"	e	enum:NRF_SOC_SVCS
SD_CLOCK_HFCLK_REQUEST	components\softdevice\s210\headers\nrf_soc.h	/^  SD_CLOCK_HFCLK_REQUEST,$/;"	e	enum:NRF_SOC_SVCS
SD_ECB_BLOCK_ENCRYPT	components\softdevice\s210\headers\nrf_soc.h	/^  SD_ECB_BLOCK_ENCRYPT,$/;"	e	enum:NRF_SOC_SVCS
SD_EVT_GET	components\softdevice\s210\headers\nrf_soc.h	/^  SD_EVT_GET,$/;"	e	enum:NRF_SOC_SVCS
SD_EVT_IRQHandler	components\softdevice\s210\headers\nrf_soc.h	45;"	d
SD_EVT_IRQn	components\softdevice\s210\headers\nrf_soc.h	44;"	d
SD_FLASH_PAGE_ERASE	components\softdevice\s210\headers\nrf_soc.h	/^  SD_FLASH_PAGE_ERASE = SOC_SVC_BASE,$/;"	e	enum:NRF_SOC_SVCS
SD_FLASH_PROTECT	components\softdevice\s210\headers\nrf_soc.h	/^  SD_FLASH_PROTECT,$/;"	e	enum:NRF_SOC_SVCS
SD_FLASH_WRITE	components\softdevice\s210\headers\nrf_soc.h	/^  SD_FLASH_WRITE,$/;"	e	enum:NRF_SOC_SVCS
SD_MUTEX_ACQUIRE	components\softdevice\s210\headers\nrf_soc.h	/^  SD_MUTEX_ACQUIRE,$/;"	e	enum:NRF_SOC_SVCS
SD_MUTEX_NEW	components\softdevice\s210\headers\nrf_soc.h	/^  SD_MUTEX_NEW = SOC_SVC_BASE_NOT_AVAILABLE,$/;"	e	enum:NRF_SOC_SVCS
SD_MUTEX_RELEASE	components\softdevice\s210\headers\nrf_soc.h	/^  SD_MUTEX_RELEASE,$/;"	e	enum:NRF_SOC_SVCS
SD_NVIC_CLEARPENDINGIRQ	components\softdevice\s210\headers\nrf_soc.h	/^  SD_NVIC_CLEARPENDINGIRQ,$/;"	e	enum:NRF_SOC_SVCS
SD_NVIC_CRITICAL_REGION_ENTER	components\softdevice\s210\headers\nrf_soc.h	/^  SD_NVIC_CRITICAL_REGION_ENTER,$/;"	e	enum:NRF_SOC_SVCS
SD_NVIC_CRITICAL_REGION_EXIT	components\softdevice\s210\headers\nrf_soc.h	/^  SD_NVIC_CRITICAL_REGION_EXIT,$/;"	e	enum:NRF_SOC_SVCS
SD_NVIC_DISABLEIRQ	components\softdevice\s210\headers\nrf_soc.h	/^  SD_NVIC_DISABLEIRQ,$/;"	e	enum:NRF_SOC_SVCS
SD_NVIC_ENABLEIRQ	components\softdevice\s210\headers\nrf_soc.h	/^  SD_NVIC_ENABLEIRQ,$/;"	e	enum:NRF_SOC_SVCS
SD_NVIC_GETPENDINGIRQ	components\softdevice\s210\headers\nrf_soc.h	/^  SD_NVIC_GETPENDINGIRQ,$/;"	e	enum:NRF_SOC_SVCS
SD_NVIC_GETPRIORITY	components\softdevice\s210\headers\nrf_soc.h	/^  SD_NVIC_GETPRIORITY,$/;"	e	enum:NRF_SOC_SVCS
SD_NVIC_SETPENDINGIRQ	components\softdevice\s210\headers\nrf_soc.h	/^  SD_NVIC_SETPENDINGIRQ,$/;"	e	enum:NRF_SOC_SVCS
SD_NVIC_SETPRIORITY	components\softdevice\s210\headers\nrf_soc.h	/^  SD_NVIC_SETPRIORITY,$/;"	e	enum:NRF_SOC_SVCS
SD_NVIC_SYSTEMRESET	components\softdevice\s210\headers\nrf_soc.h	/^  SD_NVIC_SYSTEMRESET,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_DCDC_MODE_SET	components\softdevice\s210\headers\nrf_soc.h	/^  SD_POWER_DCDC_MODE_SET,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_GPREGRET_CLR	components\softdevice\s210\headers\nrf_soc.h	/^  SD_POWER_GPREGRET_CLR,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_GPREGRET_GET	components\softdevice\s210\headers\nrf_soc.h	/^  SD_POWER_GPREGRET_GET,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_GPREGRET_SET	components\softdevice\s210\headers\nrf_soc.h	/^  SD_POWER_GPREGRET_SET,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_MODE_SET	components\softdevice\s210\headers\nrf_soc.h	/^  SD_POWER_MODE_SET,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_POF_ENABLE	components\softdevice\s210\headers\nrf_soc.h	/^  SD_POWER_POF_ENABLE,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_POF_THRESHOLD_SET	components\softdevice\s210\headers\nrf_soc.h	/^  SD_POWER_POF_THRESHOLD_SET,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_RAMON_CLR	components\softdevice\s210\headers\nrf_soc.h	/^  SD_POWER_RAMON_CLR,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_RAMON_GET	components\softdevice\s210\headers\nrf_soc.h	/^  SD_POWER_RAMON_GET,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_RAMON_SET	components\softdevice\s210\headers\nrf_soc.h	/^  SD_POWER_RAMON_SET,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_RESET_REASON_CLR	components\softdevice\s210\headers\nrf_soc.h	/^  SD_POWER_RESET_REASON_CLR,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_RESET_REASON_GET	components\softdevice\s210\headers\nrf_soc.h	/^  SD_POWER_RESET_REASON_GET,$/;"	e	enum:NRF_SOC_SVCS
SD_POWER_SYSTEM_OFF	components\softdevice\s210\headers\nrf_soc.h	/^  SD_POWER_SYSTEM_OFF,$/;"	e	enum:NRF_SOC_SVCS
SD_PPI_CHANNEL_ASSIGN	components\softdevice\s210\headers\nrf_soc.h	/^  SD_PPI_CHANNEL_ASSIGN,$/;"	e	enum:NRF_SOC_SVCS
SD_PPI_CHANNEL_ENABLE_CLR	components\softdevice\s210\headers\nrf_soc.h	/^  SD_PPI_CHANNEL_ENABLE_CLR,$/;"	e	enum:NRF_SOC_SVCS
SD_PPI_CHANNEL_ENABLE_GET	components\softdevice\s210\headers\nrf_soc.h	/^  SD_PPI_CHANNEL_ENABLE_GET,$/;"	e	enum:NRF_SOC_SVCS
SD_PPI_CHANNEL_ENABLE_SET	components\softdevice\s210\headers\nrf_soc.h	/^  SD_PPI_CHANNEL_ENABLE_SET,$/;"	e	enum:NRF_SOC_SVCS
SD_PPI_GROUP_ASSIGN	components\softdevice\s210\headers\nrf_soc.h	/^  SD_PPI_GROUP_ASSIGN,$/;"	e	enum:NRF_SOC_SVCS
SD_PPI_GROUP_GET	components\softdevice\s210\headers\nrf_soc.h	/^  SD_PPI_GROUP_GET,$/;"	e	enum:NRF_SOC_SVCS
SD_PPI_GROUP_TASK_DISABLE	components\softdevice\s210\headers\nrf_soc.h	/^  SD_PPI_GROUP_TASK_DISABLE,$/;"	e	enum:NRF_SOC_SVCS
SD_PPI_GROUP_TASK_ENABLE	components\softdevice\s210\headers\nrf_soc.h	/^  SD_PPI_GROUP_TASK_ENABLE,$/;"	e	enum:NRF_SOC_SVCS
SD_RADIO_NOTIFICATION_CFG_SET	components\softdevice\s210\headers\nrf_soc.h	/^  SD_RADIO_NOTIFICATION_CFG_SET,$/;"	e	enum:NRF_SOC_SVCS
SD_RADIO_REQUEST	components\softdevice\s210\headers\nrf_soc.h	/^  SD_RADIO_REQUEST,$/;"	e	enum:NRF_SOC_SVCS
SD_RADIO_SESSION_CLOSE	components\softdevice\s210\headers\nrf_soc.h	/^  SD_RADIO_SESSION_CLOSE,$/;"	e	enum:NRF_SOC_SVCS
SD_RADIO_SESSION_OPEN	components\softdevice\s210\headers\nrf_soc.h	/^  SD_RADIO_SESSION_OPEN,$/;"	e	enum:NRF_SOC_SVCS
SD_RAND_APPLICATION_BYTES_AVAILABLE	components\softdevice\s210\headers\nrf_soc.h	/^  SD_RAND_APPLICATION_BYTES_AVAILABLE,$/;"	e	enum:NRF_SOC_SVCS
SD_RAND_APPLICATION_GET_VECTOR	components\softdevice\s210\headers\nrf_soc.h	/^  SD_RAND_APPLICATION_GET_VECTOR,$/;"	e	enum:NRF_SOC_SVCS
SD_RAND_APPLICATION_POOL_CAPACITY	components\softdevice\s210\headers\nrf_soc.h	/^  SD_RAND_APPLICATION_POOL_CAPACITY,$/;"	e	enum:NRF_SOC_SVCS
SD_TEMP_GET	components\softdevice\s210\headers\nrf_soc.h	/^  SD_TEMP_GET,$/;"	e	enum:NRF_SOC_SVCS
SOC_ECB_CIPHERTEXT_LENGTH	components\softdevice\s210\headers\nrf_soc.h	42;"	d
SOC_ECB_CLEARTEXT_LENGTH	components\softdevice\s210\headers\nrf_soc.h	41;"	d
SOC_ECB_KEY_LENGTH	components\softdevice\s210\headers\nrf_soc.h	40;"	d
SOC_SVC_BASE	components\softdevice\s210\headers\nrf_soc.h	31;"	d
SOC_SVC_BASE_NOT_AVAILABLE	components\softdevice\s210\headers\nrf_soc.h	32;"	d
SVC_SOC_LAST	components\softdevice\s210\headers\nrf_soc.h	/^  SVC_SOC_LAST$/;"	e	enum:NRF_SOC_SVCS
callback_action	components\softdevice\s210\headers\nrf_soc.h	/^  uint8_t               callback_action;            \/**< The action requested by the application when returning from the signal callback, see @ref NRF_RADIO_SIGNAL_CALLBACK_ACTION. *\/$/;"	m	struct:__anon840
ciphertext	components\softdevice\s210\headers\nrf_soc.h	/^  uint8_t ciphertext[SOC_ECB_CIPHERTEXT_LENGTH];    \/**< Cipher Text data. *\/$/;"	m	struct:__anon844
cleartext	components\softdevice\s210\headers\nrf_soc.h	/^  uint8_t cleartext[SOC_ECB_CLEARTEXT_LENGTH];      \/**< Clear Text data. *\/$/;"	m	struct:__anon844
distance_us	components\softdevice\s210\headers\nrf_soc.h	/^  uint32_t      distance_us;                        \/**< Distance from the start of the previous radio timeslot (up to @ref NRF_RADIO_DISTANCE_MAX_US microseconds). *\/$/;"	m	struct:__anon837
earliest	components\softdevice\s210\headers\nrf_soc.h	/^    nrf_radio_request_earliest_t  earliest;         \/**< Parameters for a request for a timeslot as early as possible. *\/$/;"	m	union:__anon838::__anon839
extend	components\softdevice\s210\headers\nrf_soc.h	/^    } extend;                                       \/**< Additional parameters for return_code @ref NRF_RADIO_SIGNAL_CALLBACK_ACTION_EXTEND. *\/$/;"	m	union:__anon840::__anon841	typeref:struct:__anon840::__anon841::__anon843
hfclk	components\softdevice\s210\headers\nrf_soc.h	/^  uint8_t       hfclk;                              \/**< High frequency clock source, see @ref NRF_RADIO_HFCLK_CFG. *\/$/;"	m	struct:__anon836
hfclk	components\softdevice\s210\headers\nrf_soc.h	/^  uint8_t       hfclk;                              \/**< High frequency clock source, see @ref NRF_RADIO_HFCLK_CFG. *\/$/;"	m	struct:__anon837
key	components\softdevice\s210\headers\nrf_soc.h	/^  uint8_t key[SOC_ECB_KEY_LENGTH];                  \/**< Encryption key. *\/$/;"	m	struct:__anon844
length_us	components\softdevice\s210\headers\nrf_soc.h	/^      uint32_t              length_us;              \/**< Requested extension of the timeslot duration (microseconds) (for minimum time see @ref NRF_RADIO_MINIMUM_TIMESLOT_LENGTH_EXTENSION_TIME_US). *\/$/;"	m	struct:__anon840::__anon841::__anon843
length_us	components\softdevice\s210\headers\nrf_soc.h	/^  uint32_t      length_us;                          \/**< The radio timeslot length (in the range 100 to 100,000] microseconds). *\/$/;"	m	struct:__anon836
length_us	components\softdevice\s210\headers\nrf_soc.h	/^  uint32_t      length_us;                          \/**< The radio timeslot length (in the range [100..100,000] microseconds). *\/$/;"	m	struct:__anon837
normal	components\softdevice\s210\headers\nrf_soc.h	/^    nrf_radio_request_normal_t    normal;           \/**< Parameters for a normal radio request. *\/$/;"	m	union:__anon838::__anon839
nrf_app_irq_priority_t	components\softdevice\s210\headers\nrf_soc.h	/^typedef uint8_t nrf_app_irq_priority_t;$/;"	t
nrf_ecb_hal_data_t	components\softdevice\s210\headers\nrf_soc.h	/^} nrf_ecb_hal_data_t;$/;"	t	typeref:struct:__anon844
nrf_mutex_t	components\softdevice\s210\headers\nrf_soc.h	/^typedef volatile uint8_t nrf_mutex_t;$/;"	t
nrf_power_dcdc_mode_t	components\softdevice\s210\headers\nrf_soc.h	/^typedef uint32_t nrf_power_dcdc_mode_t;$/;"	t
nrf_power_failure_threshold_t	components\softdevice\s210\headers\nrf_soc.h	/^typedef uint8_t nrf_power_failure_threshold_t;$/;"	t
nrf_power_mode_t	components\softdevice\s210\headers\nrf_soc.h	/^typedef uint8_t nrf_power_mode_t;$/;"	t
nrf_radio_notification_distance_t	components\softdevice\s210\headers\nrf_soc.h	/^typedef uint8_t nrf_radio_notification_distance_t;$/;"	t
nrf_radio_notification_type_t	components\softdevice\s210\headers\nrf_soc.h	/^typedef uint8_t nrf_radio_notification_type_t;$/;"	t
nrf_radio_request_earliest_t	components\softdevice\s210\headers\nrf_soc.h	/^} nrf_radio_request_earliest_t;$/;"	t	typeref:struct:__anon836
nrf_radio_request_normal_t	components\softdevice\s210\headers\nrf_soc.h	/^} nrf_radio_request_normal_t;$/;"	t	typeref:struct:__anon837
nrf_radio_request_t	components\softdevice\s210\headers\nrf_soc.h	/^} nrf_radio_request_t;$/;"	t	typeref:struct:__anon838
nrf_radio_signal_callback_return_param_t	components\softdevice\s210\headers\nrf_soc.h	/^} nrf_radio_signal_callback_return_param_t;$/;"	t	typeref:struct:__anon840
nrf_radio_signal_callback_t	components\softdevice\s210\headers\nrf_soc.h	/^typedef nrf_radio_signal_callback_return_param_t * (*nrf_radio_signal_callback_t) (uint8_t signal_type);$/;"	t
p_next	components\softdevice\s210\headers\nrf_soc.h	/^      nrf_radio_request_t * p_next;                 \/**< The request parameters for the next radio timeslot. *\/$/;"	m	struct:__anon840::__anon841::__anon842
params	components\softdevice\s210\headers\nrf_soc.h	/^  } params;$/;"	m	struct:__anon838	typeref:union:__anon838::__anon839
params	components\softdevice\s210\headers\nrf_soc.h	/^  } params;$/;"	m	struct:__anon840	typeref:union:__anon840::__anon841
priority	components\softdevice\s210\headers\nrf_soc.h	/^  uint8_t       priority;                           \/**< The radio timeslot priority, see @ref NRF_RADIO_PRIORITY. *\/$/;"	m	struct:__anon836
priority	components\softdevice\s210\headers\nrf_soc.h	/^  uint8_t       priority;                           \/**< The radio timeslot priority, see @ref NRF_RADIO_PRIORITY. *\/$/;"	m	struct:__anon837
request	components\softdevice\s210\headers\nrf_soc.h	/^    } request;                                      \/**< Additional parameters for return_code @ref NRF_RADIO_SIGNAL_CALLBACK_ACTION_REQUEST_AND_END. *\/$/;"	m	union:__anon840::__anon841	typeref:struct:__anon840::__anon841::__anon842
request_type	components\softdevice\s210\headers\nrf_soc.h	/^  uint8_t                         request_type;     \/**< Type of request, see @ref NRF_RADIO_REQUEST_TYPE. *\/$/;"	m	struct:__anon838
timeout_us	components\softdevice\s210\headers\nrf_soc.h	/^  uint32_t      timeout_us;                         \/**< Longest acceptable delay until the start of the requested timeslot (up to @ref NRF_RADIO_EARLIEST_TIMEOUT_MAX_US microseconds). *\/$/;"	m	struct:__anon836
NRF_SVC__	components\softdevice\s210\headers\nrf_svc.h	2;"	d
PRAGMA	components\softdevice\s210\headers\nrf_svc.h	23;"	d
SVCALL	components\softdevice\s210\headers\nrf_svc.h	10;"	d
SVCALL	components\softdevice\s210\headers\nrf_svc.h	12;"	d
SVCALL	components\softdevice\s210\headers\nrf_svc.h	24;"	d
SVCALL	components\softdevice\s210\headers\nrf_svc.h	28;"	d
SVCALL	components\softdevice\s210\headers\nrf_svc.h	5;"	d
ASSERT	components\softdevice\s210\headers\softdevice_assert.h	36;"	d
SOFTDEVICE_ASSERT_H_	components\softdevice\s210\headers\softdevice_assert.h	14;"	d
ADC_IRQHandler	components\toolchain\arm\arm_startup_nrf51.s	/^ADC_IRQHandler$/;"	l
CCM_AAR_IRQHandler	components\toolchain\arm\arm_startup_nrf51.s	/^CCM_AAR_IRQHandler$/;"	l
Default_Handler	components\toolchain\arm\arm_startup_nrf51.s	/^Default_Handler PROC$/;"	l
ECB_IRQHandler	components\toolchain\arm\arm_startup_nrf51.s	/^ECB_IRQHandler$/;"	l
GPIOTE_IRQHandler	components\toolchain\arm\arm_startup_nrf51.s	/^GPIOTE_IRQHandler$/;"	l
Heap_Mem	components\toolchain\arm\arm_startup_nrf51.s	/^Heap_Mem        SPACE   Heap_Size$/;"	l
Heap_Size	components\toolchain\arm\arm_startup_nrf51.s	/^Heap_Size       EQU     2048$/;"	d
Heap_Size	components\toolchain\arm\arm_startup_nrf51.s	/^Heap_Size       EQU     __HEAP_SIZE$/;"	d
LPCOMP_IRQHandler	components\toolchain\arm\arm_startup_nrf51.s	/^LPCOMP_IRQHandler$/;"	l
NMI_Handler	components\toolchain\arm\arm_startup_nrf51.s	/^NMI_Handler     PROC$/;"	l
NRF_POWER_RAMONB_ADDRESS	components\toolchain\arm\arm_startup_nrf51.s	/^NRF_POWER_RAMONB_ADDRESS             EQU   0x40000554  ; NRF_POWER->RAMONB address$/;"	d
NRF_POWER_RAMON_ADDRESS	components\toolchain\arm\arm_startup_nrf51.s	/^NRF_POWER_RAMON_ADDRESS              EQU   0x40000524  ; NRF_POWER->RAMON address$/;"	d
NRF_POWER_RAMONx_RAMxON_ONMODE_Msk	components\toolchain\arm\arm_startup_nrf51.s	/^NRF_POWER_RAMONx_RAMxON_ONMODE_Msk   EQU   0x3         ; All RAM blocks on in onmode bit mask$/;"	d
POWER_CLOCK_IRQHandler	components\toolchain\arm\arm_startup_nrf51.s	/^POWER_CLOCK_IRQHandler$/;"	l
PendSV_Handler	components\toolchain\arm\arm_startup_nrf51.s	/^PendSV_Handler  PROC$/;"	l
QDEC_IRQHandler	components\toolchain\arm\arm_startup_nrf51.s	/^QDEC_IRQHandler$/;"	l
RADIO_IRQHandler	components\toolchain\arm\arm_startup_nrf51.s	/^RADIO_IRQHandler$/;"	l
RNG_IRQHandler	components\toolchain\arm\arm_startup_nrf51.s	/^RNG_IRQHandler$/;"	l
RTC0_IRQHandler	components\toolchain\arm\arm_startup_nrf51.s	/^RTC0_IRQHandler$/;"	l
RTC1_IRQHandler	components\toolchain\arm\arm_startup_nrf51.s	/^RTC1_IRQHandler$/;"	l
Reset_Handler	components\toolchain\arm\arm_startup_nrf51.s	/^Reset_Handler   PROC$/;"	l
SPI0_TWI0_IRQHandler	components\toolchain\arm\arm_startup_nrf51.s	/^SPI0_TWI0_IRQHandler$/;"	l
SPI1_TWI1_IRQHandler	components\toolchain\arm\arm_startup_nrf51.s	/^SPI1_TWI1_IRQHandler$/;"	l
SVC_Handler	components\toolchain\arm\arm_startup_nrf51.s	/^SVC_Handler     PROC$/;"	l
SWI0_IRQHandler	components\toolchain\arm\arm_startup_nrf51.s	/^SWI0_IRQHandler$/;"	l
SWI1_IRQHandler	components\toolchain\arm\arm_startup_nrf51.s	/^SWI1_IRQHandler$/;"	l
SWI2_IRQHandler	components\toolchain\arm\arm_startup_nrf51.s	/^SWI2_IRQHandler$/;"	l
SWI3_IRQHandler	components\toolchain\arm\arm_startup_nrf51.s	/^SWI3_IRQHandler$/;"	l
SWI4_IRQHandler	components\toolchain\arm\arm_startup_nrf51.s	/^SWI4_IRQHandler$/;"	l
SWI5_IRQHandler	components\toolchain\arm\arm_startup_nrf51.s	/^SWI5_IRQHandler$/;"	l
Stack_Mem	components\toolchain\arm\arm_startup_nrf51.s	/^Stack_Mem       SPACE   Stack_Size$/;"	l
Stack_Size	components\toolchain\arm\arm_startup_nrf51.s	/^Stack_Size      EQU     2048$/;"	d
Stack_Size	components\toolchain\arm\arm_startup_nrf51.s	/^Stack_Size      EQU     __STACK_SIZE$/;"	d
SysTick_Handler	components\toolchain\arm\arm_startup_nrf51.s	/^SysTick_Handler PROC$/;"	l
TEMP_IRQHandler	components\toolchain\arm\arm_startup_nrf51.s	/^TEMP_IRQHandler$/;"	l
TIMER0_IRQHandler	components\toolchain\arm\arm_startup_nrf51.s	/^TIMER0_IRQHandler$/;"	l
TIMER1_IRQHandler	components\toolchain\arm\arm_startup_nrf51.s	/^TIMER1_IRQHandler$/;"	l
TIMER2_IRQHandler	components\toolchain\arm\arm_startup_nrf51.s	/^TIMER2_IRQHandler$/;"	l
UART0_IRQHandler	components\toolchain\arm\arm_startup_nrf51.s	/^UART0_IRQHandler$/;"	l
WDT_IRQHandler	components\toolchain\arm\arm_startup_nrf51.s	/^WDT_IRQHandler$/;"	l
__Vectors	components\toolchain\arm\arm_startup_nrf51.s	/^__Vectors       DCD     __initial_sp              ; Top of Stack$/;"	l
__Vectors_End	components\toolchain\arm\arm_startup_nrf51.s	/^__Vectors_End$/;"	l
__Vectors_Size	components\toolchain\arm\arm_startup_nrf51.s	/^__Vectors_Size  EQU     __Vectors_End - __Vectors$/;"	d
__heap_base	components\toolchain\arm\arm_startup_nrf51.s	/^__heap_base$/;"	l
__heap_limit	components\toolchain\arm\arm_startup_nrf51.s	/^__heap_limit$/;"	l
__initial_sp	components\toolchain\arm\arm_startup_nrf51.s	/^__initial_sp$/;"	l
__user_initial_stackheap	components\toolchain\arm\arm_startup_nrf51.s	/^__user_initial_stackheap$/;"	l
_UICR_CONFIG_H	components\toolchain\arm\uicr_config.h	35;"	d
AIRCR	components\toolchain\gcc\core_cm0.h	/^  __IO uint32_t AIRCR;                   \/*!< Offset: 0x00C (R\/W)  Application Interrupt and Reset Control Register      *\/$/;"	m	struct:__anon854
APSR_Type	components\toolchain\gcc\core_cm0.h	/^} APSR_Type;$/;"	t	typeref:union:__anon845
C	components\toolchain\gcc\core_cm0.h	/^    uint32_t C:1;                        \/*!< bit:     29  Carry condition code flag          *\/$/;"	m	struct:__anon845::__anon846
C	components\toolchain\gcc\core_cm0.h	/^    uint32_t C:1;                        \/*!< bit:     29  Carry condition code flag          *\/$/;"	m	struct:__anon849::__anon850
CALIB	components\toolchain\gcc\core_cm0.h	/^  __I  uint32_t CALIB;                   \/*!< Offset: 0x00C (R\/ )  SysTick Calibration Register        *\/$/;"	m	struct:__anon855
CCR	components\toolchain\gcc\core_cm0.h	/^  __IO uint32_t CCR;                     \/*!< Offset: 0x014 (R\/W)  Configuration Control Register                        *\/$/;"	m	struct:__anon854
CONTROL_Type	components\toolchain\gcc\core_cm0.h	/^} CONTROL_Type;$/;"	t	typeref:union:__anon851
CPUID	components\toolchain\gcc\core_cm0.h	/^  __I  uint32_t CPUID;                   \/*!< Offset: 0x000 (R\/ )  CPUID Base Register                                   *\/$/;"	m	struct:__anon854
CTRL	components\toolchain\gcc\core_cm0.h	/^  __IO uint32_t CTRL;                    \/*!< Offset: 0x000 (R\/W)  SysTick Control and Status Register *\/$/;"	m	struct:__anon855
FPCA	components\toolchain\gcc\core_cm0.h	/^    uint32_t FPCA:1;                     \/*!< bit:      2  FP extension active flag           *\/$/;"	m	struct:__anon851::__anon852
GE	components\toolchain\gcc\core_cm0.h	/^    uint32_t GE:4;                       \/*!< bit: 16..19  Greater than or Equal flags        *\/$/;"	m	struct:__anon849::__anon850
ICER	components\toolchain\gcc\core_cm0.h	/^  __IO uint32_t ICER[1];                 \/*!< Offset: 0x080 (R\/W)  Interrupt Clear Enable Register          *\/$/;"	m	struct:__anon853
ICPR	components\toolchain\gcc\core_cm0.h	/^  __IO uint32_t ICPR[1];                 \/*!< Offset: 0x180 (R\/W)  Interrupt Clear Pending Register         *\/$/;"	m	struct:__anon853
ICSR	components\toolchain\gcc\core_cm0.h	/^  __IO uint32_t ICSR;                    \/*!< Offset: 0x004 (R\/W)  Interrupt Control and State Register                  *\/$/;"	m	struct:__anon854
IP	components\toolchain\gcc\core_cm0.h	/^  __IO uint32_t IP[8];                   \/*!< Offset: 0x300 (R\/W)  Interrupt Priority Register              *\/$/;"	m	struct:__anon853
IPSR_Type	components\toolchain\gcc\core_cm0.h	/^} IPSR_Type;$/;"	t	typeref:union:__anon847
ISER	components\toolchain\gcc\core_cm0.h	/^  __IO uint32_t ISER[1];                 \/*!< Offset: 0x000 (R\/W)  Interrupt Set Enable Register           *\/$/;"	m	struct:__anon853
ISPR	components\toolchain\gcc\core_cm0.h	/^  __IO uint32_t ISPR[1];                 \/*!< Offset: 0x100 (R\/W)  Interrupt Set Pending Register           *\/$/;"	m	struct:__anon853
ISR	components\toolchain\gcc\core_cm0.h	/^    uint32_t ISR:9;                      \/*!< bit:  0.. 8  Exception number                   *\/$/;"	m	struct:__anon847::__anon848
ISR	components\toolchain\gcc\core_cm0.h	/^    uint32_t ISR:9;                      \/*!< bit:  0.. 8  Exception number                   *\/$/;"	m	struct:__anon849::__anon850
IT	components\toolchain\gcc\core_cm0.h	/^    uint32_t IT:2;                       \/*!< bit: 25..26  saved IT state   (read 0)          *\/$/;"	m	struct:__anon849::__anon850
LOAD	components\toolchain\gcc\core_cm0.h	/^  __IO uint32_t LOAD;                    \/*!< Offset: 0x004 (R\/W)  SysTick Reload Value Register       *\/$/;"	m	struct:__anon855
N	components\toolchain\gcc\core_cm0.h	/^    uint32_t N:1;                        \/*!< bit:     31  Negative condition code flag       *\/$/;"	m	struct:__anon845::__anon846
N	components\toolchain\gcc\core_cm0.h	/^    uint32_t N:1;                        \/*!< bit:     31  Negative condition code flag       *\/$/;"	m	struct:__anon849::__anon850
NVIC	components\toolchain\gcc\core_cm0.h	476;"	d
NVIC_BASE	components\toolchain\gcc\core_cm0.h	471;"	d
NVIC_ClearPendingIRQ	components\toolchain\gcc\core_cm0.h	/^__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)$/;"	f
NVIC_DisableIRQ	components\toolchain\gcc\core_cm0.h	/^__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)$/;"	f
NVIC_EnableIRQ	components\toolchain\gcc\core_cm0.h	/^__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)$/;"	f
NVIC_GetPendingIRQ	components\toolchain\gcc\core_cm0.h	/^__STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)$/;"	f
NVIC_GetPriority	components\toolchain\gcc\core_cm0.h	/^__STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)$/;"	f
NVIC_SetPendingIRQ	components\toolchain\gcc\core_cm0.h	/^__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)$/;"	f
NVIC_SetPriority	components\toolchain\gcc\core_cm0.h	/^__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)$/;"	f
NVIC_SystemReset	components\toolchain\gcc\core_cm0.h	/^__STATIC_INLINE void NVIC_SystemReset(void)$/;"	f
NVIC_Type	components\toolchain\gcc\core_cm0.h	/^}  NVIC_Type;$/;"	t	typeref:struct:__anon853
Q	components\toolchain\gcc\core_cm0.h	/^    uint32_t Q:1;                        \/*!< bit:     27  Saturation condition flag          *\/$/;"	m	struct:__anon845::__anon846
Q	components\toolchain\gcc\core_cm0.h	/^    uint32_t Q:1;                        \/*!< bit:     27  Saturation condition flag          *\/$/;"	m	struct:__anon849::__anon850
RESERVED0	components\toolchain\gcc\core_cm0.h	/^       uint32_t RESERVED0;$/;"	m	struct:__anon854
RESERVED0	components\toolchain\gcc\core_cm0.h	/^       uint32_t RESERVED0[31];$/;"	m	struct:__anon853
RESERVED1	components\toolchain\gcc\core_cm0.h	/^       uint32_t RESERVED1;$/;"	m	struct:__anon854
RESERVED2	components\toolchain\gcc\core_cm0.h	/^       uint32_t RESERVED2[31];$/;"	m	struct:__anon853
RESERVED3	components\toolchain\gcc\core_cm0.h	/^       uint32_t RESERVED3[31];$/;"	m	struct:__anon853
RESERVED4	components\toolchain\gcc\core_cm0.h	/^       uint32_t RESERVED4[64];$/;"	m	struct:__anon853
RSERVED1	components\toolchain\gcc\core_cm0.h	/^       uint32_t RSERVED1[31];$/;"	m	struct:__anon853
SCB	components\toolchain\gcc\core_cm0.h	474;"	d
SCB_AIRCR_ENDIANESS_Msk	components\toolchain\gcc\core_cm0.h	370;"	d
SCB_AIRCR_ENDIANESS_Pos	components\toolchain\gcc\core_cm0.h	369;"	d
SCB_AIRCR_SYSRESETREQ_Msk	components\toolchain\gcc\core_cm0.h	373;"	d
SCB_AIRCR_SYSRESETREQ_Pos	components\toolchain\gcc\core_cm0.h	372;"	d
SCB_AIRCR_VECTCLRACTIVE_Msk	components\toolchain\gcc\core_cm0.h	376;"	d
SCB_AIRCR_VECTCLRACTIVE_Pos	components\toolchain\gcc\core_cm0.h	375;"	d
SCB_AIRCR_VECTKEYSTAT_Msk	components\toolchain\gcc\core_cm0.h	367;"	d
SCB_AIRCR_VECTKEYSTAT_Pos	components\toolchain\gcc\core_cm0.h	366;"	d
SCB_AIRCR_VECTKEY_Msk	components\toolchain\gcc\core_cm0.h	364;"	d
SCB_AIRCR_VECTKEY_Pos	components\toolchain\gcc\core_cm0.h	363;"	d
SCB_BASE	components\toolchain\gcc\core_cm0.h	472;"	d
SCB_CCR_STKALIGN_Msk	components\toolchain\gcc\core_cm0.h	390;"	d
SCB_CCR_STKALIGN_Pos	components\toolchain\gcc\core_cm0.h	389;"	d
SCB_CCR_UNALIGN_TRP_Msk	components\toolchain\gcc\core_cm0.h	393;"	d
SCB_CCR_UNALIGN_TRP_Pos	components\toolchain\gcc\core_cm0.h	392;"	d
SCB_CPUID_ARCHITECTURE_Msk	components\toolchain\gcc\core_cm0.h	326;"	d
SCB_CPUID_ARCHITECTURE_Pos	components\toolchain\gcc\core_cm0.h	325;"	d
SCB_CPUID_IMPLEMENTER_Msk	components\toolchain\gcc\core_cm0.h	320;"	d
SCB_CPUID_IMPLEMENTER_Pos	components\toolchain\gcc\core_cm0.h	319;"	d
SCB_CPUID_PARTNO_Msk	components\toolchain\gcc\core_cm0.h	329;"	d
SCB_CPUID_PARTNO_Pos	components\toolchain\gcc\core_cm0.h	328;"	d
SCB_CPUID_REVISION_Msk	components\toolchain\gcc\core_cm0.h	332;"	d
SCB_CPUID_REVISION_Pos	components\toolchain\gcc\core_cm0.h	331;"	d
SCB_CPUID_VARIANT_Msk	components\toolchain\gcc\core_cm0.h	323;"	d
SCB_CPUID_VARIANT_Pos	components\toolchain\gcc\core_cm0.h	322;"	d
SCB_ICSR_ISRPENDING_Msk	components\toolchain\gcc\core_cm0.h	354;"	d
SCB_ICSR_ISRPENDING_Pos	components\toolchain\gcc\core_cm0.h	353;"	d
SCB_ICSR_ISRPREEMPT_Msk	components\toolchain\gcc\core_cm0.h	351;"	d
SCB_ICSR_ISRPREEMPT_Pos	components\toolchain\gcc\core_cm0.h	350;"	d
SCB_ICSR_NMIPENDSET_Msk	components\toolchain\gcc\core_cm0.h	336;"	d
SCB_ICSR_NMIPENDSET_Pos	components\toolchain\gcc\core_cm0.h	335;"	d
SCB_ICSR_PENDSTCLR_Msk	components\toolchain\gcc\core_cm0.h	348;"	d
SCB_ICSR_PENDSTCLR_Pos	components\toolchain\gcc\core_cm0.h	347;"	d
SCB_ICSR_PENDSTSET_Msk	components\toolchain\gcc\core_cm0.h	345;"	d
SCB_ICSR_PENDSTSET_Pos	components\toolchain\gcc\core_cm0.h	344;"	d
SCB_ICSR_PENDSVCLR_Msk	components\toolchain\gcc\core_cm0.h	342;"	d
SCB_ICSR_PENDSVCLR_Pos	components\toolchain\gcc\core_cm0.h	341;"	d
SCB_ICSR_PENDSVSET_Msk	components\toolchain\gcc\core_cm0.h	339;"	d
SCB_ICSR_PENDSVSET_Pos	components\toolchain\gcc\core_cm0.h	338;"	d
SCB_ICSR_VECTACTIVE_Msk	components\toolchain\gcc\core_cm0.h	360;"	d
SCB_ICSR_VECTACTIVE_Pos	components\toolchain\gcc\core_cm0.h	359;"	d
SCB_ICSR_VECTPENDING_Msk	components\toolchain\gcc\core_cm0.h	357;"	d
SCB_ICSR_VECTPENDING_Pos	components\toolchain\gcc\core_cm0.h	356;"	d
SCB_SCR_SEVONPEND_Msk	components\toolchain\gcc\core_cm0.h	380;"	d
SCB_SCR_SEVONPEND_Pos	components\toolchain\gcc\core_cm0.h	379;"	d
SCB_SCR_SLEEPDEEP_Msk	components\toolchain\gcc\core_cm0.h	383;"	d
SCB_SCR_SLEEPDEEP_Pos	components\toolchain\gcc\core_cm0.h	382;"	d
SCB_SCR_SLEEPONEXIT_Msk	components\toolchain\gcc\core_cm0.h	386;"	d
SCB_SCR_SLEEPONEXIT_Pos	components\toolchain\gcc\core_cm0.h	385;"	d
SCB_SHCSR_SVCALLPENDED_Msk	components\toolchain\gcc\core_cm0.h	397;"	d
SCB_SHCSR_SVCALLPENDED_Pos	components\toolchain\gcc\core_cm0.h	396;"	d
SCB_Type	components\toolchain\gcc\core_cm0.h	/^} SCB_Type;$/;"	t	typeref:struct:__anon854
SCR	components\toolchain\gcc\core_cm0.h	/^  __IO uint32_t SCR;                     \/*!< Offset: 0x010 (R\/W)  System Control Register                               *\/$/;"	m	struct:__anon854
SCS_BASE	components\toolchain\gcc\core_cm0.h	469;"	d
SHCSR	components\toolchain\gcc\core_cm0.h	/^  __IO uint32_t SHCSR;                   \/*!< Offset: 0x024 (R\/W)  System Handler Control and State Register             *\/$/;"	m	struct:__anon854
SHP	components\toolchain\gcc\core_cm0.h	/^  __IO uint32_t SHP[2];                  \/*!< Offset: 0x01C (R\/W)  System Handlers Priority Registers. [0] is RESERVED   *\/$/;"	m	struct:__anon854
SPSEL	components\toolchain\gcc\core_cm0.h	/^    uint32_t SPSEL:1;                    \/*!< bit:      1  Stack to be used                   *\/$/;"	m	struct:__anon851::__anon852
SysTick	components\toolchain\gcc\core_cm0.h	475;"	d
SysTick_BASE	components\toolchain\gcc\core_cm0.h	470;"	d
SysTick_CALIB_NOREF_Msk	components\toolchain\gcc\core_cm0.h	441;"	d
SysTick_CALIB_NOREF_Pos	components\toolchain\gcc\core_cm0.h	440;"	d
SysTick_CALIB_SKEW_Msk	components\toolchain\gcc\core_cm0.h	444;"	d
SysTick_CALIB_SKEW_Pos	components\toolchain\gcc\core_cm0.h	443;"	d
SysTick_CALIB_TENMS_Msk	components\toolchain\gcc\core_cm0.h	447;"	d
SysTick_CALIB_TENMS_Pos	components\toolchain\gcc\core_cm0.h	446;"	d
SysTick_CTRL_CLKSOURCE_Msk	components\toolchain\gcc\core_cm0.h	423;"	d
SysTick_CTRL_CLKSOURCE_Pos	components\toolchain\gcc\core_cm0.h	422;"	d
SysTick_CTRL_COUNTFLAG_Msk	components\toolchain\gcc\core_cm0.h	420;"	d
SysTick_CTRL_COUNTFLAG_Pos	components\toolchain\gcc\core_cm0.h	419;"	d
SysTick_CTRL_ENABLE_Msk	components\toolchain\gcc\core_cm0.h	429;"	d
SysTick_CTRL_ENABLE_Pos	components\toolchain\gcc\core_cm0.h	428;"	d
SysTick_CTRL_TICKINT_Msk	components\toolchain\gcc\core_cm0.h	426;"	d
SysTick_CTRL_TICKINT_Pos	components\toolchain\gcc\core_cm0.h	425;"	d
SysTick_Config	components\toolchain\gcc\core_cm0.h	/^__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)$/;"	f
SysTick_LOAD_RELOAD_Msk	components\toolchain\gcc\core_cm0.h	433;"	d
SysTick_LOAD_RELOAD_Pos	components\toolchain\gcc\core_cm0.h	432;"	d
SysTick_Type	components\toolchain\gcc\core_cm0.h	/^} SysTick_Type;$/;"	t	typeref:struct:__anon855
SysTick_VAL_CURRENT_Msk	components\toolchain\gcc\core_cm0.h	437;"	d
SysTick_VAL_CURRENT_Pos	components\toolchain\gcc\core_cm0.h	436;"	d
T	components\toolchain\gcc\core_cm0.h	/^    uint32_t T:1;                        \/*!< bit:     24  Thumb bit        (read 0)          *\/$/;"	m	struct:__anon849::__anon850
V	components\toolchain\gcc\core_cm0.h	/^    uint32_t V:1;                        \/*!< bit:     28  Overflow condition code flag       *\/$/;"	m	struct:__anon845::__anon846
V	components\toolchain\gcc\core_cm0.h	/^    uint32_t V:1;                        \/*!< bit:     28  Overflow condition code flag       *\/$/;"	m	struct:__anon849::__anon850
VAL	components\toolchain\gcc\core_cm0.h	/^  __IO uint32_t VAL;                     \/*!< Offset: 0x008 (R\/W)  SysTick Current Value Register      *\/$/;"	m	struct:__anon855
Z	components\toolchain\gcc\core_cm0.h	/^    uint32_t Z:1;                        \/*!< bit:     30  Zero condition code flag           *\/$/;"	m	struct:__anon845::__anon846
Z	components\toolchain\gcc\core_cm0.h	/^    uint32_t Z:1;                        \/*!< bit:     30  Zero condition code flag           *\/$/;"	m	struct:__anon849::__anon850
_BIT_SHIFT	components\toolchain\gcc\core_cm0.h	504;"	d
_IP_IDX	components\toolchain\gcc\core_cm0.h	506;"	d
_SHP_IDX	components\toolchain\gcc\core_cm0.h	505;"	d
__ASM	components\toolchain\gcc\core_cm0.h	80;"	d
__ASM	components\toolchain\gcc\core_cm0.h	85;"	d
__ASM	components\toolchain\gcc\core_cm0.h	90;"	d
__ASM	components\toolchain\gcc\core_cm0.h	95;"	d
__CM0_CMSIS_VERSION	components\toolchain\gcc\core_cm0.h	73;"	d
__CM0_CMSIS_VERSION_MAIN	components\toolchain\gcc\core_cm0.h	71;"	d
__CM0_CMSIS_VERSION_SUB	components\toolchain\gcc\core_cm0.h	72;"	d
__CM0_REV	components\toolchain\gcc\core_cm0.h	140;"	d
__CORE_CM0_H_DEPENDANT	components\toolchain\gcc\core_cm0.h	135;"	d
__CORE_CM0_H_GENERIC	components\toolchain\gcc\core_cm0.h	47;"	d
__CORTEX_M	components\toolchain\gcc\core_cm0.h	76;"	d
__FPU_USED	components\toolchain\gcc\core_cm0.h	103;"	d
__I	components\toolchain\gcc\core_cm0.h	164;"	d
__I	components\toolchain\gcc\core_cm0.h	166;"	d
__INLINE	components\toolchain\gcc\core_cm0.h	81;"	d
__INLINE	components\toolchain\gcc\core_cm0.h	86;"	d
__INLINE	components\toolchain\gcc\core_cm0.h	91;"	d
__INLINE	components\toolchain\gcc\core_cm0.h	96;"	d
__IO	components\toolchain\gcc\core_cm0.h	169;"	d
__NVIC_PRIO_BITS	components\toolchain\gcc\core_cm0.h	145;"	d
__O	components\toolchain\gcc\core_cm0.h	168;"	d
__STATIC_INLINE	components\toolchain\gcc\core_cm0.h	82;"	d
__STATIC_INLINE	components\toolchain\gcc\core_cm0.h	87;"	d
__STATIC_INLINE	components\toolchain\gcc\core_cm0.h	92;"	d
__STATIC_INLINE	components\toolchain\gcc\core_cm0.h	97;"	d
__Vendor_SysTickConfig	components\toolchain\gcc\core_cm0.h	150;"	d
_reserved0	components\toolchain\gcc\core_cm0.h	/^    uint32_t _reserved0:15;              \/*!< bit:  9..23  Reserved                           *\/$/;"	m	struct:__anon849::__anon850
_reserved0	components\toolchain\gcc\core_cm0.h	/^    uint32_t _reserved0:23;              \/*!< bit:  9..31  Reserved                           *\/$/;"	m	struct:__anon847::__anon848
_reserved0	components\toolchain\gcc\core_cm0.h	/^    uint32_t _reserved0:27;              \/*!< bit:  0..26  Reserved                           *\/$/;"	m	struct:__anon845::__anon846
_reserved0	components\toolchain\gcc\core_cm0.h	/^    uint32_t _reserved0:29;              \/*!< bit:  3..31  Reserved                           *\/$/;"	m	struct:__anon851::__anon852
_reserved0	components\toolchain\gcc\core_cm0.h	/^    uint32_t _reserved0:7;               \/*!< bit:  9..15  Reserved                           *\/$/;"	m	struct:__anon849::__anon850
_reserved1	components\toolchain\gcc\core_cm0.h	/^    uint32_t _reserved1:4;               \/*!< bit: 20..23  Reserved                           *\/$/;"	m	struct:__anon849::__anon850
b	components\toolchain\gcc\core_cm0.h	/^  } b;                                   \/*!< Structure used for bit  access                  *\/$/;"	m	union:__anon845	typeref:struct:__anon845::__anon846
b	components\toolchain\gcc\core_cm0.h	/^  } b;                                   \/*!< Structure used for bit  access                  *\/$/;"	m	union:__anon847	typeref:struct:__anon847::__anon848
b	components\toolchain\gcc\core_cm0.h	/^  } b;                                   \/*!< Structure used for bit  access                  *\/$/;"	m	union:__anon849	typeref:struct:__anon849::__anon850
b	components\toolchain\gcc\core_cm0.h	/^  } b;                                   \/*!< Structure used for bit  access                  *\/$/;"	m	union:__anon851	typeref:struct:__anon851::__anon852
nPRIV	components\toolchain\gcc\core_cm0.h	/^    uint32_t nPRIV:1;                    \/*!< bit:      0  Execution privilege in Thread mode *\/$/;"	m	struct:__anon851::__anon852
w	components\toolchain\gcc\core_cm0.h	/^  uint32_t w;                            \/*!< Type      used for word access                  *\/$/;"	m	union:__anon845
w	components\toolchain\gcc\core_cm0.h	/^  uint32_t w;                            \/*!< Type      used for word access                  *\/$/;"	m	union:__anon847
w	components\toolchain\gcc\core_cm0.h	/^  uint32_t w;                            \/*!< Type      used for word access                  *\/$/;"	m	union:__anon849
w	components\toolchain\gcc\core_cm0.h	/^  uint32_t w;                            \/*!< Type      used for word access                  *\/$/;"	m	union:__anon851
xPSR_Type	components\toolchain\gcc\core_cm0.h	/^} xPSR_Type;$/;"	t	typeref:union:__anon849
__CORE_CMFUNC_H	components\toolchain\gcc\core_cmFunc.h	39;"	d
__disable_fault_irq	components\toolchain\gcc\core_cmFunc.h	/^__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)$/;"	f
__disable_fault_irq	components\toolchain\gcc\core_cmFunc.h	216;"	d
__disable_irq	components\toolchain\gcc\core_cmFunc.h	/^__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)$/;"	f
__enable_fault_irq	components\toolchain\gcc\core_cmFunc.h	/^__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)$/;"	f
__enable_fault_irq	components\toolchain\gcc\core_cmFunc.h	208;"	d
__enable_irq	components\toolchain\gcc\core_cmFunc.h	/^__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)$/;"	f
__get_APSR	components\toolchain\gcc\core_cmFunc.h	/^__STATIC_INLINE uint32_t __get_APSR(void)$/;"	f
__get_APSR	components\toolchain\gcc\core_cmFunc.h	/^__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)$/;"	f
__get_BASEPRI	components\toolchain\gcc\core_cmFunc.h	/^__STATIC_INLINE uint32_t  __get_BASEPRI(void)$/;"	f
__get_BASEPRI	components\toolchain\gcc\core_cmFunc.h	/^__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)$/;"	f
__get_CONTROL	components\toolchain\gcc\core_cmFunc.h	/^__STATIC_INLINE uint32_t __get_CONTROL(void)$/;"	f
__get_CONTROL	components\toolchain\gcc\core_cmFunc.h	/^__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)$/;"	f
__get_FAULTMASK	components\toolchain\gcc\core_cmFunc.h	/^__STATIC_INLINE uint32_t __get_FAULTMASK(void)$/;"	f
__get_FAULTMASK	components\toolchain\gcc\core_cmFunc.h	/^__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)$/;"	f
__get_FPSCR	components\toolchain\gcc\core_cmFunc.h	/^__STATIC_INLINE uint32_t __get_FPSCR(void)$/;"	f
__get_FPSCR	components\toolchain\gcc\core_cmFunc.h	/^__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)$/;"	f
__get_IPSR	components\toolchain\gcc\core_cmFunc.h	/^__STATIC_INLINE uint32_t __get_IPSR(void)$/;"	f
__get_IPSR	components\toolchain\gcc\core_cmFunc.h	/^__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)$/;"	f
__get_MSP	components\toolchain\gcc\core_cmFunc.h	/^__STATIC_INLINE uint32_t __get_MSP(void)$/;"	f
__get_MSP	components\toolchain\gcc\core_cmFunc.h	/^__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)$/;"	f
__get_PRIMASK	components\toolchain\gcc\core_cmFunc.h	/^__STATIC_INLINE uint32_t __get_PRIMASK(void)$/;"	f
__get_PRIMASK	components\toolchain\gcc\core_cmFunc.h	/^__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)$/;"	f
__get_PSP	components\toolchain\gcc\core_cmFunc.h	/^__STATIC_INLINE uint32_t __get_PSP(void)$/;"	f
__get_PSP	components\toolchain\gcc\core_cmFunc.h	/^__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)$/;"	f
__get_xPSR	components\toolchain\gcc\core_cmFunc.h	/^__STATIC_INLINE uint32_t __get_xPSR(void)$/;"	f
__get_xPSR	components\toolchain\gcc\core_cmFunc.h	/^__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)$/;"	f
__set_BASEPRI	components\toolchain\gcc\core_cmFunc.h	/^__STATIC_INLINE void __set_BASEPRI(uint32_t basePri)$/;"	f
__set_BASEPRI	components\toolchain\gcc\core_cmFunc.h	/^__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)$/;"	f
__set_CONTROL	components\toolchain\gcc\core_cmFunc.h	/^__STATIC_INLINE void __set_CONTROL(uint32_t control)$/;"	f
__set_CONTROL	components\toolchain\gcc\core_cmFunc.h	/^__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)$/;"	f
__set_FAULTMASK	components\toolchain\gcc\core_cmFunc.h	/^__STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)$/;"	f
__set_FAULTMASK	components\toolchain\gcc\core_cmFunc.h	/^__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)$/;"	f
__set_FPSCR	components\toolchain\gcc\core_cmFunc.h	/^__STATIC_INLINE void __set_FPSCR(uint32_t fpscr)$/;"	f
__set_FPSCR	components\toolchain\gcc\core_cmFunc.h	/^__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)$/;"	f
__set_MSP	components\toolchain\gcc\core_cmFunc.h	/^__STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)$/;"	f
__set_MSP	components\toolchain\gcc\core_cmFunc.h	/^__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)$/;"	f
__set_PRIMASK	components\toolchain\gcc\core_cmFunc.h	/^__STATIC_INLINE void __set_PRIMASK(uint32_t priMask)$/;"	f
__set_PRIMASK	components\toolchain\gcc\core_cmFunc.h	/^__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)$/;"	f
__set_PSP	components\toolchain\gcc\core_cmFunc.h	/^__STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)$/;"	f
__set_PSP	components\toolchain\gcc\core_cmFunc.h	/^__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)$/;"	f
__BKPT	components\toolchain\gcc\core_cmInstr.h	171;"	d
__BKPT	components\toolchain\gcc\core_cmInstr.h	475;"	d
__CLREX	components\toolchain\gcc\core_cmInstr.h	/^__attribute__( ( always_inline ) ) __STATIC_INLINE void __CLREX(void)$/;"	f
__CLREX	components\toolchain\gcc\core_cmInstr.h	257;"	d
__CLZ	components\toolchain\gcc\core_cmInstr.h	/^__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)$/;"	f
__CLZ	components\toolchain\gcc\core_cmInstr.h	289;"	d
__CMSIS_GCC_OUT_REG	components\toolchain\gcc\core_cmInstr.h	314;"	d
__CMSIS_GCC_OUT_REG	components\toolchain\gcc\core_cmInstr.h	317;"	d
__CMSIS_GCC_USE_REG	components\toolchain\gcc\core_cmInstr.h	315;"	d
__CMSIS_GCC_USE_REG	components\toolchain\gcc\core_cmInstr.h	318;"	d
__CORE_CMINSTR_H	components\toolchain\gcc\core_cmInstr.h	39;"	d
__DMB	components\toolchain\gcc\core_cmInstr.h	/^__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)$/;"	f
__DMB	components\toolchain\gcc\core_cmInstr.h	108;"	d
__DSB	components\toolchain\gcc\core_cmInstr.h	/^__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)$/;"	f
__DSB	components\toolchain\gcc\core_cmInstr.h	100;"	d
__ISB	components\toolchain\gcc\core_cmInstr.h	/^__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)$/;"	f
__ISB	components\toolchain\gcc\core_cmInstr.h	92;"	d
__LDREXB	components\toolchain\gcc\core_cmInstr.h	/^__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __LDREXB(volatile uint8_t *addr)$/;"	f
__LDREXB	components\toolchain\gcc\core_cmInstr.h	193;"	d
__LDREXH	components\toolchain\gcc\core_cmInstr.h	/^__attribute__( ( always_inline ) ) __STATIC_INLINE uint16_t __LDREXH(volatile uint16_t *addr)$/;"	f
__LDREXH	components\toolchain\gcc\core_cmInstr.h	203;"	d
__LDREXW	components\toolchain\gcc\core_cmInstr.h	/^__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)$/;"	f
__LDREXW	components\toolchain\gcc\core_cmInstr.h	213;"	d
__NOP	components\toolchain\gcc\core_cmInstr.h	/^__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)$/;"	f
__NOP	components\toolchain\gcc\core_cmInstr.h	60;"	d
__RBIT	components\toolchain\gcc\core_cmInstr.h	/^__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)$/;"	f
__RBIT	components\toolchain\gcc\core_cmInstr.h	183;"	d
__REV	components\toolchain\gcc\core_cmInstr.h	/^__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)$/;"	f
__REV	components\toolchain\gcc\core_cmInstr.h	118;"	d
__REV16	components\toolchain\gcc\core_cmInstr.h	/^__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV16(uint32_t value)$/;"	f
__REV16	components\toolchain\gcc\core_cmInstr.h	/^__attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)$/;"	f
__REVSH	components\toolchain\gcc\core_cmInstr.h	/^__attribute__( ( always_inline ) ) __STATIC_INLINE int32_t __REVSH(int32_t value)$/;"	f
__REVSH	components\toolchain\gcc\core_cmInstr.h	/^__attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)$/;"	f
__ROR	components\toolchain\gcc\core_cmInstr.h	/^__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)$/;"	f
__ROR	components\toolchain\gcc\core_cmInstr.h	160;"	d
__SEV	components\toolchain\gcc\core_cmInstr.h	/^__attribute__( ( always_inline ) ) __STATIC_INLINE void __SEV(void)$/;"	f
__SEV	components\toolchain\gcc\core_cmInstr.h	83;"	d
__SSAT	components\toolchain\gcc\core_cmInstr.h	268;"	d
__SSAT	components\toolchain\gcc\core_cmInstr.h	631;"	d
__STREXB	components\toolchain\gcc\core_cmInstr.h	/^__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)$/;"	f
__STREXB	components\toolchain\gcc\core_cmInstr.h	225;"	d
__STREXH	components\toolchain\gcc\core_cmInstr.h	/^__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)$/;"	f
__STREXH	components\toolchain\gcc\core_cmInstr.h	237;"	d
__STREXW	components\toolchain\gcc\core_cmInstr.h	/^__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)$/;"	f
__STREXW	components\toolchain\gcc\core_cmInstr.h	249;"	d
__USAT	components\toolchain\gcc\core_cmInstr.h	279;"	d
__USAT	components\toolchain\gcc\core_cmInstr.h	647;"	d
__WFE	components\toolchain\gcc\core_cmInstr.h	/^__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)$/;"	f
__WFE	components\toolchain\gcc\core_cmInstr.h	76;"	d
__WFI	components\toolchain\gcc\core_cmInstr.h	/^__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)$/;"	f
__WFI	components\toolchain\gcc\core_cmInstr.h	68;"	d
Default_Handler	components\toolchain\gcc\gcc_startup_nrf51.s	/^Default_Handler:$/;"	l
HardFault_Handler	components\toolchain\gcc\gcc_startup_nrf51.s	/^HardFault_Handler:$/;"	l
NMI_Handler	components\toolchain\gcc\gcc_startup_nrf51.s	/^NMI_Handler:$/;"	l
PendSV_Handler	components\toolchain\gcc\gcc_startup_nrf51.s	/^PendSV_Handler:$/;"	l
Reset_Handler	components\toolchain\gcc\gcc_startup_nrf51.s	/^Reset_Handler:$/;"	l
SVC_Handler	components\toolchain\gcc\gcc_startup_nrf51.s	/^SVC_Handler:$/;"	l
SysTick_Handler	components\toolchain\gcc\gcc_startup_nrf51.s	/^SysTick_Handler:$/;"	l
__HeapBase	components\toolchain\gcc\gcc_startup_nrf51.s	/^__HeapBase:$/;"	l
__HeapLimit	components\toolchain\gcc\gcc_startup_nrf51.s	/^__HeapLimit:$/;"	l
__StackLimit	components\toolchain\gcc\gcc_startup_nrf51.s	/^__StackLimit:$/;"	l
__StackTop	components\toolchain\gcc\gcc_startup_nrf51.s	/^__StackTop:$/;"	l
__Vectors	components\toolchain\gcc\gcc_startup_nrf51.s	/^__Vectors:$/;"	l
ADC_IRQHandler	components\toolchain\iar\iar_startup_nrf51.s	/^ADC_IRQHandler$/;"	l
CCM_AAR_IRQHandler	components\toolchain\iar\iar_startup_nrf51.s	/^CCM_AAR_IRQHandler$/;"	l
ECB_IRQHandler	components\toolchain\iar\iar_startup_nrf51.s	/^ECB_IRQHandler$/;"	l
GPIOTE_IRQHandler	components\toolchain\iar\iar_startup_nrf51.s	/^GPIOTE_IRQHandler$/;"	l
HardFault_Handler	components\toolchain\iar\iar_startup_nrf51.s	/^HardFault_Handler$/;"	l
LPCOMP_IRQHandler	components\toolchain\iar\iar_startup_nrf51.s	/^LPCOMP_IRQHandler$/;"	l
NMI_Handler	components\toolchain\iar\iar_startup_nrf51.s	/^NMI_Handler$/;"	l
NRF_POWER_RAMONB_ADDRESS	components\toolchain\iar\iar_startup_nrf51.s	/^NRF_POWER_RAMONB_ADDRESS             EQU   0x40000554  ; NRF_POWER->RAMONB address$/;"	d
NRF_POWER_RAMON_ADDRESS	components\toolchain\iar\iar_startup_nrf51.s	/^NRF_POWER_RAMON_ADDRESS              EQU   0x40000524  ; NRF_POWER->RAMON address$/;"	d
NRF_POWER_RAMONx_RAMxON_ONMODE_Msk	components\toolchain\iar\iar_startup_nrf51.s	/^NRF_POWER_RAMONx_RAMxON_ONMODE_Msk   EQU   0x3         ; All RAM blocks on in onmode bit mask$/;"	d
POWER_CLOCK_IRQHandler	components\toolchain\iar\iar_startup_nrf51.s	/^POWER_CLOCK_IRQHandler$/;"	l
PendSV_Handler	components\toolchain\iar\iar_startup_nrf51.s	/^PendSV_Handler$/;"	l
QDEC_IRQHandler	components\toolchain\iar\iar_startup_nrf51.s	/^QDEC_IRQHandler$/;"	l
RADIO_IRQHandler	components\toolchain\iar\iar_startup_nrf51.s	/^RADIO_IRQHandler$/;"	l
RNG_IRQHandler	components\toolchain\iar\iar_startup_nrf51.s	/^RNG_IRQHandler$/;"	l
RTC0_IRQHandler	components\toolchain\iar\iar_startup_nrf51.s	/^RTC0_IRQHandler$/;"	l
RTC1_IRQHandler	components\toolchain\iar\iar_startup_nrf51.s	/^RTC1_IRQHandler$/;"	l
Reset_Handler	components\toolchain\iar\iar_startup_nrf51.s	/^Reset_Handler$/;"	l
SPI0_TWI0_IRQHandler	components\toolchain\iar\iar_startup_nrf51.s	/^SPI0_TWI0_IRQHandler$/;"	l
SPI1_TWI1_IRQHandler	components\toolchain\iar\iar_startup_nrf51.s	/^SPI1_TWI1_IRQHandler$/;"	l
SVC_Handler	components\toolchain\iar\iar_startup_nrf51.s	/^SVC_Handler$/;"	l
SWI0_IRQHandler	components\toolchain\iar\iar_startup_nrf51.s	/^SWI0_IRQHandler$/;"	l
SWI1_IRQHandler	components\toolchain\iar\iar_startup_nrf51.s	/^SWI1_IRQHandler$/;"	l
SWI2_IRQHandler	components\toolchain\iar\iar_startup_nrf51.s	/^SWI2_IRQHandler$/;"	l
SWI3_IRQHandler	components\toolchain\iar\iar_startup_nrf51.s	/^SWI3_IRQHandler$/;"	l
SWI4_IRQHandler	components\toolchain\iar\iar_startup_nrf51.s	/^SWI4_IRQHandler$/;"	l
SWI5_IRQHandler	components\toolchain\iar\iar_startup_nrf51.s	/^SWI5_IRQHandler$/;"	l
SysTick_Handler	components\toolchain\iar\iar_startup_nrf51.s	/^SysTick_Handler$/;"	l
TEMP_IRQHandler	components\toolchain\iar\iar_startup_nrf51.s	/^TEMP_IRQHandler$/;"	l
TIMER0_IRQHandler	components\toolchain\iar\iar_startup_nrf51.s	/^TIMER0_IRQHandler$/;"	l
TIMER1_IRQHandler	components\toolchain\iar\iar_startup_nrf51.s	/^TIMER1_IRQHandler$/;"	l
TIMER2_IRQHandler	components\toolchain\iar\iar_startup_nrf51.s	/^TIMER2_IRQHandler$/;"	l
UART0_IRQHandler	components\toolchain\iar\iar_startup_nrf51.s	/^UART0_IRQHandler$/;"	l
WDT_IRQHandler	components\toolchain\iar\iar_startup_nrf51.s	/^WDT_IRQHandler$/;"	l
__Vectors	components\toolchain\iar\iar_startup_nrf51.s	/^__Vectors                           EQU   __vector_table$/;"	d
__Vectors_End	components\toolchain\iar\iar_startup_nrf51.s	/^__Vectors_End$/;"	l
__Vectors_Size	components\toolchain\iar\iar_startup_nrf51.s	/^__Vectors_Size                      EQU   __Vectors_End - __Vectors$/;"	d
__vector_table	components\toolchain\iar\iar_startup_nrf51.s	/^__vector_table$/;"	l
SystemCoreClock	components\toolchain\system_nrf51.c	/^    __root uint32_t SystemCoreClock = __SYSTEM_CLOCK;$/;"	v
SystemCoreClock	components\toolchain\system_nrf51.c	/^    uint32_t SystemCoreClock __attribute__((used)) = __SYSTEM_CLOCK;  $/;"	v
SystemCoreClock	components\toolchain\system_nrf51.c	/^    uint32_t SystemCoreClock __attribute__((used)) = __SYSTEM_CLOCK;$/;"	v
SystemCoreClockUpdate	components\toolchain\system_nrf51.c	/^void SystemCoreClockUpdate(void)$/;"	f
SystemInit	components\toolchain\system_nrf51.c	/^void SystemInit(void)$/;"	f
__SYSTEM_CLOCK	components\toolchain\system_nrf51.c	42;"	d	file:
is_disabled_in_debug_needed	components\toolchain\system_nrf51.c	/^static bool is_disabled_in_debug_needed(void) $/;"	f	file:
is_manual_peripheral_setup_needed	components\toolchain\system_nrf51.c	/^static bool is_manual_peripheral_setup_needed(void) $/;"	f	file:
SYSTEM_NRF51_H	components\toolchain\system_nrf51.h	32;"	d
SystemCoreClock	components\toolchain\system_nrf51422.c	/^    __root uint32_t SystemCoreClock = __SYSTEM_CLOCK;$/;"	v
SystemCoreClock	components\toolchain\system_nrf51422.c	/^    uint32_t SystemCoreClock __attribute__((used)) = __SYSTEM_CLOCK;  $/;"	v
SystemCoreClock	components\toolchain\system_nrf51422.c	/^    uint32_t SystemCoreClock __attribute__((used)) = __SYSTEM_CLOCK;$/;"	v
SystemCoreClockUpdate	components\toolchain\system_nrf51422.c	/^void SystemCoreClockUpdate(void)$/;"	f
SystemInit	components\toolchain\system_nrf51422.c	/^void SystemInit(void)$/;"	f
__SYSTEM_CLOCK	components\toolchain\system_nrf51422.c	42;"	d	file:
is_disabled_in_debug_needed	components\toolchain\system_nrf51422.c	/^static bool is_disabled_in_debug_needed(void) $/;"	f	file:
is_manual_peripheral_setup_needed	components\toolchain\system_nrf51422.c	/^static bool is_manual_peripheral_setup_needed(void) $/;"	f	file:
DEVICE_MANAGER_APP_CONTEXT_SIZE	config\device_manager_cnfg.h	92;"	d
DEVICE_MANAGER_CNFG_H__	config\device_manager_cnfg.h	27;"	d
DEVICE_MANAGER_MAX_APPLICATIONS	config\device_manager_cnfg.h	42;"	d
DEVICE_MANAGER_MAX_BONDS	config\device_manager_cnfg.h	67;"	d
DEVICE_MANAGER_MAX_CONNECTIONS	config\device_manager_cnfg.h	52;"	d
DM_GATT_CCCD_COUNT	config\device_manager_cnfg.h	78;"	d
PSTORAGE_CMD_QUEUE_SIZE	config\pstorage_platform.h	53;"	d
PSTORAGE_DATA_END_ADDR	config\pstorage_platform.h	49;"	d
PSTORAGE_DATA_START_ADDR	config\pstorage_platform.h	47;"	d
PSTORAGE_FLASH_EMPTY_MASK	config\pstorage_platform.h	31;"	d
PSTORAGE_FLASH_PAGE_END	config\pstorage_platform.h	41;"	d
PSTORAGE_FLASH_PAGE_SIZE	config\pstorage_platform.h	30;"	d
PSTORAGE_MAX_APPLICATIONS	config\pstorage_platform.h	44;"	d
PSTORAGE_MAX_BLOCK_SIZE	config\pstorage_platform.h	52;"	d
PSTORAGE_MIN_BLOCK_SIZE	config\pstorage_platform.h	45;"	d
PSTORAGE_PL_H__	config\pstorage_platform.h	20;"	d
PSTORAGE_SWAP_ADDR	config\pstorage_platform.h	50;"	d
block_id	config\pstorage_platform.h	/^    pstorage_block_t    block_id;       \/**< Block ID.*\/$/;"	m	struct:__anon856
module_id	config\pstorage_platform.h	/^    uint32_t            module_id;      \/**< Module ID.*\/$/;"	m	struct:__anon856
pstorage_block_t	config\pstorage_platform.h	/^typedef uint32_t pstorage_block_t;$/;"	t
pstorage_flash_page_end	config\pstorage_platform.h	/^static __INLINE uint32_t pstorage_flash_page_end()$/;"	f
pstorage_flash_page_size	config\pstorage_platform.h	/^static __INLINE uint16_t pstorage_flash_page_size()$/;"	f
pstorage_handle_t	config\pstorage_platform.h	/^} pstorage_handle_t;$/;"	t	typeref:struct:__anon856
pstorage_size_t	config\pstorage_platform.h	/^typedef uint16_t pstorage_size_t;      \/** Size of length and offset fields. *\/$/;"	t
PIPE_NUMBER	src\main.c	42;"	d	file:
TX_PAYLOAD_LENGTH	src\main.c	45;"	d	file:
input_get	src\main.c	/^static uint8_t input_get(void)$/;"	f	file:
main	src\main.c	/^int main()$/;"	f
my_rx_payload	src\main.c	/^static uint8_t my_rx_payload[NRF_ESB_CONST_MAX_PAYLOAD_LENGTH]; \/\/\/< Placeholder for received ACK payloads from PRX.$/;"	v	file:
my_tx_payload	src\main.c	/^static uint8_t my_tx_payload[TX_PAYLOAD_LENGTH];                \/\/\/< Payload to send to PRX.$/;"	v	file:
nrf_esb_disabled	src\main.c	/^void nrf_esb_disabled(void)$/;"	f
nrf_esb_rx_data_ready	src\main.c	/^void nrf_esb_rx_data_ready(uint32_t rx_pipe, int32_t rssi){$/;"	f
nrf_esb_tx_failed	src\main.c	/^void nrf_esb_tx_failed(uint32_t tx_pipe){$/;"	f
nrf_esb_tx_success	src\main.c	/^void nrf_esb_tx_success(uint32_t tx_pipe, int32_t rssi){$/;"	f
output_present	src\main.c	/^static void output_present(uint8_t val)$/;"	f	file:
ui_init	src\main.c	/^static void ui_init(void)$/;"	f	file:
BUFFER_SIZE_DOWN	src\rtt\RTT\SEGGER_RTT.c	82;"	d	file:
BUFFER_SIZE_UP	src\rtt\RTT\SEGGER_RTT.c	78;"	d	file:
Flags	src\rtt\RTT\SEGGER_RTT.c	/^            unsigned Flags;         \/\/ Contains configuration flags$/;"	m	struct:__anon857	file:
INIT	src\rtt\RTT\SEGGER_RTT.c	194;"	d	file:
MAX	src\rtt\RTT\SEGGER_RTT.c	118;"	d	file:
MEMCPY	src\rtt\RTT\SEGGER_RTT.c	110;"	d	file:
MIN	src\rtt\RTT\SEGGER_RTT.c	114;"	d	file:
MaxNumDownBuffers	src\rtt\RTT\SEGGER_RTT.c	/^  int         MaxNumDownBuffers;                        \/\/ Initialized to SEGGER_RTT_MAX_NUM_DOWN_BUFFERS (type. 2)$/;"	m	struct:__anon858	file:
MaxNumUpBuffers	src\rtt\RTT\SEGGER_RTT.c	/^  int         MaxNumUpBuffers;                          \/\/ Initialized to SEGGER_RTT_MAX_NUM_UP_BUFFERS (type. 2)$/;"	m	struct:__anon858	file:
NULL	src\rtt\RTT\SEGGER_RTT.c	124;"	d	file:
RING_BUFFER	src\rtt\RTT\SEGGER_RTT.c	/^} RING_BUFFER;$/;"	t	typeref:struct:__anon857	file:
RdOff	src\rtt\RTT\SEGGER_RTT.c	/^  volatile  unsigned RdOff;         \/\/ Position of next item to be read by target (down-buffer) or host (up-buffer). Must be volatile since it may be modified by host (up-buffer)$/;"	m	struct:__anon857	file:
SEGGER_RTT_CB	src\rtt\RTT\SEGGER_RTT.c	/^} SEGGER_RTT_CB;$/;"	t	typeref:struct:__anon858	file:
SEGGER_RTT_ConfigDownBuffer	src\rtt\RTT\SEGGER_RTT.c	/^int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {$/;"	f
SEGGER_RTT_ConfigUpBuffer	src\rtt\RTT\SEGGER_RTT.c	/^int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {$/;"	f
SEGGER_RTT_GetKey	src\rtt\RTT\SEGGER_RTT.c	/^int SEGGER_RTT_GetKey(void) {$/;"	f
SEGGER_RTT_HasData	src\rtt\RTT\SEGGER_RTT.c	/^unsigned SEGGER_RTT_HasData(unsigned BufferIndex) {$/;"	f
SEGGER_RTT_HasKey	src\rtt\RTT\SEGGER_RTT.c	/^int SEGGER_RTT_HasKey(void) {$/;"	f
SEGGER_RTT_Init	src\rtt\RTT\SEGGER_RTT.c	/^void SEGGER_RTT_Init (void) {$/;"	f
SEGGER_RTT_LOCK	src\rtt\RTT\SEGGER_RTT.c	98;"	d	file:
SEGGER_RTT_MAX_NUM_DOWN_BUFFERS	src\rtt\RTT\SEGGER_RTT.c	90;"	d	file:
SEGGER_RTT_MAX_NUM_UP_BUFFERS	src\rtt\RTT\SEGGER_RTT.c	86;"	d	file:
SEGGER_RTT_MODE_DEFAULT	src\rtt\RTT\SEGGER_RTT.c	94;"	d	file:
SEGGER_RTT_Read	src\rtt\RTT\SEGGER_RTT.c	/^unsigned SEGGER_RTT_Read(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {$/;"	f
SEGGER_RTT_ReadNoLock	src\rtt\RTT\SEGGER_RTT.c	/^unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {$/;"	f
SEGGER_RTT_SetNameDownBuffer	src\rtt\RTT\SEGGER_RTT.c	/^int SEGGER_RTT_SetNameDownBuffer(unsigned BufferIndex, const char* sName) {$/;"	f
SEGGER_RTT_SetNameUpBuffer	src\rtt\RTT\SEGGER_RTT.c	/^int SEGGER_RTT_SetNameUpBuffer(unsigned BufferIndex, const char* sName) {$/;"	f
SEGGER_RTT_SetTerminal	src\rtt\RTT\SEGGER_RTT.c	/^void SEGGER_RTT_SetTerminal (char TerminalId) {$/;"	f
SEGGER_RTT_TerminalOut	src\rtt\RTT\SEGGER_RTT.c	/^int SEGGER_RTT_TerminalOut (char TerminalId, const char* s) {$/;"	f
SEGGER_RTT_UNLOCK	src\rtt\RTT\SEGGER_RTT.c	102;"	d	file:
SEGGER_RTT_WaitKey	src\rtt\RTT\SEGGER_RTT.c	/^int SEGGER_RTT_WaitKey(void) {$/;"	f
SEGGER_RTT_Write	src\rtt\RTT\SEGGER_RTT.c	/^unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {$/;"	f
SEGGER_RTT_WriteNoLock	src\rtt\RTT\SEGGER_RTT.c	/^unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {$/;"	f
SEGGER_RTT_WriteSkipNoLock	src\rtt\RTT\SEGGER_RTT.c	/^unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {$/;"	f
SEGGER_RTT_WriteString	src\rtt\RTT\SEGGER_RTT.c	/^unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {$/;"	f
STRLEN	src\rtt\RTT\SEGGER_RTT.c	106;"	d	file:
SizeOfBuffer	src\rtt\RTT\SEGGER_RTT.c	/^            unsigned SizeOfBuffer;  \/\/ Buffer size in bytes. Note that one byte is lost, as this implementation does not fill up the buffer in order to avoid the problem of being unable to distinguish between full and empty.$/;"	m	struct:__anon857	file:
WrOff	src\rtt\RTT\SEGGER_RTT.c	/^  volatile  unsigned WrOff;         \/\/ Position of next item to be written by either host (down-buffer) or target (up-buffer). Must be volatile since it may be modified by host (down-buffer)$/;"	m	struct:__anon857	file:
_ActiveTerminal	src\rtt\RTT\SEGGER_RTT.c	/^static char _ActiveTerminal;$/;"	v	file:
_DoInit	src\rtt\RTT\SEGGER_RTT.c	/^static void _DoInit(void) {$/;"	f	file:
_GetAvailWriteSpace	src\rtt\RTT\SEGGER_RTT.c	/^static unsigned _GetAvailWriteSpace(RING_BUFFER *pRing) {$/;"	f	file:
_PostTerminalSwitch	src\rtt\RTT\SEGGER_RTT.c	/^static void _PostTerminalSwitch(RING_BUFFER *pRing, char TerminalId) {$/;"	f	file:
_SEGGER_RTT	src\rtt\RTT\SEGGER_RTT.c	/^SEGGER_RTT_CB _SEGGER_RTT;$/;"	v
_WriteBlocking	src\rtt\RTT\SEGGER_RTT.c	/^static unsigned _WriteBlocking(RING_BUFFER *pRing, const char* pBuffer, unsigned NumBytes) {$/;"	f	file:
_WriteNoCheck	src\rtt\RTT\SEGGER_RTT.c	/^static void _WriteNoCheck(RING_BUFFER *pRing, const char* pData, unsigned NumBytes) {$/;"	f	file:
_acDownBuffer	src\rtt\RTT\SEGGER_RTT.c	/^static char _acDownBuffer[BUFFER_SIZE_DOWN];$/;"	v	file:
_acUpBuffer	src\rtt\RTT\SEGGER_RTT.c	/^static char _acUpBuffer  [BUFFER_SIZE_UP];$/;"	v	file:
aDown	src\rtt\RTT\SEGGER_RTT.c	/^  RING_BUFFER aDown[SEGGER_RTT_MAX_NUM_DOWN_BUFFERS];   \/\/ Down buffers, transferring information down from host via debug probe to target$/;"	m	struct:__anon858	file:
aUp	src\rtt\RTT\SEGGER_RTT.c	/^  RING_BUFFER aUp[SEGGER_RTT_MAX_NUM_UP_BUFFERS];       \/\/ Up buffers, transferring information up from target via debug probe to host$/;"	m	struct:__anon858	file:
acID	src\rtt\RTT\SEGGER_RTT.c	/^  char        acID[16];                                 \/\/ Initialized to "SEGGER RTT"$/;"	m	struct:__anon858	file:
pBuffer	src\rtt\RTT\SEGGER_RTT.c	/^            char*    pBuffer;       \/\/ Pointer to start of buffer$/;"	m	struct:__anon857	file:
sName	src\rtt\RTT\SEGGER_RTT.c	/^  const     char*    sName;         \/\/ Optional name. Standard names so far are: "Terminal", "SysView", "J-Scope_t4i4"$/;"	m	struct:__anon857	file:
RTT_CTRL_BG_BLACK	src\rtt\RTT\SEGGER_RTT.h	147;"	d
RTT_CTRL_BG_BLUE	src\rtt\RTT\SEGGER_RTT.h	151;"	d
RTT_CTRL_BG_BRIGHT_BLACK	src\rtt\RTT\SEGGER_RTT.h	156;"	d
RTT_CTRL_BG_BRIGHT_BLUE	src\rtt\RTT\SEGGER_RTT.h	160;"	d
RTT_CTRL_BG_BRIGHT_CYAN	src\rtt\RTT\SEGGER_RTT.h	162;"	d
RTT_CTRL_BG_BRIGHT_GREEN	src\rtt\RTT\SEGGER_RTT.h	158;"	d
RTT_CTRL_BG_BRIGHT_MAGENTA	src\rtt\RTT\SEGGER_RTT.h	161;"	d
RTT_CTRL_BG_BRIGHT_RED	src\rtt\RTT\SEGGER_RTT.h	157;"	d
RTT_CTRL_BG_BRIGHT_WHITE	src\rtt\RTT\SEGGER_RTT.h	163;"	d
RTT_CTRL_BG_BRIGHT_YELLOW	src\rtt\RTT\SEGGER_RTT.h	159;"	d
RTT_CTRL_BG_CYAN	src\rtt\RTT\SEGGER_RTT.h	153;"	d
RTT_CTRL_BG_GREEN	src\rtt\RTT\SEGGER_RTT.h	149;"	d
RTT_CTRL_BG_MAGENTA	src\rtt\RTT\SEGGER_RTT.h	152;"	d
RTT_CTRL_BG_RED	src\rtt\RTT\SEGGER_RTT.h	148;"	d
RTT_CTRL_BG_WHITE	src\rtt\RTT\SEGGER_RTT.h	154;"	d
RTT_CTRL_BG_YELLOW	src\rtt\RTT\SEGGER_RTT.h	150;"	d
RTT_CTRL_CLEAR	src\rtt\RTT\SEGGER_RTT.h	127;"	d
RTT_CTRL_RESET	src\rtt\RTT\SEGGER_RTT.h	126;"	d
RTT_CTRL_TEXT_BLACK	src\rtt\RTT\SEGGER_RTT.h	129;"	d
RTT_CTRL_TEXT_BLUE	src\rtt\RTT\SEGGER_RTT.h	133;"	d
RTT_CTRL_TEXT_BRIGHT_BLACK	src\rtt\RTT\SEGGER_RTT.h	138;"	d
RTT_CTRL_TEXT_BRIGHT_BLUE	src\rtt\RTT\SEGGER_RTT.h	142;"	d
RTT_CTRL_TEXT_BRIGHT_CYAN	src\rtt\RTT\SEGGER_RTT.h	144;"	d
RTT_CTRL_TEXT_BRIGHT_GREEN	src\rtt\RTT\SEGGER_RTT.h	140;"	d
RTT_CTRL_TEXT_BRIGHT_MAGENTA	src\rtt\RTT\SEGGER_RTT.h	143;"	d
RTT_CTRL_TEXT_BRIGHT_RED	src\rtt\RTT\SEGGER_RTT.h	139;"	d
RTT_CTRL_TEXT_BRIGHT_WHITE	src\rtt\RTT\SEGGER_RTT.h	145;"	d
RTT_CTRL_TEXT_BRIGHT_YELLOW	src\rtt\RTT\SEGGER_RTT.h	141;"	d
RTT_CTRL_TEXT_CYAN	src\rtt\RTT\SEGGER_RTT.h	135;"	d
RTT_CTRL_TEXT_GREEN	src\rtt\RTT\SEGGER_RTT.h	131;"	d
RTT_CTRL_TEXT_MAGENTA	src\rtt\RTT\SEGGER_RTT.h	134;"	d
RTT_CTRL_TEXT_RED	src\rtt\RTT\SEGGER_RTT.h	130;"	d
RTT_CTRL_TEXT_WHITE	src\rtt\RTT\SEGGER_RTT.h	136;"	d
RTT_CTRL_TEXT_YELLOW	src\rtt\RTT\SEGGER_RTT.h	132;"	d
SEGGER_RTT_H	src\rtt\RTT\SEGGER_RTT.h	56;"	d
SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL	src\rtt\RTT\SEGGER_RTT.h	119;"	d
SEGGER_RTT_MODE_MASK	src\rtt\RTT\SEGGER_RTT.h	120;"	d
SEGGER_RTT_MODE_NO_BLOCK_SKIP	src\rtt\RTT\SEGGER_RTT.h	117;"	d
SEGGER_RTT_MODE_NO_BLOCK_TRIM	src\rtt\RTT\SEGGER_RTT.h	118;"	d
SEGGER_RTT_VERSION	src\rtt\RTT\SEGGER_RTT.h	64;"	d
BUFFER_SIZE_DOWN	src\rtt\RTT\SEGGER_RTT_Conf.h	73;"	d
BUFFER_SIZE_UP	src\rtt\RTT\SEGGER_RTT_Conf.h	72;"	d
SEGGER_RTT_CONF_H	src\rtt\RTT\SEGGER_RTT_Conf.h	56;"	d
SEGGER_RTT_LOCK	src\rtt\RTT\SEGGER_RTT_Conf.h	110;"	d
SEGGER_RTT_LOCK	src\rtt\RTT\SEGGER_RTT_Conf.h	127;"	d
SEGGER_RTT_LOCK	src\rtt\RTT\SEGGER_RTT_Conf.h	138;"	d
SEGGER_RTT_LOCK	src\rtt\RTT\SEGGER_RTT_Conf.h	147;"	d
SEGGER_RTT_LOCK	src\rtt\RTT\SEGGER_RTT_Conf.h	163;"	d
SEGGER_RTT_LOCK	src\rtt\RTT\SEGGER_RTT_Conf.h	91;"	d
SEGGER_RTT_MAX_NUM_DOWN_BUFFERS	src\rtt\RTT\SEGGER_RTT_Conf.h	70;"	d
SEGGER_RTT_MAX_NUM_UP_BUFFERS	src\rtt\RTT\SEGGER_RTT_Conf.h	69;"	d
SEGGER_RTT_MODE_DEFAULT	src\rtt\RTT\SEGGER_RTT_Conf.h	77;"	d
SEGGER_RTT_PRINTF_BUFFER_SIZE	src\rtt\RTT\SEGGER_RTT_Conf.h	75;"	d
SEGGER_RTT_UNLOCK	src\rtt\RTT\SEGGER_RTT_Conf.h	101;"	d
SEGGER_RTT_UNLOCK	src\rtt\RTT\SEGGER_RTT_Conf.h	119;"	d
SEGGER_RTT_UNLOCK	src\rtt\RTT\SEGGER_RTT_Conf.h	128;"	d
SEGGER_RTT_UNLOCK	src\rtt\RTT\SEGGER_RTT_Conf.h	143;"	d
SEGGER_RTT_UNLOCK	src\rtt\RTT\SEGGER_RTT_Conf.h	152;"	d
SEGGER_RTT_UNLOCK	src\rtt\RTT\SEGGER_RTT_Conf.h	167;"	d
BufferSize	src\rtt\RTT\SEGGER_RTT_printf.c	/^  unsigned  BufferSize;$/;"	m	struct:__anon859	file:
Cnt	src\rtt\RTT\SEGGER_RTT_printf.c	/^  unsigned  Cnt;$/;"	m	struct:__anon859	file:
FORMAT_FLAG_ALTERNATE	src\rtt\RTT\SEGGER_RTT_printf.c	73;"	d	file:
FORMAT_FLAG_LEFT_JUSTIFY	src\rtt\RTT\SEGGER_RTT_printf.c	70;"	d	file:
FORMAT_FLAG_PAD_ZERO	src\rtt\RTT\SEGGER_RTT_printf.c	71;"	d	file:
FORMAT_FLAG_PRINT_SIGN	src\rtt\RTT\SEGGER_RTT_printf.c	72;"	d	file:
RTTBufferIndex	src\rtt\RTT\SEGGER_RTT_printf.c	/^  unsigned RTTBufferIndex;$/;"	m	struct:__anon859	file:
ReturnValue	src\rtt\RTT\SEGGER_RTT_printf.c	/^  int   ReturnValue;$/;"	m	struct:__anon859	file:
SEGGER_RTT_PRINTF_BUFFER_SIZE	src\rtt\RTT\SEGGER_RTT_printf.c	63;"	d	file:
SEGGER_RTT_PRINTF_DESC	src\rtt\RTT\SEGGER_RTT_printf.c	/^} SEGGER_RTT_PRINTF_DESC;$/;"	t	typeref:struct:__anon859	file:
SEGGER_RTT_printf	src\rtt\RTT\SEGGER_RTT_printf.c	/^int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {$/;"	f
SEGGER_RTT_vprintf	src\rtt\RTT\SEGGER_RTT_printf.c	/^int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {$/;"	f
_PrintInt	src\rtt\RTT\SEGGER_RTT_printf.c	/^static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {$/;"	f	file:
_PrintUnsigned	src\rtt\RTT\SEGGER_RTT_printf.c	/^static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {$/;"	f	file:
_StoreChar	src\rtt\RTT\SEGGER_RTT_printf.c	/^static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {$/;"	f	file:
pBuffer	src\rtt\RTT\SEGGER_RTT_printf.c	/^  char*     pBuffer;$/;"	m	struct:__anon859	file:
_write	src\rtt\Syscalls\SEGGER_RTT_Syscalls_GCC.c	/^int _write(int file, char *ptr, int len) {$/;"	f
_write_r	src\rtt\Syscalls\SEGGER_RTT_Syscalls_GCC.c	/^int _write_r(struct _reent *r, int file, char *ptr, int len) {$/;"	f
__write	src\rtt\Syscalls\SEGGER_RTT_Syscalls_IAR.c	/^size_t __write(int handle, const unsigned char * buffer, size_t size) {$/;"	f
__write_buffered	src\rtt\Syscalls\SEGGER_RTT_Syscalls_IAR.c	/^size_t __write_buffered(int handle, const unsigned char * buffer, size_t size) {$/;"	f
STDERR	src\rtt\Syscalls\SEGGER_RTT_Syscalls_KEIL.c	84;"	d	file:
STDIN	src\rtt\Syscalls\SEGGER_RTT_Syscalls_KEIL.c	82;"	d	file:
STDOUT	src\rtt\Syscalls\SEGGER_RTT_Syscalls_KEIL.c	83;"	d	file:
__stderr_name	src\rtt\Syscalls\SEGGER_RTT_Syscalls_KEIL.c	/^const char __stderr_name[] = "STDERR";$/;"	v
__stdin_name	src\rtt\Syscalls\SEGGER_RTT_Syscalls_KEIL.c	/^const char __stdin_name[]  = "STDIN";$/;"	v
__stdout_name	src\rtt\Syscalls\SEGGER_RTT_Syscalls_KEIL.c	/^const char __stdout_name[] = "STDOUT";$/;"	v
_sys_close	src\rtt\Syscalls\SEGGER_RTT_Syscalls_KEIL.c	/^int _sys_close(FILEHANDLE hFile) {$/;"	f
_sys_command_string	src\rtt\Syscalls\SEGGER_RTT_Syscalls_KEIL.c	/^char * _sys_command_string(char * cmd, int len) {$/;"	f
_sys_ensure	src\rtt\Syscalls\SEGGER_RTT_Syscalls_KEIL.c	/^int _sys_ensure(FILEHANDLE hFile) {$/;"	f
_sys_exit	src\rtt\Syscalls\SEGGER_RTT_Syscalls_KEIL.c	/^void _sys_exit(int ReturnCode) {$/;"	f
_sys_flen	src\rtt\Syscalls\SEGGER_RTT_Syscalls_KEIL.c	/^long _sys_flen(FILEHANDLE hFile) {$/;"	f
_sys_istty	src\rtt\Syscalls\SEGGER_RTT_Syscalls_KEIL.c	/^int _sys_istty(FILEHANDLE hFile) {$/;"	f
_sys_open	src\rtt\Syscalls\SEGGER_RTT_Syscalls_KEIL.c	/^FILEHANDLE _sys_open(const char * sName, int OpenMode) {$/;"	f
_sys_read	src\rtt\Syscalls\SEGGER_RTT_Syscalls_KEIL.c	/^int _sys_read(FILEHANDLE hFile, unsigned char * pBuffer, unsigned NumBytes, int Mode) {$/;"	f
_sys_seek	src\rtt\Syscalls\SEGGER_RTT_Syscalls_KEIL.c	/^int _sys_seek(FILEHANDLE hFile, long Pos) {$/;"	f
_sys_tmpnam	src\rtt\Syscalls\SEGGER_RTT_Syscalls_KEIL.c	/^int _sys_tmpnam(char * pBuffer, int FileNum, unsigned MaxLen) {$/;"	f
_sys_write	src\rtt\Syscalls\SEGGER_RTT_Syscalls_KEIL.c	/^int _sys_write(FILEHANDLE hFile, const unsigned char * pBuffer, unsigned NumBytes, int Mode) {$/;"	f
_ttywrch	src\rtt\Syscalls\SEGGER_RTT_Syscalls_KEIL.c	/^void _ttywrch(int c) {$/;"	f
__getchar	src\rtt\Syscalls\SEGGER_RTT_Syscalls_SES.c	/^int __getchar() {$/;"	f
__putchar	src\rtt\Syscalls\SEGGER_RTT_Syscalls_SES.c	/^int __putchar(int x, __printf_tag_ptr ctx) {$/;"	f
printf	src\rtt\Syscalls\SEGGER_RTT_Syscalls_SES.c	/^int printf(const char *fmt,...) {$/;"	f
puts	src\rtt\Syscalls\SEGGER_RTT_Syscalls_SES.c	/^int puts(const char *s) {$/;"	f
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.7	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
